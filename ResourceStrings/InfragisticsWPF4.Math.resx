<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LE_ArgumentException_1" xml:space="preserve">
    <value>The dimensions do not specify a Vector</value>
  </data>
  <data name="LE_ArgumentException_10" xml:space="preserve">
    <value>Complex number strings can have at most one arithmetical operator.</value>
  </data>
  <data name="LE_ArgumentException_11" xml:space="preserve">
    <value>Array must be of type Complex.</value>
  </data>
  <data name="LE_ArgumentException_12" xml:space="preserve">
    <value />
  </data>
  <data name="LE_ArgumentException_13" xml:space="preserve">
    <value>The ComplexMatrix cannot be converted to a ComplexVector.</value>
  </data>
  <data name="LE_ArgumentException_14" xml:space="preserve">
    <value>Binary pointwise arithmetic operations must be performed on Matrices with the same dimensions.</value>
  </data>
  <data name="LE_ArgumentException_15" xml:space="preserve">
    <value>Dimension numbers must be greater than 0.</value>
  </data>
  <data name="LE_ArgumentException_16" xml:space="preserve">
    <value>CumProduct can only be computed on non-empty ComplexMatrices</value>
  </data>
  <data name="LE_ArgumentException_17" xml:space="preserve">
    <value>The subscript has an invalid number of indices.</value>
  </data>
  <data name="LE_ArgumentException_18" xml:space="preserve">
    <value />
  </data>
  <data name="LE_ArgumentException_19" xml:space="preserve">
    <value>The subscript contains non-integer indices.</value>
  </data>
  <data name="LE_ArgumentException_2" xml:space="preserve">
    <value>The length of the elements is not consistent with the specified dimensions</value>
  </data>
  <data name="LE_ArgumentException_20" xml:space="preserve">
    <value>A subscript Vector is empty</value>
  </data>
  <data name="LE_ArgumentException_21" xml:space="preserve">
    <value>The subscript does not align with the set value.</value>
  </data>
  <data name="LE_ArgumentException_22" xml:space="preserve">
    <value>Binary pointwise arithmetic operations must be performed on BooleanVectors with the same dimensions.</value>
  </data>
  <data name="LE_ArgumentException_23" xml:space="preserve">
    <value>Indices must be non-empty.</value>
  </data>
  <data name="LE_ArgumentException_24" xml:space="preserve">
    <value>The lowerBound must be smaller than upperBound.</value>
  </data>
  <data name="LE_ArgumentException_25" xml:space="preserve">
    <value>The radius must be greater than or equal to 0.</value>
  </data>
  <data name="LE_ArgumentException_26" xml:space="preserve">
    <value>Vector orientations do not align.</value>
  </data>
  <data name="LE_ArgumentException_27" xml:space="preserve">
    <value>Matrices do not align.</value>
  </data>
  <data name="LE_ArgumentException_28" xml:space="preserve">
    <value>Convolve requires Vectors of the same orientation</value>
  </data>
  <data name="LE_ArgumentException_29" xml:space="preserve">
    <value>Difference can only be performed on vectors with length greater than 1.</value>
  </data>
  <data name="LE_ArgumentException_3" xml:space="preserve">
    <value>Binary pointwise arithmetic operations must be performed on BooleanVectors with the same dimensions.</value>
  </data>
  <data name="LE_ArgumentException_30" xml:space="preserve">
    <value>Difference can only be performed on dimensions with length greater than 1.</value>
  </data>
  <data name="LE_ArgumentException_31" xml:space="preserve">
    <value>Vector indices must be greater than or equal to 0</value>
  </data>
  <data name="LE_ArgumentException_32" xml:space="preserve">
    <value>Non-terminating index spacing.</value>
  </data>
  <data name="LE_ArgumentException_33" xml:space="preserve">
    <value>Index spacing cannot be equal to 0 if the start and end index are unequal.</value>
  </data>
  <data name="LE_ArgumentException_34" xml:space="preserve">
    <value />
  </data>
  <data name="LE_ArgumentException_35" xml:space="preserve">
    <value>The size Vector cannot be empty.</value>
  </data>
  <data name="LE_ArgumentException_36" xml:space="preserve">
    <value>Array indices must be between 0 and Length - 1.</value>
  </data>
  <data name="LE_ArgumentException_37" xml:space="preserve">
    <value>Invalid size Vector.</value>
  </data>
  <data name="LE_ArgumentException_38" xml:space="preserve">
    <value>Invalid spacing constraint</value>
  </data>
  <data name="LE_ArgumentException_39" xml:space="preserve">
    <value>Vectors must have length greater than 0</value>
  </data>
  <data name="LE_ArgumentException_4" xml:space="preserve">
    <value>Binary pointwise arithmetic operations must be performed on BooleanVectors with the same dimensions.</value>
  </data>
  <data name="LE_ArgumentException_40" xml:space="preserve">
    <value />
  </data>
  <data name="LE_ArgumentException_41" xml:space="preserve">
    <value>MinorMatrix requires a two-dimensional Matrix as input.</value>
  </data>
  <data name="LE_ArgumentException_42" xml:space="preserve">
    <value>Invalid index specification.</value>
  </data>
  <data name="LE_ArgumentException_43" xml:space="preserve">
    <value>Cannot remove rows and columns from an empty Matrix.</value>
  </data>
  <data name="LE_ArgumentException_44" xml:space="preserve">
    <value>There cannot be a negative number of repeats.</value>
  </data>
  <data name="LE_ArgumentException_45" xml:space="preserve">
    <value>Dimension number out of range.</value>
  </data>
  <data name="LE_ArgumentException_46" xml:space="preserve">
    <value>Subscripts do not align with dimensions.</value>
  </data>
  <data name="LE_ArgumentException_47" xml:space="preserve">
    <value>The length of a Vector must be a positive integer.</value>
  </data>
  <data name="LE_ArgumentException_48" xml:space="preserve">
    <value />
  </data>
  <data name="LE_ArgumentException_49" xml:space="preserve">
    <value>The dimensions of a Matrix must be positive integers.</value>
  </data>
  <data name="LE_ArgumentException_5" xml:space="preserve">
    <value>Indices must be integers, </value>
  </data>
  <data name="LE_ArgumentException_50" xml:space="preserve">
    <value>Correlation Matrices can only be computed for two-dimensional Matrices.</value>
  </data>
  <data name="LE_ArgumentException_51" xml:space="preserve">
    <value>Covariance Matrices can only be computed for two-dimensional Matrices.</value>
  </data>
  <data name="LE_ArgumentException_52" xml:space="preserve">
    <value>Standard deviations must be greater than or equal to zero.</value>
  </data>
  <data name="LE_ArgumentException_53" xml:space="preserve">
    <value>Cannot take the mean of the empty Vector.</value>
  </data>
  <data name="LE_ArgumentException_54" xml:space="preserve">
    <value>Cannot take the mean of the empty ComplexVector.</value>
  </data>
  <data name="LE_ArgumentException_55" xml:space="preserve">
    <value>Input Vectors do not align</value>
  </data>
  <data name="LE_ArgumentException_56" xml:space="preserve">
    <value>The length of the elements is not consistent with the specified dimensions</value>
  </data>
  <data name="LE_ArgumentException_57" xml:space="preserve">
    <value>Array must be of type double.</value>
  </data>
  <data name="LE_ArgumentException_58" xml:space="preserve">
    <value>The Matrix cannot be converted to a Vector.</value>
  </data>
  <data name="LE_ArgumentException_59" xml:space="preserve">
    <value>Binary pointwise arithmetic operations must be performed on Matrices with the same dimensions.</value>
  </data>
  <data name="LE_ArgumentException_6" xml:space="preserve">
    <value />
  </data>
  <data name="LE_ArgumentException_60" xml:space="preserve">
    <value>Bins cannot be specified with less than two elements.</value>
  </data>
  <data name="LE_ArgumentException_61" xml:space="preserve">
    <value />
  </data>
  <data name="LE_ArgumentException_62" xml:space="preserve">
    <value>Bins must be in increasing order.</value>
  </data>
  <data name="LE_ArgumentException_63" xml:space="preserve">
    <value />
  </data>
  <data name="LE_ArgumentException_64" xml:space="preserve">
    <value>Non-empty Matrices must have length greater than 0</value>
  </data>
  <data name="LE_ArgumentException_65" xml:space="preserve">
    <value>Matrices cannot have less than two dimensions</value>
  </data>
  <data name="LE_ArgumentException_66" xml:space="preserve">
    <value />
  </data>
  <data name="LE_ArgumentException_67" xml:space="preserve">
    <value>Matrix dimensions must be positive integers</value>
  </data>
  <data name="LE_ArgumentException_68" xml:space="preserve">
    <value>The source list must be smaller than the destination list.</value>
  </data>
  <data name="LE_ArgumentException_69" xml:space="preserve">
    <value>The length of the elements is not consistent with the specified dimensions</value>
  </data>
  <data name="LE_ArgumentException_7" xml:space="preserve">
    <value>Imaginary component of the Complex number string is formatted incorrectly.</value>
  </data>
  <data name="LE_ArgumentException_8" xml:space="preserve">
    <value />
  </data>
  <data name="LE_ArgumentException_9" xml:space="preserve">
    <value>Complex number strings must have double strings representing real and imaginary parts.</value>
  </data>
  <data name="LE_ArgumentOutOfRangeException_1" xml:space="preserve">
    <value>Empty vectors cannot be indexed</value>
  </data>
  <data name="LE_ArgumentOutOfRangeException_10" xml:space="preserve">
    <value>Subscript is out of the range of the Matrix.</value>
  </data>
  <data name="LE_ArgumentOutOfRangeException_11" xml:space="preserve">
    <value>Empty Matrices cannot be indexed</value>
  </data>
  <data name="LE_ArgumentOutOfRangeException_12" xml:space="preserve">
    <value>The size Vector has non-integer elements</value>
  </data>
  <data name="LE_ArgumentOutOfRangeException_13" xml:space="preserve">
    <value />
  </data>
  <data name="LE_ArgumentOutOfRangeException_2" xml:space="preserve">
    <value>Vector index specified incorrectly.</value>
  </data>
  <data name="LE_ArgumentOutOfRangeException_3" xml:space="preserve">
    <value>One of the vectors indices must be 0.</value>
  </data>
  <data name="LE_ArgumentOutOfRangeException_4" xml:space="preserve">
    <value>Null vectors cannot be indexed</value>
  </data>
  <data name="LE_ArgumentOutOfRangeException_5" xml:space="preserve">
    <value>Index is out of the vectors range.</value>
  </data>
  <data name="LE_ArgumentOutOfRangeException_6" xml:space="preserve">
    <value>Empty vectors cannot be indexed</value>
  </data>
  <data name="LE_ArgumentOutOfRangeException_7" xml:space="preserve">
    <value>Empty ComplexMatrices cannot be indexed</value>
  </data>
  <data name="LE_ArgumentOutOfRangeException_8" xml:space="preserve">
    <value>Index is out of the range of the Matrix.</value>
  </data>
  <data name="LE_ArgumentOutOfRangeException_9" xml:space="preserve">
    <value>An index is out of range</value>
  </data>
  <data name="LE_ArithmeticException_1" xml:space="preserve">
    <value>Max can only be computed on non-empty Vectors</value>
  </data>
  <data name="LE_ArithmeticException_10" xml:space="preserve">
    <value>MatrixProduct requires two-dimensional Matrices as inputs.</value>
  </data>
  <data name="LE_ArithmeticException_11" xml:space="preserve">
    <value>The second dimension of x1 must be the same size as the first dimension of x2.</value>
  </data>
  <data name="LE_ArithmeticException_12" xml:space="preserve">
    <value>MatrixProduct requires two-dimensional ComplexMatrices as inputs.</value>
  </data>
  <data name="LE_ArithmeticException_13" xml:space="preserve">
    <value>Set operations must be performed on Vectors with the same orientation</value>
  </data>
  <data name="LE_ArithmeticException_14" xml:space="preserve">
    <value>Dot product operation must be performed on Vectors with the same length.</value>
  </data>
  <data name="LE_ArithmeticException_15" xml:space="preserve">
    <value>Arithmetic 'If' functions require a BooleanVector with the same length.</value>
  </data>
  <data name="LE_ArithmeticException_16" xml:space="preserve">
    <value>Arithmetic 'If' functions require a BooleanVector with the same orientation.</value>
  </data>
  <data name="LE_ArithmeticException_2" xml:space="preserve">
    <value>Max can only be computed on non-empty ComplexVectors</value>
  </data>
  <data name="LE_ArithmeticException_3" xml:space="preserve">
    <value>Max can only be computed on non-empty Matrices</value>
  </data>
  <data name="LE_ArithmeticException_4" xml:space="preserve">
    <value>Dimension numbers must be greater than 1.</value>
  </data>
  <data name="LE_ArithmeticException_5" xml:space="preserve">
    <value>Min can only be computed on non-empty Vectors</value>
  </data>
  <data name="LE_ArithmeticException_6" xml:space="preserve">
    <value>Min can only be computed on non-empty ComplexVectors</value>
  </data>
  <data name="LE_ArithmeticException_7" xml:space="preserve">
    <value>Min can only be computed on non-empty Matrices</value>
  </data>
  <data name="LE_ArithmeticException_8" xml:space="preserve">
    <value>Min can only be computed on non-empty ComplexMatrices</value>
  </data>
  <data name="LE_ArithmeticException_9" xml:space="preserve">
    <value>Binary pointwise arithmetic operations must be performed on Vectors with the same dimensions.</value>
  </data>
  <data name="LE_IndexOutOfRangeException_1" xml:space="preserve">
    <value>Not defined in ComparisonType.</value>
  </data>
</root>