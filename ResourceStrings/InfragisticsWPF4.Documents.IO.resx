<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Exception_ValueMustBePositive" xml:space="preserve">
    <value>The value '{0}' is not within the valid range for the {1} property; the value being assigned must be a positive number.</value>
  </data>
  <data name="Exception_DocumentNotOpen" xml:space="preserve">
    <value>The document has not been opened. Use the StartDocument method to begin the document.</value>
  </data>
  <data name="Exception_InvalidCulture" xml:space="preserve">
    <value>"The value '{0}' is not the name of a valid culture for the local machine."</value>
  </data>
  <data name="Exception_ParagraphNotClosed" xml:space="preserve">
    <value>Closure of a previously opened paragraph is still pending. Each call to the StartParagraph method must be balanced by a call to the EndParagraph method.</value>
  </data>
  <data name="Exception_ParagraphNotClosedSectionStarted" xml:space="preserve">
    <value>A section cannot be defined because closure of an opened paragraph is still pending. A section must be defined at a point where the document is open, but no paragraphs are open.</value>
  </data>
  <data name="Exception_ParagraphNotClosedTableStarted" xml:space="preserve">
    <value>A table cannot be started because closure of an opened paragraph is still pending. A table can be nested within a cell of another table, but cannot be nested within a paragraph.</value>
  </data>
  <data name="Exception_ParagraphNotClosedTableRowStarted" xml:space="preserve">
    <value>A table row cannot be started because closure of an opened paragraph is still pending. Use the EndParagraph method to close the paragraph.</value>
  </data>
  <data name="Exception_ParagraphNotClosedTableCellStarted" xml:space="preserve">
    <value>A table cell cannot be started because closure of an opened paragraph is still pending. Use the EndParagraph method to close the paragraph.</value>
  </data>
  <data name="Exception_ParagraphNotOpen" xml:space="preserve">
    <value>The operation cannot be performed because there is currently no open paragraph. Use the StartParagraph method to begin a paragraph.</value>
  </data>
  <data name="Exception_PropertyValueOutOfRange" xml:space="preserve">
    <value>The value {0} is out of range. The '{1}' property must be set to a value within the range of {2} and {3} ({4}), inclusive.</value>
  </data>
  <data name="Exception_WriterError" xml:space="preserve">
    <value>An exception was thrown by the XmlWriter.</value>
  </data>
  <data name="Exception_TableNotOpen" xml:space="preserve">
    <value>The operation cannot be performed because there is currently no open table. Use the StartTable method to begin a table.</value>
  </data>
  <data name="Exception_TableNotClosed" xml:space="preserve">
    <value>Closure of a previously opened table is still pending. Each call to the StartTable method must be balanced by a call to the EndTable method.</value>
  </data>
  <data name="Exception_RowNotClosed" xml:space="preserve">
    <value>Closure of a previously opened table row is still pending. Each call to the StartTableRow method must be balanced by a call to the EndTableRow method.</value>
  </data>
  <data name="Exception_NestedRow" xml:space="preserve">
    <value>A table row cannot be added because closure of a previously opened table row is still pending, and nested table rows are not supported. Use the EndTableRow method to close the table row that is currently open.</value>
  </data>
  <data name="Exception_RowNotOpen" xml:space="preserve">
    <value>The operation cannot be performed because there is currently no open table row. Use the StartTableRow method to begin a table row.</value>
  </data>
  <data name="Exception_NestedParagraph" xml:space="preserve">
    <value>A paragraph cannot be opened because closure of an opened paragraph is still pending. Nested paragraphs are not supported.</value>
  </data>
  <data name="Exception_NestedTable" xml:space="preserve">
    <value>
      A table cannot be opened because closure of a previously opened table is still pending. Nested tables are supported, but must appear within a table cell of the parent table.
    </value>
  </data>
  <data name="Exception_CellNotClosed" xml:space="preserve">
    <value>Closure of a previously opened table cell is still pending. Each call to the StartTableCell method must be balanced by a call to the EndTableCell method.</value>
  </data>
  <data name="Exception_NestedCell" xml:space="preserve">
    <value>A table cell cannot be added because closure of a previously opened table cell is still pending, and nested table cells are not supported. Use the EndTableCell method to close the table cell that is currently open.</value>
  </data>
  <data name="Exception_CellNotOpen" xml:space="preserve">
    <value>The operation cannot be performed because there is currently no open table cell. Use the StartTableCell method to begin a table cell.</value>
  </data>
  <data name="Exception_PackageFactoryNullOnCLR2" xml:space="preserve">
    <value>When running under version 2.0 of the .NET framework, you must provide an IPackageFactory implementation to handle the packaging of data. If you are using version 3.0 (or higher) of the .NET Framework, use the Infragistics3.Documents.IO assembly instead, and the packaging will be handled by the WindowsBase class.</value>
  </data>
  <data name="Exception_AssociatedWithDifferentWriter" xml:space="preserve">
    <value>The instance being assigned was created by a different writer, and cannot be assigned to this object.</value>
  </data>
  <data name="Exception_HeaderWriterError" xml:space="preserve">
    <value>An exception was thrown while writing content to the header part of a section. Check the InnerException for details.</value>
  </data>
  <data name="Exception_FooterWriterError" xml:space="preserve">
    <value>An exception was thrown while writing content to the footer part of a section. Check the InnerException for details.</value>
  </data>
  <data name="Exception_DocumentClosureError" xml:space="preserve">
    <value>An exception was thrown while closing the document. Check the InnerException for details.</value>
  </data>
  <data name="Exception_HeaderFooterWriterClosureError" xml:space="preserve">
    <value>An exception was thrown while closing a header or footer. Check the InnerException for details.</value>
  </data>
  <data name="Exception_HeaderFooterWriterNotClosed" xml:space="preserve">
    <value>The document writer was closed, but closure of a header/footer writer is still pending. Header/footer writers must be properly closed prior to closure of the document writer.</value>
  </data>
  <data name="Exception_HeaderFooterWriterNotOpened" xml:space="preserve">
    <value>The document writer was closed, but a header/footer writer that was previously created was never opened. Any header/footer writers that are created must be opened and properly closed.</value>
  </data>
  <data name="Exception_MissingHyperlinkAddress" xml:space="preserve">
    <value>A hyperlink must have a valid address.</value>
  </data>
  <data name="Exception_AddHyperlink_BadUri" xml:space="preserve">
    <value>The value '{0}' could not be specified as a valid Uniform Resource Identifier (URI).</value>
  </data>
  <data name="Exception_RotatableShape_Rotation" xml:space="preserve">
    <value>The value must be within the range of -180 to 180.</value>
  </data>
  <data name="Exception_RowClosedNoCell" xml:space="preserve">
    <value>The table row could not be closed because it contains no table cells. A table row must contain at least one table cell.</value>
  </data>
  <data name="Exception_CellNotClosedTableClosed" xml:space="preserve">
    <value>The table could not be closed because closure of a previously opened table cell is still pending. Use the EndTableCell method to close the table cell.</value>
  </data>
  <data name="Exception_RowNotClosedTableClosed" xml:space="preserve">
    <value>The table could not be closed because closure of a previously opened table row is still pending. Use the EndTableRow method to close the table row.</value>
  </data>
  <data name="WordDocumentWriter_TooManyColumns" xml:space="preserve">
    <value>A table cannot contain {0} columns; a table must have at least one column and no more than {1}.</value>
  </data>
  <data name="Exception_PaddingTextParseFailedFormat" xml:space="preserve">
    <value>The specified string: '{0}' cannot be converted to a Padding object. Please specify the padding in the following format: "left, top, right, bottom"</value>
  </data>
  <data name="Exception_TableOpenSectionStarted" xml:space="preserve">
    <value>A section cannot be defined because a table is currently open. Sections can only be defined for root-level content blocks.</value>
  </data>
  <data name="Exception_RowOpenSectionStarted" xml:space="preserve">
    <value>A section cannot be defined because a table row is currently open. Sections can only be defined for root-level content blocks.</value>
  </data>
  <data name="Exception_CellOpenSectionStarted" xml:space="preserve">
    <value>A section cannot be defined because a table cell is currently open. Sections can only be defined for root-level content blocks.</value>
  </data>
  <data name="Exception_SectionProperties_MaxPageSize" xml:space="preserve">
    <value>The specified value, ({0}), is out of range. The maximum page size for a document section is (22" x 22").</value>
  </data>
  <data name="Exception_NoImageEncoder" xml:space="preserve">
    <value>Images cannot be added to the document because no Infragistics.Imaging.IImageEncoder implementation has been assigned to the ImageEncoder property. Because the Silverlight runtime provides no intrinsic support for the encoding of image information, the WordDocumentWriter requires a reference to an IImageEncoder implementation in order to serialize image information.</value>
  </data>
  <data name="Exception_BulletPropertiesCollection_ItemDoesNotExist" xml:space="preserve">
    <value>The specified item does not exist in this collection.</value>
  </data>
  <data name="Exception_BulletLevelPropertiesCollection_MaxCountExceeded" xml:space="preserve">
    <value>The specified value is invalid. The maximum number of supported levels for a bullet list or automatic numbering run is nine.</value>
  </data>
</root>