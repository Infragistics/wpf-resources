<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
	
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>1.3</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="LE_RemoveAllFailedVersion">
		<value>The collection was modified during the call to RemoveAll.</value>
	</data>
	<data name="LE_EnumFailedVersion">
		<value>The collection was modified after the enumerator was started.</value>
	</data>
	<data name="LE_EnumNotStarted">
		<value>The enumerator was not started. Call MoveNext.</value>
	</data>
	<data name="LE_EnumEnded">
		<value>The enumerator was completed.</value>
	</data>
	<data name="LE_ReferenceNotRegistered">
		<value>The specified reference '{0}' has not been registered with an UndoManager instance. Use the RegisterReference method to register the reference with an UndoManager or pass null as the 'reference' to use the UndoManager.Current thread static/shared instance.</value>
	</data>
	<data name="LE_UndoManagerAsReference">
		<value>An 'UndoManager' instance cannot be a reference.</value>
	</data>
	<data name="LE_ReferenceRegisteredToOther">
		<value>The specified reference '{0}' is registered with a different UndoManager instance.</value>
	</data>
	<data name="LE_NewTransactionWhileSuspended">
		<value>A transaction cannot be started while the UndoManager is suspended.</value>
	</data>
	<data name="LE_FactoryNullTransaction">
		<value>The UndoUnitFactory returned a null UndoTransaction.</value>
	</data>
	<data name="LE_UndoRedoInUndoRedo">
		<value>Cannot perform an Undo/Redo while an Undo/Redo is in progress.</value>
	</data>
	<data name="LE_UndoRedoInRollback">
		<value>Cannot perform an Undo/Redo while a Rollback is in progress.</value>
	</data>
	<data name="LE_UndoRedoWhileSuspended">
		<value>Cannot perform an Undo/Redo while the UndoManager has been suspended.</value>
	</data>
	<data name="LE_UndoRedoInTransaction">
		<value>Cannot perform an undo/redo while a transaction is opened.</value>
	</data>
	<data name="LE_EndTransactionWhileSuspended">
		<value>Cannot close a transaction while the UndoManager is suspended.</value>
	</data>
	<data name="LE_AddOpenTransaction">
		<value>Cannot add an UndoTransaction that has not been opened or is still open.</value>
	</data>
	<data name="LE_AddTransactionDirect">
		<value>UndoTransaction cannot be added. The RootTransaction is automatically added upon Commit.</value>
	</data>
	<data name="LE_ChangeHistoryInMerge">
		<value>Cannot alter the Undo/Redo history while a Merge is being invoked</value>
	</data>
	<data name="LE_ChangeHistoryInRemoveAll">
		<value>Cannot alter the Undo/Redo history while the RemoveAll is being invoked.</value>
	</data>
	<data name="LE_HasOpenTransaction">
		<value>A transaction has already been opened.</value>
	</data>
	<data name="LE_TransactionNotOpened">
		<value>The specified transaction '{0}' is not open.</value>
	</data>
	<data name="LE_InvalidTransactionOwner">
		<value>The specified transaction's Owner is not this object.</value>
	</data>
	<data name="LE_ClosingOtherTransaction">
		<value>The specified transaction '{0}' is not the currently open transaction '{1}'.</value>
	</data>
	<data name="LE_CannotExecuteOpenTransaction">
		<value>Cannot invoke Execute while the transaction '{0}' is open.</value>
	</data>
	<data name="LE_TransactionNotStarted">
		<value>The transaction cannot be modified until it has been started.</value>
	</data>
	<data name="LE_TransactionClosed">
		<value>The transaction cannot be modified once it has been closed.</value>
	</data>
	<data name="LE_AddUnitWhileTransactionOpen">
		<value>Cannot add an UndoUnit while the transaction contains a nested open transaction '{0}'.</value>
	</data>
	<data name="LE_TransactionAlreadyOpened">
		<value>The transaction has already been opened.</value>
	</data>
	<data name="LE_ChildTransactionNotInUnits">
		<value>The specified child transaction '{0}' is not part of the Units of this transaction.</value>
	</data>
	<data name="LE_TargetCollectionIsReadOnly">
		<value>The specified collection '{0}' cannot be read-only.</value>
	</data>
	<data name="LE_RangeCollectionAction">
		<value>Range actions are not supported.</value>
	</data>
	<data name="LE_ResetCollectionAction">
		<value>Reset action is not supported.</value>
	</data>
	<data name="LE_NeedAddRemoveAction">
		<value>The specified action must be 'Add' or 'Remove'.</value>
	</data>
	<data name="LE_ArgumentIsNegative">
		<value>The '{0}' must be 0 or greater. Actual value: '{1}'</value>
	</data>
	<data name="PropertyChangeDescription">
		<value>Change '{0}' on '{1}'</value>
	</data>
	<data name="PropertyChangeDescriptionDetailed">
		<value>Change '{0}' on '{1}' to '{3}'</value>
	</data>
	<data name="ReplaceItemDescription">
		<value>Replace '{1}'</value>
	</data>
	<data name="ReplaceItemDescriptionDetailed">
		<value>Replace '{1}' with '{2}'</value>
	</data>
	<data name="MoveItemDescription">
		<value>Move '{1}'</value>
	</data>
	<data name="MoveItemDescriptionDetailed">
		<value>Move '{1}' from '{2}' to '{3}'</value>
	</data>
	<data name="AddRangeDescription">
		<value>Add {1} {2}(s)</value>
	</data>
	<data name="AddRangeDescriptionDetailed">
		<value>Add {1} {2}(s)</value>
	</data>
	<data name="RemoveRangeDescription">
		<value>Remove {1} {2}(s)</value>
	</data>
	<data name="RemoveRangeDescriptionDetailed">
		<value>Remove {1} {2}(s)</value>
	</data>
	<data name="FallbackTransactionDescription">
		<value></value>
	</data>
	<data name="AddItemDescription">
		<value>Add '{1}'</value>
	</data>
	<data name="AddItemDescriptionDetailed">
		<value>Add '{1}'</value>
	</data>
	<data name="RemoveItemDescription">
		<value>Remove '{1}'</value>
	</data>
	<data name="RemoveItemDescriptionDetailed">
		<value>Remove '{1}'</value>
	</data>
	<data name="ReinitializeCollectionDescription">
		<value>Batch '{2}' Change</value>
	</data>
	<data name="ReinitializeCollectionDescriptionDetailed">
		<value>Batch '{2}' Change</value>
	</data>
  <data name="LE_HistoryItemNotInCurrentHistory">
    <value>The UndoHistoryItem does not exist within the associated Undo or Redo history in the UndoManager.</value>
  </data>
</root>
