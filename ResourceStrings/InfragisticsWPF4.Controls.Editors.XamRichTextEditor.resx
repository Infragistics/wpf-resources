<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LE_RichDocumentViewPresenterNotFound" xml:space="preserve">
    <value>Cannot find RichDocumentViewPresenter from {0}</value>
  </data>
  <data name="LE_MissingTemplatePart" xml:space="preserve">
    <value>A template part with a name of '{0}' and type '{1}' is required in the '{2}' template.</value>
  </data>
  <data name="LE_NotEnoughViewsForSplit" xml:space="preserve">
    <value>The XamRichTextEditor IsDocumentViewSplit property indicates that a split is active, however only {0} views were found!</value>
  </data>
  <data name="DBG_LayoutCategory" xml:space="preserve">
    <value>Layout</value>
  </data>
  <data name="DBG_InfiniteWidthMeasurement" xml:space="preserve">
    <value>The XamRichTextEditor control has been measured with infinite width (did you place it within a ScrollViewer?).  Since the control needs a width constraint to layout its contents properly, the control's desired width has been returned as an arbitrary value of 20,000 pixels.  You can override this value by explicitly setting the Width property of the XamRichTextEditor control.</value>
  </data>
  <data name="DBG_InvalidISupportPositioningInfo" xml:space="preserve">
    <value>Invalid ISupportPositioning info specified for one or more Margins.  Margin order will be undefined.</value>
  </data>
  <data name="TT_HyperlinkPrompt" xml:space="preserve">
    <value>Ctrl+Click to follow link</value>
  </data>
  <data name="MSG_Body_ExceptionWhileExecutingHyperlink" xml:space="preserve">
    <value>An exception ('{0}') was encountered when attempting to navigate to '{1}'.</value>
  </data>
  <data name="MSG_Title_ExceptionWhileExecutingHyperlink" xml:space="preserve">
    <value>Hyperlink Error</value>
  </data>
  <data name="MI_Copy" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="MI_Cut" xml:space="preserve">
    <value>Cut</value>
  </data>
  <data name="MI_Paste" xml:space="preserve">
    <value>Paste</value>
  </data>
  <data name="MI_InsertTable" xml:space="preserve">
    <value>Insert Table...</value>
  </data>
  <data name="MI_InsertTable_1x1" xml:space="preserve">
    <value>1x1</value>
  </data>
  <data name="MI_InsertTable_2x2" xml:space="preserve">
    <value>2x2</value>
  </data>
  <data name="MI_InsertTable_3x3" xml:space="preserve">
    <value>3x3</value>
  </data>
  <data name="MI_InsertTable_4x4" xml:space="preserve">
    <value>4x4</value>
  </data>
  <data name="MI_InsertTable_5x5" xml:space="preserve">
    <value>5x5</value>
  </data>
</root>