<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
	
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>1.3</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
  <data name="ErrorAlias_Expression" xml:space="preserve">
    <value>Expression</value>
  </data>
  <data name="ErrorAlias_Identifier" xml:space="preserve">
    <value>Identifier</value>
  </data>
  <data name="ErrorAlias_NumericLiteral" xml:space="preserve">
    <value>Numeric literal</value>
  </data>
  <data name="ErrorAlias_Statement" xml:space="preserve">
    <value>Statement</value>
  </data>
  <data name="ErrorAlias_PropertyAccessor" xml:space="preserve">
    <value>Get or set accessor</value>
  </data>
  <data name="ErrorAlias_ObjectCreationExpression" xml:space="preserve">
    <value>Object creation expression</value>
  </data>
  <data name="ErrorAlias_ArgumentExpression" xml:space="preserve">
    <value>Argument expression</value>
  </data>
  <data name="ErrorAlias_ArrayRankSpecifiers" xml:space="preserve">
    <value>Array rank specifiers</value>
  </data>
  <data name="ErrorAlias_Attribute" xml:space="preserve">
    <value>Attribute</value>
  </data>
  <data name="ErrorAlias_AttributeTarget" xml:space="preserve">
    <value>Attribute target</value>
  </data>
  <data name="ErrorAlias_TypeMember" xml:space="preserve">
    <value>Type member</value>
  </data>
  <data name="ErrorAlias_CatchOrFinally" xml:space="preserve">
    <value>Catch or finally block</value>
  </data>
  <data name="ErrorAlias_TypeBody" xml:space="preserve">
    <value>Type body</value>
  </data>
  <data name="ErrorAlias_ConstantDeclaration" xml:space="preserve">
    <value>Constant declaration</value>
  </data>
  <data name="ErrorAlias_ConstructorInitialization" xml:space="preserve">
    <value>Constructor initialization</value>
  </data>
  <data name="ErrorAlias_ParameterDeclaration" xml:space="preserve">
    <value>Parameter declaration</value>
  </data>
  <data name="ErrorAlias_RefOrOut" xml:space="preserve">
    <value>ref or out</value>
  </data>
  <data name="ErrorAlias_ParameterList" xml:space="preserve">
    <value>Parameter list</value>
  </data>
  <data name="ErrorAlias_ExternOrUsing" xml:space="preserve">
    <value>Extern alias or using statement</value>
  </data>
  <data name="ErrorAlias_EventAccessor" xml:space="preserve">
    <value>Add or remove accessor</value>
  </data>
  <data name="ErrorAlias_Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="ErrorAlias_Colon" xml:space="preserve">
    <value>:</value>
  </data>
  <data name="ErrorAlias_Modifier" xml:space="preserve">
    <value>Modifier</value>
  </data>
  <data name="ErrorAlias_RightShift" xml:space="preserve">
    <value>&gt;&gt;</value>
  </data>
  <data name="ErrorAlias_RightShiftEquals" xml:space="preserve">
    <value>&gt;&gt;=</value>
  </data>
  <data name="ErrorAlias_NamespaceBody" xml:space="preserve">
    <value>Namespace body</value>
  </data>
  <data name="ErrorAlias_TypeOrNamespaceDeclaration" xml:space="preserve">
    <value>Type or namespace declaration</value>
  </data>
  <data name="ErrorAlias_Operator" xml:space="preserve">
    <value>Operator</value>
  </data>
  <data name="ErrorAlias_MethodArguments" xml:space="preserve">
    <value>Method or constructor arguments</value>
  </data>
  <data name="ErrorAlias_QueryBodyClause" xml:space="preserve">
    <value>Query body clause</value>
  </data>
  <data name="ErrorAlias_SelectOrGroupClause" xml:space="preserve">
    <value>Select or group clause</value>
  </data>
  <data name="ErrorAlias_CaseLabel" xml:space="preserve">
    <value>Case label</value>
  </data>
  <data name="ErrorAlias_TypeParameterConstraints" xml:space="preserve">
    <value>Type parameter constraints</value>
  </data>
  <data name="ErrorAlias_InOrOut" xml:space="preserve">
    <value>In or out</value>
  </data>
  <data name="ErrorAlias_VariableDeclaration" xml:space="preserve">
    <value>Variable declaration</value>
  </data>
  <data name="ErrorAlias_GenericTypeArguments" xml:space="preserve">
    <value>Generic type arguments</value>
  </data>
  <data name="ErrorAlias_GenericTypeParameters" xml:space="preserve">
    <value>Generic type parameters</value>
  </data>
  <data name="ErrorAlias_BaseType" xml:space="preserve">
    <value>Base type</value>
  </data>
  <data name="ErrorAlias_Block" xml:space="preserve">
    <value>Block</value>
  </data>
  <data name="ErrorAlias_ArrayArguments" xml:space="preserve">
    <value>Array arguments</value>
  </data>
  <data name="ErrorAlias_IndexerParameters" xml:space="preserve">
    <value>Indexer parameters</value>
  </data>
  <data name="ErrorAlias_ElseClause" xml:space="preserve">
    <value>Else clause</value>
  </data>
  <data name="ErrorAlias_GenericDimensions" xml:space="preserve">
    <value>Generic dimensions</value>
  </data>
  <data name="ErrorAlias_VariableDeclaration" xml:space="preserve">
    <value>Variable declaration</value>
  </data>
  <data name="ErrorAlias_ArgumentName" xml:space="preserve">
    <value>Argument name</value>
  </data>
  <data name="ErrorAlias_Assignment" xml:space="preserve">
    <value>Assignment</value>
  </data>
  <data name="ErrorMessage_IncompleteMember" xml:space="preserve">
    <value>Incomplete member definition in class or struct</value>
  </data>
  <data name="ErrorMessage_InterfaceIncompleteMember" xml:space="preserve">
    <value>Incomplete member definition in interface</value>
  </data>
  <data name="ErrorMessage_InterfaceIncompleteMember" xml:space="preserve">
    <value>Incomplete member definition in interface</value>
  </data>
  <data name="ErrorMessage_InvalidStatement" xml:space="preserve">
    <value>Only assignment, call, increment, decrement, and new object expressions can be used as a statement</value>
  </data>
  <data name="ErrorMessage_UnexpectedIdentifier" xml:space="preserve">
    <value>Unexpected identifier</value>
  </data>
  <data name="ErrorMessage_QueryBodyMissing" xml:space="preserve">
    <value>A query body must end in a select or group clause</value>
  </data>
</root>
