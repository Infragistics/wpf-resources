<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:igControlsPrim="http://schemas.infragistics.com/xaml/primitives"
                    xmlns:igPrimBase="http://schemas.infragistics.com/xaml/primitives"
                    xmlns:igShared="http://schemas.infragistics.com/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" 
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" mc:Ignorable="PresentationOptions d">

  <!-- *********************************  RESOURCES  ********************************* -->
  <ResourceDictionary.MergedDictionaries>  
    <ResourceDictionary Source="IG.Styles.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <!-- ********************************** BRUSHES **********************************-->
  <!--  Header Brushes -->
  <LinearGradientBrush x:Key="HeaderBackgroundBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="{StaticResource Color_005}" />
    <GradientStop Color="{StaticResource Color_004}" Offset="1" />
  </LinearGradientBrush>
  <SolidColorBrush x:Key="HeaderBorderBrush" Color="{StaticResource Color_003}" />
  <LinearGradientBrush x:Key="HeaderHoverBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Color="{StaticResource Color_002}" />
    <GradientStop Color="{StaticResource Color_004}" Offset="1" />
  </LinearGradientBrush>
  <SolidColorBrush x:Key="HeaderForegroundBrush" Color="{StaticResource Color_011}" />

  <!--  Cell Brushes -->
  <SolidColorBrush x:Key="CellItemBackgroundBrush" Color="{StaticResource Color_011}" />
  <SolidColorBrush x:Key="CellItemBorderBrush" Color="{StaticResource Color_007}" />
  <LinearGradientBrush x:Key="CellItemHoverBackgroundBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Color="{StaticResource Color_014}" />
    <GradientStop Color="{StaticResource Color_016}" Offset="1" />
  </LinearGradientBrush>
  <LinearGradientBrush x:Key="CellItemSelectedBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
    <GradientStop Offset="0" Color="{StaticResource Color_011}" />
    <GradientStop Offset="0.97" Color="{StaticResource Color_009}" />
    <GradientStop Offset="0.99" Color="{StaticResource Color_009}" />
  </LinearGradientBrush>
  <SolidColorBrush x:Key="CellItemSelectedBorderBrush" Color="{StaticResource Color_016}" />
  <LinearGradientBrush x:Key="CellItemFocusBackgroundBrush" EndPoint="0.5,1" StartPoint="0.5,0">
    <GradientStop Offset="0" Color="{StaticResource Color_011}" />
    <GradientStop Offset="0.97" Color="{StaticResource Color_009}" />
    <GradientStop Offset="0.99" Color="{StaticResource Color_009}" />
  </LinearGradientBrush>
  <SolidColorBrush x:Key="CellItemFocusBorderBrush" Color="{StaticResource Color_016}" />

  <!--  Popup Resizer Brushes -->
  <SolidColorBrush x:Key="PopupResizerBorderBrush" Color="{StaticResource Color_007}" />

  <!-- MultiColumnComboEditor Brushes -->
  <SolidColorBrush x:Key="ReadOnlyElementBackgroundBrush" Color="{StaticResource Color_022}" />
  <SolidColorBrush x:Key="DisabledElementBorderBrush" Color="{StaticResource Color_024}" />
  <SolidColorBrush x:Key="DisabledElementBackgroundBrush" Color="{StaticResource Color_024}" />
  <SolidColorBrush x:Key="ClearSelectionBackgroundBrush" Color="{StaticResource Color_001}" />

  <!-- **********************************  Generic Variables **********************************-->
  <Thickness x:Key="ComboCellBorderThickness">0</Thickness>
  <System:Double x:Key="ComboCellBorderMouseOverThickness">0</System:Double>
  <System:Double x:Key="ComboCellBorderSelectedThickness">0</System:Double>
  <System:Double x:Key="ComboCellBorderFocusThickness">0</System:Double>
  <System:Double x:Key="ComboRadius">3</System:Double>
  <CornerRadius x:Key="ComboTextBoxRadius">3</CornerRadius>
  <CornerRadius x:Key="ComboPopoutRadius">0</CornerRadius>

  <!-- ToggleButton Width for EditorItem-->
  <System:Double x:Key="ToggleButtonWidth">22</System:Double>

  <!-- *********************************  Popup Style  ********************************* -->
  <Style x:Key="PopupStyle" TargetType="Popup">
    <Setter Property="AllowsTransparency" Value="True" />
  </Style>

  <!-- *********************************  SpecializedTextBox Style  ********************************* -->
  <Style x:Key="SpecializedTextBoxStyle" TargetType="igPrimBase:SpecializedTextBox">
    <Setter Property="Padding" Value="4 0 0 0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="igPrimBase:SpecializedTextBox">
          <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Padding="{TemplateBinding Padding}" VerticalAlignment="Center" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- *********************************  Converters  ********************************* -->
  <igControlsPrim:ValueConverterGroup x:Key="boolToVisibility">
    <!-- if true sets visibility to Visible -->
    <igControlsPrim:FixedValueConverter>
      <igControlsPrim:FixedValueConverter.SourceValue>
        <System:Boolean>
          True
        </System:Boolean>
      </igControlsPrim:FixedValueConverter.SourceValue>
      <igControlsPrim:FixedValueConverter.DestinationValue>
        <Visibility>
          Visible
        </Visibility>
      </igControlsPrim:FixedValueConverter.DestinationValue>
    </igControlsPrim:FixedValueConverter>
    <!-- if false sets visibility to Collapsed -->
    <igControlsPrim:FixedValueConverter>
      <igControlsPrim:FixedValueConverter.DestinationValue>
        <Visibility>
          Collapsed
        </Visibility>
      </igControlsPrim:FixedValueConverter.DestinationValue>
    </igControlsPrim:FixedValueConverter>
  </igControlsPrim:ValueConverterGroup>

  <!-- *********************************  CrossTemplate  ********************************* -->
  <ControlTemplate x:Key="CrossTemplate" TargetType="Button">
    <Grid>
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CommonStates">
          <VisualState x:Name="Normal" />
          <VisualState x:Name="MouseOver">
            <Storyboard>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Cross" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value=".7" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Disabled">
            <Storyboard>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Cross" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value=".3" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Pressed">
            <Storyboard>
              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Cross" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
        <VisualStateGroup x:Name="FocusStates">
          <VisualState x:Name="Unfocused" />
          <VisualState x:Name="Focused" />
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>
      <!-- The button's background needs to be transparent to make it clickable-->
      <Rectangle Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{StaticResource TransparentBrush}" />
      <!-- This is the "X" for the button -->
      <Path x:Name="Cross" Data="M17.978895,14.4374 L14.459287,17.981174 L9.5024157,13.021268 L4.5621309,17.986851 L1.0009997,14.46541 L5.96099,9.4979582 L1.0248781,4.5379386 L4.544733,
			1.0159005 L9.5026722,5.9762726 L14.459279,0.99506438 L17.999273,4.5379333 L13.063161,9.5396385 z" Fill="{TemplateBinding Background}" Stretch="Fill" UseLayoutRounding="False" Width="10" Height="10" Opacity=".5" />
    </Grid>
  </ControlTemplate>

  <!-- *********************************  XamMultiColumnComboEditor Style  ********************************* -->
  <Style x:Key="XamMultiColumnComboEditorStyle" TargetType="igShared:XamMultiColumnComboEditor">
    <Setter Property="Foreground" Value="{StaticResource ThemeForegroundBrush}" />
    <Setter Property="Background" Value="{StaticResource TextBoxBackgroundBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource TextBoxBorderBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Padding" Value="4,2" />
    <Setter Property="MinHeight" Value="22" />
    <Setter Property="MinDropDownHeight" Value="40"/>
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="igShared:XamMultiColumnComboEditor">
          <Grid>
            <Grid.Resources>
              <Style TargetType="CheckBox" BasedOn="{StaticResource CheckBoxStyle}" />
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DisabledVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                      <SplineDoubleKeyFrame KeyTime="00:00:00" Value=".55" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                      <SplineDoubleKeyFrame KeyTime="00:00:00">
                        <SplineDoubleKeyFrame.Value>
                          <System:Double>1</System:Double>
                        </SplineDoubleKeyFrame.Value>
                      </SplineDoubleKeyFrame>
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="ModeStates">
                <VisualState x:Name="Selectable" />
                <VisualState x:Name="Editable"/>
              </VisualStateGroup>
              <VisualStateGroup x:Name="WaterMarkStates">
                <VisualState x:Name="WaterMarkHidden" />
                <VisualState x:Name="WaterMarkVisible">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="WaterMark" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DropDownStates">
                <VisualState x:Name="Closed" />
                <VisualState x:Name="Open">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Popup" Storyboard.TargetProperty="IsOpen">
                      <DiscreteObjectKeyFrame KeyTime="00:00:00">
                        <DiscreteObjectKeyFrame.Value>
                          <System:Boolean>True</System:Boolean>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ValidationStates">
                <VisualState x:Name="Valid" />
                <VisualState x:Name="InvalidUnfocused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ValidationErrorElement" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="InvalidFocused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ValidationErrorElement" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <!--<ObjectAnimationUsingKeyFrames Storyboard.TargetName="validationTooltip" Storyboard.TargetProperty="IsOpen">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <System:Boolean>True</System:Boolean>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>-->
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="InvalidMouseOver">
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="ValidationErrorElement">
                            <DiscreteObjectKeyFrame KeyTime="0">
                                <DiscreteObjectKeyFrame.Value>
                                    <Visibility>Visible</Visibility>
                                </DiscreteObjectKeyFrame.Value>
                            </DiscreteObjectKeyFrame>
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsOpen" Storyboard.TargetName="validationTooltip">
                            <DiscreteObjectKeyFrame KeyTime="0:0:0.001">
                                <DiscreteObjectKeyFrame.Value>
                                    <System:Boolean>True</System:Boolean>
                                </DiscreteObjectKeyFrame.Value>
                            </DiscreteObjectKeyFrame>
                        </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PositionStates">
                <VisualState x:Name="Below" />
                <VisualState x:Name="Above">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Resizer" Storyboard.TargetProperty="Position">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <igControlsPrim:ResizerPosition>Above</igControlsPrim:ResizerPosition>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Resizer" Storyboard.TargetProperty="(Grid.Row)">
                      <DiscreteObjectKeyFrame KeyTime="00:00:00">
                        <DiscreteObjectKeyFrame.Value>
                          <System:Int32>0</System:Int32>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RootPopupElement" Storyboard.TargetProperty="(Grid.Row)">
                      <DiscreteObjectKeyFrame KeyTime="00:00:00">
                        <DiscreteObjectKeyFrame.Value>
                          <System:Int32>1</System:Int32>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="ContentPresenterBorder">
              <Grid x:Name="gridLayout" ShowGridLines="False">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Popup x:Name="Popup" Grid.ColumnSpan="2" VerticalAlignment="Bottom" IsOpen="False" Style="{StaticResource PopupStyle}">
                  <Grid>
                    <Grid.RowDefinitions>
                      <RowDefinition Height="*" />
                      <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Border x:Name="RootPopupElement" Height="Auto" MaxHeight="{TemplateBinding MaxDropDownHeight}" MaxWidth="{TemplateBinding MaxDropDownWidth}" MinHeight="{TemplateBinding MinDropDownHeight}" HorizontalAlignment="Stretch" CornerRadius="{StaticResource ComboPopoutRadius}" Background="{StaticResource PopupBackgroundBrush}" BorderBrush="{StaticResource PopupBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                      <Grid>
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="*" />
                          <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="*" />
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <igPrimBase:MultiColumnComboItemsPanel x:Name="ItemsPanel" Grid.Row="1" VerticalAlignment="Top" />
                        <ScrollBar x:Name="VerticalScrollBar" Grid.Column="1" Grid.Row="1" Style="{StaticResource ScrollbarStyle}" />
                        <ScrollBar x:Name="HorizontalScrollBar" Height="20" Grid.Column="0" Grid.Row="2" Style="{StaticResource ScrollbarStyle}" />
                        <ContentControl x:Name="FooterContentArea" Grid.ColumnSpan="2" Grid.Row="3" Content="{TemplateBinding Footer}" ContentTemplate="{TemplateBinding FooterTemplate}" HorizontalContentAlignment="Stretch" />
                      </Grid>
                    </Border>
                    <igPrimBase:PopupResizer x:Name="Resizer" Grid.ColumnSpan="2" Grid.Row="1" Popup="{Binding ElementName=Popup}" ResizeElement="{Binding ElementName=RootPopupElement}" Visibility="{Binding AllowDropDownResizing, Converter={StaticResource boolToVisibility}, RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{StaticResource PopupResizerBorderBrush}" />
                  </Grid>
                </Popup>
                <Border Grid.ColumnSpan="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{StaticResource ComboTextBoxRadius}" Margin="0,0,-1,0" />
                <Border x:Name="borderEditMode" Grid.ColumnSpan="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{StaticResource ComboTextBoxRadius}" Visibility="Collapsed" Margin="0,0,-1,0" />
                <Rectangle x:Name="FocusVisualElement" Grid.ColumnSpan="2" RadiusX="{StaticResource ComboRadius}" RadiusY="{StaticResource ComboRadius}" Margin="0" IsHitTestVisible="false" Opacity="0" Stroke="{StaticResource TextBoxFocusedBorderBrush}" StrokeThickness="1" />
                <Rectangle Fill="{StaticResource ComboBoxInnerShadowBackgroundBrush}" Opacity="0.65" IsHitTestVisible="False" Height="22" VerticalAlignment="Top" RadiusY="3" RadiusX="3" Grid.ColumnSpan="2" StrokeThickness="2" Stroke="{StaticResource TransparentBrush}"/>
                <ToggleButton x:Name="ToggleButton" Grid.Column="1" IsTabStop="False" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboToggleStyle}" Width="{StaticResource ToggleButtonWidth}" VerticalAlignment="Stretch" igControlsPrim:XamlHelper.Focusable="False" />

                <TextBlock x:Name="WaterMark" HorizontalAlignment="Stretch" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" IsHitTestVisible="False" Padding="{TemplateBinding Padding}" Text="{TemplateBinding EmptyText}" Visibility="Collapsed" />

                <igPrimBase:SpecializedTextBox x:Name="TextBoxPresenter" HorizontalAlignment="Stretch" IsTabStop="{TemplateBinding IsTabStop}" Margin="1,1,0,1" Style="{StaticResource SpecializedTextBoxStyle}" Background="{StaticResource TransparentBrush}" BorderThickness="0" Foreground="{TemplateBinding Foreground}" Visibility="Collapsed" Padding="4,0,4,0" />

                <StackPanel x:Name="MultiSelectContentPanel" HorizontalAlignment="Stretch" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Orientation="Horizontal" />

                <Button Grid.Column="1" IsEnabled="False" Visibility="{TemplateBinding SelectedItemsResetButtonVisibility}" Width="20" Height="20" IsTabStop="False" HorizontalAlignment="Right" Margin="0,0,4,0" VerticalAlignment="Center" ClickMode="Press" Cursor="Hand" Background="{StaticResource ClearSelectionBackgroundBrush}" Template="{StaticResource CrossTemplate}" igControlsPrim:XamlHelper.Focusable="False">
                  <igShared:Commanding.Command>
                    <igPrimBase:MultiColumnComboEditorCommandSource CommandType="ClearSelection" EventName="Click" />
                  </igShared:Commanding.Command>
                  <ToolTipService.ToolTip>
                    <ToolTip Content="{Binding LocalizedStrings[SelectedItemsResetButton_ToolTip], RelativeSource={RelativeSource TemplatedParent}}" />
                  </ToolTipService.ToolTip>
                </Button>
              </Grid>
            </Border>

            <Rectangle x:Name="DisabledVisualElement" Fill="{StaticResource ThemeLightForegroundBrush}" IsHitTestVisible="false" Opacity="0" RadiusX="1" RadiusY="1" />

            <Border x:Name="ValidationErrorElement" BorderBrush="{StaticResource InvalidFocusedBrush}" BorderThickness="1" CornerRadius="1" Visibility="Collapsed">
              <ToolTipService.ToolTip>
                <ToolTip x:Name="validationTooltip" DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Template="{StaticResource ValidationToolTipTemplate}">
                </ToolTip>
              </ToolTipService.ToolTip>
              <Grid Width="12" Height="12" HorizontalAlignment="Right" Margin="1,-4,-4,0" VerticalAlignment="Top" Background="{StaticResource TransparentBrush}">
                <Path Margin="1,3,0,0" Data="M 1,0 L6,0 A 2,2 90 0 1 8,2 L8,7 z" Fill="{StaticResource InvalidFocusedBrush}" />
                <Path Margin="1,3,0,0" Data="M 0,0 L2,0 L 8,6 L8,8" Fill="{StaticResource ThemeLightForegroundBrush}" />
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEditableResolved" Value="True">
              <Setter TargetName="TextBoxPresenter" Property="Visibility" Value="Visible" />
              <Setter TargetName="MultiSelectContentPanel" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="borderEditMode" Property="Visibility" Value="Visible" />
              <Setter TargetName="ToggleButton" Property="Grid.Column" Value="2" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="igShared:XamMultiColumnComboEditor" BasedOn="{StaticResource XamMultiColumnComboEditorStyle}" />

  <!-- *********************************  ComboHeaderCellControl Style  ********************************* -->
  <Style x:Key="ComboHeaderCellControlStyle" TargetType="igShared:ComboHeaderCellControl">
    <Setter Property="Foreground" Value="{StaticResource HeaderForegroundBrush}" />
    <Setter Property="Background" Value="{StaticResource HeaderBackgroundBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource HeaderBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource ComboCellBorderThickness}" />
    <Setter Property="Padding" Value="4" />
    <Setter Property="MinHeight" Value="24" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="igShared:ComboHeaderCellControl">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Bd_Hover" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Bd" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ValidationStates">
                <VisualState x:Name="Valid" />
                <VisualState x:Name="InvalidFocused" />
                <VisualState x:Name="InvalidUnfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <Rectangle x:Name="Bd_Hover" Fill="{StaticResource HeaderHoverBackgroundBrush}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{StaticResource ComboCellBorderMouseOverThickness}" Visibility="Collapsed" />
            <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="igShared:ComboHeaderCellControl" BasedOn="{StaticResource ComboHeaderCellControlStyle}" />

  <!-- *********************************  ComboCellControl Style  ********************************* -->
  <Style x:Key="ComboCellControlStyle" TargetType="igShared:ComboCellControl">
    <Setter Property="Foreground" Value="{StaticResource ThemeForegroundBrush}" />
    <Setter Property="Background" Value="{StaticResource CellItemBackgroundBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource CellItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource ComboCellBorderThickness}" />
    <Setter Property="Padding" Value="4" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="igShared:ComboCellControl">
          <Grid Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="mouseOverRectangle" Storyboard.TargetProperty="Opacity">
                      <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Opacity">
                      <SplineDoubleKeyFrame KeyTime="0" Value=".55" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="Selected">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="selectedRectangle" Storyboard.TargetProperty="Opacity">
                      <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unfocused" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="ValidationStates">
                <VisualState x:Name="Valid" />
                <VisualState x:Name="InvalidFocused" />
                <VisualState x:Name="InvalidUnfocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <Rectangle x:Name="mouseOverRectangle" Fill="{StaticResource CellItemHoverBackgroundBrush}" Stroke="{StaticResource CellItemBorderBrush}" StrokeThickness="{StaticResource ComboCellBorderMouseOverThickness}" IsHitTestVisible="False" Opacity="0" />
            <Rectangle x:Name="selectedRectangle" Fill="{StaticResource CellItemSelectedBackgroundBrush}" Stroke="{StaticResource CellItemSelectedBorderBrush}" StrokeThickness="{StaticResource ComboCellBorderSelectedThickness}" IsHitTestVisible="False" Opacity="0" />
            <Rectangle x:Name="FocusVisualElement" Fill="{StaticResource CellItemFocusBackgroundBrush}" Stroke="{StaticResource CellItemFocusBorderBrush}" StrokeThickness="{StaticResource ComboCellBorderFocusThickness}" Visibility="Collapsed" />
            <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="igShared:ComboCellControl" BasedOn="{StaticResource ComboCellControlStyle}" />

  <!-- *********************************  RowSelectionCheckBoxCellControl Style  ********************************* -->
  <Style x:Key="RowSelectionCheckBoxCellControlStyle" TargetType="igShared:RowSelectionCheckBoxCellControl">
    <Setter Property="Background" Value="{StaticResource CellItemBackgroundBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource CellItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource ComboCellBorderThickness}" />
    <Setter Property="Padding" Value="4" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="igShared:RowSelectionCheckBoxCellControl">
          <Grid Background="{TemplateBinding Background}">
            <CheckBox x:Name="Checkbox" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" IsHitTestVisible="False" Style="{StaticResource CheckBoxStyle}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="igShared:RowSelectionCheckBoxCellControl" BasedOn="{StaticResource RowSelectionCheckBoxCellControlStyle}" />

  <!-- *********************************  RowSelectionCheckBoxHeaderCellControl Style  ********************************* -->
  <Style x:Key="RowSelectionCheckBoxHeaderCellControlStyle" TargetType="igShared:RowSelectionCheckBoxHeaderCellControl">
    <Setter Property="Background" Value="{StaticResource HeaderBackgroundBrush}" />
    <Setter Property="Padding" Value="4" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="igShared:RowSelectionCheckBoxHeaderCellControl">
          <Grid>
            <Rectangle Fill="{TemplateBinding Background}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="igShared:RowSelectionCheckBoxHeaderCellControl" BasedOn="{StaticResource RowSelectionCheckBoxHeaderCellControlStyle}" />

  <!-- *********************************  HighlightingTextBlock Style  ********************************* -->
  <Style x:Key="HighlightingTextBlockStyle" TargetType="igControlsPrim:HighlightingTextBlock">
    <Setter Property="Highlight" Value="{StaticResource TextBoxSelectionBackgroundBrush}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="igControlsPrim:HighlightingTextBlock">
          <Grid>
            <TextBlock x:Name="TextBlock" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="igControlsPrim:HighlightingTextBlock" BasedOn="{StaticResource HighlightingTextBlockStyle}" />
</ResourceDictionary>