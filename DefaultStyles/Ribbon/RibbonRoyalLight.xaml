    <ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:compModel="clr-namespace:System.ComponentModel;assembly=PresentationFramework"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:igEditors="http://infragistics.com/Editors"
	xmlns:igRibbon="http://infragistics.com/Ribbon"
	xmlns:igThemes="http://infragistics.com/Themes"
	xmlns:igWindows="http://infragistics.com/Windows"
	xmlns:interop="clr-namespace:System.Windows.Interop;assembly=PresentationFramework"
	xmlns:luna="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Luna"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:sys="clr-namespace:System;assembly=mscorlib"
	xmlns:themes="http://infragistics.com/Themes"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:ig="http://schemas.infragistics.com/xaml"
	mc:Ignorable="d">


    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="RibbonGeneric.xaml"/>
        <ResourceDictionary Source="RibbonScenic.xaml"/>
        <ResourceDictionary Source="RibbonRoyalLightBrushes.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
    <igRibbon:ContextualTabBaseColorToHoverBrushConverter x:Key="contextualTabBaseColorToHoverBrushConverter" />
    <igWindows:StringWithoutMnemonicsConverter x:Key="stringWithoutMnemonicsConverter" />

    <!-- *********************************  ToolTip Style  ********************************* -->
    <Style x:Key="ToolTipStyle" TargetType="ContentControl">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextNormalForegroundFillKey}}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource Self}, Path=(igRibbon:XamRibbon.Ribbon).PreferredFont, FallbackValue='Segoe UI'}" />
        <Setter Property="Background" Value="{StaticResource TooltipBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource TooltipBorderBrush}" />
        <Setter Property="Padding" Value="12,9" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Grid Margin="5">
                        <Grid>
                            <Border Background="{StaticResource TooltipShadowBrush}" CornerRadius="5" Margin="-4" Opacity="0.1" />
                            <Border Background="{StaticResource TooltipShadowBrush}" CornerRadius="4" Margin="-3" Opacity="0.3" />
                            <Border Background="{StaticResource TooltipShadowBrush}" CornerRadius="3" Margin="-2" Opacity="0.5" />
                            <Border Background="{StaticResource TooltipShadowBrush}" CornerRadius="2" Margin="-1" Opacity="0.7" />
                            <Rectangle Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}" StrokeThickness="{TemplateBinding BorderThickness}" />
                            <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ToolTip" BasedOn="{StaticResource ToolTipStyle}" />
     

 <!-- =================================================================== -->
    <!-- Scroll Bar, RepeatButton, ScrollBarThumb -->
    <!-- =================================================================== -->

  <!-- IncreaseRepeatButton - This is used by ScrollBar -->
    <Style x:Key="GalleryToolDropDownPresenter_IncreaseRepeatButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Border.CornerRadius" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Margin="1,0,0,0">
                        <Border SnapsToDevicePixels="True"  CornerRadius="0" Background="Transparent" Width="Auto" Height="Auto"/>
                        <Path x:Name="arrow" SnapsToDevicePixels="True" VerticalAlignment="Center"  Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarCenterFillKey}}" Stretch="Fill" Data="M0,0L9,0 4.5,5z" Width="8" Height="5" HorizontalAlignment="Center" Opacity="1"/>
                          </Grid>
                     <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarBorderDarkFillKey}}" TargetName="EnabledBorder"/>
                        </Trigger>-->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarHoverCenterFillKey}}"/>
                        </Trigger>
                         <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarPressedCenterFillKey}}"/>
                        </Trigger>                       
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
        
    <!-- DecreaseRepeatButton - This is used by ScrollBar -->
    <Style x:Key="GalleryToolDropDownPresenter_DecreaseRepeatButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Border.CornerRadius" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Margin="1,0,0,0">
                            <Border SnapsToDevicePixels="True"  CornerRadius="0" Background="Transparent" Width="Auto" Height="Auto"/>
                            <Path x:Name="arrow" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarCenterFillKey}}" Stretch="Fill" Width="8" Height="5" Data="M0,5L9,5 4.5,0z" HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <!--<Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarBorderDarkFillKey}}" TargetName="EnabledBorder"/>
                        </Trigger>-->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarHoverCenterFillKey}}"/>
                        </Trigger>
                         <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarPressedCenterFillKey}}"/>
                        </Trigger>                       
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
        
         <!-- Thumb - The Thumb is the draggable part of the Scrollbar -->
    <Style x:Key="GalleryToolDropDownPresenter_ScrollbarThumb" TargetType="{x:Type Thumb}" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Hover_FadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Hover_FadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Pressed_FadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Pressed_FadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Margin="1,0,0,0" x:Name="Grid">
                        <Grid x:Name="Normal">
                            <Rectangle x:Name="Thumb_Normal_Border" Width="6" Height="Auto" RadiusX="0" RadiusY="0" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarCenterFillKey}}" Opacity="1" />
                            <!--<Rectangle SnapsToDevicePixels="True" x:Name="Thumb_Normal_Center" RadiusX="0" RadiusY="0" Margin="0" Width="Auto" Height="Auto" Opacity="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarCenterFillKey}}" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarCenterFillKey}}" />-->
                        </Grid>
                        <Grid Opacity="0" x:Name="Hover">
                            <Rectangle Opacity="1" SnapsToDevicePixels="True" x:Name="Thumb_Hover_Border" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarHoverCenterFillKey}}" RadiusX="0" RadiusY="0" Width="6" Height="Auto" />
                            <!--<Rectangle Opacity="1" SnapsToDevicePixels="True" x:Name="Thumb_Hover_Center" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarHoverCenterFillKey}}" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarHoverCenterFillKey}}" RadiusX="0" RadiusY="0" Margin="0" Width="Auto" Height="Auto" />-->
                        </Grid>
                        <Grid Opacity="0" x:Name="Pressed">
                            <Rectangle Opacity="1" SnapsToDevicePixels="True" x:Name="Thumb_Pressed_Border" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarPressedCenterFillKey}}" RadiusX="0" RadiusY="0" Width="6" Height="Auto" />
                            <!--<Rectangle Opacity="1" SnapsToDevicePixels="True" x:Name="Thumb_Pressed_Center" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarPressedCenterFillKey}}" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarPressedCenterFillKey}}" RadiusX="0" RadiusY="0" Margin="0" Width="Auto" Height="Auto" />-->
                        </Grid>
                        <!--<Grid x:Name="ScrollbarGripper" Background="#00ffffff" d:LayoutOverrides="Width, Height, Margin" HorizontalAlignment="Center" VerticalAlignment="Center" Width="8" Height="8">
                            <Path Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="7" Width="8" Stretch="Fill" Opacity="0.7490196078431373" Data="M 0,6 C0,6 0,7 0,7 0,7 8,7 8,7 8,7 8,6 8,6 8,6 0,6 0,6 zM 0,4 C0,4 0,5 0,5 0,5 8,5 8,5 8,5 8,4 8,4 8,4 0,4 0,4 zM 0,2 C0,2 0,3 0,3 0,3 8,3 8,3 8,3 8,2 8,2 8,2 0,2 0,2 zM 0,0 C0,0 0,1 0,1 0,1 8,1 8,1 8,1 8,0 8,0 8,0 0,0 0,0 z" StrokeThickness="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarThumbGripperForegroundFillKey}}" SnapsToDevicePixels="True" />
                            <Path Margin="2,1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="7" Width="6" Stretch="Fill" Opacity="0.34901960784313724" Data="M 2,7 C2,7 2,8 2,8 2,8 8,8 8,8 8,8 8,7 8,7 8,7 2,7 2,7 zM 2,5 C2,5 2,6 2,6 2,6 8,6 8,6 8,6 8,5 8,5 8,5 2,5 2,5 zM 2,3 C2,3 2,4 2,4 2,4 8,4 8,4 8,4 8,3 8,3 8,3 2,3 2,3 zM 2,1 C2,1 2,2 2,2 2,2 8,2 8,2 8,2 8,1 8,1 8,1 2,1 2,1 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarThumbGripperBackgroundFillKey}}" SnapsToDevicePixels="True" />
                        </Grid>-->
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDragging" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="Pressed_FadeIn_BeginStoryboard" Storyboard="{StaticResource Pressed_FadeIn}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="Pressed_FadeOut_BeginStoryboard" Storyboard="{StaticResource Pressed_FadeOut}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Hover_FadeIn}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="Hover_FadeOut_BeginStoryboard" Storyboard="{StaticResource Hover_FadeOut}" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GalleryToolDropDownPresenter_Scrollbar" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot" Width="{StaticResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="18"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="18"/>
                        </Grid.RowDefinitions>

                        <Border SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarTrackCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarTrackCenterFillKey}}" BorderThickness="0"  Grid.RowSpan="3" x:Name="rectangle"/>

                        <RepeatButton x:Name="DecreaseRepeat" Focusable="False" Style="{StaticResource GalleryToolDropDownPresenter_DecreaseRepeatButton}" Command="ScrollBar.LineUpCommand"/>
                        <!--<Grid>
                                <Path SnapsToDevicePixels="True" VerticalAlignment="Top" Width="Auto" Height="Auto" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarArrowFillKey}}" Stretch="None" Data="M0,5L9,5 4.5,0z"/>
                            </Grid>-->


                        <!-- Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it -->
                        <Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
                            <Track.Thumb>
                                <Thumb Style="{StaticResource GalleryToolDropDownPresenter_ScrollbarThumb}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp" Focusable="False" Style="{StaticResource GalleryToolDropDownPresenter_ScrollRepeatButton}" Command="ScrollBar.PageDownCommand"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown" Focusable="False" Style="{StaticResource GalleryToolDropDownPresenter_ScrollRepeatButton}" Command="ScrollBar.PageUpCommand"/>
                            </Track.DecreaseRepeatButton>
                        </Track>

                        <RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Focusable="False" Style="{StaticResource GalleryToolDropDownPresenter_IncreaseRepeatButton}" Command="ScrollBar.LineDownCommand"/>
                    </Grid>

                    <!-- This uses a single template for ScrollBar and rotate it to be Horizontal
It also changes the commands so that the it does Left and Right instead of Up and Down Commands -->
                     <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Tag" TargetName="DecreaseRepeat" Value="ScrollBarMouseOverTrue" />
                            <Setter Property="Tag" TargetName="IncreaseRepeat" Value="ScrollBarMouseOverTrue" />
                        </Trigger>
                        <EventTrigger RoutedEvent="Mouse.MouseEnter" SourceName="rectangle" />
                        <Trigger Property="IsEnabled" SourceName="DecreaseRepeat" Value="True" />
                        <Trigger Property="Orientation" Value="Horizontal">

                            <!-- Rotate the ScrollBar from Vertical to Horizontal -->
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>

                            <!-- Track is bound to Orientation internally, so we need to rotate it back to Vertical -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />

                            <!-- Change the commands to do Horizontal commands -->
                            <Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat" />
                            <Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat" />
                            <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown" />
                            <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
             <Setter Property="Background" Value="{x:Null}" />
    </Style>
        
         <!-- ScrollViewer Styles for the GalleryToolDropDownPresenter -->
    <Style x:Key="GalleryToolDropDownPresenter_ScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" />

                        <!-- The visibility of the ScrollBars is controlled by the implementation fo the control -->
                        <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{StaticResource GalleryToolDropDownPresenter_Scrollbar}" Orientation="Horizontal" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" AutomationProperties.AutomationId="HorizontalScrollBar" />
                        <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{StaticResource GalleryToolDropDownPresenter_Scrollbar}" Orientation="Vertical" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" AutomationProperties.AutomationId="VerticalScrollBar" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- GalleryToolDropDownPresenter Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:GalleryToolDropDownPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:GalleryToolDropDownPresenter}">
                    <Border x:Name="Background" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterCenterFillKey}}" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <!-- JJD 11/8/07 added pre separator, visibility triggered off IsFirstInMenu property -->
                            <Rectangle x:Name="PreGallerySeparator" Grid.Row="0" Height="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterBorderFillKey}}" Visibility="Collapsed" />

                            <!-- JJD 11/1/07 - BR27851 - Set CanContentScroll to false to enable pixel level scrolling -->
                            <ScrollViewer Grid.Row="1" Margin="0,0,0,0" CanContentScroll="false" Focusable="false" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" Style="{StaticResource GalleryToolDropDownPresenter_ScrollViewer}">
                                <ItemsPresenter />
                            </ScrollViewer>

                            <!-- JJD 11/8/07 added post separator, visibility triggered off IsLastInMenu property -->
                            <Rectangle x:Name="PostGallerySeparator" Height="1" Grid.Row="2" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterBorderFillKey}}" Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- JJD 11/8/07 added pre separator, visibility triggered off IsFirstInMenu property -->
                        <Trigger Property="IsFirstInMenu" Value="False">
                            <Setter TargetName="PreGallerySeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <!-- JJD 11/8/07 added post separator, visibility triggered off IsLastInMenu property -->
                        <Trigger Property="IsLastInMenu" Value="False">
                            <Setter TargetName="PostGallerySeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ========== ScrollLeft Pager Button ========== -->
    <Style x:Key="{x:Static igRibbon:RibbonGroupCollection.PagerScrollLeftButtonStyleKey}" BasedOn="{StaticResource PagerScrollButtonBase}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Width="13" x:Name="grid">
                        <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonCenterGrayGradientFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonBorderDarkFillKey}}"  CornerRadius="0,0,0,0" x:Name="border" BorderThickness="1" SnapsToDevicePixels="True"/>
                        <Path Width="3" Height="5" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonGlyphFillKey}}" SnapsToDevicePixels="True" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Data="M 0,2 C0,2 0,3 0,3 0,3 1,3 1,3 1,3 1,4 1,4 1,4 2,4 2,4 2,4 2,5 2,5 2,5 3,5 3,5 3,5 3,0 3,0 3,0 2,0 2,0 2,0 2,1 2,1 2,1 1,1 1,1 1,1 1,2 1,2 1,2 0,2 0,2 z"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverBorderFillKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== ScrollRight Pager Button==========  -->
    <Style x:Key="{x:Static igRibbon:RibbonGroupCollection.PagerScrollRightButtonStyleKey}" BasedOn="{StaticResource PagerScrollButtonBase}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Width="13" x:Name="grid">
                        <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonCenterGrayGradientFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonBorderDarkFillKey}}"  CornerRadius="0,0,0,0" x:Name="border" BorderThickness="1" SnapsToDevicePixels="True"/>
                        <Path Width="3" Height="5" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonGlyphFillKey}}" SnapsToDevicePixels="True" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Data="M 3,2 C3,2 3,3 3,3 3,3 2,3 2,3 2,3 2,4 2,4 2,4 1,4 1,4 1,4 1,5 1,5 1,5 0,5 0,5 0,5 0,0 0,0 0,0 1,0 1,0 1,0 1,1 1,1 1,1 2,1 2,1 2,1 2,2 2,2 2,2 3,2 3,2 z"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverBorderFillKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static igRibbon:MenuTool.QuickCustomizeMenuDropDownArrowStyleKey}" TargetType="{x:Type Control}" BasedOn="{StaticResource GlyphStyleBase}">
  <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATCustomizeDropdownNormalForegroundFillKey}}"/>
   <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <igWindows:CardPanel>
                        <Grid HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,2,4,0" Width="Auto" Height="Auto">
                            <Path SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATCustomizeDropdownNormalBackgroundFillKey}}" Stretch="None" Data="M 0,0 C0,0 0,1 0,1 0,1 1,1 1,1 1,1 1,2 1,2 1,2 2,2 2,2 2,2 2,3 2,3 2,3 3,3 3,3 3,3 3,2 3,2 3,2 4,2 4,2 4,2 4,1 4,1 4,1 5,1 5,1 5,1 5,0 5,0 5,0 0,0 0,0 z" Width="5" d:LayoutOverrides="Height" Margin="0,4,0,0" />
                            <Path SnapsToDevicePixels="True" Fill="{TemplateBinding Foreground}" Stretch="None" Data="M 0,0 C0,0 0,1 0,1 0,1 1,1 1,1 1,1 1,2 1,2 1,2 2,2 2,2 2,2 2,3 2,3 2,3 3,3 3,3 3,3 3,2 3,2 3,2 4,2 4,2 4,2 4,1 4,1 4,1 5,1 5,1 5,1 5,0 5,0 5,0 0,0 0,0 z" d:LayoutOverrides="Width, Height" Margin="0,3,0,0" />
                            <Rectangle SnapsToDevicePixels="True" Height="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATCustomizeDropdownNormalBackgroundFillKey}}" Margin="0,0,0,0" VerticalAlignment="Top" Width="Auto" />
                            <Rectangle SnapsToDevicePixels="True" Width="5" Height="1" Fill="{TemplateBinding Foreground}" VerticalAlignment="Top" Margin="0,1,0,0" />
                        </Grid>
                    </igWindows:CardPanel>
    </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== Data Templates ========== -->
    <DataTemplate DataType="{x:Type igRibbon:RibbonGroupCollection}">
        <Grid>
            <ItemsControl Focusable="False" ItemsSource="{Binding}" Padding="0">
                <ItemsControl.Template>
                    <ControlTemplate TargetType="{x:Type ItemsControl}">
                        <igWindows:XamPager
							Focusable="False"
							ScrollLeftButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollLeftButtonStyleKey}}"
							ScrollRightButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollRightButtonStyleKey}}"
							ScrollViewer.CanContentScroll="True"
							ScrollViewer.HorizontalScrollBarVisibility="Auto"
							ScrollViewer.VerticalScrollBarVisibility="Hidden">
                            <ItemsPresenter Margin="{TemplateBinding Padding}" DataContext="{Binding Path=(igRibbon:XamRibbon.Ribbon).DataContext, RelativeSource={x:Static RelativeSource.Self}}"/>
                        </igWindows:XamPager>
                    </ControlTemplate>
                </ItemsControl.Template>
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <igRibbon:RibbonGroupPanel/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type igRibbon:ContextualTabGroup}">
        <Border BorderThickness="1,0" BorderBrush="#AFFFFFFF" SnapsToDevicePixels="True" Margin="0" >
            <igWindows:CardPanel>
                <Border BorderBrush="{Binding Path=BaseBackColorResolvedBrush}" BorderThickness="0,4,0,0" SnapsToDevicePixels="True" Margin="-1 0">
                    <Border SnapsToDevicePixels="True" x:Name="baseColorInCaption" Background="{Binding Path=BaseBackColorResolvedBrush}">
                        <Border.OpacityMask>
                            <SolidColorBrush Color="#33c90077"/>
                        </Border.OpacityMask>
                    </Border>
                </Border>
                <TextBlock
				x:Name="CaptionGroupLabel"
                Foreground="{Binding Path=BaseBackColorResolved, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF555555}"      
		        Text="{Binding Path=Caption}"
				VerticalAlignment="Center"
				TextAlignment="Center"
				Margin="8,0,8,0"
				TextTrimming="CharacterEllipsis"
				igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True"
				igWindows:ClippedTextToolTipService.AncestorTypeForToolTip="{x:Type ContentControl}"
				igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}"
                />
            </igWindows:CardPanel>
        </Border>
    </DataTemplate>
        
  
    <!-- =================================================================== -->
    <!-- TextEditorTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:TextEditorTool}">
        <Style.Resources>
              <Style TargetType="TextBox">
                    <Setter Property="CaretBrush" Value="{StaticResource CaretForegroundBrush}" />
                </Style>
        </Style.Resources>
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="4,0,4,0" />
        <Setter Property="Margin" Value="1,0,1,0" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:TextEditorTool}">
                    <!-- JM 09-05-18 TFS254718 - Change the StackPanel to a grid and bind the Width of the column containing the ComboBox to the EditAreaWidth property. -->
                    <Grid Background="#00000000">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="{TemplateBinding Property=EditAreaWidth}"/>
                        </Grid.ColumnDefinitions>
                        <igWindows:AutoDisabledImage Grid.Column="0" Width="16" Height="16" x:Name="Image" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Visibility="Collapsed" Source="{TemplateBinding igRibbon:TextEditorTool.ImageResolved}" />
                        <ContentPresenter x:Name="Caption" Grid.Column="1" Margin="0,-1,5,0" Visibility="{Binding Path=(igRibbon:ButtonTool.HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}" />
                        <Border x:Name="MainBorder" Grid.Column="2" CornerRadius="2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" BorderThickness="1,1,1,1" SnapsToDevicePixels="True" Width="{TemplateBinding EditAreaWidth}">
                            <Grid>
                                <TextBlock x:Name="TextBlock" Margin="2,-1,0,0" Text="{TemplateBinding DisplayText}" TextWrapping="{TemplateBinding TextWrapping}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextAlignment="{TemplateBinding TextAlignmentResolved}" />
                                <!-- SSP 6/24/11 TFS57835 Added InputMethod.PreferredImeState template binding. This property needs to be set
                                                    on the element that is given focus in the editors SetFocusToFocusSite.-->
                                <!-- SSP 11/14/11 TFS95730 - Added InputMethod.IsInputMethodEnabled template binding. -->
                                <TextBox Name="PART_FocusSite" AcceptsReturn="{TemplateBinding AcceptsReturn}" AcceptsTab="{TemplateBinding AcceptsTab}" Margin="0,-1,0,0" Padding="0,0,0,0" BorderThickness="0,0,0,0" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" TextWrapping="{TemplateBinding TextWrapping}" HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextAlignment="{TemplateBinding TextAlignmentResolved}" IsReadOnly="{TemplateBinding ReadOnly}" MaxLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ValueConstraint.MaxLength, Mode=OneWay}" Background="Transparent" BorderBrush="Transparent" ContextMenu="{TemplateBinding ContextMenu}" Visibility="Collapsed" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}" InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <!-- JJD 12/11/07 Added condition to check if we are in a menu before doing the FindAncestor for ToolMenuItem to prevent binding errors -->
                                <Condition Binding="{Binding Path=Location, RelativeSource={RelativeSource Self}, Converter={x:Static igRibbon:ToolLocationToIsInMenuConverter.Instance}}" Value="True" />
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:ToolMenuItem}, 1}}" Value="True" />
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Caption" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </MultiDataTrigger>

                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
                            <Setter TargetName="TextBlock" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                        </Trigger>

                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />

                            <!-- AS 12/1/09 TFS24129 - Default margin when in the footer toolbar -->
                            <Setter Property="Margin" Value="6,0,0,0" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <!--<Setter Property="Opacity" Value="0.3" />-->
                            <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledCenterFillKey}}" />
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledBorderFillKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="MainBorder">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                            <Setter Property="IsTabStop" Value="False" />
                            <Setter TargetName="PART_FocusSite" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_FocusSite" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter TargetName="TextBlock" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolCheckedInnerBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter TargetName="MainBorder" Property="CornerRadius" Value="2" />
                        </Trigger>
                        <Trigger Property="Location" Value="Ribbon">
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.HideAccessKey" Value="False">
                            <Setter TargetName="Caption" Property="RecognizesAccessKey" Value="True" />
                            <Setter TargetName="Caption" Property="Content" Value="{Binding Path=Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="igRibbon:RibbonToolHelper.SizingMode" Value="ImageOnly">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- MaskedEditorTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:MaskedEditorTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="4,0,4,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="SpinButtonStyle" Value="{StaticResource spinButtonStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:MaskedEditorTool}">
                    <!-- JM 09-05-18 TFS254718 - Change the StackPanel to a grid and bind the Width of the column containing the ComboBox to the EditAreaWidth property. -->
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="{TemplateBinding Property=EditAreaWidth}"/>
                        </Grid.ColumnDefinitions>
                        <igWindows:AutoDisabledImage Grid.Column="0" Width="16" Height="16" x:Name="Image" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Visibility="Collapsed" Source="{TemplateBinding igRibbon:TextEditorTool.ImageResolved}" />
                        <ContentPresenter x:Name="Caption" Grid.Column="1" Margin="0,-1,5,0" Visibility="{Binding Path=(igRibbon:ButtonTool.HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}" />
                        <Border x:Name="MainBorder" Grid.Column="2" CornerRadius="2" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" BorderThickness="1,1,1,1" Width="{TemplateBinding EditAreaWidth}">
                            <!--SSP 10/1/09 NAS10.1 - Spin Buttons - Enclosed in dock panel element so we can display spin buttons-->
                            <DockPanel>
                                <!--SSP 10/1/09 NAS10.1 - Spin Buttons -->
                                <Grid x:Name="PART_SpinButtons" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}" Margin="0,1">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="1" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                    <RepeatButton Style="{TemplateBinding SpinButtonStyle}" Focusable="false" Command="{x:Static igEditors:MaskedEditorCommands.SpinUp}" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.IncreaseGlyphKey}}" />
                                    <RepeatButton Style="{TemplateBinding SpinButtonStyle}" Focusable="false" Command="{x:Static igEditors:MaskedEditorCommands.SpinDown}" Grid.Row="2" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DecreaseGlyphKey}}" />
                                </Grid>
                                <Grid>
                                    <TextBlock x:Name="TextBlock" Margin="2,-1,0,0" Text="{TemplateBinding DisplayText}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                    <!-- SSP 3/29/12 IME - TFS107196 - Enclosed the SectionsList in a CardPanel and added ImeTextBox. 
													Also renamed SectionsList element to 'SectionsList' from 'PART_FocusSite' and assigned
													that name to 'CardPanel'
												-->
                                    <igWindows:CardPanel x:Name="PART_FocusSite" Visibility="Collapsed">
                                        <!-- SSP 6/24/11 TFS57835 Added InputMethod.PreferredImeState template binding. This property needs to be set
                                                        on the element that is given focus in the editors SetFocusToFocusSite.-->
                                        <!-- SSP 11/16/11 TFS95805 - Added InputMethod.IsInputMethodEnabled template binding. -->
                                        <igEditors:SectionsList x:Name="SectionsList" Margin="2,-1,0,0" ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Sections, Mode=OneWay}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FlowDirection="LeftToRight" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}" InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}" />
                                        <!-- SSP 3/29/12 IME - TFS107196 -->
                                        <TextBox x:Name="PART_InputTextBox" Visibility="Collapsed" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" TextAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource horizToTextAlignmentConverter}}" Background="Transparent" BorderBrush="Transparent" BorderThickness="0,0,0,0" Foreground="{TemplateBinding Foreground}" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}" />
                                    </igWindows:CardPanel>
                                </Grid>
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <!-- JJD 12/11/07 Added condition to check if we are in a menu before doing the FindAncestor for ToolMenuItem to prevent binding errors -->
                                <Condition Binding="{Binding Path=Location, RelativeSource={RelativeSource Self}, Converter={x:Static igRibbon:ToolLocationToIsInMenuConverter.Instance}}" Value="True" />
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:ToolMenuItem}, 1}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Caption" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </MultiDataTrigger>

                        <!-- SSP 3/29/12 IME - TFS107196 - Added the trigger that sets Visibility on sections 
														list and text box based on isTextBoxEntryEnabled. -->
                        <Trigger Property="IsTextBoxEntryEnabled" Value="True">
                            <Setter TargetName="SectionsList" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_InputTextBox" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
                            <Setter TargetName="TextBlock" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                        </Trigger>

                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />

                            <!-- AS 12/1/09 TFS24129 - Default margin when in the footer toolbar -->
                            <Setter Property="Margin" Value="6,0,0,0" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledCenterFillKey}}" />
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledBorderFillKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True" SourceName="MainBorder">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                            <Setter TargetName="PART_FocusSite" Property="Visibility" Value="Visible" />
                            <Setter TargetName="TextBlock" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="SectionsList" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter TargetName="PART_InputTextBox" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="HasCaption" Value="True">
                            <Setter TargetName="Caption" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter TargetName="MainBorder" Property="CornerRadius" Value="2" />
                        </Trigger>
                        <Trigger Property="Location" Value="Ribbon">
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.HideAccessKey" Value="False">
                            <Setter TargetName="Caption" Property="RecognizesAccessKey" Value="True" />
                            <Setter TargetName="Caption" Property="Content" Value="{Binding Path=Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="igRibbon:RibbonToolHelper.SizingMode" Value="ImageOnly">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>   
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
            </MultiTrigger>
            <Trigger Property="IsInEditMode" Value="True">     
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
        
    <!-- =================================================================== -->
    <!-- Styles for buttons in MenuButtonArea -->
    <!-- =================================================================== -->

    <!-- AS 11/8/07 BR27990  Moved up and adjusted the template to have a root level panel that could be used to provide the background -->
    <Style TargetType="{x:Type ContentControl}" x:Key="PlainContentControlStyle">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonGroupNormalCenterFillKey}}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <igWindows:CardPanel Background="{TemplateBinding Background}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" />
                    </igWindows:CardPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ========== Caption Button Styles ========== -->
    <!--LeftCaptionButton-->
    <Style x:Key="XamRibbonCaptionButton_Left" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0,2"/>
        <Setter Property="Width" Value="29"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="XamRibbonCaptionButton_Left" Background="#00000000">
                        <Border x:Name="Center" Margin="1" Background="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#CCFFFFFF}" CornerRadius="0,0,0,0" SnapsToDevicePixels="True" Visibility="Hidden" />
                        <Grid x:Name="Minimize" Width="11" Height="9" MinWidth="11" MinHeight="9" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Grid VerticalAlignment="Bottom" Width="11" Height="5">
                                <Rectangle x:Name="MinimizeGlyph" SnapsToDevicePixels="True" Height="2" VerticalAlignment="Bottom" Width="9" Margin=" 0 0 0 3" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMinimizeNormalBackgroundFillKey}}"/>
                            </Grid>
                        </Grid>
                        <Grid x:Name="MinimizeRestore" Width="12" Height="11" MinWidth="12" MinHeight="11" HorizontalAlignment="Center" VerticalAlignment="Center" IsHitTestVisible="False" Visibility="Collapsed">
                            <Path x:Name="MinimizeRestoreGlyph" Height="10" Width="10" SnapsToDevicePixels="True"
                                  Data="M 1,5 C1,5 7,5 7,5 7,5 7,6 7,6 7,6 7,7 7,7 7,7 7,9 7,9 7,9 1,9 1,9 1,9 1,5 1,5 zM 8,6 C8,6 8,3 8,3 8,3 3,3 3,3 3,3 3,2 3,2 3,2 9,2 9,2 9,2 9,6 9,6 9,6 8,6 8,6 zM 0,3 C0,3 0,10 0,10 0,10 8,10 8,10 8,10 8,7 8,7 8,7 10,7 10,7 10,7 10,0 10,0 10,0 2,0 2,0 2,0 2,3 2,3 2,3 0,3 0,3 z"
                                  Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMinimizeNormalBackgroundFillKey}}" Stretch="Fill" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">                           
                            <Setter TargetName="Minimize" Property="Opacity" Value="0.3"/>
                            <Setter TargetName="MinimizeRestore" Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Minimized">
                            <Setter TargetName="Minimize" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="MinimizeRestore" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Center" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="MinimizeGlyph" Property="Fill" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FFA4A4A4}" />
                            <Setter TargetName="MinimizeRestoreGlyph" Property="Fill" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FFA4A4A4}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Center" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Center" Property="Background" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#99FFFFFF}"/>
                            <Setter TargetName="MinimizeGlyph" Property="Fill" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#33000000}"/>
                            <Setter TargetName="MinimizeRestoreGlyph" Property="Fill" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#33000000}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- MiddleCaptionButton-->
    <Style x:Key="XamRibbonCaptionButton_Middle" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0,2"/>
        <Setter Property="Width" Value="29"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="XamRibbonCaptionButton_MiddleContainer" Background="#00000000">
                        <Border x:Name="Center" Margin="1" Background="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#CCFFFFFF}" CornerRadius="0,0,0,0" SnapsToDevicePixels="True" Visibility="Hidden" />
                        <Grid x:Name="Maximize" HorizontalAlignment="Center" VerticalAlignment="Center" IsHitTestVisible="False" Width="11" Height="11" MinWidth="11" MinHeight="11">
                            <Path x:Name="MaximizeGlyph" SnapsToDevicePixels="True" HorizontalAlignment="Center" VerticalAlignment="Center" Height="10" Width="10" 
                                  Data="M 1,3 C1,3 9,3 9,3 9,3 9,9 9,9 9,9 1,9 1,9 1,9 1,3 1,3 zM 0,0 C0,0 0,10 0,10 0,10 10,10 10,10 10,10 10,0 10,0 10,0 0,0 0,0 z"
                                  Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalBackgroundFillKey}}" Stretch="Fill" />
                        </Grid>
                        <Grid x:Name="MaximizeRestore" Width="12" Height="11" MinWidth="12" MinHeight="11" HorizontalAlignment="Center" VerticalAlignment="Center" IsHitTestVisible="False" Visibility="Collapsed">
                            <Path x:Name="MaximizeRestoreGlyph" Height="10" Width="10" SnapsToDevicePixels="True"
                                  Data="M 1,5 C1,5 7,5 7,5 7,5 7,6 7,6 7,6 7,7 7,7 7,7 7,9 7,9 7,9 1,9 1,9 1,9 1,5 1,5 zM 8,6 C8,6 8,3 8,3 8,3 3,3 3,3 3,3 3,2 3,2 3,2 9,2 9,2 9,2 9,6 9,6 9,6 8,6 8,6 zM 0,3 C0,3 0,10 0,10 0,10 8,10 8,10 8,10 8,7 8,7 8,7 10,7 10,7 10,7 10,0 10,0 10,0 2,0 2,0 2,0 2,3 2,3 2,3 0,3 0,3 z"
                                  Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalBackgroundFillKey}}" Stretch="Fill" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                        </MultiDataTrigger>
                        <!-- Trigger that will hide the left two caption buttons when the ResizeMode of the window is NoResize-->
                        <DataTrigger Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Maximized">
                            <Setter TargetName="Maximize" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="MaximizeRestore" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Maximize" Property="Opacity" Value="0.3"/>
                            <Setter TargetName="MaximizeRestore" Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsEnabled, ElementName=XamRibbonCaptionButton_Middle}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Center" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="MaximizeGlyph" Property="Fill" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FFA4A4A4}" />
                            <Setter TargetName="MaximizeRestoreGlyph" Property="Fill" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FFA4A4A4}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Center" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Center" Property="Background" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#99FFFFFF}"/>
                            <Setter TargetName="MaximizeGlyph" Property="Fill" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#33000000}"/>
                            <Setter TargetName="MaximizeRestoreGlyph" Property="Fill" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#33000000}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- RightCaptionButton -->
    <Style x:Key="XamRibbonCaptionButton_Right" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0,2,0,2"/>
        <Setter Property="Width" Value="29"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="XamRibbonCaptionButton_Right" Background="#00000000">
                        <Border x:Name="Center" Margin="1" Background="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#CCFFFFFF}" CornerRadius="0,0,0,0" SnapsToDevicePixels="True" Visibility="Hidden" />
                        <Grid x:Name="Close" Width="11" Height="11" MinWidth="11" MinHeight="11">
                            <Path x:Name="CloseGlyph" Width="10" Height="10" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True"
                                  Data="M8,0 L9,0 9,0.97399998 10,0.97399998 10,1.974 9,1.974 9,2.9360001 9,2.974 8,2.974 8,3.9739999 7,3.9739999 7,5.9360001 8,5.9360001 8,6.9360001 9,6.9360001 9,7.0640001 9,7.974 10,7.974 10,8.974 9,8.974 9,10 8,10 8,8.974 7,8.974&#xD;&#xA;7,8.9359999 7,7.974 7,7.9359999 6,7.9359999 6,7.0380001 3.9999999,7.0380001 3.9999999,7.9359999 3,7.9359999 3,8.9359999 2,8.9359999 2,10 1,10 1,8.9359999 0,8.9359999 0,7.9359999 1,7.9359999 1,7.0640001 1,6.9360001 2,6.9360001 2,5.9360001 2.9999998,5.9360001 2.9999998,3.9739999 2,3.9739999&#xD;&#xA;2,2.974 1,2.974 1,2.9360001 1,1.974 0,1.974 0,0.97399998 1,0.97399998 1,0.93600011 1,0.038000107 2,0.038000107 2,0.93600011 3,0.93600011 3,0.97399998 3,1.974 3.9999999,1.974 3.9999999,3.013 6,3.013 6,1.974 7,1.974 7,0.97399998 8,0.97399998 z"
                                  Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalForegroundFillKey}}" Stretch="Fill"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Close" Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Center" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="CloseGlyph" Property="Fill" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FFA4A4A4}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Center" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Center" Property="Background" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#99FFFFFF}"/>
                            <Setter TargetName="CloseGlyph" Property="Fill" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#33000000}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="{ComponentResourceKey {x:Type igRibbon:XamRibbon}, CaptionButtonAreaTemplate}" TargetType="{x:Type Control}">
        <StackPanel x:Name="captionButtonPanel" MinHeight="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).MinCaptionHeight, RelativeSource={RelativeSource TemplatedParent}}" Margin="1,0,-2,0" Orientation="Horizontal">
            <Button x:Name="XamRibbonCaptionButton_Left" Focusable="False" Style="{StaticResource XamRibbonCaptionButton_Left}"
				    Width="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonWidth, RelativeSource={RelativeSource TemplatedParent}}"
                    Height="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonHeight, RelativeSource={RelativeSource TemplatedParent}}"
                    igRibbon:RibbonWindowContentHost.ApplicationAccentColor="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}"
				    Command="igRibbon:RibbonWindowCommands.MinimizeCommand"
                    CommandTarget="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}}}" MinWidth="11" MinHeight="15"/>

            <Button x:Name="XamRibbonCaptionButton_Middle" Focusable="False" Style="{StaticResource XamRibbonCaptionButton_Middle}"
                    Width="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonWidth, RelativeSource={RelativeSource TemplatedParent}}"
                    Height="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonHeight, RelativeSource={RelativeSource TemplatedParent}}"
                    igRibbon:RibbonWindowContentHost.ApplicationAccentColor="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}"
                    Command="igRibbon:RibbonWindowCommands.MaximizeCommand"
                    CommandTarget="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}}}" MinWidth="11" MinHeight="15"/>

            <Button x:Name="XamRibbonCaptionButton_Right" Focusable="False" Style="{StaticResource XamRibbonCaptionButton_Right}"
                    Width="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonWidth, RelativeSource={RelativeSource TemplatedParent}}"
                    Height="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonHeight, RelativeSource={RelativeSource TemplatedParent}}"
                    igRibbon:RibbonWindowContentHost.ApplicationAccentColor="{Binding Path=(igRibbon:RibbonWindowContentHost.ApplicationAccentColor), RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}"
                    Command="igRibbon:RibbonWindowCommands.CloseCommand"
                    CommandTarget="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}}}" MinWidth="11" MinHeight="15"/>
        </StackPanel>
        <ControlTemplate.Triggers>
            <!-- Trigger that will hide the left two caption buttons when the ResizeMode of the window is NoResize-->
            <DataTrigger Binding="{Binding Path=ResizeMode, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="NoResize">
                <Setter TargetName="XamRibbonCaptionButton_Left" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="XamRibbonCaptionButton_Middle" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <!-- JJD 05/30/14 - TFS172787
                Added trigger that will hide the left two caption buttons when the WindowStyle of the window is ToolWindow -->
            <DataTrigger Binding="{Binding Path=WindowStyle, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="ToolWindow">
                <Setter TargetName="XamRibbonCaptionButton_Left" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="XamRibbonCaptionButton_Middle" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <!-- The CaptionButtonAreaWidth is really only used when glass is active. for all other cases we can
					 let the panel determine the width based on the buttons within. Otherwise this property must
					 also make the same check as above for when the caption buttons would be hidden-->
            <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True">
              <Setter Property="Width" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonAreaWidth, RelativeSource={RelativeSource TemplatedParent}}"/>
            </DataTrigger>
            <!-- JJD 05/17/10 - NA 2010 Volume 2 - Scenic Ribbon support-->
            <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsScenicTheme), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                <Setter TargetName="XamRibbonCaptionButton_Left" Property="Style" Value="{DynamicResource {x:Static igRibbon:RibbonWindowContentHost.ScenicMinimizeButtonStyleKey}}"/>
                <Setter TargetName="XamRibbonCaptionButton_Middle" Property="Style" Value="{DynamicResource {x:Static igRibbon:RibbonWindowContentHost.ScenicMaximizeRestoreButtonStyleKey}}"/>
                <Setter TargetName="XamRibbonCaptionButton_Right" Property="Style" Value="{DynamicResource {x:Static igRibbon:RibbonWindowContentHost.ScenicCloseWindowButtonStyleKey}}"/>
                <Setter TargetName="captionButtonPanel" Property="Margin" Value="1,4,5,0"/>
            </DataTrigger>
            <!-- Trigger that will change the command of the middle button to restore a maximized window -->
            <DataTrigger Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Maximized">
                <Setter TargetName="XamRibbonCaptionButton_Middle" Property="Command" Value="igRibbon:RibbonWindowCommands.RestoreCommand"/>
                <Setter TargetName="captionButtonPanel" Property="Margin" Value="1,-5,-3,0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Minimized">
                <Setter TargetName="XamRibbonCaptionButton_Left" Property="Command" Value="igRibbon:RibbonWindowCommands.RestoreCommand"/>
                <Setter TargetName="captionButtonPanel" Property="Margin" Value="1,0,1,0"/>
            </DataTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" SourceName="XamRibbonCaptionButton_Left" Value="False"/>
                    <Condition Property="IsEnabled" SourceName="XamRibbonCaptionButton_Middle" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="XamRibbonCaptionButton_Left" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="XamRibbonCaptionButton_Middle" Property="Visibility" Value="Collapsed"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- *********************************  RibbonButtonToolTemplate  ********************************* -->
    <ControlTemplate TargetType="{x:Type ButtonBase}" x:Key="RibbonButtonToolTemplate">
  <igRibbon:RibbonButtonChrome x:Name="chrome" IsPressed="{TemplateBinding IsPressed}" IsChecked="{TemplateBinding ToggleButton.IsChecked}" SnapsToDevicePixels="True" UseRoundedCorners="False">
            <Grid Margin="1" x:Name="chromeContentPanel" HorizontalAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" x:Name="row0"/>
                    <RowDefinition Height="Auto" x:Name="row1" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <igWindows:AutoDisabledImage Width="16" Height="16" x:Name="image"
                                             igRibbon:XamRibbon.KeyTipPlacementType="SmallImage"
                                             igWindows:Utilities.SnapElementToDevicePixels="True"
                                             Visibility="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}"
                                             Source="{TemplateBinding igRibbon:ButtonTool.ImageResolved}"/>
                <igRibbon:OuterGlowDecorator x:Name="textSmallGlow" 
					                        Grid.Column="1" 
					                        Margin="3,0,2,1"
					                        VerticalAlignment="Center">
                    <ContentPresenter x:Name="textSmall" Grid.Column="1"
                                      Content="{TemplateBinding igRibbon:ButtonTool.Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}"
                                      SnapsToDevicePixels="True"
                                      TextBlock.TextAlignment="Left"
                                      igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}"  />
                </igRibbon:OuterGlowDecorator>
                <igRibbon:LargeToolCaptionPresenter x:Name="textLarge" Grid.Row="2"
					Text="{TemplateBinding igRibbon:ButtonTool.Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}" Visibility="Collapsed" />
            </Grid>
        </igRibbon:RibbonButtonChrome>

        <ControlTemplate.Triggers>
              <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="igRibbon:ButtonTool.SizingMode" Value="ImageOnly" />
                    <Condition Property="igRibbon:ButtonTool.HasImage" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="textSmallGlow" Property="Visibility" Value="Collapsed"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="igRibbon:ButtonTool.SizingMode" Value="ImageAndTextLarge" />
                    <Condition Property="igRibbon:XamRibbon.Location" Value="Ribbon" />
                </MultiTrigger.Conditions>
                <Setter TargetName="textSmallGlow" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="textLarge" Property="Visibility" Value="Visible"/>
                <Setter TargetName="image" Property="Width" Value="32"/>
                <Setter TargetName="image" Property="Height" Value="32"/>
                <Setter TargetName="image" Property="Margin" Value="0,0,0,2"/>
                <Setter TargetName="row0" Property="Height" Value="Auto"/>
                <Setter TargetName="row1" Property="Height" Value="*"/>
                <Setter TargetName="chromeContentPanel" Property="Margin" Value="1,1,1,0"/>
            </MultiTrigger>

            <Trigger Property="igRibbon:XamRibbon.Location" Value="Ribbon">
                <Setter Property="HorizontalAlignment" Value="Left"/>
            </Trigger>

            <Trigger Property="igRibbon:XamRibbon.Location" Value="QuickAccessToolbar">
                <Setter Property="Margin" Value="0,-2,0,0"/>
                <Setter TargetName="chrome" Property="Padding" Value="0,2,0,0"/>
            </Trigger>
            <Trigger Property="igRibbon:XamRibbon.Location" Value="ApplicationMenuFooterToolbar">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                <Setter Property="Margin" Value="6,0,0,0"/>
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Location), RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="textSmallGlow" Property="IsGlowVisible" Value="True" />
            </MultiDataTrigger>

            <Trigger Property="igRibbon:XamRibbon.HideAccessKey" Value="False">
                <Setter TargetName="textSmall" Property="RecognizesAccessKey" Value="True"/>
                <Setter TargetName="textSmall" Property="Content" Value="{Binding Path=(igRibbon:ButtonTool.Caption), RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
            </Trigger>
            
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}"/>
            </Trigger>
            
             <MultiTrigger>
                  <MultiTrigger.Conditions>
                      <Condition Property="IsEnabled" Value="False" />
                      <Condition Property="ToggleButton.IsChecked" Value="True" />
                  </MultiTrigger.Conditions>
                  <Setter TargetName="textSmall" Property="Opacity" Value="0.3"/>
                 <Setter TargetName="textLarge" Property="Opacity" Value="0.3"/>
                 <Setter TargetName="textSmall" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}"/>
                 <Setter TargetName="textLarge" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}"/>
              </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- =================================================================== -->
    <!-- RibbonWindowContentHost Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:RibbonWindowContentHost}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.WindowBackgroundBrushKey}}"/>
        <Setter Property="BorderThickness" Value="0,0,0,0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Border.CornerRadius" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:RibbonWindowContentHost}">
                    <Grid>
                        <AdornerDecorator>

                            <igWindows:CardPanel Grid.IsSharedSizeScope="True" SnapsToDevicePixels="True">
                                <DockPanel x:Name="dockPanel" Panel.ZIndex="1" LastChildFill="False">
                                    <!--StatusBar Area-->
                                    <igWindows:DesiredSizeDecorator DockPanel.Dock="Bottom" x:Name="statusSize">
                                        <ContentPresenter 
                                            x:Name="StatusBarArea" 
                                            Margin="{TemplateBinding StatusBarAreaMargin}"  
                                            Content="{TemplateBinding StatusBar}"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </igWindows:DesiredSizeDecorator>
                                    
                                    <!-- Ribbon Area -->
                                    <igWindows:DesiredSizeDecorator DockPanel.Dock="Top" x:Name="ribbonSize">
                                        <igWindows:CardPanel>
                                            <ContentPresenter 
                                                x:Name="RibbonArea"  
                                                Margin="{TemplateBinding RibbonAreaMargin}"  
                                                Content="{TemplateBinding Ribbon}"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                            <!-- Caption Area - When No Ribbon is Present -->
                                            <Grid x:Name="CaptionArea" Margin="{TemplateBinding CaptionAreaMargin}"  Visibility="{TemplateBinding CaptionVisibility}">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto" />
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="Auto" />
                                                </Grid.ColumnDefinitions>
                                                <Border Grid.ColumnSpan="3" CornerRadius="0,0,0,0" x:Name="PART_XamRibbonCaption"
                                                                        Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelFillKey}}" />
                                                <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Height="1" Grid.ColumnSpan="3"
                                                                        Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelBottomSeparatorStrokeKey}}" Stroke="{x:Null}"/>
                                                <Border x:Name="PART_WindowIcon"  Background="Transparent" Grid.Column="0" >
                                                    <Image Stretch="None" HorizontalAlignment="Left" VerticalAlignment="Center"
											            Margin="6,0,3,0" Source="{TemplateBinding IconResolved}" />
                                                </Border>
                                                <ContentControl TextBlock.TextAlignment="Left" Grid.Column="1" Content="{Binding Path=Title, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Style="{DynamicResource {x:Static igRibbon:RibbonCaptionPanel.CaptionStyleKey}}" />
                                                <Control x:Name="captionButtonArea" Grid.Column="2" Focusable="False"
                                                    igRibbon:RibbonWindowContentHost.CaptionButtonVersion="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonVersion, RelativeSource={RelativeSource Self}}"                                                         
											        Template="{DynamicResource {ComponentResourceKey {x:Type igRibbon:XamRibbon}, CaptionButtonAreaTemplate}}"/>
                                            </Grid>
                                        </igWindows:CardPanel>
                                    </igWindows:DesiredSizeDecorator>
                                </DockPanel>

                                <Grid x:Name="ContentArea">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="{Binding Path=ChildDesiredHeight, ElementName=ribbonSize}"/>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="{Binding Path=ChildDesiredHeight, ElementName=statusSize}"/>
                                    </Grid.RowDefinitions>

                                    <!-- Background (covers both content and statusbar areas -->
                                    <Border x:Name="backgroundBorder" Grid.Row="1" Grid.RowSpan="2" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}" Margin="{TemplateBinding BackgroundAreaMargin}"/>

                                    <!-- Ribbon Area -->
                                    <!--<ContentPresenter Content ="{TemplateBinding Ribbon}" />-->

                                    <!-- Content Area-->
                                    <ContentPresenter x:Name="PART_Content" Grid.Row="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding ContentAreaMargin}"/>

                                    <!-- StatusBar Area -->
                                    <!--<ContentPresenter Grid.Row="2" Content ="{TemplateBinding StatusBar}" />-->

                                </Grid>

                            </igWindows:CardPanel>
                        </AdornerDecorator>
                    </Grid>
                    <ControlTemplate.Triggers>
   
                        <!-- Glass is active - Make caption transparent -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=CaptionVisibility, RelativeSource={x:Static RelativeSource.Self}}" Value="Visible" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="PART_XamRibbonCaption" Value="Transparent"/>
                            <Setter Property="Visibility" TargetName="captionButtonArea" Value="Hidden"/>
                        </MultiDataTrigger>

                        <!-- Toggle the Caption Styling when Inactive -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                                <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False" />
                                <Condition Binding="{Binding Path=CaptionVisibility, RelativeSource={x:Static RelativeSource.Self}}" Value="Visible" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="PART_XamRibbonCaption" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelInactiveFillKey}}" />
                        </MultiDataTrigger>

                        <!-- Conditionally provide borders around the content -->
                        <Trigger Property="igRibbon:XamRibbon.IsGlassActive" Value="False">
                            <Setter Property="BorderThickness" TargetName="backgroundBorder" Value="1,0,1,1" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Ribbon.IsMinimized, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="backgroundBorder" Value="0,1,0,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Ribbon.AutoHideState, RelativeSource={RelativeSource Self}}" Value="Hidden" />
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="backgroundBorder" Value="0,1,0,0" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Ribbon.IsMinimized, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="backgroundBorder" Value="1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Ribbon.AutoHideState, RelativeSource={RelativeSource Self}}" Value="Hidden" />
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="backgroundBorder" Value="1" />
                        </MultiDataTrigger>
                        <Trigger Property="IsRenderingMinimizedWindow" Value="True">
                            <Setter Property="Visibility" TargetName="statusSize" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="ContentArea" Value="Collapsed" />
                            <Setter Property="LastChildFill" TargetName="dockPanel" Value="True" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- XamRibbon Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:XamRibbon}">
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Template" Value="{StaticResource office2010RibbonTemplate}" />
        <Setter Property="ApplicationAccentColor" Value="{StaticResource Color_013}"/>
    </Style>

    <!-- =================================================================== -->
    <!-- MenuTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:MenuTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:MenuTool}">
                    <ContentPresenter x:Name="PART_MenuToolPresenterSite" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="Location" Value="Ribbon">
                            <Setter Property="HorizontalAlignment" Value="Left" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            
             <!--<Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
            </Trigger>-->

            <Trigger Property="Location" Value="ApplicationMenu">
                <Setter Property="UseLargeImages" Value="True" />
            </Trigger>

            <!-- AS 12/1/09 TFS24129 - Default margin when in the footer toolbar -->
            <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                <Setter Property="Margin" Value="6,0,0,0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolMenuItemDescription_ContentPresenter" TargetType="{x:Type ContentPresenter}">
        <Style.Resources>
            <DataTemplate DataType="{x:Type sys:String}">
                <TextBlock TextWrapping="Wrap" TextAlignment="Left" Text="{Binding}" />
            </DataTemplate>
        </Style.Resources>
    </Style>

    <!-- JJD 12/4/07 - BR28873 -->
    <!-- Added Border style for menu item icon area background -->
    <Style x:Key="MenuItem_IconAreaBackground" TargetType="{x:Type Border}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuToolPresenterLeftColumnFillKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionStrokeFillKey}}" />
        <Setter Property="BorderThickness" Value="0,0,1,0" />
    </Style>
    

    <!-- SubmenuItem Template (used for NON-menu tools inside a menu)        -->
    <!-- =================================================================== -->
    <ControlTemplate x:Key="{x:Static igRibbon:MenuToolBase.SubmenuItemTemplateKey}" TargetType="{x:Type igRibbon:ToolMenuItem}">
        <Grid Margin="0,0,0,0">
            <Grid x:Name="ApplicationMenuItem_Hover" Height="Auto" Width="Auto" Visibility="Collapsed">
                <Rectangle SnapsToDevicePixels="True" x:Name="BorderDark" Width="Auto" Height="Auto" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderFillKey}}"  />
                <Border SnapsToDevicePixels="True" Margin="1,1,1,1" x:Name="BorderLight_CenterFill" Width="Auto" Height="Auto" 
                        Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectCenterFillKey}}" 
                        BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderLightFillKey}}" BorderThickness="0" />
            </Grid>
            <Grid x:Name="MenuItem_Hover" Height="Auto" Width="Auto" Visibility="Collapsed">
                <Border SnapsToDevicePixels="True" x:Name="BorderDark1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}" CornerRadius="0" >
                    <Rectangle SnapsToDevicePixels="True" x:Name="BorderLight_CenterFill1" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderLightFillKey}}" StrokeThickness="0" />
                </Border>
            </Grid>
            <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition MinWidth="17" Width="Auto" x:Name="iconColumn" SharedSizeGroup="MenuItemIconColumnGroup" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                        <ColumnDefinition Width="14" />
                    </Grid.ColumnDefinitions>

                    <!--  icon area background element-->
                    <Border x:Name="IconAreaBackground" Style="{StaticResource MenuItem_IconAreaBackground}" />

                    <!-- OrangeBox for IsChecked -->
                    <Border x:Name="OrangeCheckBox" SnapsToDevicePixels="True" HorizontalAlignment="Center" VerticalAlignment="Center" BorderThickness="1" Margin="1,1,2,1">
                        <!--Margin="2">-->

                        <igWindows:CardPanel>
                            <!-- Small check mark -->
                            <Grid x:Name="GlyphPanel" Visibility="Collapsed" FlowDirection="LeftToRight" Background="{x:Null}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="16" Height="16" igRibbon:XamRibbon.KeyTipPlacementType="CheckIndicator">
                                <Path Margin="0,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Height="9" Width="10" Stretch="Fill" Opacity="1" Data="M 1.6287 3.9238 L 0.2 5.4861 L 4.2 8.8 L 9.8 1.5094 L 8.3 0.2667 L 4.1287 5.995 L 1.6287 3.9238 Z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}" SnapsToDevicePixels="True" />
                             </Grid>

                            <!-- Big check mark -->
                            <Grid FlowDirection="LeftToRight" x:Name="GlyphPanel32" Height="32" Width="32" Background="{x:Null}" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed" igRibbon:XamRibbon.KeyTipPlacementType="CheckIndicator">
                                <Path Margin="0,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Height="17" Width="19" Stretch="Fill" Opacity="1" Data="M 2.2573 6.8477 L -0.6 9.9721 L 7.4 16.6 L 18.6 2.0187 L 15.6 -0.4667 L 7.2573 10.99 L 2.2573 6.8477 Z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}" SnapsToDevicePixels="True" />
                            </Grid>

                            <!-- icon -->
                            <ContentPresenter x:Name="Icon" Width="16" Height="16" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" HorizontalAlignment="Left" VerticalAlignment="Center" ContentSource="Icon" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </igWindows:CardPanel>
                    </Border>

                    <!-- content -->
                    <Grid x:Name="ContentArea" Grid.Column="1" VerticalAlignment="Center" Margin="0,0,1,0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" x:Name="descriptionRow" />
                        </Grid.RowDefinitions>

                        <!-- content -->
                        <ContentPresenter x:Name="Content" ContentSource="Header" Margin="15,0,7,0" HorizontalAlignment="Stretch" VerticalAlignment="Center" RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <ContentPresenter Style="{StaticResource ToolMenuItemDescription_ContentPresenter}" Grid.Row="1" MaxWidth="{Binding ElementName=Content, Path=ActualWidth}" Name="MenuItemDescription" Margin="6,0,6,1" Content="{TemplateBinding igRibbon:MenuToolBase.MenuItemDescription}" />
                    </Grid>

                    <!-- InputGestureText -->
                    <TextBlock x:Name="InputGestureText" VerticalAlignment="Center" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="0,0,0,0" DockPanel.Dock="Right" />

                </Grid>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger Property="IsEnabled" Value="false">
                  <!--<Setter Property="Opacity" Value="0.3" />-->
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </Trigger>

            <Trigger Property="UseLargeImage" Value="False">
                <Setter TargetName="Content" Property="Margin" Value="7,3,7,4" />
                <Setter TargetName="Icon" Property="Margin" Value="2,0,0,0" />
            </Trigger>

            <Trigger Property="UseLargeImage" Value="True">
                <Setter TargetName="Content" Property="Margin" Value="4,0,0,1" />
                <Setter TargetName="Icon" Property="Width" Value="32" />
                <Setter TargetName="Icon" Property="Height" Value="32" />
                <Setter TargetName="Icon" Property="Margin" Value="1" />
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed" />
            </Trigger>

            <Trigger Property="igRibbon:XamRibbon.Location" Value="ApplicationMenuRecentItems">
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed" />
            </Trigger>

            <Trigger Property="igRibbon:XamRibbon.Location" Value="ApplicationMenu">
                <Setter TargetName="OrangeCheckBox" Property="Margin" Value="4" />
                <Setter TargetName="Icon" Property="Margin" Value="1,1,1,1" />
            </Trigger>

            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Bd" Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="UseLargeImage" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ApplicationMenuItem_Hover" Property="Visibility" Value="Visible" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="UseLargeImage" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="MenuItem_Hover" Property="Visibility" Value="Visible" />
            </MultiTrigger>

            <!--========================== IsChecked Triggers ==========================-->
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="OrangeCheckBox" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.IsCheckedBoxCenterFillKey}}" />
                <Setter TargetName="OrangeCheckBox" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.IsCheckedBoxBorderFillKey}}" />
                <Setter TargetName="Bd" Property="Background" Value="Transparent" />
            </Trigger>

            <Trigger Property="Icon" Value="{x:Null}">
                <!--<Setter TargetName="OrangeCheckBox" Property="Background" Value="Transparent" />
                <Setter TargetName="OrangeCheckBox" Property="BorderBrush" Value="Transparent" />-->
                <Setter Property="Visibility" TargetName="Icon" Value="Hidden" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="UseLargeImage" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="UseLargeImage" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="GlyphPanel32" Value="Visible" />
            </MultiTrigger>

            <!-- END  IsChecked Triggers ==========================-->

            <Trigger Property="igRibbon:MenuToolBase.HasMenuItemDescription" Value="False">
                <Setter TargetName="descriptionRow" Property="Height" Value="0" />
            </Trigger>

            <Trigger Property="igRibbon:MenuToolBase.HasMenuItemDescription" Value="True">
                <Setter TargetName="Content" Property="TextBlock.FontWeight" Value="Bold" />
                <Setter TargetName="Content" Property="Margin" Value="6,4,0,1" />
                <Setter TargetName="Content" Property="MinWidth" Value="{Binding Path=MenuItemDescriptionMinWidth, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="MenuItemDescription" Property="Margin" Value="6,0,6,4" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsCheckable" Value="False" />
                    <Condition Property="Location" Value="ApplicationMenuRecentItems" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="OrangeCheckBox" Value="Collapsed" />
                <Setter Property="SharedSizeGroup" TargetName="iconColumn" Value="{x:Null}" />
                <Setter Property="MinWidth" TargetName="iconColumn" Value="0" />
            </MultiTrigger>

            <Trigger Property="IsSeparator" Value="True">
                <Setter Property="Grid.ColumnSpan" TargetName="ContentArea" Value="3" />
                <Setter Property="Visibility" TargetName="InputGestureText" Value="Collapsed" />
                <Setter Property="Margin" TargetName="OrangeCheckBox" Value="2,0,3,0" />
                <Setter Property="Visibility" TargetName="Icon" Value="Hidden" />
                <Setter Property="Height" TargetName="Icon" Value="1" />
                <Setter Property="Margin" TargetName="Content" Value="5,0,0,0" />
                <Setter Property="Margin" TargetName="ContentArea" Value="0" />
                <Setter Property="IsHitTestVisible" Value="False" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSeparator" Value="True" />
                    <Condition Property="UseLargeImage" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" TargetName="Content" Value="2,0,0,0" />
            </MultiTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!-- =================================================================== -->
    <!-- SubmenuHeader Template (used for menu tools inside another menu)    -->
    <!-- =================================================================== -->
    <ControlTemplate x:Key="{x:Static igRibbon:MenuToolBase.SubmenuHeaderTemplateKey}" TargetType="{x:Type igRibbon:ToolMenuItem}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="ApplicationMenu_SideSelect_SecondaryHover" x:Name="Timeline1">
                <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Storyboard.TargetProperty="(UIElement.Visibility)">
                    <DiscreteObjectKeyFrame KeyTime="00:00:00.4000000" Value="{x:Static Visibility.Visible}"/>
                </ObjectAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Width="Auto" Height="Auto" Margin="0">
            <Grid x:Name="MenuItem_Hover" Height="Auto" Width="Auto" Visibility="Collapsed">
                <Rectangle SnapsToDevicePixels="True" x:Name="BorderDark1" Width="Auto" Height="Auto" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}" RadiusX="0" RadiusY="0"/>
                <Border SnapsToDevicePixels="True" Margin="1,1,1,1" x:Name="BorderLight_CenterFill1" Width="Auto" Height="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderLightFillKey}}" BorderThickness="0" CornerRadius="0"/>
            </Grid>
            <Grid d:LayoutOverrides="HorizontalAlignment" x:Name="ApplicationMenu_SideSelect_SecondaryButton" Visibility="Collapsed"  VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Width="Auto"  Height="Auto" Background="#00000000">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="HottrackLeftPortion" Width="*"/>
                    <ColumnDefinition x:Name="HottrackRightPortion" Width="24"/>
                </Grid.ColumnDefinitions>

                <Rectangle 
			x:Name="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" 
			Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderFillKey}}" 
			RadiusX="0" RadiusY="0" 
			HorizontalAlignment="Stretch" 
			Margin="0,0,0,0" 
			VerticalAlignment="Stretch" 
			SnapsToDevicePixels="True" 
			Visibility="Collapsed" 
			Grid.ColumnSpan="2"/>

                <Rectangle 
			x:Name="ApplicationMenu_SideSelect_Secondary_BorderLightFill"
			SnapsToDevicePixels="True" 
			Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderLightFillKey}}" 
			RadiusX="0" RadiusY="0" Margin="1,1,1,1" 
			VerticalAlignment="Stretch" 
			Visibility="Collapsed" 
			Grid.ColumnSpan="2"/>

                <Rectangle
			x:Name="ApplicationMenu_SideSelect_CenterFillSecondary"
			SnapsToDevicePixels="True"
			Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectCenterSecondaryFillKey}}"
			RadiusX="0" RadiusY="0"
			Margin="2,2,2,2"
			Visibility="Collapsed"
			Grid.ColumnSpan="2"/>

                <Border
			x:Name="ApplicationMenu_SideSelect_CenterFill"
			SnapsToDevicePixels="True"
			HorizontalAlignment="Stretch"
			Margin="2,2,2,2"
			Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectCenterFillKey}}"
			CornerRadius="0"
			Visibility="Collapsed"
			Grid.ColumnSpan="1"/>

                <Border 
			x:Name="ApplicationMenu_SideSelect_SecondarySideHover"
			Visibility="Collapsed" 
			HorizontalAlignment="Stretch" 
			Margin="0,2,2,2"
			Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectCenterFillKey}}" 
			CornerRadius="0" 
			SnapsToDevicePixels="True" 
			Grid.Column="1"/>

                <Rectangle 
			x:Name="ApplicationMenu_SideSelect_Divider" 
			Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderFillKey}}" 
			SnapsToDevicePixels="True" 
			RadiusX="0" RadiusY="0" 
			HorizontalAlignment="Right" 
			Margin="0,1,0,1" 
			Width="1"
			 Visibility="Collapsed" />

                <Border Opacity="0" HorizontalAlignment="Stretch" Margin="3,3,3,3" x:Name="border" Width="Auto" Height="Auto" Grid.ColumnSpan="2"/>
            </Grid>
            <Border Name="Bd"
				    Background="Transparent"
				    BorderThickness="{TemplateBinding BorderThickness}"
				    BorderBrush="{TemplateBinding BorderBrush}"
				    SnapsToDevicePixels="true">
                <Grid>

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition x:Name="arrowColumn" Width="23" />
                    </Grid.ColumnDefinitions>

                    <Button x:Name="PART_SegmentedButton" Background="Transparent" 
						 Style="{StaticResource PlainContentControlStyle}">

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                            </Grid.ColumnDefinitions>

                            <Border x:Name="IconAreaBackground" Style="{StaticResource MenuItem_IconAreaBackground}"/>

                            <!-- OrangeBox for IsChecked -->
                            <Border x:Name="OrangeCheckBox"
								SnapsToDevicePixels="True"
								BorderThickness="1" CornerRadius="0"
								Margin="1,1,2,1"
								HorizontalAlignment="Center"
								VerticalAlignment="Center" >

                                <igWindows:CardPanel>
                                    <!-- Small check mark -->
                                    <Grid x:Name="GlyphPanel" Visibility="Collapsed" FlowDirection="LeftToRight" Background="{x:Null}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="16" Height="16" igRibbon:XamRibbon.KeyTipPlacementType="CheckIndicator">
                                        <Path Margin="0,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Height="9" Width="10" Stretch="Fill" Opacity="1" Data="M 1.6287 3.9238 L 0.2 5.4861 L 4.2 8.8 L 9.8 1.5094 L 8.3 0.2667 L 4.1287 5.995 L 1.6287 3.9238 Z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}" SnapsToDevicePixels="True" />
                                     </Grid>

                                    <!-- Big check mark -->
                                    <Grid FlowDirection="LeftToRight" x:Name="GlyphPanel32" Height="32" Width="32" Background="{x:Null}" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed" igRibbon:XamRibbon.KeyTipPlacementType="CheckIndicator">
                                        <Path Margin="0,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Height="17" Width="19" Stretch="Fill" Opacity="1" Data="M 2.2573 6.8477 L -0.6 9.9721 L 7.4 16.6 L 18.6 2.0187 L 15.6 -0.4667 L 7.2573 10.99 L 2.2573 6.8477 Z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}" SnapsToDevicePixels="True" />
                                    </Grid>

                                    <!-- icon -->
                                    <ContentPresenter x:Name="Icon" Width="16" Height="16"
										igRibbon:XamRibbon.KeyTipPlacementType="SmallImage"
										HorizontalAlignment="Left"
										VerticalAlignment="Center"
										ContentSource="Icon"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </igWindows:CardPanel>
                            </Border>

                            <!-- content -->
                            <Grid Grid.Column="1" VerticalAlignment="Center" Margin="0,0,1,0">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*" x:Name="descriptionRow"/>
                                </Grid.RowDefinitions>

                                <!-- content -->
                                <ContentPresenter Name="Content"
												 Grid.Column="1"
												 ContentSource="Header"
												 Margin="8,0,5,1"
												 RecognizesAccessKey="true"
												 SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
												 HorizontalAlignment="Stretch"
												 VerticalAlignment="Center"/>

                                <ContentPresenter Style="{StaticResource ToolMenuItemDescription_ContentPresenter}" Grid.Row="1" MaxWidth="{Binding ElementName=Content, Path=ActualWidth}" Name="MenuItemDescription"  Margin="6,0,6,1" Content="{TemplateBinding igRibbon:MenuToolBase.MenuItemDescription}"/>
                            </Grid>
                        </Grid>
                    </Button>

                    <!-- Glyph Arrow-->
                    <Control Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuItemDropDownArrowStyleKey}}"
									x:Name="Menu_Arrow" Margin="3,0,0,0" DockPanel.Dock="Right"
									igRibbon:XamRibbon.KeyTipPlacementType="DropDownButton" Grid.Column="1"
									HorizontalAlignment="Center" VerticalAlignment="Center" Width="Auto" Height="Auto" />

                    <!-- popup -->
                    <Popup Name="PART_Popup"
								AllowsTransparency="true"
								Placement="Right"
								VerticalOffset="-3"
								Focusable="false"
								IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                        <AdornerDecorator>
                            <luna:SystemDropShadowChrome Name="Shdw" Color="Transparent">

                                <Grid HorizontalAlignment="Stretch" x:Name="SubMenuPopUp" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                                    <Rectangle Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderDarkFillKey}}" RadiusX="0" RadiusY="0" HorizontalAlignment="Stretch" Margin="0,0,0,0" x:Name="BorderDark" VerticalAlignment="Stretch" Width="Auto" Height="Auto" SnapsToDevicePixels="True"/>
                                    <Rectangle Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderLightFillKey}}" RadiusX="0" RadiusY="0" HorizontalAlignment="Stretch" Margin="1,1,1,1" x:Name="BorderLight" VerticalAlignment="Stretch" Width="Auto" Height="Auto" SnapsToDevicePixels="True"/>
                                    <Border SnapsToDevicePixels="True" Margin="2,2,2,2" x:Name="Center" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpCenterFillKey}}" CornerRadius="0">

                                        <igWindows:PopupResizerDecorator
												Grid.ColumnSpan="2"
										    ResizeMode="{TemplateBinding ResizeMode}"
										    ResizerBarStyle="{DynamicResource {x:Static igRibbon:XamRibbon.PopupResizerBarStyleKey}}">
                                            <ScrollViewer x:Name="Popup_ScrollViewer"
										        VerticalScrollBarVisibility="{TemplateBinding PopupVerticalScrollBarVisibility}"
										        HorizontalScrollBarVisibility="Disabled"
															Style ="{StaticResource MenuScrollViewer}">
                                                <ItemsPresenter  Grid.IsSharedSizeScope="true" Margin="0"  KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </ScrollViewer>
                                        </igWindows:PopupResizerDecorator>
                                        <!--</Grid>-->
                                    </Border>
                                </Grid>
                            </luna:SystemDropShadowChrome>
                        </AdornerDecorator>
                    </Popup>
                </Grid>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsSubmenuOpen" Value="False">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"/>
            </Trigger>
            <Trigger Property="Location" Value="ApplicationMenu">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False" SourceName="PART_SegmentedButton">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </Trigger>
            <Trigger Property="UseLargeImage" Value="True">
                <Setter TargetName="Content" Property="Margin" Value="4,0,0,1"/>
                <Setter TargetName="Icon" Property="Width" Value="32" />
                <Setter TargetName="Icon" Property="Height" Value="32" />
                <Setter TargetName="arrowColumn" Property="Width" Value="25" />
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed"/>
            </Trigger>

            <!-- Initialize the elements when showing a small image -->
            <Trigger Property="UseLargeImage" Value="False">
                <Setter TargetName="Content" Property="Margin" Value="7,0,5,1"/>
                <Setter TargetName="HottrackRightPortion" Property="Width" Value="22"/>
                <Setter TargetName="Menu_Arrow" Property="Margin" Value="4,0,0,0"/>
                <Setter TargetName="Icon" Property="Margin" Value="2,0,0,0"/>
            </Trigger>

            <Trigger Property="igRibbon:XamRibbon.Location" Value="ApplicationMenu">
                <Setter TargetName="OrangeCheckBox" Property="Margin" Value="4"/>
                <Setter TargetName="Icon" Property="Margin" Value="1"/>
            </Trigger>

            <Trigger Property="igRibbon:XamRibbon.Location" Value="ApplicationMenuRecentItems">
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed"/>
            </Trigger>

            <Trigger Property="UseLargeImage" Value="False">
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderLightFillKey}}"/>
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Divider" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}"/>
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterSecondaryFillKey}}"/>
            </Trigger>

            <Trigger Property="IsSegmented" Value="True">
                <Setter Property="Command" TargetName="PART_SegmentedButton" Value="{x:Static igRibbon:MenuTool.SegmentedButtonCommand}" />
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Visibility" Value="Visible"/>
            </Trigger>

            <Trigger SourceName="PART_SegmentedButton" Property="IsEnabled" Value="False">
                <Setter Property="Foreground" TargetName="PART_SegmentedButton" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </Trigger>

            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                <Setter TargetName="Shdw" Property="Margin" Value="1 0 1 1" />
                <Setter TargetName="Shdw" Property="Color" Value="#19000000" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsEnabled" Value="True"/>
                    <Condition Property="IsSegmented" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_SecondaryButton" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="Visible"/>
                <Setter Property="Opacity" TargetName="border" Value="1"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="UseLargeImage" Value="True"/>
                    <Condition Property="IsSegmented" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="MenuItem_Hover" Property="Visibility" Value="Visible"/>
                <Setter Property="Fill" TargetName="BorderDark1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderFillKey}}"/>
                <Setter Property="Background" TargetName="BorderLight_CenterFill1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectCenterFillKey}}"/>
                <Setter Property="BorderBrush" TargetName="BorderLight_CenterFill1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderLightFillKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="UseLargeImage" Value="False"/>
                    <Condition Property="IsSegmented" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="MenuItem_Hover" Property="Visibility" Value="Visible"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSegmented" Value="True"/>
                    <Condition Property="UseLargeImage" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ApplicationMenu_SideSelect_SecondaryButton" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Margin" Value="0,4,0,4"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.IsSegmentedNonHottrackDividerFillKey}}"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Visibility" Value="Visible"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSegmented" Value="true"/>
                    <Condition Property="IsMouseOver" Value="True" SourceName="PART_SegmentedButton"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ApplicationMenu_SideSelect_CenterFill" Property="Visibility" Value="Visible"/>
            </MultiTrigger>

            <!-- ================= Trigger for enabled segmented button ================= -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="UseLargeImage" Value="False"/>
                    <Condition Property="IsSegmented" Value="True"/>
                    <Condition Property="IsEnabled" Value="True" SourceName="PART_SegmentedButton" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_Divider" Value="0,1,0,1"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_SecondaryButton" Value="Visible"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderLightFillKey}}"/>
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Divider" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}"/>
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}"/>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Value="1,2,2,2"/>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="2,2,0,2"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="Visible"/>

            </MultiTrigger>
            <!-- ================= END Trigger for enabled segmented button in MENU ================= -->

            <!-- ================= Trigger for disabled segmented button ================= -->
            <!-- For when in menu -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="true"/>
                    <Condition Property="IsSegmented" Value="True"/>
                    <Condition Property="UseLargeImage" Value="False"/>
                    <Condition Property="IsEnabled" Value="False" SourceName="PART_SegmentedButton" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_Divider" Value="0,1,0,1"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_SecondaryButton" Value="Visible"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuDisabledHottrackBorderDarkFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuDisabledHottrackBorderLightFillKey}}"/>
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuDisabledHottrackCenterFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Divider" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuDisabledHottrackBorderDarkFillKey}}"/>
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}"/>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Value="1,2,2,2"/>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="2,2,0,2"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="Visible"/>
                <Setter Property="Grid.ColumnSpan" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="1"/>
                <Setter Property="Grid.Column" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="1"/>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="0,2,2,2"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </MultiTrigger>

            <!-- For when in ApplicationMenu -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="true"/>
                    <Condition Property="IsSegmented" Value="True"/>
                    <Condition Property="UseLargeImage" Value="True"/>
                    <Condition Property="IsEnabled" Value="False" SourceName="PART_SegmentedButton" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_SecondaryButton" Value="Visible"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuDisabledSideSelectBorderDarkFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuDisabledSideSelectBorderLightFillKey}}"/>
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuDisabledSideSelectCenterFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Divider" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuDisabledSideSelectBorderDarkFillKey}}"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="Visible"/>
                <Setter Property="Grid.ColumnSpan" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="1"/>
                <Setter Property="Grid.Column" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="1"/>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="0,2,2,2"/>
            </MultiTrigger>
            <!-- ================= End Trigger for disabled segmented ================= -->

            <!-- ========== IsChecked Triggers for Default, Menu, ApplicationMenu ==========  -->
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="OrangeCheckBox" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.IsCheckedBoxCenterFillKey}}" />
                <Setter TargetName="OrangeCheckBox" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.IsCheckedBoxBorderFillKey}}" />
            </Trigger>

            <Trigger Property="Icon" Value="{x:Null}">
                <!--<Setter TargetName="OrangeCheckBox" Property="Background" Value="Transparent" />
                <Setter TargetName="OrangeCheckBox" Property="BorderBrush" Value="Transparent" />-->
                <Setter Property="Visibility" TargetName="Icon" Value="Hidden"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}"/>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="UseLargeImage" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}"/>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="UseLargeImage" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="GlyphPanel32" Value="Visible"/>
            </MultiTrigger>

            <!-- ==========  End IsChecked Triggers ==========  -->

            <Trigger Property="igRibbon:MenuToolBase.HasMenuItemDescription" Value="False">
                <Setter TargetName="descriptionRow" Property="Height" Value="0"/>
            </Trigger>

            <Trigger Property="igRibbon:MenuToolBase.HasMenuItemDescription" Value="True">
                <Setter TargetName="Content" Property="TextBlock.FontWeight" Value="Bold"/>
                <Setter TargetName="Content" Property="Margin" Value="6,4,5,1"/>
                <Setter TargetName="Content" Property="MinWidth" Value="{Binding Path=MenuItemDescriptionMinWidth, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="MenuItemDescription" Property="Margin" Value="6,0,6,4"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsSegmented" Value="True"/>
                    <Condition Property="IsSubmenuOpen" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ApplicationMenu_SideSelect_SecondaryButton" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_CenterFill" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Visibility" Value="Visible"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsSegmented" Value="True"/>
                    <Condition Property="IsSubmenuOpen" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ApplicationMenu_SideSelect_SecondaryButton" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Visibility" Value="Visible"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- =================================================================== -->
    <!-- ToolMenuItem Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:ToolMenuItem}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="TextBlock.TextAlignment" Value="Left" />
        <Setter Property="Background" Value="#00FFFFFF"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}"/>
        <Setter Property="Control.Template" Value ="{DynamicResource {x:Static igRibbon:MenuToolBase.SubmenuItemTemplateKey}}"/>
        <Style.Triggers>
            <Trigger Property="MenuItem.Role">
                <Setter Property="FrameworkElement.Margin">
                    <Setter.Value>
                        <Thickness>0,1,0,1</Thickness>
                    </Setter.Value>
                </Setter>
                <Setter Property="Control.Padding">
                    <Setter.Value>
                        <Thickness>6,3,6,3</Thickness>
                    </Setter.Value>
                </Setter>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <DynamicResource ResourceKey="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly=MenuItem}" />
                    </Setter.Value>
                </Setter>
                <Trigger.Value>
                    <x:Static Member="MenuItemRole.TopLevelHeader" />
                </Trigger.Value>
            </Trigger>
            <Trigger Property="MenuItem.Role">
                <Setter Property="DockPanel.Dock">
                    <Setter.Value>
                        <x:Static Member="Dock.Top" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Control.Padding">
                    <Setter.Value>
                        <Thickness>0,2,0,2</Thickness>
                    </Setter.Value>
                </Setter>
                <Setter Property="Control.Template" Value ="{DynamicResource {x:Static igRibbon:MenuToolBase.SubmenuHeaderTemplateKey}}"/>
                <Trigger.Value>
                    <x:Static Member="MenuItemRole.SubmenuHeader" />
                </Trigger.Value>
            </Trigger>
            <Trigger Property="MenuItem.Role">
                <Setter Property="DockPanel.Dock">
                    <Setter.Value>
                        <x:Static Member="Dock.Top" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Control.Padding">
                    <Setter.Value>
                        <Thickness>0,2,0,2</Thickness>
                    </Setter.Value>
                </Setter>
                <Trigger.Value>
                    <x:Static Member="MenuItemRole.SubmenuItem" />
                </Trigger.Value>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- MenuToolPresenter Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:MenuToolPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:MenuToolPresenter}">
                    <igWindows:CardPanel x:Name="ContentArea">
                        <igRibbon:MenuButtonArea x:Name="PART_MenuButtonArea" />
                        <ContentControl x:Name="PART_GalleryToolPreviewSite" Visibility="{TemplateBinding PreviewGalleryVisibility}"/>
                        <Popup Name="PART_Popup"
                               AllowsTransparency="true"
                               Placement="Bottom"
                               PlacementTarget="{Binding ElementName=ContentArea}"
                               Focusable="false"
                               IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                            <AdornerDecorator>
                                <luna:SystemDropShadowChrome Name="Shdw" Color="Transparent">
                                    <Border Name="SubMenuBorder" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderLightFillKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderDarkFillKey}}" CornerRadius="0">
                                        <Grid Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpCenterFillKey}}" Width="Auto" Height="Auto" Margin="1,1,1,1" >

                                            <igWindows:PopupResizerDecorator Grid.ColumnSpan="2" 
                                                                             ResizeMode="{TemplateBinding ResizeMode}"
                                                                             ResizerBarStyle="{DynamicResource {x:Static igRibbon:XamRibbon.PopupResizerBarStyleKey}}">
                                                <ScrollViewer x:Name="Popup_ScrollViewer"
                                                              VerticalScrollBarVisibility="{TemplateBinding PopupVerticalScrollBarVisibility}"
                                                              HorizontalScrollBarVisibility="Disabled"
															Style ="{StaticResource MenuScrollViewer}">
                                                    <ItemsPresenter Grid.IsSharedSizeScope="True"  Margin="0"  KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                </ScrollViewer>
                                            </igWindows:PopupResizerDecorator>
                                        </Grid>
                                    </Border>
                                </luna:SystemDropShadowChrome>
                            </AdornerDecorator>
                        </Popup>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSubmenuOpen" Value="False">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"/>
                        </Trigger>
                        <Trigger Property="PreviewGalleryVisibility" Value="Visible">
                            <Setter TargetName="PART_MenuButtonArea" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_Popup" Property="Placement" Value="RelativePoint"/>
                            <Setter TargetName="PART_Popup" Property="MinWidth" Value="{Binding Path=ActualWidth, ElementName=PART_GalleryToolPreviewSite}"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="Margin" Value="1 0 1 1" />
                            <Setter TargetName="Shdw" Property="Color" Value="#19000000" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

	<!-- =================================================================== -->
	<!-- MenuToolDropDownArrowStyleKey Style -->
	<!-- =================================================================== -->
	<Style x:Key="{x:Static igRibbon:MenuTool.MenuToolDropDownArrowStyleKey}" TargetType="{x:Type Control}" BasedOn="{StaticResource GlyphStyleBase}">
		<Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphHoverForegroundFillKey}}" />
		<Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphHoverBackgroundFillKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Control}">
					<igWindows:CardPanel>
						<Grid x:Name="containerGrid" HorizontalAlignment="Center" VerticalAlignment="Center">
							<!--<Path x:Name="arrowBG" SnapsToDevicePixels="True" Fill="{TemplateBinding Background}" Stretch="None" Data="M 0,0 C0,0 0,1 0,1 0,1 1,1 1,1 1,1 1,2 1,2 1,2 2,2 2,2 2,2 2,3 2,3 2,3 3,3 3,3 3,3 3,2 3,2 3,2 4,2 4,2 4,2 4,1 4,1 4,1 5,1 5,1 5,1 5,0 5,0 5,0 0,0 0,0 z" d:LayoutOverrides="Height" HorizontalAlignment="Center" VerticalAlignment="Top" />-->
							<Path x:Name="arrowFG" SnapsToDevicePixels="True" HorizontalAlignment="Center"  VerticalAlignment="Top" Fill="{TemplateBinding Foreground}" Stretch="None" Data="M 0,0 C0,0 0,1 0,1 0,1 1,1 1,1 1,1 1,2 1,2 1,2 2,2 2,2 2,2 2,3 2,3 2,3 3,3 3,3 3,3 3,2 3,2 3,2 4,2 4,2 4,2 4,1 4,1 4,1 5,1 5,1 5,1 5,0 5,0 5,0 0,0 0,0 z" />
						</Grid>
					</igWindows:CardPanel>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<!--<Setter TargetName="arrowBG" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphDisabledBackgroundFillKey}}" />-->
							<Setter TargetName="arrowFG" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphDisabledForegroundFillKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
             <DataTrigger Binding="{Binding Path=(igRibbon:MenuTool.IsOpen), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                  <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
              </DataTrigger>
            
			<DataTrigger Binding="{Binding Path=(igRibbon:MenuTool.Location), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="QuickAccessToolbar">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphHoverForegroundFillKey}}" />
				<Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphHoverBackgroundFillKey}}" />
			</DataTrigger>

			<DataTrigger Binding="{Binding Path=(UIElement.IsMouseOver), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphHoverForegroundFillKey}}" />
				<Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphHoverBackgroundFillKey}}" />
			</DataTrigger>

			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Path=(UIElement.IsMouseOver), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False" />
					<Condition Binding="{Binding Path=(ButtonBase.IsPressed), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False" />
					<Condition Binding="{Binding Path=(igRibbon:MenuTool.IsOpen), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False" />
					<Condition Binding="{Binding Path=(igRibbon:MenuTool.IsActive), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False" />
					<Condition Binding="{Binding Path=(igRibbon:RibbonGroup.IsOpen), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False" />
				</MultiDataTrigger.Conditions>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphNormalForegroundFillKey}}" />
				<Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphNormalBackgroundFillKey}}" />
			</MultiDataTrigger>
		</Style.Triggers>
	</Style>

	<!-- =================================================================== -->
    <!-- MenuButtonArea Style -->
    <!-- =================================================================== -->

 <ControlTemplate TargetType="{x:Type igRibbon:MenuButtonArea}" x:Key="MenuButtonAreaSegmented">
  <Grid>
   <Grid.RowDefinitions>
    <RowDefinition Height="*" x:Name="row0" />
    <RowDefinition Height="Auto" x:Name="row1" />
    <RowDefinition Height="Auto" />
   </Grid.RowDefinitions>
   <Grid.ColumnDefinitions>
    <ColumnDefinition Width="*" />
    <ColumnDefinition Width="Auto" />
   </Grid.ColumnDefinitions>
   <Button Style="{StaticResource PlainContentControlStyle}" x:Name="PART_SegmentedButton" Command="{x:Static igRibbon:MenuTool.SegmentedButtonCommand}">
    <Button.Content>
     <igRibbon:RibbonButtonChrome x:Name="buttonChrome" IsPressed="{Binding Path=IsPressed, ElementName=PART_SegmentedButton}" IsSegmentedButton="True" SnapsToDevicePixels="True" UseRoundedCorners="False">
      <Grid Margin="1" x:Name="btnChromeChild" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
       <Grid.RowDefinitions>
        <RowDefinition Height="Auto" />
       </Grid.RowDefinitions>
       <Grid.ColumnDefinitions>
        <ColumnDefinition x:Name="col0" Width="Auto" />
        <ColumnDefinition Width="Auto" />
       </Grid.ColumnDefinitions>
       <igWindows:SynchronizedSizeDecorator x:Name="syncImage" SynchronizeWidth="False" SynchronizeHeight="False" Target="{Binding ElementName=syncText}">
        <igWindows:AutoDisabledImage Width="16" Height="16" x:Name="image" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Source="{Binding Path=MenuTool.ImageResolved, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Visibility="{Binding Path=MenuTool.HasImage, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
       </igWindows:SynchronizedSizeDecorator>
          <ContentPresenter x:Name="textSmall" Grid.Column="1" Content="{Binding Path=MenuTool.Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource stringWithoutMnemonicsConverter}}" SnapsToDevicePixels="True" VerticalAlignment="Center" TextBlock.TextAlignment="Left" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" Margin="2,0,0,0" />
      </Grid>
     </igRibbon:RibbonButtonChrome>
    </Button.Content>
   </Button>
   <igRibbon:DropDownToggle x:Name="dropDownBtn" Grid.Column="1" Style="{StaticResource PlainContentControlStyle}" IsDroppedDown="{Binding Path=MenuTool.IsOpen, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
    <igRibbon:DropDownToggle.Content>
     <igRibbon:RibbonButtonChrome x:Name="dropdownChrome" ClipToBounds="True" IsPressed="{Binding Path=IsPressed, ElementName=dropDownBtn}" SnapsToDevicePixels="True" IsChecked="{Binding Path=IsDroppedDown, ElementName=dropDownBtn}" UseRoundedCorners="False">
						<Grid x:Name="dropdownPanel" Width="9" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
       <Grid.ColumnDefinitions>
        <ColumnDefinition x:Name="dropDownCol" />
       </Grid.ColumnDefinitions>
       <Control x:Name="dropdownArrow" Margin="1,0,0,0" Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuToolDropDownArrowStyleKey}}" igRibbon:XamRibbon.KeyTipPlacementType="DropDownButton" />
       <igWindows:SynchronizedSizeDecorator x:Name="syncText" SynchronizeWidth="False" SynchronizeHeight="False" Target="{Binding ElementName=syncImage}">
        <igRibbon:LargeToolCaptionPresenter x:Name="textLarge" Visibility="Collapsed" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" Text="{Binding Path=MenuTool.Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource stringWithoutMnemonicsConverter}}">
         <igRibbon:LargeToolCaptionPresenter.Glyph>
          <Control x:Name="largeCaptionGlyph1"  Margin="0,4,0,0" Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuToolDropDownArrowStyleKey}}" />
         </igRibbon:LargeToolCaptionPresenter.Glyph>
        </igRibbon:LargeToolCaptionPresenter>
       </igWindows:SynchronizedSizeDecorator>
      </Grid>
     </igRibbon:RibbonButtonChrome>
    </igRibbon:DropDownToggle.Content>
   </igRibbon:DropDownToggle>

  </Grid>
  <ControlTemplate.Triggers>
      <MultiDataTrigger>
          <MultiDataTrigger.Conditions>
              <Condition Binding="{Binding Path=MenuTool.IsChecked, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True" />
              <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False"/>
          </MultiDataTrigger.Conditions>
          <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
          <Setter TargetName="dropdownArrow" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
          <Setter TargetName="largeCaptionGlyph1" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />  
      </MultiDataTrigger>

      <!--<DataTrigger Binding="{Binding Path=MenuTool.IsChecked, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
          <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
          <Setter TargetName="dropdownArrow" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
          <Setter TargetName="largeCaptionGlyph1" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />  
      </DataTrigger>-->
      
      <DataTrigger Binding="{Binding Path=MenuTool.IsOpen, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
          <!--<Setter TargetName="textSmall" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />-->
          <Setter TargetName="textLarge" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
          <Setter TargetName="dropdownArrow" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
          <Setter TargetName="largeCaptionGlyph1" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />  
 </DataTrigger>
      
      <DataTrigger Binding="{Binding Path=IsPressed, ElementName=PART_SegmentedButton}" Value="True">
       <Setter TargetName="textSmall" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
       <!--<Setter TargetName="textLarge" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />-->
       <!--<Setter TargetName="dropdownArrow" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />-->
   </DataTrigger>
    
   <Trigger Property="IsMouseOver" Value="True">
       <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
   </Trigger>

   <Trigger Property="IsEnabled" Value="False" SourceName="PART_SegmentedButton">
       <Setter TargetName="textSmall" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
   </Trigger>

   <Trigger Property="IsEnabled" Value="False" SourceName="dropDownBtn">
    <Setter TargetName="textLarge" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
   </Trigger>

   <Trigger Property="IsCheckable" Value="True">
    <Setter TargetName="buttonChrome" Property="IsChecked" Value="{Binding Path=MenuTool.IsChecked, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=OneWay}" />
   </Trigger>
   <MultiTrigger>
    <MultiTrigger.Conditions>
     <Condition Property="SizingMode" Value="ImageOnly" />
     <Condition Property="HasImage" Value="True" />
    </MultiTrigger.Conditions>
    <Setter TargetName="textSmall" Property="Visibility" Value="Collapsed" />
   </MultiTrigger>
   <MultiTrigger>
    <MultiTrigger.Conditions>
     <Condition Property="SizingMode" Value="ImageAndTextLarge" />
     <Condition Property="Location" Value="Ribbon" />
    </MultiTrigger.Conditions>
    <Setter TargetName="dropdownArrow" Property="Visibility" Value="Collapsed" />
    <Setter TargetName="textSmall" Property="Visibility" Value="Collapsed" />
    <Setter TargetName="textLarge" Property="Visibility" Value="Visible" />
    <Setter TargetName="image" Property="Width" Value="32" />
    <Setter TargetName="image" Property="Height" Value="32" />
    <Setter TargetName="image" Property="Margin" Value="0,0,0,2" />
    <Setter TargetName="image" Property="HorizontalAlignment" Value="Center" />
    <Setter TargetName="syncImage" Property="SynchronizeWidth" Value="True" />
    <Setter TargetName="syncText" Property="SynchronizeWidth" Value="True" />
    <Setter TargetName="dropDownCol" Property="Width" Value="Auto" />

    <Setter TargetName="dropDownBtn" Property="Grid.Column" Value="0" />
    <Setter TargetName="dropDownBtn" Property="Grid.Row" Value="2" />
    <Setter TargetName="PART_SegmentedButton" Property="Grid.RowSpan" Value="2" />
    <Setter TargetName="row0" Property="Height" Value="Auto" />
    <Setter TargetName="row1" Property="Height" Value="*" />
    <Setter TargetName="btnChromeChild" Property="Margin" Value="1,1,1,0" />
                <Setter TargetName="dropdownPanel" Property="Width" Value="Auto" />
   </MultiTrigger>

   <DataTrigger Binding="{Binding Path=MenuTool.(HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
    <Setter TargetName="textSmall" Property="Margin" Value="3,0,2,1" />
   </DataTrigger>

   <DataTrigger Binding="{Binding Path=MenuTool.(igRibbon:XamRibbon.HideAccessKey), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False">
    <Setter TargetName="textSmall" Property="RecognizesAccessKey" Value="True" />
    <Setter TargetName="textSmall" Property="Content" Value="{Binding Path=(igRibbon:ButtonTool.Caption), RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
   </DataTrigger>

   <Trigger Property="Location" Value="QuickAccessToolbar">
    <Setter Property="Margin" Value="0,-2,0,0" />
    <Setter Property="Padding" TargetName="buttonChrome" Value="0,2,0,0" />
    <Setter Property="Padding" TargetName="dropdownChrome" Value="0,2,0,0" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
   </Trigger>

   <MultiTrigger>
    <MultiTrigger.Conditions>
     <Condition Property="Location" Value="TabItemAreaToolbar" />
     <Condition Property="IsEnabled" Value="False" SourceName="PART_SegmentedButton" />
    </MultiTrigger.Conditions>
    <Setter TargetName="textSmall" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMinimizeInactiveForegroundFillKey}}" />
   </MultiTrigger>

  </ControlTemplate.Triggers>
 </ControlTemplate>
        
 <!-- ================================  MenuButtonAreaDropDownOnly  =================================== -->
 <ControlTemplate TargetType="{x:Type igRibbon:MenuButtonArea}" x:Key="MenuButtonAreaDropDownOnly">
        <igRibbon:DropDownToggle x:Name="dropdownBtn" Style="{StaticResource PlainContentControlStyle}" IsDroppedDown="{Binding Path=MenuToolPresenter.IsSubmenuOpen, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
            <igRibbon:DropDownToggle.Content>
    <igRibbon:RibbonButtonChrome x:Name="dropdownChrome" IsPressed="{Binding Path=IsPressed, ElementName=dropdownBtn}" IsChecked="{Binding Path=IsDroppedDown, ElementName=dropdownBtn}" SnapsToDevicePixels="True" UseRoundedCorners="False">
                   <Grid Margin="1,1,0,1" x:Name="chromeContentPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" x:Name="row0" />
                            <RowDefinition Height="Auto" x:Name="row1" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <igWindows:AutoDisabledImage Width="16" Height="16" x:Name="image" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Source="{Binding Path=MenuTool.ImageResolved, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Visibility="{Binding Path=MenuTool.HasImage, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        <igRibbon:OuterGlowDecorator x:Name="textSmallGlow" Grid.Column="1" VerticalAlignment="Center" Margin="0,0,0,0">
                            <ContentPresenter x:Name="textSmall" Grid.Column="1" Content="{Binding Path=MenuTool.Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource stringWithoutMnemonicsConverter}}" SnapsToDevicePixels="True" TextBlock.TextAlignment="Left" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" />
                        </igRibbon:OuterGlowDecorator>
                   <Control x:Name="dropdownArrow" Margin="4,0,0,0" Grid.Column="2" Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuToolDropDownArrowStyleKey}}" />
                        <igRibbon:LargeToolCaptionPresenter x:Name="textLarge" Grid.Row="2" Visibility="Collapsed" Text="{Binding Path=MenuTool.Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource stringWithoutMnemonicsConverter}}">
                            <igRibbon:LargeToolCaptionPresenter.Glyph>
                                <Control x:Name="largeCaptionGlyph" Margin="0,4,0,0" Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuToolDropDownArrowStyleKey}}" />
                            </igRibbon:LargeToolCaptionPresenter.Glyph>
                        </igRibbon:LargeToolCaptionPresenter>
                    </Grid>
                </igRibbon:RibbonButtonChrome>

            </igRibbon:DropDownToggle.Content>
        </igRibbon:DropDownToggle>
        <ControlTemplate.Triggers>
            
            <DataTrigger Binding="{Binding Path=MenuToolPresenter.IsSubmenuOpen, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                <Setter TargetName="textSmall" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
                <Setter Property="Foreground" TargetName="dropdownArrow" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
            </DataTrigger>
            
              <DataTrigger Binding="{Binding Path=MenuTool.IsOpen, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                  <Setter TargetName="textLarge" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
                  <Setter TargetName="dropdownArrow" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
                  <Setter TargetName="largeCaptionGlyph" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
              </DataTrigger>
            
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
            </Trigger>
           
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="SizingMode" Value="ImageOnly" />
                    <Condition Property="HasImage" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="textSmallGlow" Property="Visibility" Value="Collapsed" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="SizingMode" Value="ImageAndTextLarge" />
                    <Condition Property="Location" Value="Ribbon" />
                </MultiTrigger.Conditions>
                <Setter TargetName="dropdownArrow" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="textSmallGlow" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="textLarge" Property="Visibility" Value="Visible" />
                <Setter TargetName="image" Property="Width" Value="32" />
                <Setter TargetName="image" Property="Height" Value="32" />
                <Setter TargetName="image" Property="Margin" Value="0,0,0,2" />
                <Setter TargetName="row0" Property="Height" Value="Auto" />
                <Setter TargetName="row1" Property="Height" Value="*" />
                <Setter TargetName="chromeContentPanel" Property="Margin" Value="1,1,1,0" />
            </MultiTrigger>
            <Trigger Property="IsQuickCustomizeMenu" Value="True">
                <Setter Property="Style" TargetName="largeCaptionGlyph" Value="{DynamicResource {x:Static igRibbon:MenuTool.QuickCustomizeMenuDropDownArrowStyleKey}}" />
                <Setter Property="Style" TargetName="dropdownArrow" Value="{DynamicResource {x:Static igRibbon:MenuTool.QuickCustomizeMenuDropDownArrowStyleKey}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=MenuTool.(igRibbon:XamRibbon.HideAccessKey), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False">
                <Setter TargetName="textSmall" Property="RecognizesAccessKey" Value="True" />
                <Setter TargetName="textSmall" Property="Content" Value="{Binding Path=(igRibbon:ButtonTool.Caption), RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
            </DataTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False" />
                    <Condition Property="Location" Value="QuickAccessToolbar" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" Value="0,-2,0,0" />
                <Setter Property="Padding" TargetName="dropdownChrome" Value="0,2,0,0" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
   </MultiTrigger>

   <!--TFS 228648-->
            <MultiTrigger>
             <MultiTrigger.Conditions>
              <Condition Property="IsMouseOver" Value="True" />
              <Condition Property="IsQuickCustomizeMenu" Value="True" />
             </MultiTrigger.Conditions>
             <Setter Property="Foreground" TargetName="dropdownArrow" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
            </MultiTrigger>
         
   <!--TFS 228648 END-->
         <MultiTrigger>
           <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="Location" Value="QuickAccessToolbar" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
            </MultiTrigger>
         
         <Trigger Property="Location" Value="QuickAccessToolbar">
          <Setter TargetName="dropdownBtn" Property="Background" Value="Transparent" />
         </Trigger>
         
         <Trigger Property="IsEnabled" Value="False">
          <!--<Setter Property="Opacity" Value="0.3" />-->
          <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
         </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <!-- AS 2/22/08 BR30647 - Added parens around path -->
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Location), RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).QuickAccessToolbar.IsBelowRibbon, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="textSmallGlow" Property="IsGlowVisible" Value="True" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).QuickAccessToolbar.IsBelowRibbon, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VistaWindowMaximizedTextFillKey}}" />
            </MultiDataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

  <!-- ================================  MenuButtonArea  =================================== -->
 <Style TargetType="{x:Type igRibbon:MenuButtonArea}">
  <Setter Property="Template" Value="{StaticResource MenuButtonAreaDropDownOnly}" />
  <!-- AS 3/3/09 TFS14852 Added HorizontalContentAlignment binding -->
  <Setter Property="HorizontalContentAlignment" Value="{Binding Path=MenuTool.HorizontalContentAlignment, RelativeSource={x:Static RelativeSource.Self}}" />
  <Style.Triggers>
   <Trigger Property="IsSegmented" Value="True">
    <Setter Property="Template" Value="{StaticResource MenuButtonAreaSegmented}" />
   </Trigger>
  </Style.Triggers>
 </Style>

 <!-- =================================================================== -->
    <!-- ApplicationMenuPresenter Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:ApplicationMenuPresenter}">
        <Setter Property="MinHeight" Value="17"/>
        <Setter Property="Margin" Value="0,1,0,-1"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuOuterBorderDarkFillKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:ApplicationMenuPresenter}">
                    <igWindows:CardPanel x:Name="ApplicationMenuButton" Background="Transparent" SnapsToDevicePixels="true">
                        <Rectangle x:Name="PopupPlacementRect" Margin="0,-1,0,0" VerticalAlignment="Top" Visibility="Hidden"/>
                        <!-- Office Orb -->
                        <Grid
							x:Name="orbPanel"
							Width="56"
							HorizontalAlignment="Left"
							VerticalAlignment="Stretch">
                            <!-- Orb Image -->
                            <Border
								x:Name="AppMenuBtnNormal"
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonNormalCenterFillKey}}"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonNormalOuterBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="0,0,0,0">
                                <Border
									BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonNormalInnerBorderFillKey}}"
									BorderThickness="1,1,1,0"
									CornerRadius="0,0,0,0"/>
                            </Border>
                            <Border
								x:Name="AppMenuBtnHover"
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonHoverCenterFillKey}}"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonHoverOuterBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="0,0,0,0"
								Opacity="0">
                                <Grid>
                                    <Border
									BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonHoverInnerBorderFillKey}}"
									BorderThickness="1,1,1,0"
									CornerRadius="0,0,0,0"/>
                                    <Border x:Name="AppMenuBtnPressed" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonPressedCenterFillKey}}" Opacity="0" CornerRadius="0,0,0,0"/>
                                </Grid>
                            </Border>
                            <igWindows:CardPanel>
                                <Image x:Name="appMenuImage"
									MaxHeight="16"
									Stretch="Uniform"
									StretchDirection="DownOnly"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									SnapsToDevicePixels="True"
									Source="{Binding Path=Tool.Image, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                                <Viewbox x:Name="appMenuCaption" Stretch="Uniform" StretchDirection="DownOnly" Visibility="Collapsed" Margin="3,4,3,3">
                                    <TextBlock Text="{Binding Path=Tool.Caption, RelativeSource={RelativeSource TemplatedParent}}" Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonForegroundKey}}" />
                                </Viewbox>
                            </igWindows:CardPanel>
                        </Grid>
                        <Popup
							Name="PART_Popup"
							AllowsTransparency="true"
							Focusable="false"
							IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
							Placement="Bottom"
							PlacementTarget="{Binding ElementName=PopupPlacementRect}">
                            <luna:SystemDropShadowChrome Name="Shdw" Color="Transparent">
                                <igWindows:CardPanel KeyboardNavigation.DirectionalNavigation="Cycle">
                                    <Border
										Grid.ColumnSpan="2"
										Grid.RowSpan="2"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="{TemplateBinding BorderThickness}"
										CornerRadius="0,0,0,0"
										SnapsToDevicePixels="True">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition Height="Auto" MinHeight="17"/>
                                            </Grid.RowDefinitions>
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="24"/>
                                                    <RowDefinition/>
                                                </Grid.RowDefinitions>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <!-- Menu Chrome -->
                                                <Border
												Grid.ColumnSpan="2"
												Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuChromeFillKey}}"
												BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuInnerBorderDarkFillKey}}"
												BorderThickness="0,0,0,1"
												SnapsToDevicePixels="True"/>
                                                <!-- Menu Items Background -->
                                                <Border
												Grid.Row="1"
												Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuLeftAreaCenterFillKey}}"
												BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuLeftAreaBorderFillKey}}"
												BorderThickness="0,0,1,0"
												SnapsToDevicePixels="True">
                                                    <ScrollViewer
													x:Name="MenuItemsArea"
													Grid.Row="1"
													CanContentScroll="true"
													Focusable="False"
													HorizontalScrollBarVisibility="Disabled"
													Style="{StaticResource MenuScrollViewer}">
                                                        <igRibbon:ApplicationMenuItemsPanel
														x:Name="PART_ApplicationMenuItemsPanel"
														Margin="0,2,0,2"
														Grid.IsSharedSizeScope="true"
														IsItemsHost="True"
														KeyboardNavigation.ControlTabNavigation="Local"
														KeyboardNavigation.DirectionalNavigation="Continue"
														KeyboardNavigation.TabIndex="1"
														KeyboardNavigation.TabNavigation="Local"
														SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                    </ScrollViewer>
                                                </Border>
                                                <Border
												x:Name="RecentItemsBackGround"
                                                MinWidth="250"
												MinHeight="64"
												Grid.Column="1"
												Grid.Row="1"
												Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsCenterFillKey}}"
												BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsBorderFillKey}}"
												BorderThickness="0,0,0,0">
                                                    <Grid>
                                                        <ScrollViewer Focusable="False" HorizontalScrollBarVisibility="Disabled" Style="{StaticResource MenuScrollViewer}">
                                                            <StackPanel>
                                                                <Border
																x:Name="RecentItemsHeaderSeparator"
																Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsSeparatorLightFillKey}}"
																BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsSeparatorLightFillKey}}"
																BorderThickness="0"
																SnapsToDevicePixels="True">
                                                                    <ContentControl
																x:Name="RecentItemsHeader"
																Margin="7,3,0,3"
																Content="{Binding Path=Tool.RecentItemsHeader, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
																ContentTemplate="{Binding Path=Tool.RecentItemsHeaderTemplate, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
																ContentTemplateSelector="{Binding Path=Tool.RecentItemsHeaderTemplateSelector, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
																Focusable="False"
																TextBlock.FontWeight="Bold"/>
                                                                </Border>
                                                                <igRibbon:ApplicationMenuRecentItemsPanel
																x:Name="PART_RecentItemsPanel"
																KeyboardNavigation.ControlTabNavigation="Local"
																KeyboardNavigation.DirectionalNavigation="Continue"
																KeyboardNavigation.TabIndex="2"
																KeyboardNavigation.TabNavigation="Local"/>
                                                            </StackPanel>
                                                        </ScrollViewer>
                                                    </Grid>
                                                </Border>
                                                <FrameworkElement
												x:Name="PART_SubMenuArea"
												Grid.Column="1"
												Grid.Row="1"
												HorizontalAlignment="Stretch"
												Margin="0,6,5,-2"
												VerticalAlignment="Stretch"/>
                                            </Grid>
                                            <Border
												x:Name="Footer"
												Grid.Row="1"
												Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuFooterToolbarFillKey}}"
												BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuFooterToolbarOuterBorderDarkFillKey}}"
												BorderThickness="0,1,0,0"
												SnapsToDevicePixels="True">
                                                <ContentPresenter
													x:Name="PART_FooterToolbar"
													Content="{Binding Path=Tool.FooterToolbar, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
													Focusable="False"
													KeyboardNavigation.ControlTabNavigation="Local"
													KeyboardNavigation.DirectionalNavigation="Continue"
													KeyboardNavigation.TabIndex="3"
													KeyboardNavigation.TabNavigation="Local"/>
                                            </Border>
                                        </Grid>
                                    </Border>
                                    <!-- Overlay Button -->
                                    <ToggleButton
										x:Name="ButtonOverlay"
										Width="{Binding ElementName=orbPanel, Path=ActualWidth}"
										Height="{Binding ElementName=orbPanel, Path=ActualHeight}"
										HorizontalAlignment="Left"
										VerticalAlignment="Top"
										ClickMode="Press"
										Focusable="False"
										IsChecked="{Binding ElementName=PART_Popup, Path=IsOpen, Mode=TwoWay}"
										IsTabStop="False">
                                        <ToggleButton.RenderTransform>
                                            <MultiBinding Mode="OneWay">
                                                <MultiBinding.Converter>
                                                    <igRibbon:ApplicationMenuButtonTransformConverter/>
                                                </MultiBinding.Converter>
                                                <Binding ElementName="PART_Popup" Path="IsOpen"/>
                                                <Binding ElementName="orbPanel"/>
                                                <Binding ElementName="ButtonOverlay"/>
                                            </MultiBinding>
                                        </ToggleButton.RenderTransform>
                                        <ToggleButton.Template>
                                            <ControlTemplate TargetType="ToggleButton">
                                                <Rectangle>
                                                    <Rectangle.Fill>
                                                        <VisualBrush x:Name="orbBrush" Stretch="None" Visual="{Binding ElementName=orbPanel, Mode=OneTime}"/>
                                                    </Rectangle.Fill>
                                                </Rectangle>
                                            </ControlTemplate>
                                        </ToggleButton.Template>
                                    </ToggleButton>
                                </igWindows:CardPanel>
                            </luna:SystemDropShadowChrome>
                        </Popup>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSubmenuOpen" Value="False">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=Tool.HasCaption, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter TargetName="appMenuCaption" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="appMenuImage" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Tool.HasRecentItemsHeader, RelativeSource={x:Static RelativeSource.Self}}" Value="False">
                            <Setter TargetName="RecentItemsHeaderSeparator" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="RecentItemsHeader" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSuspendingPopupAnimation" Value="True"/>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="AppMenuBtnPressed" Property="Opacity" Value="1"/>
                            <Setter TargetName="AppMenuBtnHover" Property="Opacity" Value="1"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="AppMenuBtnHover" Property="Opacity" Value="1"/>
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="AppMenuBtnHover" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter TargetName="AppMenuBtnPressed" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                            <Setter TargetName="Shdw" Property="Margin" Value="1,0,1,1"/>
                            <Setter TargetName="Shdw" Property="Color" Value="#19000000"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Button_QATOverflow" BasedOn="{x:Null}" TargetType="{x:Type igRibbon:DropDownToggle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:DropDownToggle}">
                    <igWindows:CardPanel Background="Transparent">
                        <Grid x:Name="QATOverflow" Background="#00000000" Margin="0,2,0,0" SnapsToDevicePixels="True">
                          <Border x:Name="BorderDark" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolHoverBorderDarkFillKey}}" BorderThickness="0,0,0,0" CornerRadius="0" Visibility="Collapsed" />
                          <Grid
              Height="7"
								Width="5"
								Background="{x:Null}" HorizontalAlignment="Center" Margin="3,0,0,0" VerticalAlignment="Center" SnapsToDevicePixels="True">
                               <Path
									Margin="0,1,0,0"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Height="5"
									Width="3"
									Stretch="Fill"
									Opacity="1"
                                    Data="M0,0 L0.99999997,0 0.99999997,1 2,1 2,2 2.9999999,2 2.9999999,3 2,3 2,4 0.99999997,4 0.99999997,5 0,5 z"
									Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphNormalForegroundFillKey}}" SnapsToDevicePixels="True" x:Name="LeftGlyphForeground" />
                            </Grid>

                        </Grid>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible"/>
                            <Setter Property="Fill" TargetName="LeftGlyphForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphHoverForegroundFillKey}}"/>
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.IsActive" Value="True">
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsDroppedDown" Value="True">
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible"/>
                            <Setter Property="Margin" TargetName="BorderDark" Value="0,0,0,1"/>
                            <Setter Property="Background" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolPressedBorderDarkFillKey}}"/>
                            <Setter Property="Fill" TargetName="LeftGlyphForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphHoverForegroundFillKey}}"/>
                           </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- TabItemAreaToolbar Style   NA 14.1                                      -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:TabItemAreaToolbar}">
        <Setter Property="Padding" Value="5,0,2,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:TabItemAreaToolbar}">
                    <Border Margin="{TemplateBinding Padding}">
                        <DockPanel x:Name="ToolsAndButtonsArea" LastChildFill="True" VerticalAlignment="Bottom" HorizontalAlignment="Left" >
                            <igWindows:CardPanel x:Name="DropDownButtonsArea" DockPanel.Dock="Right" Width="Auto" Height="Auto" 
                                                 VerticalAlignment="Center" HorizontalAlignment="Right" 
                                                 KeyboardNavigation.TabIndex="1" 
                                                 KeyboardNavigation.TabNavigation="Local"
                                                 KeyboardNavigation.DirectionalNavigation="Continue">
                                <igRibbon:DropDownToggle x:Name="PART_OverflowButton" Margin="4,-2,0,0" Style="{StaticResource Button_QATOverflow}" 
                                                         Focusable="True" VerticalAlignment="Center" Width="13.286" Height="20" 
                                                         Content="OverflowButton" FocusVisualStyle="{x:Null}" 
                                                         Visibility="{Binding Path=OverflowButtonVisibility, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                                         IsDroppedDown="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />

                                <Popup StaysOpen="False" x:Name="PART_OverflowPopup" Placement="Bottom" Focusable="false" igWindows:PopupHelper.HandleMouseDownOnClose="True" IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" AllowsTransparency="True">
                                    <AdornerDecorator>
                                        <Border x:Name="TabItemAreaToolbarOverflowPanel" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowPanelCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowPanelBorderFillKey}}" BorderThickness="1,1,1,1" CornerRadius="0" Padding="2,3,2,1">
                                            <igRibbon:TabItemAreaToolbarOverflowPanel x:Name="PART_TabItemAreaToolbarOverflowPanel" />
                                        </Border>
                                    </AdornerDecorator>
                                </Popup>
                            </igWindows:CardPanel>

                            <Grid x:Name="ToolsArea" 
                                  KeyboardNavigation.TabIndex="0" 
                                  KeyboardNavigation.TabNavigation="Local" 
                                  KeyboardNavigation.DirectionalNavigation="Continue"
                                  Background="{x:Null}" 
                                  HorizontalAlignment="Left" Margin="7,0,0,0" VerticalAlignment="Center">
                                <igRibbon:TabItemAreaToolbarPanel x:Name="PART_TabItemAreaToolbarPanel" IsItemsHost="True" />
                            </Grid>

                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen" Value="False">
                            <Setter Property="PopupAnimation" TargetName="PART_OverflowPopup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

      <!-- =================================================================== -->
    <!-- RibbonTabItem Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:RibbonTabItem}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
        <!--<Setter Property="Height" Value="24"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ControlTemplate" TargetType="{x:Type igRibbon:RibbonTabItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="ContextualTabMouseOver"/>
                        <Storyboard x:Key="ContextualTabMouseOut"/>
                        <Storyboard x:Key="TabMouseOverNotSelected">
                            <ObjectAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetName="TabMouseOverNotSelected" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="TabMouseOutNotSelected">
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="TabMouseOverNotSelected" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="Tab" Margin="0 0 0 -2">
                        <Line
							x:Name="ContextualTabInTabAreaSeparatorLeft"
							HorizontalAlignment="Left"
							Margin="1, -2, 0, 5"
							IsHitTestVisible="False"
							SnapsToDevicePixels="True"
							Stretch="Fill"
							Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabSeparatorFillKey}}"
							StrokeThickness="1"
							Visibility="{TemplateBinding Converter={StaticResource BoolToVisConverter}, Property=IsFirstTabInContextualTabGroup}"
							X1="0"
							X2="0"
							Y1="0"
							Y2="1"/>
                        <Line
							x:Name="ContextualTabInTabAreaSeparatorLeftHighlight"
							HorizontalAlignment="Left"
							Margin="0, -2, 0, 5"
							IsHitTestVisible="False"
							SnapsToDevicePixels="True"
							Stretch="Fill"
							Stroke="#7FFFFFFF"
							StrokeThickness="1"
							Visibility="{TemplateBinding Converter={StaticResource BoolToVisConverter}, Property=IsFirstTabInContextualTabGroup}"
							X1="0"
							X2="0"
							Y1="0"
							Y2="1">
                            <Line.OpacityMask>
                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Offset="0" Color="#66c90077"/>
                                            <GradientStop Offset="1" Color="#00c90077"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Line.OpacityMask>
                        </Line>
                        <Grid
							x:Name="TabMouseOverNotSelected"
							Margin="3,0"
							Visibility="Collapsed">
                            <Border
								x:Name="Center"
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabInactiveHoverBackgroundFillKey}}"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabInactiveHoverBorderFillKey}}"
								BorderThickness="0,0,0,2"
								CornerRadius="0,0,0,0"
								SnapsToDevicePixels="True"
								Visibility="Visible">
                                <Border
									x:Name="Bd2"
									BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabInactiveHoverCenterFillKey}}"
									BorderThickness="0,0,0,2"
									CornerRadius="0,0,0,0"
									SnapsToDevicePixels="True"/>
                            </Border>
                        </Grid>
                        <Grid x:Name="TabSelected" Margin="0" Visibility="Collapsed">
                            <Border
								x:Name="BdTabSelected"
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalCenterFillKey}}"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								BorderThickness="0,0,0,2"
								CornerRadius="0,0,0,0"
								SnapsToDevicePixels="True"/>
                        </Grid>
                        <Border
							x:Name="ContextualTabBase"
							BorderThickness="0,0,0,2"
							CornerRadius="0,0,0,0"
                            Visibility="Collapsed"/>

                        <Grid x:Name="ContextualTabSelected" Margin="0" Visibility="Collapsed">
                            <Border
								x:Name="BdContextualTabSelected"
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalCenterFillKey}}"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								BorderThickness="0,0,0,2"
								CornerRadius="0,0,0,0"
								SnapsToDevicePixels="True"/>
                        </Grid>
                        <Border x:Name="contextualSelected" Visibility="Collapsed" CornerRadius="0,0,0,0" BorderThickness="0,0,0,2"
						BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}">
                            <Rectangle Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalCenterFillKey}}"/>
                        </Border>

                        <ContentPresenter
							x:Name="tabItemText"
							Width="Auto"
							HorizontalAlignment="Stretch"
							Margin="6,3,6,5"
							VerticalAlignment="Center"
							Content="{TemplateBinding Header, Converter={StaticResource stringWithoutMnemonicsConverter}}"
							ContentTemplate="{TemplateBinding HeaderTemplate}"
							ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
							igRibbon:XamRibbon.KeyTipPlacementType="Caption"
							igWindows:ClippedTextToolTipService.AncestorTypeForToolTip="{x:Type igRibbon:RibbonTabItem}"
							igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True"
							igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}"
							TextBlock.TextAlignment="Center"
							TextElement.Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabNotSelectedTextFillKey}}"/>
                        <Line
							x:Name="TabSeparator"
							HorizontalAlignment="Right"
							Margin="0, -2, 0, 5"
							IsHitTestVisible="False"
							Opacity="{TemplateBinding igWindows:TabItemPanel.TabSeparatorOpacity}"
							SnapsToDevicePixels="True"
							Stretch="Fill"
							Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabSeparatorFillKey}}"
							StrokeThickness="1"
							X1="0"
							X2="0"
							Y1="0"
							Y2="1"/>
                     
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- IsInContextualTabGroup -->
                        <Trigger Property="IsInContextualTabGroup" Value="True">
                            <Setter TargetName="ContextualTabBase" Property="Background" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="ContextualTabBase" Property="BorderBrush" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="ContextualTabBase" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContextualTabBase" Property="OpacityMask">
                                <Setter.Value>
                                    <SolidColorBrush Color="#33c90077"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <!-- IsSelected && !IsInContextualTabGroup -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsInContextualTabGroup" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="TabSelected" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
                        </MultiTrigger>
                        <!-- IsSelected && IsInContextualTabGroup && !XamRibbon.IsActive -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsInContextualTabGroup" Value="True"/>
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContextualTabSelected" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="contextualSelected" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolved, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF555555}"/>
                        </MultiTrigger>

                        <!-- IsMouseOverTab && !IsSelected -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOverTab, RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsInContextualTabGroup, RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard x:Name="TabMouseOverNotSelected_BeginStoryboard" Storyboard="{StaticResource TabMouseOverNotSelected}"/>
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="TabMouseOverNotSelected_BeginStoryboard"/>
                                <BeginStoryboard Storyboard="{StaticResource TabMouseOutNotSelected}"/>
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOverTab, RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsInContextualTabGroup, RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolved, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF555555}"/>
                        </MultiDataTrigger>
                        <!-- IsSelected && XamRibbon.IsActive -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
                        </MultiTrigger>
                        <!-- !IsSelected && XamRibbon.IsActive -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard x:Name="ActivatedNotSelected_BeginStoryboard" Storyboard="{StaticResource TabMouseOverNotSelected}"/>
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard x:Name="DeactivatedNotSelected_BeginStoryboard" Storyboard="{StaticResource TabMouseOutNotSelected}"/>
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsInContextualTabGroup" Value="True">
                <Setter Property="igWindows:XamTabControl.TabPriority" Value="10"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- RibbonGroup Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:RibbonGroup}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="SmallImage">
            <Setter.Value>
                <DrawingImage>
                    <DrawingImage.Drawing>
                        <DrawingGroup>
                            <GeometryDrawing Brush="#00FFFFFF">
                                <GeometryDrawing.Geometry>
                                    <RectangleGeometry Rect="0,0,11,11"/>
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                            <DrawingGroup Opacity="0.670">
                                <GeometryDrawing Brush="#FF777777" Geometry="M1,1C1,1 10,1 10,1 10,1 10,10 10,10 10,10 1,10 1,10 1,10 1,1 1,1z M0,0C0,0 0,11 0,11 0,11 11,11 11,11 11,11 11,0 11,0 11,0 0,0 0,0z"/>
                            </DrawingGroup>
                            <DrawingGroup>
                                <DrawingGroup.Transform>
                                    <MatrixTransform Matrix="1,0,0,1,3,3"/>
                                </DrawingGroup.Transform>
                                <GeometryDrawing Brush="#FF777777" Geometry="M5,0 C5,0 4.285,0 4.285,0 4.285,0 0,5 0,5 0,5 0.714,5 0.714,5 0.714,5 5,0 5,0 z"/>
                            </DrawingGroup>
                        </DrawingGroup>
                    </DrawingImage.Drawing>
                </DrawingImage>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:RibbonGroup}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="RibbonGroupFadeIn">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="bottomBdHover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="RibbonGroupFadeOut">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="bottomBdHover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid><AdornerDecorator>
                    <igWindows:CardPanel Background="Transparent">
                        <!--<Grid x:Name="RibbonGroupGlowHover" Opacity="0">
                            <Grid.OpacityMask>
                                <RadialGradientBrush Center="0.5,1" GradientOrigin="0.5,1" RadiusX="0.5" RadiusY="0.5">
                                    <GradientStop Offset="0" Color="#3F000000"/>
                                    <GradientStop Color="#EAFFFFFF" Offset="0.1"/>
                                    <GradientStop Color="#AFFFFFFF" Offset="0.55"/>
                                    <GradientStop Color="#3FFFFFFF" Offset="1"/>
                                </RadialGradientBrush>
                            </Grid.OpacityMask>
                            <Rectangle Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverBottomGradientFillKey}}"/>
                        </Grid>-->
                        <Rectangle x:Name="groupSeparator" Width="1"  Margin="0 5"  Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VerticalSeparatorNormalDarkFillKey}}" SnapsToDevicePixels="True" HorizontalAlignment="Right"/>
                        <ContentControl x:Name="PART_RibbonGroupSite" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" Style="{StaticResource PlainContentControlStyle}" Margin="0,0,4,0">
                            <Grid x:Name="groupPanel" Background="{TemplateBinding Background}">
                                <DockPanel Margin="0,2,0,0">
                                    <Grid DockPanel.Dock="Bottom" MinHeight="18" Margin="0 2 0 0">
                                        <Border x:Name="bottomBd" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupNormalBottomGradientFillKey}}" BorderThickness="0" VerticalAlignment="Bottom" SnapsToDevicePixels="True" CornerRadius="0">
                                            <Grid>
                                                <Border x:Name="bottomBdHover" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverBottomGradientFillKey}}" Margin="-3,-1,-4,0 " BorderThickness="0" SnapsToDevicePixels="True" Opacity="0" CornerRadius="0"/>
                                        <DockPanel
										Margin="0,1"
										DockPanel.Dock="Bottom"
										KeyboardNavigation.TabIndex="1"
										KeyboardNavigation.TabNavigation="Local">
                                        <ContentControl
											x:Name="DialogBoxLauncher"
											Height="15"
											VerticalAlignment="Bottom"
											Content="{TemplateBinding DialogBoxLauncherTool}"
											DockPanel.Dock="Right"
											Focusable="False"
											Visibility="Hidden"/>
                                        <TextBlock
											x:Name="PART_Caption"
											HorizontalAlignment="Stretch"
											Margin="0"
											VerticalAlignment="Bottom"
											Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCaptionTextFillKey}}"
											igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True"
											igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}"
											Padding="0"
											Text="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}"
											TextAlignment="Center"
											TextTrimming="CharacterEllipsis"
                                            FontSize="11"/>
                                    </DockPanel>
                                        </Grid>
                                        </Border>
                                    </Grid>
                                    <ItemsPresenter
										x:Name="PART_Items"
										HorizontalAlignment="Center"
										DockPanel.Dock="Top"
										KeyboardNavigation.TabIndex="0"
										KeyboardNavigation.TabNavigation="Local"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </DockPanel>
                            </Grid>
                        </ContentControl>
                        <Rectangle x:Name="hoverHighlightBottom" Height="1" VerticalAlignment="Bottom" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverBorderFillKey}}" SnapsToDevicePixels="True" Margin="-2,0,3,0" Opacity="0"/>
                        <Border x:Name="collapsedGroupHover" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupIsInContextualHoverCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverBorderFillKey}}" BorderThickness="0,0,0,1" Margin="-2,0,3,0" Visibility="Collapsed" SnapsToDevicePixels="True"/>
                        <igRibbon:DropDownToggle
							x:Name="PART_RibbonGroupButton"
							igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}"
							IsDroppedDown="{Binding Path=IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							Style="{DynamicResource {x:Static igRibbon:RibbonGroup.CollapsedGroupButtonStyleKey}}"
							Margin="0,0,3,0"
							Visibility="Collapsed"/>
                        <Popup
							x:Name="PART_Popup"
							AllowsTransparency="True"
							igWindows:PopupHelper.HandleMouseDownOnClose="True"
							IsOpen="{Binding Path=IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
							Placement="Bottom"
							PlacementTarget="{Binding ElementName=PART_RibbonGroupButton}"
							StaysOpen="False">
                            <luna:SystemDropShadowChrome x:Name="Shdw" Color="#19000000" Margin="1,0,1,1">
                                <AdornerDecorator KeyboardNavigation.DirectionalNavigation="Cycle">
                                    <Border
									Margin="0,0,1,1"
									Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerFillKey}}"
									BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}"
									BorderThickness="1"
									CornerRadius="0,0,0,0">
                                        <Grid>
                                            <Rectangle
											Height="1"
											Margin="0,0,0,1"
											VerticalAlignment="Bottom"
											Fill="#59FFFFFF"
											SnapsToDevicePixels="True"/>
                                            <ContentControl x:Name="PART_PopupRibbonGroupSite" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" Style="{StaticResource PlainContentControlStyle}"/>
                                        </Grid>
                                    </Border>
                                </AdornerDecorator>
                            </luna:SystemDropShadowChrome>
                        </Popup>
                    </igWindows:CardPanel>
                    </AdornerDecorator></Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOpen" Value="False">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="compModel:DesignerProperties.IsInDesignMode" Value="False"/>
                                <Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="False"/>
                                <Condition Property="IsCollapsed" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource RibbonGroupFadeIn}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource RibbonGroupFadeOut}"/>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="compModel:DesignerProperties.IsInDesignMode" Value="False"/>
                                <Condition Property="IsCollapsed" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="collapsedGroupHover" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsCollapsed" Value="True">
                            <Setter TargetName="PART_RibbonGroupButton" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_RibbonGroupButton" Property="igRibbon:RibbonGroup.Caption" Value="{Binding Path=Caption, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="PART_RibbonGroupButton" Property="igRibbon:RibbonGroup.SmallImage" Value="{Binding Path=SmallImage, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="PART_RibbonGroupSite" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsActive" Value="True">
                            <Setter TargetName="PART_RibbonGroupButton" Property="Background" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter TargetName="PART_RibbonGroupButton" Property="Style" Value="{DynamicResource {x:Static igRibbon:RibbonGroup.QuickAccessToolbarGroupButtonStyleKey}}"/>
                            <Setter TargetName="PART_RibbonGroupButton" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_RibbonGroupButton" Property="igRibbon:RibbonGroup.Caption" Value="{Binding Path=Caption, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="PART_RibbonGroupButton" Property="igRibbon:RibbonGroup.SmallImage" Value="{Binding Path=SmallImage, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="PART_RibbonGroupSite" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="groupSeparator" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_Caption" Property="Margin" Value="0"/>
                            <Setter TargetName="hoverHighlightBottom" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasDialogBoxLauncherTool" Value="True">
                            <Setter TargetName="DialogBoxLauncher" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Location" Value="QuickAccessToolbar">
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Focusable" Value="True"/>
            </Trigger>
            <Trigger Property="IsCollapsed" Value="True">
                <Setter Property="Focusable" Value="True"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- RadioButtonTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:RadioButtonTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonGroupNormalCenterFillKey}}" />
        <Setter Property="Template" Value="{StaticResource RibbonButtonToolTemplate}" />

        <Style.Triggers>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                   <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VistaWindowMaximizedTextFillKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
            </MultiDataTrigger>
            
             <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
            </Trigger>
            
            <MultiTrigger>
                  <MultiTrigger.Conditions>
                      <Condition Property="IsMouseOver" Value="True" />
                      <Condition Property="IsChecked" Value="True" />
                  </MultiTrigger.Conditions>
                  <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
              </MultiTrigger>
           
          </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- ToggleButtonTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:ToggleButtonTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template" Value="{StaticResource RibbonButtonToolTemplate}" />

        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />
                </MultiDataTrigger.Conditions>
           <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VistaWindowMaximizedTextFillKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
            </MultiDataTrigger>
            
            <Trigger Property="IsPressed" Value="True">
                 <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
            </Trigger>
            
              <MultiTrigger>
                  <MultiTrigger.Conditions>
                      <Condition Property="IsMouseOver" Value="True" />
                      <Condition Property="IsChecked" Value="True" />
                  </MultiTrigger.Conditions>
                  <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
              </MultiTrigger>
            
            <MultiTrigger>
                  <MultiTrigger.Conditions>
                      <Condition Property="IsEnabled" Value="False" />
                      <Condition Property="IsChecked" Value="True" />
                  </MultiTrigger.Conditions>
                  <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
              </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- CheckBoxTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:CheckBoxTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:CheckBoxTool}">
                    <Grid Width="Auto">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <igWindows:AutoDisabledImage x:Name="image" Width="16" Height="16" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Visibility="{Binding Path=HasImage, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" Source="{TemplateBinding ImageResolved}" />
                        <Grid x:Name="CheckBox" VerticalAlignment="Center" Grid.Column="1" Margin="3,0,3,0" igRibbon:XamRibbon.KeyTipPlacementType="CheckIndicator">
                            <Rectangle Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxNormalOuterBoxCenterFillKey}}" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxNormalOuterBoxBorderFillKey}}" HorizontalAlignment="Left" VerticalAlignment="Top" Width="13" Height="13" x:Name="CheckBox_OuterBox" SnapsToDevicePixels="True" />
                            <Grid Visibility="Hidden" Margin="0,0,0,0" x:Name="CheckMark">
                                <Path Height="9.661" Width="10.137" Stretch="Fill" Opacity="0.8" Data="M2.6673452,7.8617508 C2.6673452,7.8617508 5.817048,10.192734 5.817048,10.192734 5.817048,10.192734 9.5967099,4.4942121 9.5967099,4.4942121" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckmarkBackgroundFillKey}}" StrokeThickness="2" SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="1.138,0.965,0,0" x:Name="Background" VerticalAlignment="Top" />
                                <Path Height="8.915" Width="8.66" Stretch="Fill" Opacity="1" Data="M1.6839831,7.7438574 C1.6839831,7.7438574 5.8697866,10.85053 5.8697866,10.85053 5.8697866,10.85053 10.540217,1.6301305 10.540217,1.6301305" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckmarkForegroundFillKey}}" StrokeThickness="2" SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="1.855,1.465,0,0" x:Name="Foreground" VerticalAlignment="Top" />
                            </Grid>
                        </Grid>
                        <Rectangle x:Name="activeRect" Visibility="Collapsed" Grid.Column="2" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2" SnapsToDevicePixels="true" />
                        <igRibbon:OuterGlowDecorator x:Name="textGlow" Grid.Column="2" Margin="2,1,4,1" VerticalAlignment="Center" HorizontalAlignment="Left">
                            <ContentPresenter x:Name="text" Content="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}" TextBlock.TextAlignment="Left" />
                        </igRibbon:OuterGlowDecorator>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Location" Value="ApplicationMenu" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="StrokeThickness" TargetName="CheckBox_OuterBox" Value="0" />
                        </MultiTrigger>

                        <Trigger Property="Location" Value="Ribbon">
                            <Setter Property="HorizontalAlignment" Value="Left" />
                        </Trigger>

                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
                            <Setter Property="Visibility" Value="Collapsed" TargetName="image" />
                        </Trigger>

                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />

                            <!-- Default margin when in the footer toolbar -->
                            <Setter Property="Margin" Value="6,0,0,0" />
                        </Trigger>

                        <Trigger Property="IsActive" Value="True">
                           <Setter Property="Stroke" TargetName="CheckBox_OuterBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxHoverOuterBoxBorderFillKey}}" />
                           <Setter Property="Visibility" TargetName="activeRect" Value="Visible" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="CheckBox_OuterBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxHoverInnerBoxCenterFillKey}}" />
                            <Setter Property="Stroke" TargetName="CheckBox_OuterBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxHoverOuterBoxBorderFillKey}}" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="CheckMark" Value="Visible" />
                            <Setter Property="Fill" TargetName="CheckBox_OuterBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxPressedInnerBoxCenterFillKey}}" />
                            <Setter Property="Stroke" TargetName="CheckBox_OuterBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxPressedOuterBoxBorderFillKey}}" />
                            <Setter Property="Stroke" TargetName="Background" Value="{StaticResource GlyphActiveBackgroundBrush}" />
                            <Setter Property="Stroke" TargetName="Foreground" Value="{StaticResource GlyphActiveBackgroundBrush}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="CheckMark" Value="Visible" />
                            <Setter Property="Fill" TargetName="CheckBox_OuterBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxPressedInnerBoxCenterFillKey}}" />
                            <Setter Property="Stroke" TargetName="CheckBox_OuterBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxPressedOuterBoxBorderFillKey}}" />
                            <Setter Property="Stroke" TargetName="Background" Value="{StaticResource GlyphActiveBackgroundBrush}" />
                            <Setter Property="Stroke" TargetName="Foreground" Value="{StaticResource GlyphActiveBackgroundBrush}" />
                        </MultiTrigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="CheckMark" Value="Visible" />
                            <Setter Property="Fill" TargetName="CheckBox_OuterBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.IsCheckedBoxCenterFillKey}}" />
                            <Setter Property="Stroke" TargetName="CheckBox_OuterBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.IsCheckedBoxBorderFillKey}}" />
                            <Setter Property="Stroke" TargetName="Background" Value="{StaticResource GlyphActiveBackgroundBrush}" />
                            <Setter Property="Stroke" TargetName="Foreground" Value="{StaticResource GlyphActiveBackgroundBrush}" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckBox_OuterBox" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxIndeterminateCenterFillKey}}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                              <!--<Setter Property="Opacity" Value="0.3" />-->
                            <Setter TargetName="CheckBox_OuterBox" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxDisabledOuterBoxCenterFillKey}}" />
                            <Setter TargetName="CheckBox_OuterBox" Property="Stroke" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxDisabledOuterBoxBorderFillKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
                        </Trigger>

                        <Trigger Property="igRibbon:XamRibbon.HideAccessKey" Value="False">
                            <Setter TargetName="text" Property="RecognizesAccessKey" Value="True" />
                            <Setter TargetName="text" Property="Content" Value="{Binding Path=Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                                <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                               <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                           <Setter TargetName="textGlow" Property="IsGlowVisible" Value="True" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                                <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                               <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VistaWindowMaximizedTextFillKey}}" />
                        </MultiDataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- ButtonTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:ButtonTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template" Value="{StaticResource RibbonButtonToolTemplate}" />
        <Style.Triggers>
            <Trigger Property="igRibbon:RibbonGroup.IsDialogBoxLauncherTool" Value="True">
                <Setter Property="Template" Value="{DynamicResource {x:Static igRibbon:RibbonGroup.DialogBoxLauncherToolTemplateKey}}" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />
                </MultiDataTrigger.Conditions>
           <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                  <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VistaWindowMaximizedTextFillKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
            </MultiDataTrigger>

            <Trigger Property="IsEnabled" Value="False">
                  <!--<Setter Property="Opacity" Value="0.3" />-->
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </Trigger>
             <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- Ribbon's XamTabControl Style -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:XamRibbon.RibbonTabControlStyleKey}" TargetType="{x:Type igWindows:XamTabControl}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerFillKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}"/>
        <Setter Property="BorderThickness" Value="0 0 0 2"/>
        <Setter Property="Padding" Value="0,2,0,0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="MaximumSizeToFitAdjustment" Value="18"/>
        <Setter Property="MinimumTabExtent" Value="28"/>
        <Setter Property="PreTabItemContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Rectangle Width="56" Height="19"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Continue"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igWindows:XamTabControl}">
                    <Grid ClipToBounds="True" KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="gridRow0" Height="Auto"/>
                            <RowDefinition x:Name="gridRow1" Height="*"/>
                        </Grid.RowDefinitions>
                        <Border
							x:Name="ContentPanel"
							Grid.Row="1"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							KeyboardNavigation.DirectionalNavigation="Continue"
							KeyboardNavigation.TabIndex="2"
							KeyboardNavigation.TabNavigation="Local"
							SnapsToDevicePixels="True"
							Visibility="Visible">
                            <ContentPresenter
								x:Name="PART_SelectedContentHost"
								Height="{TemplateBinding TabItemContentHeight}"
								Margin="{TemplateBinding Padding}"
								Content="{TemplateBinding SelectedContent}"
								ContentSource="SelectedContent"
								ContentTemplate="{TemplateBinding SelectedContentTemplate}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								/>
                        </Border>
                         <Border Background="{TemplateBinding Background}"
                                 BorderBrush="{TemplateBinding BorderBrush}"
                                 BorderThickness="0 0 0 2"
                                 SnapsToDevicePixels="True">
                        <DockPanel
							x:Name="PART_HeaderArea"
							Panel.ZIndex="1"
							Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelBackgroundKey}}"
							SnapsToDevicePixels="True">
                            <ContentPresenter
								x:Name="PreTabItemContent"
								Content="{TemplateBinding PreTabItemContent}"
								ContentTemplate="{TemplateBinding PreTabItemContentTemplate}"
								ContentTemplateSelector="{TemplateBinding PreTabItemContentTemplateSelector}"
								KeyboardNavigation.DirectionalNavigation="Continue"
                                KeyboardNavigation.TabIndex="0" 
								DockPanel.Dock="Left"/>
                            <ContentPresenter
								x:Name="PostTabItemContent"
								Content="{TemplateBinding PostTabItemContent}"
								ContentTemplate="{TemplateBinding PostTabItemContentTemplate}"
								ContentTemplateSelector="{TemplateBinding PostTabItemContentTemplateSelector}"
                                KeyboardNavigation.TabIndex="2" 
								KeyboardNavigation.TabNavigation="Continue"
								DockPanel.Dock="Right"/>
                            <igWindows:XamPager
								x:Name="PART_TabItemScrollViewer"
								CanContentScroll="True"
								Focusable="False"
								KeyboardNavigation.DirectionalNavigation="Continue"
								KeyboardNavigation.TabIndex="1"
								KeyboardNavigation.TabNavigation="Local"
								ScrollLeftButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollLeftButtonStyleKey}}"
								ScrollRightButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollRightButtonStyleKey}}"
								ScrollViewer.HorizontalScrollBarVisibility="{TemplateBinding TabItemHorizontalScrollBarVisibility}"
								ScrollViewer.VerticalScrollBarVisibility="{TemplateBinding TabItemVerticalScrollBarVisibility}">
                                <ItemsPresenter x:Name="PART_TabHeaderPanel" Margin="2,0,2,0" KeyboardNavigation.TabNavigation="Once"/>
                            </igWindows:XamPager>
                        </DockPanel>
                              </Border>
                        <Popup
							x:Name="PART_Popup"
							Width="{TemplateBinding PreferredDropDownExtent}"
							AllowsTransparency="True"
							CustomPopupPlacementCallback="{TemplateBinding PreferredDropDownPlacementCallback}"
							igWindows:PopupHelper.HandleMouseDownOnClose="True"
							IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
							Placement="Custom"
							SnapsToDevicePixels="True"
							StaysOpen="False">
                            <AdornerDecorator>
                                <Border
									Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelBackgroundKey}}"
									KeyboardNavigation.DirectionalNavigation="Continue"
									KeyboardNavigation.TabIndex="2"
									KeyboardNavigation.TabNavigation="Local"
									SnapsToDevicePixels="True">
                                    <Border
                                        x:Name="PopupContentBorder"
										Background="{TemplateBinding Panel.Background}"
										BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}"
										BorderThickness="0,1"
										SnapsToDevicePixels="True">
                                        <ContentPresenter
											x:Name="PART_SelectedContentHostMinimized"
											Height="{TemplateBinding TabItemContentHeight}"
											HorizontalAlignment="{Binding HorizontalAlignment, ElementName=PART_SelectedContentHost}"
											Margin="{TemplateBinding Padding}"
											VerticalAlignment="{Binding VerticalAlignment, ElementName=PART_SelectedContentHost}"
											Content="{x:Null}"
											ContentSource="SelectedContent"
											ContentTemplate="{TemplateBinding SelectedContentTemplate}"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Border>
                                </Border>
                            </AdornerDecorator>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDropDownOpen" Value="False">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="Fade"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                              <Setter Property="Opacity" Value="0.3" />
                            <!--<Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GrayTextBrushKey}}"/>-->
                        </Trigger>
                        <Trigger Property="IsMinimized" Value="True">
                            <Setter TargetName="PART_SelectedContentHostMinimized" Property="Content" Value="{Binding SelectedContent, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="ContentPanel" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_SelectedContentHost" Property="Content" Value="{x:Null}"/>
                            <Setter Property="Grid.RowSpan" TargetName="PART_HeaderArea" Value="2" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.IsSelectedItemInContextualTabGroup" Value="True">
                            </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsWithinRibbonWindow), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                                <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="PART_HeaderArea" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelInactiveFillKey}}" />
                        </MultiDataTrigger>
                        <Trigger Property="igRibbon:XamRibbon.IsGlassActive" Value="False">
                            <Setter Property="BorderThickness" Value="0,1" />
                            <Setter Property="BorderThickness" TargetName="PopupContentBorder" Value="1" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.IsGlassActive" Value="True">
                            <Setter Property="Background" TargetName="PART_HeaderArea" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelGlassBackgroundKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Style.Triggers>
            <Trigger Property="IsMinimized" Value="True">
                <Setter Property="Height" Value="24"/>
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <!-- =================================================================== -->
    <!-- GalleryItemPresenter Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:GalleryItemPresenter}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <!--<Setter Property="Margin" Value="2"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:GalleryItemPresenter}">
                    <Grid x:Name="borderEntireItem" Background="#00ffffff">
                       <Border x:Name="Center" SnapsToDevicePixels="True" Visibility="Hidden" Margin="0,0,0,0" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterHoverCenterFillKey}}" />
                        <Grid Margin="2,2,2,2" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Border x:Name="borderImage" Grid.Row="0" Grid.Column="0" BorderBrush="Transparent" BorderThickness="2" >
                                <igWindows:AutoDisabledImage x:Name="image" Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Item.Image}" igWindows:Utilities.SnapElementToDevicePixels="True" />
                            </Border>
                            <TextBlock x:Name="text" Grid.Row="1" Grid.Column="0" Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" Visibility="{TemplateBinding TextVisibility}" TextAlignment="{TemplateBinding HorizontalTextAlignmentResolved}" VerticalAlignment="{TemplateBinding VerticalTextAlignmentResolved}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Item.Text}" />
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!-- Text visible and above Image-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TextPlacementResolved" Value="AboveImage" />
                                <Condition Property="TextVisibility" Value="Visible" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="borderImage" Property="Grid.Row" Value="1" />
                            <Setter TargetName="text" Property="Grid.Row" Value="0" />
                        </MultiTrigger>

                        <!-- Text visible and left of Image-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TextPlacementResolved" Value="LeftOfImage" />
                                <Condition Property="TextVisibility" Value="Visible" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="borderImage" Property="Grid.Column" Value="1" />
                            <Setter TargetName="text" Property="Grid.Row" Value="0" />
                        </MultiTrigger>

                        <!-- Text visible and right of Image-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TextPlacementResolved" Value="RightOfImage" />
                                <Condition Property="TextVisibility" Value="Visible" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="text" Property="Grid.Column" Value="1" />
                            <Setter TargetName="text" Property="Grid.Row" Value="0" />
                        </MultiTrigger>

                        <!-- Set highlight on the appropriate part of the Item when selected (i.e., IsSelected = true).  Check SelectionDisplayModeResolved 
to determine what part of the item to highlight -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="SelectionDisplayModeResolved" Value="HighlightImageOnly" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="borderImage" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterSelectedCenterFillKey}}" />
                             
                        </MultiTrigger>

                        <!-- Selected State-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="SelectionDisplayModeResolved" Value="HighlightEntireItem" />
                            </MultiTrigger.Conditions>
                           <Setter Property="Visibility" TargetName="Center" Value="Visible" />
                           <Setter Property="Background" TargetName="Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterSelectedCenterFillKey}}"/>
                           <Setter TargetName="text" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
                          </MultiTrigger>

                        <!-- Mouseover state-->
                        <!-- Set highlight when active (i.e., IsSelected = false and IsMouseOver = true) -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsHighlighted" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="Center" Value="Visible" />
                            <Setter TargetName="text" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsInPreviewArea" Value="True">
                <Setter Property="Focusable" Value="False" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- GalleryToolPreviewPresenter Style -->
    <!-- =================================================================== -->
    <!-- Preview Button Styles -->
    <Style x:Key="GalleryToolPreviewPresenter_ScrollUpButton" BasedOn="{x:Null}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid x:Name="GalleryToolPreviewPresenter_ScrollUpButton" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                        <Border x:Name="border" CornerRadius="0" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollUpButtonDisabledBorderLightFillKey}}" BorderThickness="1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollUpButtonDisabledCenterFillKey}}" SnapsToDevicePixels="True" IsHitTestVisible="True">
                            <Grid Opacity="1" x:Name="GalleryToolPreviewPresenter_EnabledArrowUp" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="2">
                                <Path Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="4" Width="8" Stretch="Fill" Opacity="1" Data="M 0,4 C0,4 8,4 8,4 8,4 4,0 4,0 4,0 0,4 0,4 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterDisabledArrowBackgroundFillKey}}" SnapsToDevicePixels="True" />
                                <Path Margin="1,1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="3" Width="6" Stretch="Fill" Opacity="1" Data="M 1,4 C1,4 7,4 7,4 7,4 4,1 4,1 4,1 1,4 1,4 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterDisabledArrowForegroundFillKey}}" SnapsToDevicePixels="True" x:Name="path" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonNormalCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonNormalBorderFillKey}}" />
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterEnabledArrowForegroundFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverBorderFillKey}}" />
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterEnabledArrowBackgroundFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollDownButtonPressedCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollUpButtonPressedBorderFillKey}}" />
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GalleryToolPreviewPresenter_ScrollDownButton" BasedOn="{x:Null}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid x:Name="GalleryToolPreviewPresenter_ScrollDownButton" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                        <Border  x:Name="border" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollUpButtonDisabledBorderLightFillKey}}" BorderThickness="1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollDownButtonDisabledCenterFillKey}}" SnapsToDevicePixels="True">
                            <Grid Opacity="1" x:Name="GalleryToolPreviewPresenter_EnabledArrowDown" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="2">
                                <Path x:Name="ArrowBackground" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="4" Width="8" Stretch="Fill" Opacity="1" Data="M 0,0 C0,0 8,0 8,0 8,0 4,4 4,4 4,4 0,0 0,0 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterDisabledArrowBackgroundFillKey}}" SnapsToDevicePixels="True" ClipToBounds="False" />
                                <Path x:Name="ArrowForeground" Margin="1,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="3" Width="6" Stretch="Fill" Opacity="1" Data="M 1,0 C1,0 7,0 7,0 7,0 4,3 4,3 4,3 1,0 1,0 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterDisabledArrowForegroundFillKey}}" SnapsToDevicePixels="True" ClipToBounds="False" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonNormalCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonNormalBorderFillKey}}" />
                            <Setter Property="Fill" TargetName="ArrowForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterEnabledArrowForegroundFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverBorderFillKey}}" />
                            <Setter Property="Fill" TargetName="ArrowForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterEnabledArrowBackgroundFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollDownButtonPressedCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollUpButtonPressedBorderFillKey}}" />
                            <Setter Property="Fill" TargetName="ArrowForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GalleryToolPreviewPresenter_DropDownButton" TargetType="{x:Type ButtonBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid x:Name="GalleryToolPreviewPresenter_DropDownButton" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                        <Border x:Name="border" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonNormalBorderFillKey}}" BorderThickness="1" SnapsToDevicePixels="True" CornerRadius="0"  Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonNormalCenterFillKey}}">
                            <Grid HorizontalAlignment="Center" VerticalAlignment="Center" Margin="2">
                                <Path x:Name="path1" SnapsToDevicePixels="True" d:LayoutOverrides="Height" HorizontalAlignment="Center" Margin="0,3,0,0" VerticalAlignment="Top" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterDropDownButtonIconForegroundFillKey}}" Stretch="None" Data="M0,0L5,0 2.5,3z" />
                                <Rectangle x:Name="rectangle1" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Top" Width="5" Height="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterDropDownButtonIconForegroundFillKey}}" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverBorderFillKey}}" />
                            <Setter Property="Fill" TargetName="path1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterEnabledArrowForegroundFillKey}}" />
                            <Setter Property="Fill" TargetName="rectangle1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterEnabledArrowBackgroundFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollDownButtonPressedCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollUpButtonPressedBorderFillKey}}" />
                            <Setter Property="Fill" TargetName="path1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
                            <Setter Property="Fill" TargetName="rectangle1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.IsActive" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverBorderFillKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type igRibbon:GalleryToolPreviewPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:GalleryToolPreviewPresenter}">
                    <Border x:Name="GalleryToolPreviewPresenterBorder" Grid.Column="0" BorderThickness="1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterBorderFillKey}}" SnapsToDevicePixels="True" CornerRadius="0" Margin="3">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="15" />
                            </Grid.ColumnDefinitions>

                            <igRibbon:GalleryPreviewScroller x:Name="galleryPreviewScroller" Grid.Column="0" Margin="3" VerticalAlignment="Stretch">
                                <igRibbon:GalleryWrapPanel IsItemsHost="true" MinColumns="{Binding Path=MinColumns, RelativeSource={RelativeSource TemplatedParent}}" MaxColumns="{Binding Path=MaxColumns, RelativeSource={RelativeSource TemplatedParent}}" />
                            </igRibbon:GalleryPreviewScroller>

                            <Grid Grid.Column="1">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>

                                <RepeatButton Focusable="False" Grid.Row="0" Command="igRibbon:GalleryPreviewScroller.ScrollUpCommand" CommandTarget="{Binding ElementName=galleryPreviewScroller}" Style="{StaticResource GalleryToolPreviewPresenter_ScrollUpButton}" Margin="0,-1,-1,-1" />
                                <RepeatButton Focusable="False" Grid.Row="1" Command="igRibbon:GalleryPreviewScroller.ScrollDownCommand" CommandTarget="{Binding ElementName=galleryPreviewScroller}" Style="{StaticResource GalleryToolPreviewPresenter_ScrollDownButton}" Margin="0,-1,-1,0" />
                                <Button x:Name="PART_DropDownButton" Focusable="False" Grid.Row="2" Command="igRibbon:GalleryPreviewScroller.DropdownGalleryCommand" CommandTarget="{Binding ElementName=galleryPreviewScroller}" Style="{StaticResource GalleryToolPreviewPresenter_DropDownButton}" igRibbon:XamRibbon.KeyTipPlacementType="DropDownButton" Margin="0,-1,-1,-1" />
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- GalleryItemGroup Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:GalleryItemGroup}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:GalleryItemGroup}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border x:Name="Caption" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionStrokeFillKey}}" BorderThickness="0" CornerRadius="0" Padding="11,2,0,1">
                            <TextBlock Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextNormalForegroundFillKey}}" Grid.Row="0" FontWeight="Bold" Text="{TemplateBinding Title}" />
                        </Border>
                        <igRibbon:GalleryWrapPanel Grid.Row="1" MinColumns="{Binding Path=GalleryTool.MinDropDownColumns, RelativeSource={RelativeSource TemplatedParent}}" MaxColumns="{Binding Path=GalleryTool.MaxDropDownColumns, RelativeSource={RelativeSource TemplatedParent}}" PreferredColumns="{Binding Path=GalleryTool.PreferredDropDownColumns, RelativeSource={RelativeSource TemplatedParent}}" IsItemsHost="True" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- StatusBar Style -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:RibbonWindowContentHost.StatusBarStyleKey}" TargetType="{x:Type StatusBar}">
     <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.StatusBarFillKey}}" />
     <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.StatusBarBorderFillKey}}" />
        <!-- AS 6/29/12 Just a top border when using glass -->
        <Setter Property="BorderThickness" Value="0,1,0,0" />
        <Setter Property="Border.CornerRadius" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBar}">
                    <Grid x:Name="StatusBar">
                        <Border x:Name="StatusBar_BackgroundLayer" SnapsToDevicePixels="True" 
                                CornerRadius="{TemplateBinding Border.CornerRadius}" 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}">
                        </Border>
                        <Border Padding="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).(StatusBarPadding), RelativeSource={RelativeSource Self}}">
                            <ItemsPresenter OpacityMask="{x:Null}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Margin="{TemplateBinding Padding}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!-- AS 6/29/12 Provide borders when not using glass -->
            <Trigger Property="igRibbon:XamRibbon.IsGlassActive" Value="False">
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- StatusBarItem Style -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:RibbonWindowContentHost.StatusBarItemStyleKey}" TargetType="{x:Type StatusBarItem}">
        <Setter Property="BorderThickness" Value="0,0,0,0" />
        <Setter Property="Padding" Value="3,0" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBarItem}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                              <Setter Property="Opacity" Value="0.3" />
                            <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.StatusBarTextForegroundFillKey}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsScenicTheme, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:RibbonWindowContentHost}, 1}}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ScenicStatusBarTextForegroundFillKey}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- StatusBar Separator Style -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:RibbonWindowContentHost.StatusBarSeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.StatusBarSeparatorGradientRightKey}}" />
        <Setter Property="Margin" Value="2,0,2,0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Width="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Margin="0,1,0,0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0,0,1,0" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.StatusBarSeparatorGradientLeftKey}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsScenicTheme, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:RibbonWindowContentHost}, 1}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.StatusBarSeparatorGradientRightKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ScenicStatusBarSeparatorGradientLeftKey}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- RibbonGroup Collapsed Toggle Button Style -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:RibbonGroup.CollapsedGroupButtonStyleKey}" TargetType="{x:Type igRibbon:DropDownToggle}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:DropDownToggle}">
                    <igWindows:CardPanel Background="#00ffffff" Margin="-1,4,-1,4" >
                        <Border x:Name="CenterFill" SnapsToDevicePixels="True" Margin="0" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedNormalCenterFillKey}}" CornerRadius="0" />
                        <Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" Margin="2,2,2,2">
                            <StackPanel>
                                <Border x:Name="InnerArea" SnapsToDevicePixels="True" Height="30" Width="30" BorderThickness="1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedInnerAreaNormalBorderFillKey}}" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedNormalCenterFillKey}}" CornerRadius="0" Padding="0" HorizontalAlignment="Center" Margin="0,3,0,3">
                                    <Grid Width="Auto" Height="Auto">
                                        <igWindows:AutoDisabledImage x:Name="image" Width="16" Height="16" Source="{Binding Path=(igRibbon:RibbonGroup.SmallImage), RelativeSource={x:Static RelativeSource.TemplatedParent}}" igWindows:Utilities.SnapElementToDevicePixels="True" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" />
                                    </Grid>
                                </Border>
                                <igRibbon:LargeToolCaptionPresenter x:Name="Caption" HorizontalAlignment="Center" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" Text="{Binding Path=(igRibbon:RibbonGroup.Caption), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource stringWithoutMnemonicsConverter}}">
                                    <igRibbon:LargeToolCaptionPresenter.Glyph>
                                        <Control x:Name="largeCaptionGlyph" Margin="0,4,0,0" Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuToolDropDownArrowStyleKey}}" />
                                    </igRibbon:LargeToolCaptionPresenter.Glyph>
                                </igRibbon:LargeToolCaptionPresenter>
                            </StackPanel>
                        </Border>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="igRibbon:XamRibbon.IsActive" Value="True">
                            <Setter Property="Background" TargetName="CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedIsActiveCenterFillKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsDroppedDown" Value="True">
                            <Setter Property="Background" TargetName="CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedPressedCenterFillKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
                            <Setter TargetName="largeCaptionGlyph" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedHoverCenterFillKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </Trigger>
                        
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="True" />
                                <Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="CenterFill" Value="Visible" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="False" />
                                <Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="CenterFill" Value="Collapsed" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedHoverCenterFillKey}}" />
                            <Setter TargetName="CenterFill" Property="Visibility" Value="Visible" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="True" />
                                <Condition Property="IsDroppedDown" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CenterFill" Property="Visibility" Value="Visible" />
                            <Setter Property="Background" TargetName="CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedPressedCenterFillKey}}" />
                        </MultiTrigger>
                        <!-- END Triggers for when IsInContextualTabGroup -->

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- RibbonGroup Qat Toggle Button Style -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:RibbonGroup.QuickAccessToolbarGroupButtonStyleKey}" TargetType="{x:Type igRibbon:DropDownToggle}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:DropDownToggle}">
                    <!-- The element is shifted up by 2 to meet fitt's law -->
                    <Grid x:Name="RibbonGroupQAT" Background="#00ffffff" Margin="0,-2,0,0">
                        <Rectangle x:Name="BorderAndInnerBorder" Opacity="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,2,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATNormalCenterFillKey}}" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATBorderDarkFillKey}}" />
                       <Border SnapsToDevicePixels="True" Margin="2,4,2,2" x:Name="border" BorderThickness="1,1,1,1" CornerRadius="0" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATNormalCenterFillKey}}">
                            <igWindows:AutoDisabledImage x:Name="image" Source="{Binding Path=(igRibbon:RibbonGroup.SmallImage), RelativeSource={x:Static RelativeSource.TemplatedParent}}" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="igRibbon:XamRibbon.IsActive" Value="True">
                           <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATNormalCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATBorderDarkFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                           <Setter TargetName="BorderAndInnerBorder" Property="Stroke" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATHoverCenterFillKey}}" />
                            <Setter TargetName="BorderAndInnerBorder" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATHoverCenterFillKey}}" />
                            <!--<Setter Property="Stroke" TargetName="BorderAndInnerBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATHover3InnerBorderFillKey}}" />-->
                        </Trigger>
                        <Trigger Property="IsDroppedDown" Value="True">
                           <Setter TargetName="BorderAndInnerBorder" Property="Stroke" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATPressedCenterFillKey}}" />
                            <Setter TargetName="BorderAndInnerBorder" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATPressedCenterFillKey}}" />
                            </Trigger>
                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter TargetName="BorderAndInnerBorder" Property="Stroke" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATVistaNormalBorderDarkFillKey}}" />
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="BorderAndInnerBorder" Property="Stroke" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATVistaHoverBorderDarkFillKey}}" />
                           <Setter Property="Fill" TargetName="BorderAndInnerBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATVistaHover2InnerBorderFillKey}}" />
                           </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- XamRibbonScreenTip -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:XamRibbonScreenTip}">
        <Style.Resources>
            <DataTemplate DataType="{x:Type sys:String}">
                <TextBlock TextWrapping="Wrap" Text="{Binding}" />
            </DataTemplate>
        </Style.Resources>
        <Setter Property="Padding" Value="7,2" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextNormalForegroundFillKey}}"/>
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource Self}, Path=(igRibbon:XamRibbon.Ribbon).PreferredFont, FallbackValue='Segoe UI'}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamScreenTipBorderFillKey}}" />
        <Setter Property="Width" Value="210" />
        <Setter Property="MinHeight" Value="50" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamScreenTipFillKey}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:XamRibbonScreenTip}">
                    <Grid Margin="5 0 5 5">
                        <Border Background="{StaticResource TooltipShadowBrush}" CornerRadius="5" Margin="-4" Opacity="0.1" />
                        <Border Background="{StaticResource TooltipShadowBrush}" CornerRadius="4" Margin="-3" Opacity="0.3" />
                        <Border Background="{StaticResource TooltipShadowBrush}" CornerRadius="3" Margin="-2" Opacity="0.5" />
                        <Border Background="{StaticResource TooltipShadowBrush}" CornerRadius="2" Margin="-1" Opacity="0.7" />
                        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="0">
                            <Grid Margin="{TemplateBinding Padding}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <!-- Header Content -->
                                <ContentControl Grid.Row="0" FontWeight="Bold" Margin="5,7,5,5" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" SnapsToDevicePixels="True" />

                                <!-- Header Separator -->
                                <StackPanel Grid.Row="1" Margin="4,0,3,5" Visibility="{TemplateBinding HeaderSeparatorVisibility}">
                                    <Rectangle Height="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamScreenTipSeparatorDarkFillKey}}" HorizontalAlignment="Stretch" SnapsToDevicePixels="True" />
                                    </StackPanel>

                                <!-- Main Content -->
                                <Grid Grid.Row="2" Margin="0,3,13,0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>

                                    <Image Grid.Column="0" Margin="12,0,0,0" Source="{TemplateBinding ContentImage}" />
                                    <ContentPresenter x:Name="mainContent" Margin="0,0,0,0" Grid.Column="1" />
                                    </Grid>

                                <!-- Footer Separator -->
                                <StackPanel Grid.Row="3" Margin="4,5,4,7" Visibility="{TemplateBinding FooterSeparatorVisibility}">
                                    <Rectangle Height="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamScreenTipSeparatorDarkFillKey}}" HorizontalAlignment="Stretch" SnapsToDevicePixels="True" />
                                 </StackPanel>

                                <!-- Footer Content -->
                                <ContentControl Grid.Row="4" FontWeight="Bold" Margin="5,-1,5,6" Content="{TemplateBinding Footer}" ContentTemplate="{TemplateBinding FooterTemplate}" ContentTemplateSelector="{TemplateBinding FooterTemplateSelector}" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContentImage" Value="True">
                            <Setter Property="Width" Value="318" />
                            <Setter Property="Margin" Value="13,0,0,0" TargetName="mainContent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- DialogBoxLauncherToolTemplate -->
    <!-- =================================================================== -->
    <ControlTemplate TargetType="{x:Type igRibbon:ButtonTool}" x:Key="{x:Static igRibbon:RibbonGroup.DialogBoxLauncherToolTemplateKey}">
        <Grid Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center" Width="15" Height="15" Background="#00000000">
           <Border x:Name="border2"  Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateHoverCenterFillKey}}" SnapsToDevicePixels="True" Visibility="Hidden" />
            <Grid x:Name="ToolBar_Corner" Margin="1,0,0,0" Width="8" Height="8" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Path x:Name="CornerForeground" Stretch="Fill" Opacity="1" Data="M 0,0 C0,0 0,1 0,1 0,1 0,6 0,6 0,6 1,6 1,6 1,6 1,1 1,1 1,1 6,1 6,1 6,1 6,0 6,0 6,0 0,0 0,0 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphNormalForegroundFillKey}}" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" Margin="0,0,2,2" />
               <Path x:Name="ArrowForeground" Opacity="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphNormalForegroundFillKey}}" Stretch="Fill" Margin="3,3,1,1" Data="F1 M3,-3 L4,-3 4,-2 4,-1 4,1 2,1 1,1 0,1 0,0 1,0 1,-2 3,-2 3,-3 z M0,-3 L1,-3 1,-2 0,-2 0,-3 z" />
                </Grid>
        </Grid>
        <ControlTemplate.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="CornerForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolDisabledBorderLightFillKey}}" />
				<Setter TargetName="ArrowForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolDisabledBorderLightFillKey}}" />
			</Trigger>
			<Trigger Property="IsActive" Value="True">
                <Setter Property="Visibility" TargetName="border2" Value="Visible" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Visibility" TargetName="border2" Value="Visible" />
                <Setter TargetName="CornerForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphHoverForegroundFillKey}}" />
                <Setter TargetName="ArrowForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphHoverForegroundFillKey}}" />
               </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Visibility" TargetName="border2" Value="Visible" />
              <Setter Property="Background" TargetName="border2" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplatePressedCenterFillKey}}" />
                <Setter TargetName="CornerForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphPressedForegroundFillKey}}" />
                <Setter TargetName="ArrowForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphPressedForegroundFillKey}}" />
                </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- =================================================================== -->
    <!-- SeparatorTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:SeparatorTool}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:SeparatorTool}">
                    <igWindows:CardPanel>
                        <igWindows:CardPanel x:Name="HorizontalSeparator" Margin="1,0,1,0" SnapsToDevicePixels="true" Grid.Column="1">
                            <Rectangle Height="1" Margin="0,0,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.HorizontalSeparatorNormalDarkFillKey}}" SnapsToDevicePixels="true" />
                            <Rectangle Height="1" Margin="0,1,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.HorizontalSeparatorNormalLightFillKey}}" SnapsToDevicePixels="true" />
                        </igWindows:CardPanel >

                        <!-- Vertical Separator used in RibbonGroups and ApplicationMenuFooterToolbar. -->
                        <igWindows:CardPanel x:Name="VerticalSeparator" Width="3" Visibility="Collapsed" >
                            <Border BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VerticalSeparatorNormalLightFillKey}}" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VerticalSeparatorNormalDarkFillKey}}" BorderThickness="1,0" SnapsToDevicePixels="True"/>
                        </igWindows:CardPanel>
                    </igWindows:CardPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Location" Value="Ribbon">
                            <Setter Property="Visibility" Value="Visible" TargetName="VerticalSeparator"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="HorizontalSeparator"/>
                        </Trigger>
                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Visibility" Value="Visible" TargetName="VerticalSeparator"/>
                            <Setter Property="Margin" Value="0,4,0,4" TargetName="VerticalSeparator"/>
                            <Setter Property="Margin" Value="6,0,0,0"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="HorizontalSeparator"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========================================================================================= -->
    <!-- ToolTip Style - Used for Non ScreenTip ToolTips for RibbonTabItem and ContextualTabGroup  -->
    <!-- ========================================================================================= -->
    <Style TargetType="{x:Type ToolTip}" x:Key="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextNormalForegroundFillKey}}"/>
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource Self}, Path=(igRibbon:XamRibbon.Ribbon).PreferredFont, FallbackValue='Segoe UI'}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="12,9" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolTipNonScreenTipBorderFillKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolTipNonScreenTipCenterFillKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Grid>
                        <Grid Margin="5">
                            <Border Background="{StaticResource TooltipShadowBrush}" CornerRadius="5" Margin="-4" Opacity="0.1" />
                            <Border Background="{StaticResource TooltipShadowBrush}" CornerRadius="4" Margin="-3" Opacity="0.3" />
                            <Border Background="{StaticResource TooltipShadowBrush}" CornerRadius="3" Margin="-2" Opacity="0.5" />
                            <Border Background="{StaticResource TooltipShadowBrush}" CornerRadius="2" Margin="-1" Opacity="0.7" />
                            <Rectangle Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}" StrokeThickness="{TemplateBinding BorderThickness}" />
                            <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- KeyTip Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:KeyTip}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextNormalForegroundFillKey}}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="4 0 4 1" />
        <Setter Property="Border.CornerRadius" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:KeyTip}">
                    <Grid >
                        <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.KeyTipCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.KeyTipBorderFillKey}}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding Border.CornerRadius}" SnapsToDevicePixels="True">
                            <TextBlock HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Text="{TemplateBinding Value}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                  <Setter Property="Opacity" Value="0.3" />
                <!--<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonGroupDisabledBorderFillKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonGroupDisabledCenterFillKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextDisabledForegroundFillKey}}"/>-->
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- ComboEditorTool Style -->
    <!-- =================================================================== -->
    <!-- NOTE: do not modify the key of this style unless you make a corresponding change to the 
             Infragistics.Windows.Themes.RibbonResourceSet<T>.ComboEditorTool_DropDownButtonStyle property-->
    <Style x:Key="ComboEditor_DropDownButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                        </Grid.ColumnDefinitions>
                        <Grid x:Name="ComboEditorDropdown" Visibility="Hidden" HorizontalAlignment="Right" Background="#00000000" Grid.Column="1" Width="14" Margin="0,-1,-1,-1">
                            <Border SnapsToDevicePixels="True" x:Name="OuterBorder" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownEnabledCenterFillKey}}" BorderThickness="0,0,0,0" />
                            </Grid>
                        <Grid Grid.Column="1" Width="14" HorizontalAlignment="Right" SnapsToDevicePixels="True" Margin="0,-1,-1,-1">
                           <Path x:Name="ArrowForeground" Grid.Column="1" SnapsToDevicePixels="True" Margin="0,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Width="Auto" Height="3" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownGlyphNormalForegroundFillKey}}" Stretch="None" Data="M 0,0 C0,0 0,1 0,1 0,1 1,1 1,1 1,1 1,2 1,2 1,2 2,2 2,2 2,2 2,3 2,3 2,3 3,3 3,3 3,3 3,2 3,2 3,2 4,2 4,2 4,2 4,1 4,1 4,1 5,1 5,1 5,1 5,0 5,0 5,0 0,0 0,0 z" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="Tag" Value="MouseOverControlTrue">
                            <Setter Property="Visibility" TargetName="ComboEditorDropdown" Value="Visible" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                              <Setter Property="Opacity" Value="0.3" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="ComboEditorDropdown" Value="Visible" />
                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownPressedCenterFillKey}}" />
                           <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownPressedBorderLightFillKey}}" />
                            <Setter Property="BorderThickness" TargetName="OuterBorder" Value="1,1,1,1" />
                            <Setter TargetName="ArrowForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
                             </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="ComboEditorDropdown" Value="Visible" />
                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownHoverCenterFillKey}}" />
                            <Setter Property="BorderThickness" TargetName="OuterBorder" Value="1,1,1,1" />
                            <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownHoverBorderLightFillKey}}" />
                            <Setter TargetName="ArrowForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownGlyphHoverForegroundFillKey}}" />
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

 
     <!-- =================================================================== -->
    <!-- ComboEditorTool templates -->
    <!-- =================================================================== -->
    <ControlTemplate x:Key="ComboEditor_EditableComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid Background="Transparent" SnapsToDevicePixels="True">
            <Grid IsSharedSizeScope="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                </Grid.ColumnDefinitions>
                <Grid Grid.Column="0" Margin="{TemplateBinding Padding}">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                   
                    <TextBox Name="PART_EditableTextBox" Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" Grid.Column="1" Padding="-1,0,0,0" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Background="Transparent" Style="{StaticResource ComboEditor_TextBoxStyle}" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}" InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}" />
                 
                    <igWindows:GrowOnlyDecorator x:Name="imageDecorator">
                        <igWindows:CardPanel x:Name="imagePanel" Visibility="Collapsed" VerticalAlignment="Center" Margin="1,0,-1,0">
                            <!-- This text block is used to make sure the image height is as tall as text because that's how
                                the image is displayed in the ComboBoxDataItem template.-->
                            <TextBlock x:Name="textBlock" Visibility="Hidden" VerticalAlignment="Center" />
                            <Image x:Name="image" Stretch="Uniform" StretchDirection="Both" VerticalAlignment="Center" Height="{Binding ElementName=textBlock, Path=ActualHeight, Mode=OneWay}" />
                        </igWindows:CardPanel>
                    </igWindows:GrowOnlyDecorator>
                </Grid>
                <ToggleButton Grid.Column="1" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{x:Null}" Style="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownButtonStyle, RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}" />
            </Grid>
            <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" VerticalOffset="1" HorizontalOffset="-1" IsOpen="{TemplateBinding IsDropDownOpen}" Focusable="False" SnapsToDevicePixels="True" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MinDropDownWidthResolved, RelativeSource={RelativeSource TemplatedParent}}" MaxWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}}">

                <luna:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">

                    <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderDarkFillKey}}" CornerRadius="0" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                        <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderLightFillKey}}" Margin="1,1,1,1" BorderThickness="1,1,1,1" CornerRadius="0" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                            <igWindows:PopupResizerDecorator ResizeMode="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownResizeMode, RelativeSource={RelativeSource TemplatedParent}}" ResizerBarStyle="{DynamicResource {x:Static igRibbon:XamRibbon.PopupResizerBarStyleKey}}">
                                <DockPanel>
                                    <ContentPresenter DockPanel.Dock="Top" ContentTemplate="{Binding Path=PreDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igRibbon:ComboEditorTool}}}" />
                                    <ContentPresenter DockPanel.Dock="Bottom" ContentTemplate="{Binding Path=PostDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igRibbon:ComboEditorTool}}}" />
                               <ScrollViewer x:Name="ScrollViewer" Style="{StaticResource GalleryToolDropDownPresenter_ScrollViewer}" Width="Auto" HorizontalAlignment="Stretch">
                                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </DockPanel>
                            </igWindows:PopupResizerDecorator>
                        </Border>
                    </Border>
                </luna:SystemDropShadowChrome>
            </Popup>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" />
            </Trigger>

            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="PART_Popup" Property="Height" Value="95" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
                <Setter TargetName="Shdw" Property="Margin" Value="1,0,1,1" />
                <Setter TargetName="Shdw" Property="Color" Value="#19000000" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                 <Setter Property="Opacity" Value="0.3" />
                <!--<Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Foreground" />-->
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
    
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <!-- This condition checks to see if the SelectedItem is ComboBoxDataItem. -->
                    <Condition Value="True" Binding="{Binding Path=SelectedItem, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource typeCheckConverter}, ConverterParameter={x:Type igEditors:ComboBoxDataItem}, Mode=OneWay}" />
                    <!-- This condition checks to see if DisplayMemberPath is null or empty string. -->
                    <Condition Value="False" Binding="{Binding Path=DisplayMemberPath, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource nullToFalseConverter}, Mode=OneWay}" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="image" Property="Source" Value="{Binding Path=SelectedItem.Image, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=OneWay}" />
                <Setter TargetName="imagePanel" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <DataTrigger Value="False" Binding="{Binding Path=(igEditors:XamComboEditor.ComboEditor).IsInEditMode, RelativeSource={RelativeSource TemplatedParent}}">
                <Setter TargetName="imageDecorator" Property="ResetSize" Value="True" />
            </DataTrigger>
            <DataTrigger Value="True" Binding="{Binding Path=ContextMenu, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource nullToFalseConverter}}">
                <Setter TargetName="PART_EditableTextBox" Property="ContextMenu" Value="{Binding Path=ContextMenu, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboEditor_NonEditableComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid Background="Transparent" SnapsToDevicePixels="True">
            <Grid IsSharedSizeScope="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                </Grid.ColumnDefinitions>
                <Border Name="SelectedItemBorder" BorderBrush="Transparent" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}">
                    <ContentPresenter Grid.Column="1" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="1,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </Border>
                <ToggleButton Grid.ColumnSpan="3" Style="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownButtonStyle, RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}" />
            </Grid>
            <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" VerticalOffset="1" HorizontalOffset="-1" IsOpen="{TemplateBinding IsDropDownOpen}" Focusable="False" SnapsToDevicePixels="True" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MinDropDownWidthResolved, RelativeSource={RelativeSource TemplatedParent}}" MaxWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}}">
                <luna:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">

                    <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderDarkFillKey}}" CornerRadius="0" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                        <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderLightFillKey}}" Margin="1,1,1,1" BorderThickness="1,1,1,1" CornerRadius="0" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                            <igWindows:PopupResizerDecorator ResizeMode="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownResizeMode, RelativeSource={RelativeSource TemplatedParent}}" ResizerBarStyle="{DynamicResource {x:Static igRibbon:XamRibbon.PopupResizerBarStyleKey}}">
                                <DockPanel>
                                    <ContentPresenter DockPanel.Dock="Top" ContentTemplate="{Binding Path=PreDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igRibbon:ComboEditorTool}}}" />
                                    <ContentPresenter DockPanel.Dock="Bottom" ContentTemplate="{Binding Path=PostDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igRibbon:ComboEditorTool}}}" />

                                    <ScrollViewer x:Name="ScrollViewer" Style="{StaticResource GalleryToolDropDownPresenter_ScrollViewer}" Width="Auto" HorizontalAlignment="Stretch">
                                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </DockPanel>
                            </igWindows:PopupResizerDecorator>
                        </Border>
                    </Border>
                </luna:SystemDropShadowChrome>
            </Popup>
        </Grid>

        <ControlTemplate.Triggers>
            <!-- AS 11/30/07 BR28788 -->
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelectionBoxHighlighted" Value="True" />
                    <Condition Property="IsDropDownOpen" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" Property="Foreground" />
            </MultiTrigger>
            <Trigger Property="IsSelectionBoxHighlighted" Value="True">
                <Setter TargetName="SelectedItemBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="PART_Popup" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                  <Setter Property="Opacity" Value="0.3" />
                <!--<Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Foreground" />-->
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
                <Setter TargetName="Shdw" Property="Margin" Value="1,0,1,1" />
                <Setter TargetName="Shdw" Property="Color" Value="#19000000" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="IsTextSearchEnabled" Value="False" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <Style x:Key="{x:Static igRibbon:ComboEditorTool.ComboEditorToolComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Template" Value="{StaticResource ComboEditor_EditableComboBoxTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{StaticResource ComboEditor_NonEditableComboBoxTemplate}" />
        <Setter Property="IsSynchronizedWithCurrentItem" Value="False" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <igEditors:VirtualizingStackPanelEx />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style />
            </Setter.Value>
        </Setter>
    </Style>

	<!-- *********************************  ComboBoxItem Style  ********************************* -->
	<Style x:Key="ComboBoxItemStyle" TargetType="ComboBoxItem">
		<Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource Self}, Path=(igRibbon:XamRibbon.Ribbon).PreferredFont, FallbackValue='Segoe UI'}" />
		<Setter Property="Height" Value="22" />
		<Setter Property="Padding" Value="6,0" />
		<Setter Property="Margin" Value="1" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Background" Value="{StaticResource TransparentBrush}" />
		<Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Template">
      <Setter.Value>
       <ControlTemplate TargetType="ComboBoxItem">
        <Grid x:Name="Main" Background="{TemplateBinding Background}">
         <VisualStateManager.VisualStateGroups>
          <VisualStateGroup x:Name="CommonStates">
           <VisualState x:Name="Normal" />
           <VisualState x:Name="MouseOver">
            <Storyboard>
             <DoubleAnimation Duration="0" Storyboard.TargetName="fillColor" Storyboard.TargetProperty="Opacity" To="1" />
             <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Stroke">
              <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource ComboBoxItemHoverBackgroundBrush}" />
             </ObjectAnimationUsingKeyFrames>
            </Storyboard>
           </VisualState>
           <VisualState x:Name="Disabled">
            <Storyboard>
             <DoubleAnimation Duration="0" Storyboard.TargetName="Main" Storyboard.TargetProperty="Opacity" To="0.3" />
            </Storyboard>
           </VisualState>
          </VisualStateGroup>
          <VisualStateGroup x:Name="SelectionStates">
           <VisualState x:Name="Unselected" />
           <VisualState x:Name="Selected">
            <Storyboard>
             <ObjectAnimationUsingKeyFrames Storyboard.TargetName="CheckedBd" Storyboard.TargetProperty="(UIElement.Visibility)">
              <DiscreteObjectKeyFrame KeyTime="0">
               <DiscreteObjectKeyFrame.Value>
                <Visibility>Visible</Visibility>
               </DiscreteObjectKeyFrame.Value>
              </DiscreteObjectKeyFrame>
             </ObjectAnimationUsingKeyFrames>
                 <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Foreground" Storyboard.TargetName="contentControl">
                     <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource GlyphActiveBackgroundBrush}" />
                 </ObjectAnimationUsingKeyFrames>
            </Storyboard>
           </VisualState>
           <VisualState x:Name="SelectedUnfocused" />
          </VisualStateGroup>
          <VisualStateGroup x:Name="FocusStates">
           <VisualState x:Name="Focused">
            <Storyboard>
             <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Visibility">
              <DiscreteObjectKeyFrame KeyTime="0">
               <DiscreteObjectKeyFrame.Value>
                <Visibility>Visible</Visibility>
               </DiscreteObjectKeyFrame.Value>
              </DiscreteObjectKeyFrame>
             </ObjectAnimationUsingKeyFrames>
            </Storyboard>
           </VisualState>
           <VisualState x:Name="Unfocused" />
          </VisualStateGroup>
          <VisualStateGroup x:Name="LayoutStates">
           <VisualState x:Name="AfterLoaded" />
           <VisualState x:Name="BeforeLoaded" />
           <VisualState x:Name="BeforeUnloaded" />
          </VisualStateGroup>
         </VisualStateManager.VisualStateGroups>
         <Rectangle Fill="{StaticResource TransparentBrush}" />
         <Rectangle x:Name="fillColor" Fill="{StaticResource ComboBoxItemHoverBackgroundBrush}" IsHitTestVisible="False" Opacity="0" />
         <Rectangle x:Name="FocusVisualElement" Stroke="{StaticResource ComboBoxFocusedBorderBrush}" Visibility="Collapsed" />
         <Rectangle x:Name="CheckedBd" Fill="{StaticResource ComboBoxItemPressedBackgroundBrush}" IsHitTestVisible="False" Visibility="Collapsed" />
         <ContentControl x:Name="contentControl" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="False" Foreground="{TemplateBinding Foreground}">
          <ContentPresenter x:Name="contentPresenter" />
         </ContentControl>
        </Grid>
       </ControlTemplate>
      </Setter.Value>
     </Setter>
    </Style>

    <Style TargetType="{x:Type igRibbon:ComboEditorTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2,2,2,2" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="DropDownButtonStyle" Value="{StaticResource ComboEditor_DropDownButtonStyle}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="ComboBoxStyle" Value="{DynamicResource {x:Static igRibbon:ComboEditorTool.ComboEditorToolComboBoxStyleKey}}" />
   <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:ComboEditorTool}">
                    <!-- JM 09-05-18 TFS254718 - Change the StackPanel to a grid and bind the Width of the column containing the ComboBox to the EditAreaWidth property. -->
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="{TemplateBinding Property=EditAreaWidth}"/>
                        </Grid.ColumnDefinitions>
                        <igWindows:AutoDisabledImage Grid.Column="0" Width="16" Height="16" x:Name="Image" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Visibility="Collapsed" Source="{TemplateBinding igRibbon:TextEditorTool.ImageResolved}" />
                        <ContentPresenter x:Name="Caption" Grid.Column="1" Margin="0,0,5,0" Visibility="{Binding Path=(igRibbon:ButtonTool.HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Content="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}" />
                        <Border x:Name="MainBorder" Grid.Column="2" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" BorderThickness="1,1,1,1" Width="{TemplateBinding EditAreaWidth}" CornerRadius="2">
                            <Grid>
                                <ComboBox Name="PART_FocusSite" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{TemplateBinding ReadOnly}" Background="Transparent" BorderBrush="Transparent" BorderThickness="1" ContextMenu="{TemplateBinding ContextMenu}" IsDropDownOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{TemplateBinding ComboBoxStyle}" IsEditable="{TemplateBinding IsEditable}" SelectedValuePath="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsProvider.ValuePath}" DisplayMemberPath="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsProvider.DisplayMemberPath}" MaxDropDownHeight="{TemplateBinding MaxDropDownHeight}" igEditors:XamComboEditor.ComboEditor="{Binding RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}" InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}" ItemContainerStyle="{StaticResource ComboBoxItemStyle}" />
								<Grid Name="TextBlockGrid">
                                    
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <TextBlock x:Name="TextBlock" Grid.Column="0" Padding="{TemplateBinding Padding}" Margin="1,0,0,0" Text="{TemplateBinding DisplayText}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                     <!--<ToggleButton x:Name="DropDownButton" Grid.Column="1" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" ClickMode="Press" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{TemplateBinding DropDownButtonStyle}" Visibility="Visible" IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}" />-->
                                    <ToggleButton x:Name="DropDownButton" Grid.Column="1" ClickMode="Press" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{TemplateBinding DropDownButtonStyle}" Visibility="Visible" IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}" />
                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Location, RelativeSource={RelativeSource Self}, Converter={x:Static igRibbon:ToolLocationToIsInMenuConverter.Instance}}" Value="True" />
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:ToolMenuItem}, 1}}" Value="True" />
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Caption" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </MultiDataTrigger>

                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
                            <Setter TargetName="TextBlock" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                        </Trigger>

                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />

                            <!-- Default margin when in the footer toolbar -->
                            <Setter Property="Margin" Value="6,0,0,0" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.3" />
                        </Trigger>
                              
                        <Trigger SourceName="MainBorder" Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="MainBorder">
                            <Setter TargetName="DropDownButton" Property="Tag" Value="MouseOverControlTrue" />
                        </Trigger>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                            <Setter TargetName="PART_FocusSite" Property="Visibility" Value="Visible" />
                            <Setter TargetName="TextBlock" Property="Visibility" Value="Collapsed" />
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                        <Trigger Property="Location" Value="Ribbon">
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter TargetName="MainBorder" Property="CornerRadius" Value="0" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.HideAccessKey" Value="False">
                            <Setter TargetName="Caption" Property="RecognizesAccessKey" Value="True" />
                            <Setter TargetName="Caption" Property="Content" Value="{Binding Path=Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="igRibbon:RibbonToolHelper.SizingMode" Value="ImageOnly">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                         <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolCheckedInnerBorderFillKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
            </MultiTrigger>
            <Trigger Property="IsInEditMode" Value="True">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- =================================================================== -->
    <!--                         NA 13.1 Backstage                           -->
    <!-- =================================================================== -->

    <!-- =================================================================== -->
    <!-- ApplicationMenu2010FileTab Style -->
    <!-- =================================================================== -->
    <Style TargetType="igRibbon:ApplicationMenu2010FileTab">
        <Setter Property="MinHeight" Value="17" />
        <Setter Property="Margin" Value="0,1,0,-1" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igRibbon:ApplicationMenu2010FileTab">
                    <ToggleButton x:Name="orbPanel"
                                  Width="56"
                                  Focusable="false"
                                  SnapsToDevicePixels="true"
                                  HorizontalAlignment="Left"
                                  VerticalAlignment="Stretch"
                                  ClickMode="Press"
                                  Foreground="{TemplateBinding Foreground}"
                                  IsChecked="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationMenu2010.IsOpen, RelativeSource={x:Static RelativeSource.Self}, Mode=TwoWay}">
                        <ToggleButton.Template>
                            <ControlTemplate TargetType="ToggleButton">
                                <ContentPresenter />
                            </ControlTemplate>
                        </ToggleButton.Template>
                        <Grid>
                            <Border x:Name="OuterBorder" >
                                <Border.Background>
                                    <SolidColorBrush Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}}" />
                                </Border.Background>
                                <Border
                                    x:Name="InnerBorder"
									Visibility="Collapsed">
                                    <Border.Background>
                                        <SolidColorBrush Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#30FFFFFF}" />
                                    </Border.Background>
                                </Border>
                            </Border>

                            <igWindows:CardPanel SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <Image x:Name="appMenuImage"
									    MaxHeight="16"
									    Stretch="Uniform"
									    StretchDirection="DownOnly"
									    HorizontalAlignment="Center"
									    VerticalAlignment="Center"
									    SnapsToDevicePixels="True"
									    Source="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationMenu2010.Image, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                                <Viewbox x:Name="appMenuCaption" 
                                         Stretch="Uniform" 
                                         StretchDirection="DownOnly" 
                                         Visibility="Collapsed" 
                                         Margin="3,4,3,3">
                                    <TextBlock Text="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationMenu2010.Caption, RelativeSource={RelativeSource TemplatedParent}}" />
                                </Viewbox>
                            </igWindows:CardPanel>
                        </Grid>
                    </ToggleButton>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationMenu2010.HasCaption, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter TargetName="appMenuCaption" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="appMenuImage" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationMenu2010.IsOpen, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <!-- Open - may or may not be hottracked -->
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!-- Hottracked - may or may not be open -->
                            <Setter TargetName="InnerBorder" Property="Visibility" Value="Visible"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- ApplicationMenu2010 Style -->
    <!-- =================================================================== -->
    <Style TargetType="igRibbon:ApplicationMenu2010">
        <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Cycle" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Cycle" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenu2010ItemAreaCenterFillKey}}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igRibbon:ApplicationMenu2010">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MinWidth="{Binding Path=ChildDesiredWidth, ElementName=MenuItemArea}" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>

                        <Rectangle Grid.RowSpan="2" 
                            Fill="{TemplateBinding Background}" />
                        <Rectangle Grid.RowSpan="2" RenderTransform="{TemplateBinding SlideTransform}" IsHitTestVisible="False">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Rectangle.Fill>
                        </Rectangle>

                        <Grid x:Name="OverlayArea" Grid.ColumnSpan="2" >
                            <Grid.RowDefinitions>
                                <RowDefinition MinHeight="{TemplateBinding CaptionOverlayHeight}" 
                                               MaxHeight="{TemplateBinding CaptionOverlayHeight}"/>
                                <RowDefinition MinHeight="{Binding Path=(igRibbon:XamRibbon.Ribbon).TabHeaderActualHeight, RelativeSource={RelativeSource TemplatedParent}}"
                                               MaxHeight="{Binding Path=(igRibbon:XamRibbon.Ribbon).TabHeaderActualHeight, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" MinWidth="{Binding Path=ChildDesiredWidth, ElementName=MenuItemArea}" />
                                <ColumnDefinition />
                                <ColumnDefinition Width="{Binding Path=(igRibbon:XamRibbon.Ribbon).TabItemAreaToolbar.ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </Grid.ColumnDefinitions>

                            <!-- add an overlay to hide th tab items -->
                            <Rectangle x:Name="PART_TabAreaOverlay" Grid.Row="1" Grid.Column="1" Grid.RowSpan="2" Fill="{TemplateBinding Background}"
                                    MinHeight="{TemplateBinding TabAreaOverlayHeight}"/>

                            <!-- add an overlay for under the TabItemAreaToolbar to hide any chrome in that area -->
                            <Rectangle Grid.Row="2" Grid.Column="2" Fill="{TemplateBinding Background}"/>

                            <igWindows:DesiredSizeDecorator Grid.RowSpan="3" 
                                                            RenderTransform="{TemplateBinding SlideTransform}">
                                <Button x:Name="BackButton" 
                                    Foreground="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource calculatedForegroundConverter}}"                                   
                                    Command="{x:Static igRibbon:RibbonCommands.CloseApplicationMenu}"
                                    Style="{DynamicResource {x:Static igRibbon:ApplicationMenu2010.BackButtonStyleKey }}"/>
                            </igWindows:DesiredSizeDecorator>

                        </Grid>

                        <!-- the entire area scrolls as a unit -->
                        <ScrollViewer Grid.Row="1" Grid.ColumnSpan="2" Focusable="False">
							<Grid Background="{StaticResource ForegroundBrush}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" MinWidth="{Binding Path=ChildDesiredWidth, ElementName=BackButton}" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Rectangle Grid.ColumnSpan="2"
                                        Fill="{TemplateBinding Background}" />
                                <Rectangle RenderTransform="{TemplateBinding SlideTransform}" >
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </Rectangle.Fill>
                                </Rectangle>

                                <igWindows:DesiredSizeDecorator x:Name="MenuItemArea">
                                    <Border  
                                            RenderTransform="{TemplateBinding SlideTransform}"
                                            BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenu2010ItemAreaBorderFillKey}}" 
                                            BorderThickness="0">
                                        <ItemsPresenter 
                                            Margin="0,0,-1,0" 
                                            KeyboardNavigation.DirectionalNavigation="Cycle" 
                                            KeyboardNavigation.TabNavigation="Once" />
                                    </Border>
                                </igWindows:DesiredSizeDecorator>

                                <ContentPresenter x:Name="PART_SelectedTabContentHost"  Grid.Column="1"
                                                  RenderTransform="{TemplateBinding SlideTransform}"
                                                  KeyboardNavigation.DirectionalNavigation="Cycle" 
                                                  Content="{Binding SelectedTab.Content, RelativeSource={RelativeSource TemplatedParent}}" 
                                                  ContentTemplate="{Binding SelectedTab.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" 
                                                  ContentTemplateSelector="{Binding SelectedTab.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" 
                                                  ContentStringFormat="{Binding SelectedTab.ContentStringFormat, RelativeSource={RelativeSource TemplatedParent}}" 
                                                  HorizontalAlignment="{Binding SelectedTab.HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" 
                                                  VerticalAlignment="{Binding SelectedTab.VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" 
                                                  />
                            </Grid>
                        </ScrollViewer>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).TabItemAreaToolbar, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                            <Setter TargetName="PART_TabAreaOverlay" Property="Grid.ColumnSpan" Value="2"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- ApplicationMenu2010Item Style -->
    <!-- =================================================================== -->
    <ControlTemplate TargetType="igRibbon:ApplicationMenu2010Item" x:Key="{x:Static igRibbon:ApplicationMenu2010Item.ButtonTemplateKey}">
        <Grid>
            <Border x:Name="Background" Margin="0"  Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Opacity="0.3" />
            <Border x:Name="outerBorder" Margin="6" SnapsToDevicePixels="True">
                <Border x:Name="innerBorder" Padding="20,3" CornerRadius="0" BorderThickness="1" Background="Transparent">
                    <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <igWindows:AutoDisabledImage x:Name="image" Width="16" Height="16" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Visibility="{Binding Path=HasImage, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" Source="{TemplateBinding Image}" />
                        <ContentPresenter x:Name="header"  
                                          RecognizesAccessKey="True" Grid.Column="1" 
                                          ContentSource="Header" 
                                          TextElement.Foreground="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource calculatedForegroundConverter}}"
                                          igRibbon:XamRibbon.KeyTipPlacementType="Caption" />
                    </Grid>
                </Border>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="Background" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource Self}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FFFFFFFF}" />
                <Setter TargetName="header" Property="TextElement.Foreground"  Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource Self}, Converter={StaticResource calculatedForegroundConverter}}"/>
            </Trigger>
            <Trigger Property="IsMouseOverTab" Value="True">
                <Setter Property="Background" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource Self}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF222222}" />
                <Setter TargetName="header" Property="TextElement.Foreground" Value="{Binding Path=Background.Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource calculatedForegroundConverter}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter TargetName="header" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GrayTextBrushKey}}" />-->
				<Setter TargetName="header" Property="Opacity" Value="0.3" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="igRibbon:ApplicationMenu2010Item" x:Key="{x:Static igRibbon:ApplicationMenu2010Item.TabTemplateKey}">
        <Grid Background="Transparent">
            <Border x:Name="Background" Background="{TemplateBinding Background}" Opacity="0.4" />
            <Border x:Name="outerBorder" BorderThickness="0">
                <Border x:Name="innerBorder" Padding="27,10" BorderBrush="Transparent" BorderThickness="0" SnapsToDevicePixels="True">
                    <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <igWindows:AutoDisabledImage x:Name="image" Width="16" Height="16" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Visibility="{Binding Path=HasImage, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" Source="{TemplateBinding Image}" />
                        <ContentPresenter RecognizesAccessKey="True" 
                                          x:Name="header" 
                                          Grid.Column="1" 
                                          TextElement.FontSize="{Binding Path=(TextElement.FontSize), ElementName=outerBorder, Converter={StaticResource applicationMenuTabFontConverter}}" ContentSource="Header" 
                                          TextElement.Foreground="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource calculatedForegroundConverter}}"
                                          igRibbon:XamRibbon.KeyTipPlacementType="Caption" />
                    </Grid>
                </Border>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSelectedTab" Value="True">
                <Setter Property="Background" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource Self}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#80FFFFFF}" />
                <Setter TargetName="header" Property="TextElement.Foreground" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource Self}, Converter={StaticResource calculatedForegroundConverter}}"/>
            </Trigger>
            <Trigger Property="IsMouseOverTab" Value="True">
                <Setter Property="Background" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource Self}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#80222222}" />
                <Setter TargetName="header" Property="TextElement.Foreground" Value="{Binding Path=Background.Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource calculatedForegroundConverter}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                  <Setter TargetName="header" Property="Opacity" Value="0.3" />
                <!--<Setter TargetName="header" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GrayTextBrushKey}}" />-->
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- =================================================================== -->
    <!-- ApplicationMenu2010Separator Style -->
    <!-- =================================================================== -->
    <Style TargetType="igRibbon:ApplicationMenu2010Separator">
        <Setter Property="Padding" Value="26,2,26,3" />
        <Setter Property="MinWidth" Value="124"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igRibbon:ApplicationMenu2010Separator">
                    <Grid Margin="{TemplateBinding Padding}">
                        <Rectangle Height="1" Opacity=".3" Fill="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource Self}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FFFFFFFF}" SnapsToDevicePixels="true" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>