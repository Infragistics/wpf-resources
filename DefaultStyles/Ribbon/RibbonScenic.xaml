<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:compModel="clr-namespace:System.ComponentModel;assembly=PresentationFramework"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:igEditors="http://infragistics.com/Editors"
	xmlns:igRibbon="http://infragistics.com/Ribbon"
	xmlns:igThemes="http://infragistics.com/Themes"
	xmlns:igWindows="http://infragistics.com/Windows"
	xmlns:interop="clr-namespace:System.Windows.Interop;assembly=PresentationFramework"
	xmlns:luna="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Luna"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:sys="clr-namespace:System;assembly=mscorlib"
	xmlns:themes="http://infragistics.com/Themes"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	mc:Ignorable="d">
	
	
	
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="RibbonGeneric.xaml"/>
		<ResourceDictionary Source="RibbonScenicBrushes.xaml"/>
	</ResourceDictionary.MergedDictionaries>


    <!-- Identify the theme as the Scenic theme-->
    <sys:Boolean x:Key="{x:Static igRibbon:RibbonWindowContentHost.IsScenicThemeKey}">True</sys:Boolean>

    <!-- AS 6/21/12 TFS114953 -->
    <sys:Boolean x:Key="{x:Static igRibbon:RibbonWindowContentHost.UsesScenicApplicationMenuKey}">True</sys:Boolean>

    <igWindows:StringWithoutMnemonicsConverter x:Key="stringWithoutMnemonicsConverter" />

	<!-- ========== Data Templates ========== -->
	<DataTemplate DataType="{x:Type igRibbon:RibbonGroupCollection}">
		<Grid>
			<ItemsControl Focusable="False" ItemsSource="{Binding}" Padding="0,3,0,0">
				<ItemsControl.Template>
					<ControlTemplate TargetType="{x:Type ItemsControl}">
						<igWindows:XamPager
							Margin="-2,0"
							Focusable="False"
							ScrollLeftButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollLeftButtonStyleKey}}"
							ScrollRightButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollRightButtonStyleKey}}"
							ScrollViewer.CanContentScroll="True"
							ScrollViewer.HorizontalScrollBarVisibility="Auto"
							ScrollViewer.VerticalScrollBarVisibility="Hidden">
							<ItemsPresenter Margin="{TemplateBinding Padding}" DataContext="{Binding Path=(igRibbon:XamRibbon.Ribbon).DataContext, RelativeSource={x:Static RelativeSource.Self}}"/>
						</igWindows:XamPager>
					</ControlTemplate>
				</ItemsControl.Template>
				<ItemsControl.ItemsPanel>
					<ItemsPanelTemplate>
						<igRibbon:RibbonGroupPanel/>
					</ItemsPanelTemplate>
				</ItemsControl.ItemsPanel>
			</ItemsControl>
		</Grid>
	</DataTemplate>



	<DataTemplate DataType="{x:Type igRibbon:ContextualTabGroup}">
		<igWindows:CardPanel Margin="0,2,0,0">
			<Border BorderBrush="{Binding Path=BaseBackColorResolvedBrush}" BorderThickness="1" CornerRadius="1,1,0,0" SnapsToDevicePixels="True">
				<Border SnapsToDevicePixels="True" x:Name="baseColorInCaption" Background="{Binding Path=BaseBackColorResolvedBrush}">
					<Border.OpacityMask>
						<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
							<GradientStop Offset="0" Color="#99ffffff"/>
							<GradientStop Offset="0.5" Color="#7dffffff"/>
							<GradientStop Offset="1" Color="#9effffff"/>
						</LinearGradientBrush>
					</Border.OpacityMask>
					<Rectangle x:Name="BaseColorBottomGlow">
						<Rectangle.Fill>
							<RadialGradientBrush Center="0.5,1" GradientOrigin="0.5,1" RadiusX="0.275" RadiusY="0.319">
								<RadialGradientBrush.GradientStops>
									<GradientStopCollection>
										<GradientStop Offset="0" Color="#FFffffff"/>
										<GradientStop Offset="1" Color="#00ffffff"/>
									</GradientStopCollection>
								</RadialGradientBrush.GradientStops>
							</RadialGradientBrush>
						</Rectangle.Fill>
					</Rectangle>
				</Border>
			</Border>
			<TextBlock
				x:Name="CaptionGroupLabel"
				Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualCaptionTextFillKey}}"
				Text="{Binding Path=Caption}"
				VerticalAlignment="Center"
				TextAlignment="Left"
				Margin="8,0,8,0"
				TextTrimming="CharacterEllipsis"
				igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True"
				igWindows:ClippedTextToolTipService.AncestorTypeForToolTip="{x:Type ContentControl}"
				igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}"/>
		</igWindows:CardPanel>
		<DataTemplate.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
					<Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="Normal" />
				</MultiDataTrigger.Conditions>
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="Maximized" />
				</MultiDataTrigger.Conditions>
			</MultiDataTrigger>
		</DataTemplate.Triggers>
	</DataTemplate>


    <!-- =================================================================== -->
    <!-- RibbonWindowContentHost Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:RibbonWindowContentHost}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.WindowBackgroundBrushKey}}"/>
        <Setter Property="BorderThickness" Value="0,0,0,0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:RibbonWindowContentHost}">
                    <Grid>
                        <AdornerDecorator>
                            <!-- AS 7/13/09 TFS18489 
                Removed SharedSizeGroup as this leads to extra unnecessary measure/arrange. Instead a custom 
                placeholder element will be used to act as a proxy and provide the extent of the element in 
                the other grid. I also moved the panel containing the ribbon/statusbar up so the element name
                binding will find the DesiredSizeDecorator element right away. Changed the RowDefinitions in 
                the other grid to bind to the exposed extent properties.
              -->
                            <igWindows:CardPanel Grid.IsSharedSizeScope="True" SnapsToDevicePixels="True">
                                <DockPanel Panel.ZIndex="1" LastChildFill="False">
                                    <!-- Ribbon Area -->
                                    <igWindows:DesiredSizeDecorator DockPanel.Dock="Top" x:Name="ribbonSize">
                                        <igWindows:CardPanel>
                                            <ContentPresenter x:Name="RibbonArea"  Margin="{TemplateBinding RibbonAreaMargin}"  Content="{TemplateBinding Ribbon}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                            <!-- Caption Area - When No Ribbon is Present -->
                                            <Grid x:Name="CaptionArea" Margin="{TemplateBinding CaptionAreaMargin}"  Visibility="{TemplateBinding CaptionVisibility}">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto" />
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="Auto" />
                                                </Grid.ColumnDefinitions>
                                                <igRibbon:ScenicRibbonCaptionArea Grid.ColumnSpan="3" x:Name="PART_XamRibbonCaption" />
                                                <!-- JJD 01/28/14 wrap image in border to expand hit test area  -->
                                                <Border x:Name="PART_WindowIcon" Background="Transparent" Grid.Column="0" >
                                                    <Image x:Name="WindowIconIamge" Stretch="None" HorizontalAlignment="Left" VerticalAlignment="Center"
											            Margin="6,0,3,0" Source="{TemplateBinding IconResolved}"/>
                                                </Border>
                                                <ContentControl TextBlock.TextAlignment="Left" Grid.Column="1" Content="{Binding Path=Title, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Style="{DynamicResource {x:Static igRibbon:RibbonCaptionPanel.CaptionStyleKey}}" />
                                                <Control x:Name="captionButtonArea" Grid.Column="2" Focusable="False"
                                                    igRibbon:RibbonWindowContentHost.CaptionButtonVersion="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonVersion, RelativeSource={RelativeSource Self}}"                                                         
											        Template="{DynamicResource {ComponentResourceKey {x:Type igRibbon:XamRibbon}, CaptionButtonAreaTemplate}}"/>
                                            </Grid>
                                        </igWindows:CardPanel>
                                    </igWindows:DesiredSizeDecorator>

                                    <!--StatusBar Area-->
                                    <igWindows:DesiredSizeDecorator DockPanel.Dock="Bottom" x:Name="statusSize">
                                        <ContentPresenter x:Name="StatusBarArea" Margin="{TemplateBinding StatusBarAreaMargin}"  Content="{TemplateBinding StatusBar}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </igWindows:DesiredSizeDecorator>

                                </DockPanel>
                                <igRibbon:RibbonWindowBorder
                 BorderThickness = "{TemplateBinding BorderThickness}"
                 BorderBrush = "{TemplateBinding BorderBrush}"
                 Name = "WindowBorder"
			/>
                                    <!--<igWindows:CardPanel>-->
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="{Binding Path=ChildDesiredHeight, ElementName=ribbonSize}"/>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="{Binding Path=ChildDesiredHeight, ElementName=statusSize}"/>
                                            </Grid.RowDefinitions>

                                            <!-- Background (covers both content and statusbar areas -->
                                            <Rectangle Grid.Row="1" Grid.RowSpan="2" Fill="{TemplateBinding Background}" Margin="{TemplateBinding BackgroundAreaMargin}"/>

                                            <!-- Ribbon Area -->
                                            <!--<ContentPresenter Content ="{TemplateBinding Ribbon}" />-->

                                            <!-- Content Area-->
                                            <ContentPresenter x:Name="PART_Content" Grid.Row="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding ContentAreaMargin}"/>

                                            <!-- StatusBar Area -->
                                            <!--<ContentPresenter Grid.Row="2" Content ="{TemplateBinding StatusBar}" />-->

                                        </Grid>

                                    <!--</igWindows:CardPanel>-->
                                <!--</igRibbon:RibbonWindowBorder>-->
                            </igWindows:CardPanel>
                        </AdornerDecorator>
                    </Grid>
                    <ControlTemplate.Triggers>
                      <!-- JJD 05/27/10 - NA 2010 volume 2 - Scenic Ribbon supportt 
                        added margin properties for all 3 areas so we don't need to use triggers -->
                      <!--<Trigger Property="BorderThickness" Value="0">
                            <Setter Property="Margin" TargetName="RibbonArea" Value="0" />
                            <Setter Property="Margin" TargetName="StatusBarArea" Value="0" />
                        </Trigger>-->

                      <!-- Glass is active - Make caption transparent -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <!-- AS 8/21/08 BR35778
                <Condition Binding="{Binding Path=CaptionVisibility, RelativeSource={RelativeSource TemplatedParent}}" Value="Visible" />-->
                                <Condition Binding="{Binding Path=CaptionVisibility, RelativeSource={x:Static RelativeSource.Self}}" Value="Visible" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="PART_XamRibbonCaption" Value="Transparent"/>
                            <Setter Property="Visibility" TargetName="captionButtonArea" Value="Hidden"/>
                        </MultiDataTrigger>

                        <!-- Toggle the Caption Styling when Inactive -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                                <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False" />
                                <!-- AS 8/21/08 BR35778
                <Condition Binding="{Binding Path=CaptionVisibility, RelativeSource={RelativeSource TemplatedParent}}" Value="Visible" />-->
                                <Condition Binding="{Binding Path=CaptionVisibility, RelativeSource={x:Static RelativeSource.Self}}" Value="Visible" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="PART_XamRibbonCaption" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ScenicCaptionAreaInactiveFillKey}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- =================================================================== -->
	<!-- XamRibbon Style -->
	<!-- =================================================================== -->
	<Style TargetType="{x:Type igRibbon:XamRibbon}" x:Key="scenicRibbonStyle">
		<Setter Property="FontSize" Value="11"/>
		<Setter Property="VerticalAlignment" Value="Top"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igRibbon:XamRibbon}">
					<AdornerDecorator>
						<Grid x:Name="rootVisual">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" MinHeight="22"/>
                                <RowDefinition Height="Auto" MinHeight="{TemplateBinding TabHeaderActualHeight}" />
								<RowDefinition x:Name="tabContentRow" Height="*"/>
								<RowDefinition x:Name="qatBelowRow" Height="Auto"/>
							</Grid.RowDefinitions>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<igRibbon:ScenicRibbonCaptionArea
								x:Name="PART_XamRibbonCaption"
								Height="Auto"
								Grid.ColumnSpan="3"
                                IsWithinRibbonWindow="{TemplateBinding IsWithinRibbonWindow}"/>
							<Control
								x:Name="captionButtonArea"
								Grid.Column="2"
								VerticalAlignment="Top"
								Focusable="False"
                                igRibbon:RibbonWindowContentHost.CaptionButtonVersion="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonVersion, RelativeSource={RelativeSource Self}}"                                
								Template="{DynamicResource {ComponentResourceKey {x:Type igRibbon:XamRibbon}, CaptionButtonAreaTemplate}}"
								Visibility="Collapsed"/>
							<igRibbon:RibbonCaptionPanel
								x:Name="PART_RibbonCaptionPanel"
                Margin="{TemplateBinding CaptionPanelMargin}"
								Grid.Column="1"
								Grid.Row="0"
								KeyboardNavigation.TabIndex="2"
								KeyboardNavigation.TabNavigation="Local"/>
                            <Rectangle x:Name="minimizedRibbonBorder" Height="1" Margin="{TemplateBinding TabAreaMargin}" VerticalAlignment="Bottom" Visibility="Collapsed" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}" Grid.Row="1" Grid.RowSpan="2" Grid.ColumnSpan="3"/>
							<ContentControl
								x:Name="PART_RibbonTabControlSite"
                Margin="{TemplateBinding TabAreaMargin}"
								Grid.Row="1"
								Grid.RowSpan="2"
								Grid.Column="0"
								Grid.ColumnSpan="3"
								Focusable="False"
								HorizontalContentAlignment="Stretch"
								KeyboardNavigation.TabIndex="0"
								KeyboardNavigation.TabNavigation="Local"
								VerticalContentAlignment="Stretch"/>
                            <!-- JJD 01/28/14 wrap image in border to expand hit test area  -->
                            <Border x:Name="PART_WindowIcon" Background="Transparent" Grid.Column="0" Margin="{TemplateBinding WindowIconMargin}" >
                                <Image x:Name="WindowIconIamge" Stretch="None" HorizontalAlignment="Left" VerticalAlignment="Center"
											        Margin="6,0,6,0" Grid.Column="0" />
                            </Border>
                            <ContentControl
								x:Name="PART_ApplicationMenuSite"
								Grid.Row="1"
								Grid.RowSpan="1"
								Grid.Column="0"
								Grid.ColumnSpan="2"
								HorizontalAlignment="Left"
								Margin="{TemplateBinding ApplicationMenuMargin}"
								VerticalAlignment="Stretch"
								Focusable="False"
								KeyboardNavigation.TabIndex="1"
								KeyboardNavigation.TabNavigation="Local"/>
							<ContentControl
								x:Name="PART_QuickAccessToolbarBottomSite"
                Margin="{TemplateBinding QuickAccessToolbarMargin}"
                Grid.Column="0"
								Grid.ColumnSpan="3"
								Grid.Row="3"
								Focusable="False"
								KeyboardNavigation.TabIndex="3"
								KeyboardNavigation.TabNavigation="Local"
								Visibility="Collapsed"/>
						</Grid>
					</AdornerDecorator>
					<ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter TargetName="WindowIconIamge" Property="Source" Value="{Binding Path=IconResolved, RelativeSource={RelativeSource AncestorType={x:Type igRibbon:RibbonWindowContentHost}}}" />
                        </DataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
								<Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
                                <!-- JJD 01/09/14 - NA 2014 vol 1 - Added 2013 Backstage feature -->
                                <Condition Binding="{Binding Path=IsOffice2013Theme, RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
							<Setter TargetName="PART_XamRibbonCaption" Property="Background" Value="Transparent"/>
							<Setter TargetName="captionButtonArea" Property="Visibility" Value="Hidden"/>
                            <!--<Setter TargetName="PART_ApplicationMenuSite" Property="Margin" Value="-2,-5,0,0"/>-->
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
								<Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
								<Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="PART_XamRibbonCaption" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ScenicCaptionAreaInactiveFillKey}}"/>
						</MultiDataTrigger>
						<Trigger Property="QuickAccessToolbarLocation" Value="BelowRibbon">
							<Setter TargetName="PART_QuickAccessToolbarBottomSite" Property="Visibility" Value="Visible"/>
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
								<Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="captionButtonArea" Property="Visibility" Value="Visible"/>
						</MultiDataTrigger>
                        <!-- JJD 01/09/14 - NA 2014 vol 1 - Added 2013 Backstage feature -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=IsOffice2013Theme, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="captionButtonArea" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>

                        <!-- JJD 10/13/10 - TFS42764
                 If we aren't within a ribbon window then use the CaptionPanelFillKey brush for the caption area background -->
            <Trigger Property="IsWithinRibbonWindow" Value="False">
                <Setter TargetName="PART_XamRibbonCaption" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelFillKey}}"/>
            </Trigger>
            
            <!-- JJD 05/27/10 - NA 2010 volume 2 - Scenic Ribbon supportt 
                        added margin properties for this area so we don't need to use triggers -->
            <!--<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
								<Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
								<Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Margin" TargetName="PART_RibbonTabControlSite" Value="3,0,3,0" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
								<Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
								<Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />
								<Condition Binding="{Binding Path=QuickAccessToolbarLocation, RelativeSource={x:Static RelativeSource.Self}}" Value="BelowRibbon" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Margin" TargetName="PART_QuickAccessToolbarBottomSite" Value="3,0,3,0" />
						</MultiDataTrigger>-->
                        <!--<DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter TargetName="minimizedRibbonBorder" Property="Margin" Value="6,0"/>
                        </DataTrigger>-->
                        <Trigger Property="IsMinimized" Value="True">
                            <Setter TargetName="tabContentRow" Property="Height" Value="0"/>
                            <Setter TargetName="minimizedRibbonBorder" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMinimized, RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="minimizedRibbonBorder" Property="Margin" Value="6,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMinimized, RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="minimizedRibbonBorder" Property="Margin" Value="2,0"/>
                        </MultiDataTrigger>-->
						<Trigger Property="AutoHideState" Value="Hidden">
							<Setter TargetName="rootVisual" Property="Visibility" Value="Collapsed"/>
						</Trigger>
            <!-- JJD 05/27/10 - NA 2010 volume 2 - Scenic Ribbon supportt 
                        added margin properties for this area so we don't need to use triggers -->
						<!--<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
								<Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
								<Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Maximized"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="PART_RibbonCaptionPanel" Property="Margin" Value="0,4,0,0"/>
						</MultiDataTrigger>-->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type igRibbon:XamRibbon}" BasedOn="{StaticResource scenicRibbonStyle}">
	</Style>
	
	
	
	<!-- =================================================================== -->
	<!-- ApplicationMenuPresenter Style -->
	<!-- =================================================================== -->
	<Style TargetType="{x:Type igRibbon:ApplicationMenuPresenter}">
        <Setter Property="MinHeight" Value="17"/>
		<Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuOuterBorderDarkFillKey}}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igRibbon:ApplicationMenuPresenter}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="HoverFadeIn">
							<DoubleAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetName="AppMenuBtnHover" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="HoverFadeOut">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="AppMenuBtnHover" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="PressedFadeOut">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="AppMenuBtnPressed" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.15" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<igWindows:CardPanel x:Name="ApplicationMenuButton" Background="Transparent" SnapsToDevicePixels="true">
                        <Rectangle x:Name="PopupPlacementRect" Margin="0,-1,0,0" VerticalAlignment="Top" Visibility="Hidden"/>
						<!-- Office Orb -->
						<Grid
							x:Name="orbPanel"
							Width="56"
							HorizontalAlignment="Left"
							VerticalAlignment="Stretch">
							<!-- Orb Image -->
							<Border
								x:Name="AppMenuBtnNormal"
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonNormalCenterFillKey}}"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonNormalOuterBorderFillKey}}"
								BorderThickness="1"
								CornerRadius="1,3,0,0">
								<Border
									Height="9"
									VerticalAlignment="Top"
									BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonNormalInnerBorderFillKey}}"
									BorderThickness="1,1,1,0"
									CornerRadius="0,2,0,0"/>
							</Border>
							<Border
								x:Name="AppMenuBtnHover"
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonHoverCenterFillKey}}"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonHoverOuterBorderFillKey}}"
								BorderThickness="1"
								CornerRadius="1,3,0,0"
								Opacity="0">
								<Border
									Height="9"
									VerticalAlignment="Top"
									BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonHoverInnerBorderFillKey}}"
									BorderThickness="1,1,1,0"
									CornerRadius="0,2,0,0"/>
							</Border>
							<Border x:Name="AppMenuBtnPressed" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonPressedCenterFillKey}}" Opacity="0"/>
							<!-- AS 10/19/10 TFS57563 Added ability to display text if the caption has been set. -->
							<igWindows:CardPanel>
								<!-- AS 6/4/08 BR32242 Changed source binding to bind to explicit property rather than rely on datacontext. -->
								<!-- AS 10/19/10 TFS57563 Removed maxwidth so the image may be non-square. Also set the stretch and 
									stretchdirection so the image only scales down. -->
								<Image x:Name="appMenuImage"
									MaxHeight="16"
									Stretch="Uniform"
									StretchDirection="DownOnly"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									SnapsToDevicePixels="True"
									Source="{Binding Path=Tool.Image, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                                <Viewbox x:Name="appMenuCaption" Stretch="Uniform" StretchDirection="DownOnly" Visibility="Collapsed" Margin="3,4,3,3">
									<TextBlock Text="{Binding Path=Tool.Caption, RelativeSource={RelativeSource TemplatedParent}}" Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonForegroundKey}}" />
								</Viewbox>
							</igWindows:CardPanel>
						</Grid>
						<Popup
							Name="PART_Popup"
							AllowsTransparency="true"
							Focusable="false"
							IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
							Placement="Bottom"
							PlacementTarget="{Binding ElementName=PopupPlacementRect}">
							<luna:SystemDropShadowChrome Name="Shdw" Color="Transparent">
								<igWindows:CardPanel KeyboardNavigation.DirectionalNavigation="Cycle">
									<Border
										Grid.ColumnSpan="2"
										Grid.RowSpan="2"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="{TemplateBinding BorderThickness}"
										CornerRadius="1"
										SnapsToDevicePixels="True">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition/>
											<!-- JJD 10/28/10 - TFS34544 
													specify a grid row height for application menu popup footer (row 2) as 'Auto' which allows all of the avaialble space to go to row 1 which contains the menu area	-->
											<RowDefinition Height="Auto" MinHeight="17"/>
                                        </Grid.RowDefinitions>
										<Grid>
											<Grid.RowDefinitions>
												<RowDefinition Height="24"/>
												<RowDefinition/>
											</Grid.RowDefinitions>
											<Grid.ColumnDefinitions>
												<ColumnDefinition Width="Auto"/>
												<ColumnDefinition Width="*"/>
											</Grid.ColumnDefinitions>
											<!-- Menu Chrome -->
											<Border
												Grid.ColumnSpan="2"
												Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuChromeFillKey}}"
												BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuInnerBorderDarkFillKey}}"
												BorderThickness="0,0,0,1"
												SnapsToDevicePixels="True"/>
											<!-- Menu Items Background -->
											<Border
												Grid.Row="1"
												Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuLeftAreaCenterFillKey}}"
												BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuLeftAreaBorderFillKey}}"
												BorderThickness="0,0,1,0"
												SnapsToDevicePixels="True">
												<ScrollViewer
													x:Name="MenuItemsArea"
													Grid.Row="1"
													CanContentScroll="true"
													Focusable="False"
													HorizontalScrollBarVisibility="Disabled"
													Style="{StaticResource MenuScrollViewer}">
													<igRibbon:ApplicationMenuItemsPanel
														x:Name="PART_ApplicationMenuItemsPanel"
														Margin="0,2,0,2"
														Grid.IsSharedSizeScope="true"
														IsItemsHost="True"
														KeyboardNavigation.ControlTabNavigation="Local"
														KeyboardNavigation.DirectionalNavigation="Continue"
														KeyboardNavigation.TabIndex="1"
														KeyboardNavigation.TabNavigation="Local"
														SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
												</ScrollViewer>
											</Border>
											<Border
												x:Name="RecentItemsBackGround"
                        MinWidth="250"
												MinHeight="64"
												Grid.Column="1"
												Grid.Row="1"
												Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsCenterFillKey}}"
												BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsBorderFillKey}}"
												BorderThickness="1,0,0,0">
												<Grid>
													<ScrollViewer Focusable="False" HorizontalScrollBarVisibility="Disabled" Style="{StaticResource MenuScrollViewer}">
														<StackPanel>
															<ContentControl
																x:Name="RecentItemsHeader"
																Margin="7,3,0,3"
																Content="{Binding Path=Tool.RecentItemsHeader, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
																ContentTemplate="{Binding Path=Tool.RecentItemsHeaderTemplate, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
																ContentTemplateSelector="{Binding Path=Tool.RecentItemsHeaderTemplateSelector, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
																Focusable="False"
																TextBlock.FontWeight="Bold"/>
															<Border
																x:Name="RecentItemsHeaderSeparator"
																Height="2"
																Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsSeparatorDarkFillKey}}"
																BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsSeparatorLightFillKey}}"
																BorderThickness="0,0,0,1"
																SnapsToDevicePixels="True"/>
															<igRibbon:ApplicationMenuRecentItemsPanel
																x:Name="PART_RecentItemsPanel"
																KeyboardNavigation.ControlTabNavigation="Local"
																KeyboardNavigation.DirectionalNavigation="Continue"
																KeyboardNavigation.TabIndex="2"
																KeyboardNavigation.TabNavigation="Local"/>
														</StackPanel>
													</ScrollViewer>
												</Grid>
											</Border>
											<FrameworkElement
												x:Name="PART_SubMenuArea"
												Grid.Column="1"
												Grid.Row="1"
												HorizontalAlignment="Stretch"
												Margin="0,6,5,-2"
												VerticalAlignment="Stretch"/>
										</Grid>
											<Border
												x:Name="Footer"
												Grid.Row="1"
												Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuFooterToolbarFillKey}}"
												BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuFooterToolbarOuterBorderDarkFillKey}}"
												BorderThickness="0,1,0,0"
												SnapsToDevicePixels="True">
												<ContentPresenter
													x:Name="PART_FooterToolbar"
													Content="{Binding Path=Tool.FooterToolbar, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
													Focusable="False"
													KeyboardNavigation.ControlTabNavigation="Local"
													KeyboardNavigation.DirectionalNavigation="Continue"
													KeyboardNavigation.TabIndex="3"
													KeyboardNavigation.TabNavigation="Local"/>
											</Border>
										</Grid>
									</Border>
									<!-- Overlay Button -->
									<ToggleButton
										x:Name="ButtonOverlay"
										Width="{Binding ElementName=orbPanel, Path=ActualWidth}"
										Height="{Binding ElementName=orbPanel, Path=ActualHeight}"
										HorizontalAlignment="Left"
										VerticalAlignment="Top"
										ClickMode="Press"
										Focusable="False"
										IsChecked="{Binding ElementName=PART_Popup, Path=IsOpen, Mode=TwoWay}"
										IsTabStop="False">
										<ToggleButton.RenderTransform>
											<MultiBinding Mode="OneWay">
												<MultiBinding.Converter>
													<igRibbon:ApplicationMenuButtonTransformConverter/>
												</MultiBinding.Converter>
												<Binding ElementName="PART_Popup" Path="IsOpen"/>
												<Binding ElementName="orbPanel"/>
												<Binding ElementName="ButtonOverlay"/>
											</MultiBinding>
										</ToggleButton.RenderTransform>
										<ToggleButton.Template>
											<ControlTemplate TargetType="ToggleButton">
												<Rectangle>
													<Rectangle.Fill>
                                                        <VisualBrush x:Name="orbBrush" Stretch="None" Visual="{Binding ElementName=orbPanel, Mode=OneTime}"/>
													</Rectangle.Fill>
												</Rectangle>
											</ControlTemplate>
										</ToggleButton.Template>
									</ToggleButton>
								</igWindows:CardPanel>
							</luna:SystemDropShadowChrome>
						</Popup>
					</igWindows:CardPanel>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSubmenuOpen" Value="False">
							<Setter TargetName="PART_Popup" Property="PopupAnimation" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"/>
						</Trigger>
						<!-- AS 10/19/10 TFS57563 Added ability to display text if the caption has been set. -->
						<DataTrigger Binding="{Binding Path=Tool.HasCaption, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
							<Setter TargetName="appMenuCaption" Property="Visibility" Value="Visible"/>
							<Setter TargetName="appMenuImage" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>
						<DataTrigger Binding="{Binding Path=Tool.HasRecentItemsHeader, RelativeSource={x:Static RelativeSource.Self}}" Value="False">
							<Setter TargetName="RecentItemsHeaderSeparator" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="RecentItemsHeader" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>
						<!--<DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True">
							<Setter TargetName="orbPanel" Property="Margin" Value="2,6,0,0"/>
						</DataTrigger>-->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSuspendingPopupAnimation" Value="True"/>
								<Condition Property="IsPressed" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="AppMenuBtnPressed" Property="Opacity" Value="1"/>
							<!--<Setter TargetName="orbPanel" Property="Height" Value="23"/>-->
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="igRibbon:XamRibbon.IsActive" Value="True"/>
								<Condition Property="IsPressed" Value="False"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="AppMenuBtnHover" Property="Opacity" Value="1"/>
						</MultiTrigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource HoverFadeIn}"/>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource HoverFadeOut}"/>
							</Trigger.ExitActions>
						</Trigger>
						<Trigger Property="IsSuspendingPopupAnimation" Value="true">
							<Setter TargetName="AppMenuBtnPressed" Property="Opacity" Value="1"/>
							<!--<Setter TargetName="orbPanel" Property="Height" Value="23"/>-->
						</Trigger>
						<Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
							<Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5"/>
							<Setter TargetName="Shdw" Property="Color" Value="#71000000"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


  <!-- =================================================================== -->
	<!-- QuickAccessToolbar Style -->
	<!-- =================================================================== -->
	<Style TargetType="{x:Type igRibbon:QuickAccessToolbar}">
		<Setter Property="Padding" Value="0"/>
		<Setter Property="Margin" Value="0"/>
        <Setter Property="Template" Value="{StaticResource scenicQatTemplate}" />
		<Style.Triggers>
			<Trigger Property="IsBelowRibbon" Value="True">
				<Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATBelowRibbonCenterFillKey}}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATBelowRibbonBorderDarkFillKey}}"/>
				<Setter Property="BorderThickness" Value="0,0,0,1"/>
			</Trigger>
		</Style.Triggers>
	</Style>
	
	
	
	<!-- =================================================================== -->
	<!-- RibbonTabItem Style -->
	<!-- =================================================================== -->
	<Style TargetType="{x:Type igRibbon:RibbonTabItem}">
		<Setter Property="ToolTipService.ShowDuration" Value="20000"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate x:Name="ControlTemplate" TargetType="{x:Type igRibbon:RibbonTabItem}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="TabMouseOver">
							<ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TabHottrack" Storyboard.TargetProperty="(UIElement.Visibility)">
								<DiscreteObjectKeyFrame KeyTime="00:00:00.000" Value="{x:Static Visibility.Visible}"/>
							</ObjectAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TabHottrack" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="TabMouseOut" FillBehavior="Stop">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TabHottrack" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TabHottrack" Storyboard.TargetProperty="(UIElement.Visibility)">
								<DiscreteObjectKeyFrame KeyTime="00:00:00.310" Value="{x:Static Visibility.Collapsed}"/>
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="ContextualTabMouseOver"/>
						<Storyboard x:Key="ContextualTabMouseOut" FillBehavior="Stop"/>
						<Storyboard x:Key="TabMouseOverNotSelected">
							<ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TabMouseOverNotSelected" Storyboard.TargetProperty="(UIElement.Visibility)">
								<DiscreteObjectKeyFrame KeyTime="00:00:00.000" Value="{x:Static Visibility.Visible}"/>
							</ObjectAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Duration="00:00:00.001"
								Storyboard.TargetName="TabMouseOverNotSelected"
								Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="TabMouseOutNotSelected" FillBehavior="Stop">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TabMouseOverNotSelected" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.200" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TabMouseOverNotSelected" Storyboard.TargetProperty="(UIElement.Visibility)">
								<DiscreteObjectKeyFrame KeyTime="00:00:00.210" Value="{x:Static Visibility.Collapsed}"/>
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid x:Name="Tab">
						<Line
							x:Name="ContextualTabInTabAreaSeparatorLeft"
							HorizontalAlignment="Left"
							Margin="0, -2, 0, 5"
							IsHitTestVisible="False"
							SnapsToDevicePixels="True"
							Stretch="Fill"
							Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabSeparatorFillKey}}"
							StrokeThickness="1"
							Visibility="{TemplateBinding Converter={StaticResource BoolToVisConverter}, Property=IsFirstTabInContextualTabGroup}"
							X1="0"
							X2="0"
							Y1="0"
							Y2="1"/>
						<Grid
							x:Name="TabMouseOverNotSelected"
							Margin="3,0"
							Opacity="0"
							Visibility="Collapsed">
							<Border
								x:Name="Center"
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabInactiveHoverBackgroundFillKey}}"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabInactiveHoverBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="2,2,0,0"
								SnapsToDevicePixels="True"
								Visibility="Visible">
								<Border
									x:Name="Bd2"
									BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabInactiveHoverCenterFillKey}}"
									BorderThickness="1,1,1,0"
									CornerRadius="1,1,0,0"
									SnapsToDevicePixels="True"/>
							</Border>
						</Grid>
						<Grid x:Name="TabSelected" Margin="0,0,0,-1" Visibility="Collapsed">
							<Path
								x:Name="BottomLeftFilet1"
								Width="3"
								Height="2"
								HorizontalAlignment="Left"
								VerticalAlignment="Bottom"
								Data="M 24,71 C24,71 24,72 24,72 24,73 23,74 22,74 22,74 21,74 21,74 21,74 21,75 21,75 21,75 22,75 22,75 22,75 23,75 23,75 24,75 25,74 25,73 25,73 25,71 25,71 25,71 24,71 24,71 z"
								Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								SnapsToDevicePixels="True"
								Stretch="Fill"/>
							<Path
								x:Name="BottomRightFilet1"
								Width="3"
								Height="2"
								HorizontalAlignment="Right"
								VerticalAlignment="Bottom"
								Data="M 28,75 C28,75 29,75 29,75 29,75 30,75 30,75 30,75 30,74 30,74 30,74 29,74 29,74 28,74 27,73 27,72 27,72 27,71 27,71 27,71 26,71 26,71 26,71 26,72 26,72 26,72 26,73 26,73 26,74 27,75 28,75 z"
								Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								SnapsToDevicePixels="True"
								Stretch="Fill"/>
							<Border
								x:Name="BdTabSelectedShdw"
								Margin="1,0,1,2"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="3,3,0,0"
								Opacity="0.15"/>
							<Border
								x:Name="BdTabSelectedShdw1"
								Margin="2,0,2,2"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="2,2,0,0"
								Opacity="0.25"/>
							<Border
								x:Name="BdTabSelected"
								Margin="3,0"
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalCenterFillKey}}"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="2,2,0,0"
								SnapsToDevicePixels="True"/>
						</Grid>
						<Grid x:Name="TabHottrack" Opacity="0">
							<Border
								Margin="3,0"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveHoverBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="2,2,0,0"
								SnapsToDevicePixels="True"/>
						</Grid>
						<Border
							x:Name="ContextualTabBase"
							BorderThickness="1,1,1,0"
							CornerRadius="3,3,0,0"
							d:IsHidden="True"
							Visibility="Collapsed"/>
						<Grid x:Name="ContextualTabSelected" Margin="0,0,0,-1" Visibility="Collapsed">
							<Path
								x:Name="ContextualTabBottomLeftFilet"
								Width="3"
								Height="2"
								HorizontalAlignment="Left"
								VerticalAlignment="Bottom"
								Data="M 24,71 C24,71 24,72 24,72 24,73 23,74 22,74 22,74 21,74 21,74 21,74 21,75 21,75 21,75 22,75 22,75 22,75 23,75 23,75 24,75 25,74 25,73 25,73 25,71 25,71 25,71 24,71 24,71 z"
								Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								SnapsToDevicePixels="True"
								Stretch="Fill"/>
							<Path
								x:Name="ContextualTabBottomRightFilet"
								Width="3"
								Height="2"
								HorizontalAlignment="Right"
								VerticalAlignment="Bottom"
								Data="M 28,75 C28,75 29,75 29,75 29,75 30,75 30,75 30,75 30,74 30,74 30,74 29,74 29,74 28,74 27,73 27,72 27,72 27,71 27,71 27,71 26,71 26,71 26,71 26,72 26,72 26,72 26,73 26,73 26,74 27,75 28,75 z"
								Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								SnapsToDevicePixels="True"
								Stretch="Fill"/>
							<Border
								x:Name="BdContextualTabSelectedShdw"
								Margin="1,0,1,2"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="3,3,0,0"
								Opacity="0.15"/>
							<Border
								x:Name="BdContextualTabSelectedShdw1"
								Margin="2,0,2,2"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="2,2,0,0"
								Opacity="0.25"/>
							<Border
								x:Name="BdContextualTabSelected"
								Margin="3,0"
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalCenterFillKey}}"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="2,2,0,0"
								SnapsToDevicePixels="True"/>
						</Grid>
						<ContentPresenter
							x:Name="tabItemText"
							Width="Auto"
							HorizontalAlignment="Stretch"
							Margin="6,4,6,3"
							VerticalAlignment="Center"
							Content="{TemplateBinding Header, Converter={StaticResource stringWithoutMnemonicsConverter}}"
							ContentTemplate="{TemplateBinding HeaderTemplate}"
							ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
							igRibbon:XamRibbon.KeyTipPlacementType="Caption"
							igWindows:ClippedTextToolTipService.AncestorTypeForToolTip="{x:Type igRibbon:RibbonTabItem}"
							igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True"
							igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}"
							TextBlock.TextAlignment="Center"
							TextElement.Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabNotSelectedTextFillKey}}"/>
						<Line
							x:Name="TabSeparator"
							HorizontalAlignment="Right"
							Margin="0, -2, 0, 5"
							IsHitTestVisible="False"
							Opacity="{TemplateBinding igWindows:TabItemPanel.TabSeparatorOpacity}"
							SnapsToDevicePixels="True"
							Stretch="Fill"
							Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabSeparatorFillKey}}"
							StrokeThickness="1"
							X1="0"
							X2="0"
							Y1="0"
							Y2="1"/>
						<Line
							x:Name="ContextualTabInTabAreaSeparatorRight"
							HorizontalAlignment="Right"
							Margin="0, -2, 0, 5"
							IsHitTestVisible="False"
							SnapsToDevicePixels="True"
							Stretch="Fill"
							Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabSeparatorFillKey}}"
							StrokeThickness="1"
							Visibility="{TemplateBinding Converter={StaticResource BoolToVisConverter}, Property=IsLastTabInContextualTabGroup}"
							X1="0"
							X2="0"
							Y1="0"
							Y2="1"/>
					</Grid>
					<ControlTemplate.Triggers>
						<!-- IsInContextualTabGroup -->
						<Trigger Property="IsInContextualTabGroup" Value="True">
							<Setter TargetName="Center" Property="BorderBrush" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolved, Converter={StaticResource contextualTabBaseColorToHoverBrushConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
							<Setter TargetName="BdContextualTabSelected" Property="BorderBrush" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolved, Converter={StaticResource contextualTabBaseColorToHoverBrushConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
							<Setter TargetName="ContextualTabBottomLeftFilet" Property="Fill" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolved, Converter={StaticResource contextualTabBaseColorToHoverBrushConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
							<Setter TargetName="ContextualTabBottomRightFilet" Property="Fill" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolved, Converter={StaticResource contextualTabBaseColorToHoverBrushConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
							<Setter TargetName="ContextualTabBase" Property="Background" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolved, Converter={StaticResource contextualTabBaseColorToHoverBrushConverter}, ConverterParameter=Black, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
							<Setter TargetName="Bd2" Property="Visibility" Value="Collapsed"/>
						</Trigger>
						<!-- IsSelected && !IsInContextualTabGroup -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True"/>
								<Condition Property="IsInContextualTabGroup" Value="False"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="TabSelected" Property="Visibility" Value="Visible"/>
							<Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
						</MultiTrigger>
						<!-- IsSelected && IsInContextualTabGroup && !XamRibbon.IsActive -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True"/>
								<Condition Property="IsInContextualTabGroup" Value="True"/>
								<Condition Property="igRibbon:XamRibbon.IsActive" Value="False"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="ContextualTabSelected" Property="Visibility" Value="Visible"/>
							<Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
						</MultiTrigger>
						<!-- IsMouseOverTab && !IsSelected -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsMouseOverTab, RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
								<Condition Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
							</MultiDataTrigger.Conditions>
							<MultiDataTrigger.EnterActions>
								<BeginStoryboard x:Name="TabMouseOverNotSelected_BeginStoryboard" Storyboard="{StaticResource TabMouseOverNotSelected}"/>
							</MultiDataTrigger.EnterActions>
							<MultiDataTrigger.ExitActions>
								<BeginStoryboard x:Name="TabMouseOutNotSelected_BeginStoryboard" Storyboard="{StaticResource TabMouseOutNotSelected}"/>
							</MultiDataTrigger.ExitActions>
						</MultiDataTrigger>
						<!-- IsMouseOverTab && IsSelected && !XamRibbon.IsActive -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOverTab" Value="True"/>
								<Condition Property="IsSelected" Value="True"/>
								<Condition Property="igRibbon:XamRibbon.IsActive" Value="False"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource TabMouseOver}"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard x:Name="TabMouseOut_BeginStoryboard" Storyboard="{StaticResource TabMouseOut}"/>
							</MultiTrigger.ExitActions>
							<Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
						</MultiTrigger>
						<!-- IsMouseOverTab && IsSelected && IsInContextualTabGroup -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOverTab" Value="True"/>
								<Condition Property="IsSelected" Value="True"/>
								<Condition Property="IsInContextualTabGroup" Value="True"/>
								<Condition Property="igRibbon:XamRibbon.IsActive" Value="False"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource TabMouseOver}"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource TabMouseOut}"/>
							</MultiTrigger.ExitActions>
							<Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
						</MultiTrigger>
						<!-- IsSelected && XamRibbon.IsActive -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True"/>
								<Condition Property="igRibbon:XamRibbon.IsActive" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
						</MultiTrigger>
						<!-- !IsSelected && XamRibbon.IsActive -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
								<Condition Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
							</MultiDataTrigger.Conditions>
							<MultiDataTrigger.EnterActions>
								<BeginStoryboard x:Name="ActivatedNotSelected_BeginStoryboard" Storyboard="{StaticResource TabMouseOverNotSelected}"/>
							</MultiDataTrigger.EnterActions>
							<MultiDataTrigger.ExitActions>
								<BeginStoryboard x:Name="DeactivatedNotSelected_BeginStoryboard" Storyboard="{StaticResource TabMouseOutNotSelected}"/>
							</MultiDataTrigger.ExitActions>
						</MultiDataTrigger>
						<!-- IsSelected && IsInContextualTabGroup && !XamRibbon.IsActive -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True"/>
								<Condition Property="igRibbon:XamRibbon.IsActive" Value="True"/>
								<Condition Property="IsInContextualTabGroup" Value="False"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="ContextualTabSelected" Property="Visibility" Value="Visible"/>
							<Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsInContextualTabGroup" Value="True">
				<Setter Property="igWindows:XamTabControl.TabPriority" Value="10"/>
			</Trigger>
		</Style.Triggers>
	</Style>
	
	
	
	<!-- =================================================================== -->
	<!-- Ribbon's XamTabControl Style -->
	<!-- =================================================================== -->
	<Style x:Key="{x:Static igRibbon:XamRibbon.RibbonTabControlStyleKey}" TargetType="{x:Type igWindows:XamTabControl}">
		<Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerFillKey}}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}"/>
		<Setter Property="BorderThickness" Value="0,1"/>
		<Setter Property="Padding" Value="0"/>
		<Setter Property="Margin" Value="0"/>
		<Setter Property="MaximumSizeToFitAdjustment" Value="18"/>
		<Setter Property="MinimumTabExtent" Value="28"/>
        <Setter Property="PreTabItemContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<Rectangle Width="56" Height="19"/>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Height" Value="Auto"/>
		<Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Continue"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igWindows:XamTabControl}">
					<Grid ClipToBounds="True" KeyboardNavigation.TabNavigation="Local">
						<Grid.RowDefinitions>
							<RowDefinition x:Name="gridRow0" Height="Auto"/>
							<RowDefinition x:Name="gridRow1" Height="*"/>
						</Grid.RowDefinitions>
						<Border
							x:Name="ContentPanel"
							Grid.Row="1"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							KeyboardNavigation.DirectionalNavigation="Continue"
							KeyboardNavigation.TabIndex="2"
							KeyboardNavigation.TabNavigation="Local"
							SnapsToDevicePixels="True"
							Visibility="Visible">
							<ContentPresenter
								x:Name="PART_SelectedContentHost"
								Height="{TemplateBinding TabItemContentHeight}"
								Margin="{TemplateBinding Padding}"
								Content="{TemplateBinding SelectedContent}"
								ContentSource="SelectedContent"
								ContentTemplate="{TemplateBinding SelectedContentTemplate}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								/>
						</Border>
						<Rectangle x:Name="bottomHighlight" Grid.Row="1" Fill="#59FFFFFF" Height="1" VerticalAlignment="Bottom" SnapsToDevicePixels="True" Margin="0,0,0,2"/>
						<DockPanel
							x:Name="PART_HeaderArea"
							Panel.ZIndex="1"
							Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelBackgroundKey}}"
							SnapsToDevicePixels="True">
							<ContentPresenter
								x:Name="PreTabItemContent"
								KeyboardNavigation.DirectionalNavigation="Continue"
                                KeyboardNavigation.TabIndex="0" 
								Content="{TemplateBinding PreTabItemContent}"
								ContentTemplate="{TemplateBinding PreTabItemContentTemplate}"
								ContentTemplateSelector="{TemplateBinding PreTabItemContentTemplateSelector}"
								DockPanel.Dock="Left"/>
							<ContentPresenter
								x:Name="PostTabItemContent"
								KeyboardNavigation.DirectionalNavigation="Continue"
                                KeyboardNavigation.TabIndex="2" 
								Content="{TemplateBinding PostTabItemContent}"
								ContentTemplate="{TemplateBinding PostTabItemContentTemplate}"
								ContentTemplateSelector="{TemplateBinding PostTabItemContentTemplateSelector}"
								DockPanel.Dock="Right"/>
							<igWindows:XamPager
								x:Name="PART_TabItemScrollViewer"
								CanContentScroll="True"
								Focusable="False"
								KeyboardNavigation.DirectionalNavigation="Continue"
								KeyboardNavigation.TabIndex="1"
								KeyboardNavigation.TabNavigation="Local"
								ScrollLeftButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollLeftButtonStyleKey}}"
								ScrollRightButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollRightButtonStyleKey}}"
								ScrollViewer.HorizontalScrollBarVisibility="{TemplateBinding TabItemHorizontalScrollBarVisibility}"
								ScrollViewer.VerticalScrollBarVisibility="{TemplateBinding TabItemVerticalScrollBarVisibility}">
								<ItemsPresenter x:Name="PART_TabHeaderPanel" Margin="2,1,2,0" KeyboardNavigation.TabNavigation="Once"/>
							</igWindows:XamPager>
						</DockPanel>
						<Popup
							x:Name="PART_Popup"
							Width="{TemplateBinding PreferredDropDownExtent}"
							AllowsTransparency="True"
							CustomPopupPlacementCallback="{TemplateBinding PreferredDropDownPlacementCallback}"
							igWindows:PopupHelper.HandleMouseDownOnClose="True"
							IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
							Placement="Custom"
							SnapsToDevicePixels="True"
							StaysOpen="False">
							<AdornerDecorator>
								<Border
									Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelBackgroundKey}}"
									KeyboardNavigation.DirectionalNavigation="Continue"
									KeyboardNavigation.TabIndex="2"
									KeyboardNavigation.TabNavigation="Local"
									SnapsToDevicePixels="True">
									<Border
										Background="{TemplateBinding Panel.Background}"
										BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}"
										BorderThickness="0,1"
										SnapsToDevicePixels="True">
										<ContentPresenter
											x:Name="PART_SelectedContentHostMinimized"
											Height="{TemplateBinding TabItemContentHeight}"
											HorizontalAlignment="{Binding HorizontalAlignment, ElementName=PART_SelectedContentHost}"
											Margin="{TemplateBinding Padding}"
											VerticalAlignment="{Binding VerticalAlignment, ElementName=PART_SelectedContentHost}"
											Content="{x:Null}"
											ContentSource="SelectedContent"
											ContentTemplate="{TemplateBinding SelectedContentTemplate}"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
									</Border>
								</Border>
							</AdornerDecorator>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsDropDownOpen" Value="False">
							<Setter TargetName="PART_Popup" Property="PopupAnimation" Value="Fade"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GrayTextBrushKey}}"/>
						</Trigger>
						<Trigger Property="IsMinimized" Value="True">
							<Setter TargetName="PART_SelectedContentHostMinimized" Property="Content" Value="{Binding SelectedContent, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter TargetName="ContentPanel" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="PART_SelectedContentHost" Property="Content" Value="{x:Null}"/>
							<!-- AS 7/20/11 TFS80142 -->
							<Setter Property="Grid.RowSpan" TargetName="PART_HeaderArea" Value="2" />
						</Trigger>
						<Trigger Property="igRibbon:XamRibbon.IsSelectedItemInContextualTabGroup" Value="True">
							<Setter TargetName="ContentPanel" Property="BorderBrush" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<!--<Style.Triggers>
			<Trigger Property="IsMinimized" Value="True">
				<Setter Property="Height" Value="24"/>
			</Trigger>
		</Style.Triggers>-->
	</Style>
	
	
	<!-- =================================================================== -->
	<!-- RibbonGroup Qat Toggle Button Style -->
	<!-- =================================================================== -->
	<Style x:Key="{x:Static igRibbon:RibbonGroup.QuickAccessToolbarGroupButtonStyleKey}" TargetType="{x:Type igRibbon:DropDownToggle}">
		<Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATNormalCenterFillKey}}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATBorderDarkFillKey}}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Padding" Value="3"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igRibbon:DropDownToggle}">
					<Grid>
						<Border SnapsToDevicePixels="True" x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"  Background="{TemplateBinding Background}" CornerRadius="2"/>
						<Border SnapsToDevicePixels="True" x:Name="InnerBd" BorderThickness="1" Background="Transparent" Margin="1" CornerRadius="1"/>
						<igWindows:AutoDisabledImage x:Name="image" Source="{Binding Path=(igRibbon:RibbonGroup.SmallImage), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Margin="{TemplateBinding Padding}" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="igRibbon:XamRibbon.IsActive" Value="True">
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATHoverCenterFillKey}}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATHoverBorderDarkFillKey}}"/>
							<Setter Property="BorderBrush" TargetName="InnerBd" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATHover1InnerBorderFillKey}}"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATHoverCenterFillKey}}"/>
							<Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATHoverBorderDarkFillKey}}"/>
							<Setter Property="BorderBrush" TargetName="InnerBd" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATHover1InnerBorderFillKey}}"/>
						</Trigger>
						<DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
								<Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
							</MultiDataTrigger.Conditions>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsDroppedDown" Value="True">
				<Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATPressedCenterFillKey}}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATHoverBorderDarkFillKey}}"/>
			</Trigger>
		</Style.Triggers>
	</Style>
	
	
	
	<!-- =================================================================== -->
	<!-- RibbonGroup Style -->
	<!-- =================================================================== -->
	<Style TargetType="{x:Type igRibbon:RibbonGroup}">
		<Setter Property="Margin" Value="2,0,0,0"/>
		<Setter Property="Padding" Value="0"/>
		<Setter Property="SmallImage">
			<Setter.Value>
				<DrawingImage>
					<DrawingImage.Drawing>
						<DrawingGroup>
							<GeometryDrawing Brush="#00FFFFFF">
								<GeometryDrawing.Geometry>
									<RectangleGeometry Rect="0,0,11,11"/>
								</GeometryDrawing.Geometry>
							</GeometryDrawing>
							<DrawingGroup Opacity="0.670">
								<GeometryDrawing Brush="#FFFFFFFF" Geometry="M1,1C1,1 10,1 10,1 10,1 10,10 10,10 10,10 1,10 1,10 1,10 1,1 1,1z M0,0C0,0 0,11 0,11 0,11 11,11 11,11 11,11 11,0 11,0 11,0 0,0 0,0z"/>
							</DrawingGroup>
							<DrawingGroup>
								<DrawingGroup.Transform>
									<MatrixTransform Matrix="1,0,0,1,3,3"/>
								</DrawingGroup.Transform>
								<GeometryDrawing Brush="#FFFFFFFF" Geometry="M5,0 C5,0 4.285,0 4.285,0 4.285,0 0,5 0,5 0,5 0.714,5 0.714,5 0.714,5 5,0 5,0 z"/>
							</DrawingGroup>
						</DrawingGroup>
					</DrawingImage.Drawing>
				</DrawingImage>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igRibbon:RibbonGroup}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="RibbonGroupFadeIn">
							<DoubleAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetName="RibbonGroupGlowHover" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="RibbonGroupFadeOut">
							<DoubleAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetName="RibbonGroupGlowHover" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
                    <Grid><AdornerDecorator>
					<igWindows:CardPanel>
						<ContentControl x:Name="PART_RibbonGroupSite" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" Style="{StaticResource PlainContentControlStyle}">
							<Grid x:Name="groupPanel" Background="{TemplateBinding Background}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                    <Grid x:Name="RibbonGroupGlowHover" Opacity="0" Margin="0,0,4,0" Grid.ColumnSpan="2">
									<Grid.OpacityMask>
										<LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
											<GradientStop Offset="0" Color="#3F000000"/>
											<GradientStop Color="#EAFFFFFF" Offset="0.1"/>
											<GradientStop Color="#FFE5E5E5" Offset="0.9"/>
											<GradientStop Color="#3FFFFFFF" Offset="1"/>
										</LinearGradientBrush>
									</Grid.OpacityMask>
									<Rectangle Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverBottomGradientFillKey}}"/>
									<Rectangle Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverCenterFillKey}}"/>
									<Rectangle Height="1" VerticalAlignment="Bottom" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverBorderFillKey}}"/>
								</Grid>
								<DockPanel Margin="0,1,0,0">
									<DockPanel DockPanel.Dock="Bottom" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local" Margin="0,2,0,0" >
										<ContentControl
											x:Name="DialogBoxLauncher"
											Height="15"
											Content="{TemplateBinding DialogBoxLauncherTool}"
											DockPanel.Dock="Right"
											Focusable="False"
											Visibility="Hidden"
											VerticalAlignment="Bottom"/>
										<TextBlock
											x:Name="PART_Caption"
											HorizontalAlignment="Stretch"
											Padding="0"
											Margin="0"
											VerticalAlignment="Bottom"
											Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCaptionTextFillKey}}"
											igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True"
											igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}"
											Text="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}"
											TextAlignment="Center"
											TextTrimming="CharacterEllipsis"/>
									</DockPanel>
                                    <ItemsPresenter
										x:Name="PART_Items"
										HorizontalAlignment="Center"
										KeyboardNavigation.TabIndex="0"
										KeyboardNavigation.TabNavigation="Local"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										DockPanel.Dock="Top"/>
                                </DockPanel>
                                <igWindows:CardPanel x:Name="groupSeparator" Width="3" Margin="4,6,0,3" Grid.Column="1">
                                    <Rectangle Width="3" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VerticalSeparatorNormalLightFillKey}}" SnapsToDevicePixels="true" />
                                    <Rectangle Width="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ScenicRibbonGroupSeparatorFillKey}}" SnapsToDevicePixels="true" HorizontalAlignment="Center" />
                                </igWindows:CardPanel>
                            </Grid>
						</ContentControl>
						<igRibbon:DropDownToggle
							x:Name="PART_RibbonGroupButton"
							igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}"
							IsDroppedDown="{Binding Path=IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							Style="{DynamicResource {x:Static igRibbon:RibbonGroup.CollapsedGroupButtonStyleKey}}"
							Visibility="Collapsed"/>
						<Popup
							x:Name="PART_Popup"
							AllowsTransparency="True"
							igWindows:PopupHelper.HandleMouseDownOnClose="True"
							IsOpen="{Binding Path=IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
							Placement="Bottom"
							PlacementTarget="{Binding ElementName=PART_RibbonGroupButton}"
							StaysOpen="False">
							<luna:SystemDropShadowChrome x:Name="Shdw" Color="#3F000000" Margin="0,0,5,5">
							<AdornerDecorator KeyboardNavigation.DirectionalNavigation="Cycle">
								<Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}" BorderThickness="1" CornerRadius="1" Margin="0,0,10,10">
                                    <!-- AS 4/1/11 TFS70779
									<Border.BitmapEffect>
                                        <DropShadowBitmapEffect ShadowDepth="4" Opacity=".3" Softness="0.1"/>
                                    </Border.BitmapEffect>-->
									<Grid>
										<Rectangle Fill="#59FFFFFF" Height="1" VerticalAlignment="Bottom" SnapsToDevicePixels="True" Margin="0,0,0,1"/> 
										<ContentControl x:Name="PART_PopupRibbonGroupSite" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" Style="{StaticResource PlainContentControlStyle}"/>
									</Grid>
								</Border>
							</AdornerDecorator>
							</luna:SystemDropShadowChrome>
						</Popup>
					</igWindows:CardPanel>
                    </AdornerDecorator></Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsOpen" Value="False">
							<Setter TargetName="PART_Popup" Property="PopupAnimation" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="compModel:DesignerProperties.IsInDesignMode" Value="False"/>
								<Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="True"/>
								<Condition Property="HighlightContent" Value="True"/>
							</MultiTrigger.Conditions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="compModel:DesignerProperties.IsInDesignMode" Value="False"/>
								<Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="False"/>
								<Condition Property="HighlightContent" Value="True"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource RibbonGroupFadeIn}"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource RibbonGroupFadeOut}"/>
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<Trigger Property="IsCollapsed" Value="True">
							<Setter TargetName="PART_RibbonGroupButton" Property="Visibility" Value="Visible"/>
							<Setter TargetName="PART_RibbonGroupButton" Property="igRibbon:RibbonGroup.Caption" Value="{Binding Path=Caption, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter TargetName="PART_RibbonGroupButton" Property="igRibbon:RibbonGroup.SmallImage" Value="{Binding Path=SmallImage, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter TargetName="PART_RibbonGroupSite" Property="Visibility" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="IsActive" Value="True">
							<Setter TargetName="PART_RibbonGroupButton" Property="Background" Value="Yellow"/>
						</Trigger>
						<Trigger Property="Location" Value="QuickAccessToolbar">
							<Setter TargetName="PART_RibbonGroupButton" Property="Style" Value="{DynamicResource {x:Static igRibbon:RibbonGroup.QuickAccessToolbarGroupButtonStyleKey}}"/>
							<Setter TargetName="PART_RibbonGroupButton" Property="Visibility" Value="Visible"/>
							<Setter TargetName="PART_RibbonGroupButton" Property="igRibbon:RibbonGroup.Caption" Value="{Binding Path=Caption, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter TargetName="PART_RibbonGroupButton" Property="igRibbon:RibbonGroup.SmallImage" Value="{Binding Path=SmallImage, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="PART_RibbonGroupSite" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="groupSeparator" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_Caption" Property="Margin" Value="0"/>
                            <Setter TargetName="RibbonGroupGlowHover" Property="Margin" Value="0,0,4,0"/>
                        </Trigger>
						<Trigger Property="HasDialogBoxLauncherTool" Value="True">
							<Setter TargetName="DialogBoxLauncher" Property="Visibility" Value="Visible"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="Location" Value="QuickAccessToolbar">
				<Setter Property="Margin" Value="0"/>
				<Setter Property="Focusable" Value="True"/>
			</Trigger>
			<Trigger Property="IsCollapsed" Value="True">
				<Setter Property="Focusable" Value="True"/>
			</Trigger>
		</Style.Triggers>
	</Style>


    <!-- =================================================================== -->
    <!-- ResizeGrip -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:RibbonWindowContentHost.ScenicResizeGripStyleKey}" TargetType="{x:Type ResizeGrip}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid x:Name="ResizeGrippers" Background="#00ffffff" Width="8" Height="8">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Rectangle Width="2" Height="2" Fill="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ScenicResizeGrippersForegroundFillKey}}" Grid.Column="2" Margin="1,0,0,0" SnapsToDevicePixels="True"/>
                        <Rectangle Width="2" Height="2" Fill="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ScenicResizeGrippersForegroundFillKey}}" Grid.Column="1" Grid.Row="1" SnapsToDevicePixels="True"/>
                        <Rectangle Width="2" Height="2" Fill="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ScenicResizeGrippersForegroundFillKey}}" Grid.Column="2" Grid.Row="1" Margin="1,0,0,0" SnapsToDevicePixels="True"/>
                        <Rectangle Width="2" Height="2" Fill="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ScenicResizeGrippersForegroundFillKey}}" Grid.Column="0" Grid.Row="2" Margin="0,1,0,0" SnapsToDevicePixels="True"/>
                        <Rectangle Width="2" Height="2" Fill="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ScenicResizeGrippersForegroundFillKey}}" Grid.Column="1" Grid.Row="2" Margin="0,1,0,0" SnapsToDevicePixels="True"/>
                        <Rectangle Width="2" Height="2" Fill="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ScenicResizeGrippersForegroundFillKey}}" Grid.Column="2" Grid.Row="2" Margin="1,1,0,0" SnapsToDevicePixels="True"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    




</ResourceDictionary>
