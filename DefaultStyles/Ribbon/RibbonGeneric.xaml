<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
xmlns:interop="clr-namespace:System.Windows.Interop;assembly=PresentationFramework"
xmlns:compModel="clr-namespace:System.ComponentModel;assembly=PresentationFramework"
xmlns:sys="clr-namespace:System;assembly=mscorlib"
xmlns:igWindows="http://infragistics.com/Windows"
xmlns:igEditors="http://infragistics.com/Editors"
xmlns:igThemes="http://infragistics.com/Themes"
xmlns:igRibbon="http://infragistics.com/Ribbon"
xmlns:luna="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Luna"
xmlns:themes="http://infragistics.com/Themes"
xmlns:d="http://schemas.microsoft.com/expression/blend/2006"
xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
xmlns:igPrim="http://schemas.infragistics.com/xaml/primitives"
xmlns:ig="http://schemas.infragistics.com/xaml"
mc:Ignorable="d"
>
    <ResourceDictionary.MergedDictionaries>
        <!--<ResourceDictionary Source="RibbonOffice2k7Brushes_Blue.xaml" />-->
        <ResourceDictionary Source="RibbonOffice2k7Brushes_Blue.xaml" />
    </ResourceDictionary.MergedDictionaries>
    
    
    <!-- Place holer brushed that are not actually used by the generic theme-->
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="{x:Static igRibbon:RibbonBrushKeys.ScenicRibbonGroupSeparatorFillKey}" igThemes:ResourceWasher.WashGroup="BaseColor" Color="#FFAABDD3"/>

    <!-- Identify the theme as not the Scenic theme-->
    <sys:Boolean x:Key="{x:Static igRibbon:RibbonWindowContentHost.IsScenicThemeKey}">False</sys:Boolean>
    <sys:Boolean x:Key="{x:Static igRibbon:RibbonWindowContentHost.UsesScenicApplicationMenuKey}">False</sys:Boolean>
    <sys:Boolean x:Key="{x:Static igRibbon:RibbonWindowContentHost.IsOffice2013ThemeKey}">False</sys:Boolean>

    <!-- Converters-->
    <BooleanToVisibilityConverter x:Key="BoolToVisConverter" />
    <igRibbon:ContextualTabBaseColorToHoverBrushConverter x:Key="contextualTabBaseColorToHoverBrushConverter" />
    <igWindows:StringWithoutMnemonicsConverter x:Key="stringWithoutMnemonicsConverter" />

    <!-- SSP 3/12/10 TFS27090 -->
    <igWindows:NullToFalseConverter x:Key="nullToFalseConverter" />
    <igWindows:TypeCheckConverter x:Key="typeCheckConverter" />
    <igWindows:NullToParameterConverter x:Key="nullToParameterConverter" />

    <!-- SSP 11/9/10 TFS33587 -->
    <igWindows:BoolToValueConverter x:Key="complementConverter">
        <igWindows:BoolToValueConverter.TrueConvertValue>
            <sys:Boolean>False</sys:Boolean>
        </igWindows:BoolToValueConverter.TrueConvertValue>
        <igWindows:BoolToValueConverter.FalseConvertValue>
            <sys:Boolean>True</sys:Boolean>
        </igWindows:BoolToValueConverter.FalseConvertValue>
    </igWindows:BoolToValueConverter>

    <!-- SSP 3/29/12 IME - TFS107196 -->
    <igEditors:HorizontalToTextAlignmentConverter x:Key="horizToTextAlignmentConverter" />

    <!-- NA 13.1 Backstage -->
    <igPrim:ScaledDoubleConverter ScaleFactor="1.2" x:Key="applicationMenuTabFontConverter" />

    <!-- ========== Pager Button Styles ========== -->

    <Style x:Key="PagerScrollButtonBase" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <!-- ========== ScrollLeft Pager Button ========== -->
    <Style x:Key="{x:Static igRibbon:RibbonGroupCollection.PagerScrollLeftButtonStyleKey}" BasedOn="{StaticResource PagerScrollButtonBase}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="12" Height="Auto" x:Name="grid">
                        <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonBlueGradientFillKey}}" CornerRadius="4,0,0,4" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonBorderDarkFillKey}}" BorderThickness="1,1,0,1" x:Name="border1" SnapsToDevicePixels="True" />
                        <Rectangle HorizontalAlignment="Right" Margin="0,1,0,1" Width="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonLeftOuterBorderGradientFillKey}}" SnapsToDevicePixels="True" x:Name="rectangle1" />
                        <Rectangle HorizontalAlignment="Right" Margin="0,1,1,1" Width="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonLeftInnerBorderGradientFillKey}}" x:Name="rectangle" SnapsToDevicePixels="True" />
                        <Border HorizontalAlignment="Stretch" Margin="2,2,2,2" Width="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonCenterGrayGradientFillKey}}" CornerRadius="2,0,0,2" x:Name="border" SnapsToDevicePixels="True" />
                        <Path Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonGlyphFillKey}}" SnapsToDevicePixels="True" HorizontalAlignment="Center" Margin="0,0,0,0" VerticalAlignment="Center" Stretch="None" Data="M3,0L3,5 0,2.5z" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Margin" TargetName="rectangle" Value="0,2,1,1" />
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverBorderFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverBorderFillKey}}" />
                            <Setter Property="Visibility" TargetName="border" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonPressedBorderFillKey}}" />
                            <Setter Property="Margin" TargetName="border" Value="1,0,1,0" />
                            <Setter Property="Visibility" TargetName="rectangle1" Value="Collapsed" />
                            <Setter Property="BorderThickness" TargetName="border1" Value="1,1,1,1" />
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonPressedCenterFillKey}}" />
                            <Setter Property="Visibility" TargetName="border" Value="Visible" />
                            <Setter Property="Background" TargetName="border1" Value="{x:Null}" />
                            <Setter Property="Margin" TargetName="rectangle" Value="1,1,1,1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== ScrollRight Pager Button==========  -->
    <Style x:Key="{x:Static igRibbon:RibbonGroupCollection.PagerScrollRightButtonStyleKey}" BasedOn="{StaticResource PagerScrollButtonBase}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="12" Height="Auto" x:Name="grid">
                        <Border HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonBlueGradientFillKey}}" CornerRadius="0,4,4,0" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonBorderDarkFillKey}}" BorderThickness="0,1,1,1" x:Name="border1" SnapsToDevicePixels="True" />
                        <Rectangle HorizontalAlignment="Left" Margin="0,1,0,1" Width="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonLeftOuterBorderGradientFillKey}}" Stroke="{x:Null}" SnapsToDevicePixels="True" x:Name="rectangle1" />
                        <Rectangle HorizontalAlignment="Left" Margin="1,1,0,1" Width="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonLeftInnerBorderGradientFillKey}}" x:Name="rectangle" SnapsToDevicePixels="True" />
                        <Border HorizontalAlignment="Stretch" Margin="2,2,2,2" Width="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonCenterGrayGradientFillKey}}" CornerRadius="0,2,2,0" x:Name="border" SnapsToDevicePixels="True" />
                        <Path Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonGlyphFillKey}}" HorizontalAlignment="Center" Margin="0,0,0,0" VerticalAlignment="Center" Width="Auto" Stretch="None" Data="M0,0L0,5 3,2.5z" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Margin" TargetName="rectangle" Value="1,2,0,1" />
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverBorderFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverBorderFillKey}}" />
                            <Setter Property="Visibility" TargetName="border" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="border1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonPressedBorderFillKey}}" />
                            <Setter Property="Margin" TargetName="border" Value="1,0,1,0" />
                            <Setter Property="Visibility" TargetName="rectangle1" Value="Collapsed" />
                            <Setter Property="BorderThickness" TargetName="border1" Value="1,1,1,1" />
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonPressedCenterFillKey}}" />
                            <Setter Property="Visibility" TargetName="border" Value="Visible" />
                            <Setter Property="Background" TargetName="border1" Value="{x:Null}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== DropDown Arrow Glyphs ========== -->
    <Style x:Key="GlyphStyleBase" TargetType="{x:Type Control}">
        <Setter Property="Focusable" Value="False" />
        <!-- AS 11/9/07 BR27990 -->
        <Setter Property="IsHitTestVisible" Value="False" />
    </Style>

    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />

    <!-- ========== MenuScrollViewer_Button Styles ========== -->
    <Style x:Key="MenuScrollViewerUpButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="ClickMode" Value="Hover" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid x:Name="MenuScrollViewerUpButton">
                        <Border SnapsToDevicePixels="True" x:Name="BorderDark" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerNormalBorderDarkFillKey}}" CornerRadius="2,2,2,2" />
                        <Border SnapsToDevicePixels="True" Margin="1,1,1,1" x:Name="BorderLight_Center" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerNormalCenterFillKey}}" />
                        <Path x:Name="Glyph" Margin="0,4,0,5" HorizontalAlignment="Center" VerticalAlignment="Center" Height="4" Width="8" Stretch="Fill" Opacity="1" Data="M 0,4 C0,4 8,4 8,4 8,4 4,0 4,0 4,0 0,4 0,4 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerNormalGlyphFillKey}}" SnapsToDevicePixels="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerHoverBorderDarkFillKey}}" />
                            <Setter Property="BorderThickness" TargetName="BorderLight_Center" Value="1,1,1,1" />
                            <Setter Property="Background" TargetName="BorderLight_Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="BorderLight_Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerHoverBorderLightFillKey}}" />
                            <Setter Property="Fill" TargetName="Glyph" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerHoverGlyphFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerPressedBorderDarkFillKey}}" />
                            <Setter Property="BorderThickness" TargetName="BorderLight_Center" Value="1,1,1,1" />
                            <Setter Property="Background" TargetName="BorderLight_Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerPressedCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="BorderLight_Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerPressedBorderLightFillKey}}" />
                            <Setter Property="Fill" TargetName="Glyph" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerHoverGlyphFillKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuScrollViewerDownButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="ClickMode" Value="Hover" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid x:Name="MenuScrollViewerDownButton">
                        <Border SnapsToDevicePixels="True" x:Name="BorderDark" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerNormalBorderDarkFillKey}}" CornerRadius="2,2,2,2" />
                        <Border SnapsToDevicePixels="True" Margin="1,1,1,1" x:Name="BorderLight_Center" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerNormalCenterFillKey}}" />
                        <Path x:Name="Glyph" Margin="0,5,0,4" HorizontalAlignment="Center" VerticalAlignment="Center" Height="3" Width="6" Stretch="Fill" Opacity="1" Data="M 1,0 C1,0 7,0 7,0 7,0 4,3 4,3 4,3 1,0 1,0 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerNormalGlyphFillKey}}" SnapsToDevicePixels="True" ClipToBounds="False" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerHoverBorderDarkFillKey}}" />
                            <Setter Property="BorderThickness" TargetName="BorderLight_Center" Value="1,1,1,1" />
                            <Setter Property="Background" TargetName="BorderLight_Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="BorderLight_Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerHoverBorderLightFillKey}}" />
                            <Setter Property="Fill" TargetName="Glyph" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerHoverGlyphFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerPressedBorderDarkFillKey}}" />
                            <Setter Property="BorderThickness" TargetName="BorderLight_Center" Value="1,1,1,1" />
                            <Setter Property="Background" TargetName="BorderLight_Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerPressedCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="BorderLight_Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerPressedBorderLightFillKey}}" />
                            <Setter Property="Fill" TargetName="Glyph" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuScrollViewerHoverGlyphFillKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== MenuScrollViewer ========== -->
    <Style x:Key="MenuScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="1" Grid.Column="0">
                            <ScrollContentPresenter CanContentScroll="{TemplateBinding CanContentScroll}" x:Name="PART_ScrollContentPresenter" Margin="{TemplateBinding Padding}" />
                        </Border>
                        <RepeatButton Style="{StaticResource MenuScrollViewerUpButton}" Grid.Row="0" Grid.Column="0" Command="{x:Static ScrollBar.LineUpCommand}" Focusable="false" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Margin="0,1,1,1">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="0">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                        </RepeatButton>
                        <RepeatButton Style="{StaticResource MenuScrollViewerDownButton}" Grid.Row="2" Grid.Column="0" Command="{x:Static ScrollBar.LineDownCommand}" Focusable="false" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Margin="0,1,1,1">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource MenuScrollingVisibilityConverter}" ConverterParameter="100">
                                    <Binding Path="ComputedVerticalScrollBarVisibility" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="VerticalOffset" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ExtentHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="ViewportHeight" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static igRibbon:MenuTool.MenuToolDropDownArrowStyleKey}" TargetType="{x:Type Control}" BasedOn="{StaticResource GlyphStyleBase}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphHoverForegroundFillKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphHoverBackgroundFillKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <igWindows:CardPanel>
                        <Grid x:Name="containerGrid" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Path x:Name="arrowBG" SnapsToDevicePixels="True" Fill="{TemplateBinding Background}" Stretch="None" Data="M 0,0 C0,0 0,1 0,1 0,1 1,1 1,1 1,1 1,2 1,2 1,2 2,2 2,2 2,2 2,3 2,3 2,3 3,3 3,3 3,3 3,2 3,2 3,2 4,2 4,2 4,2 4,1 4,1 4,1 5,1 5,1 5,1 5,0 5,0 5,0 0,0 0,0 z" d:LayoutOverrides="Height" HorizontalAlignment="Center" Margin="0,1,0,0" VerticalAlignment="Top" />
                            <Path x:Name="arrowFG" SnapsToDevicePixels="True" d:LayoutOverrides="Height" HorizontalAlignment="Center" Margin="0,0,0,0" VerticalAlignment="Top" Fill="{TemplateBinding Foreground}" Stretch="None" Data="M 0,0 C0,0 0,1 0,1 0,1 1,1 1,1 1,1 1,2 1,2 1,2 2,2 2,2 2,2 2,3 2,3 2,3 3,3 3,3 3,3 3,2 3,2 3,2 4,2 4,2 4,2 4,1 4,1 4,1 5,1 5,1 5,1 5,0 5,0 5,0 0,0 0,0 z" />
                        </Grid>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="arrowBG" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphDisabledBackgroundFillKey}}" />
                            <Setter TargetName="arrowFG" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphDisabledForegroundFillKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(igRibbon:MenuTool.Location), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="QuickAccessToolbar">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphHoverForegroundFillKey}}" />
                <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphHoverBackgroundFillKey}}" />
            </DataTrigger>

            <!--<DataTrigger Binding="{Binding Path=(igRibbon:MenuTool.IsEnabled), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphDisabledForegroundFillKey}}" />
				<Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphDisabledBackgroundFillKey}}" />
			</DataTrigger>-->

            <DataTrigger Binding="{Binding Path=(UIElement.IsMouseOver), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphHoverForegroundFillKey}}" />
                <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphHoverBackgroundFillKey}}" />
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(UIElement.IsMouseOver), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False" />
                    <Condition Binding="{Binding Path=(ButtonBase.IsPressed), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:MenuTool.IsOpen), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:MenuTool.IsActive), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:RibbonGroup.IsOpen), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphNormalForegroundFillKey}}" />
                <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphNormalBackgroundFillKey}}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static igRibbon:MenuTool.QuickCustomizeMenuDropDownArrowStyleKey}" TargetType="{x:Type Control}" BasedOn="{StaticResource GlyphStyleBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <igWindows:CardPanel>
                        <Grid HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,2,2,0" Width="Auto" Height="Auto">
                            <Path SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATCustomizeDropdownNormalBackgroundFillKey}}" Stretch="None" Data="M 0,0 C0,0 0,1 0,1 0,1 1,1 1,1 1,1 1,2 1,2 1,2 2,2 2,2 2,2 2,3 2,3 2,3 3,3 3,3 3,3 3,2 3,2 3,2 4,2 4,2 4,2 4,1 4,1 4,1 5,1 5,1 5,1 5,0 5,0 5,0 0,0 0,0 z" Width="5" d:LayoutOverrides="Height" Margin="0,4,0,0" />
                            <Path SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATCustomizeDropdownNormalForegroundFillKey}}" Stretch="None" Data="M 0,0 C0,0 0,1 0,1 0,1 1,1 1,1 1,1 1,2 1,2 1,2 2,2 2,2 2,2 2,3 2,3 2,3 3,3 3,3 3,3 3,2 3,2 3,2 4,2 4,2 4,2 4,1 4,1 4,1 5,1 5,1 5,1 5,0 5,0 5,0 0,0 0,0 z" d:LayoutOverrides="Width, Height" Margin="0,3,0,0" />
                            <Rectangle SnapsToDevicePixels="True" Height="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATCustomizeDropdownNormalForegroundFillKey}}" Margin="0,0,0,0" VerticalAlignment="Top" Width="Auto" />
                            <Rectangle SnapsToDevicePixels="True" Width="5" Height="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATCustomizeDropdownNormalBackgroundFillKey}}" VerticalAlignment="Top" Margin="0,1,0,0" />
                        </Grid>
                    </igWindows:CardPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static igRibbon:MenuTool.MenuItemDropDownArrowStyleKey}" TargetType="{x:Type Control}" BasedOn="{StaticResource GlyphStyleBase}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuItemDropDownArrowFillKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Grid x:Name="Menu_Arrow" Margin="4,0,5,0" DockPanel.Dock="Right" igRibbon:XamRibbon.KeyTipPlacementType="DropDownButton" Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" Width="Auto" Height="Auto">
                        <Path x:Name="Glyph_Arrow" Fill="{TemplateBinding Foreground}" SnapsToDevicePixels="True" Width="Auto" Stretch="None" Data="M0,0L0,7 4,3.5z" HorizontalAlignment="Center" Margin="0,0,0,0" VerticalAlignment="Center" Height="Auto" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(UIElement.IsMouseOver), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuItemDropDownArrowHottrackFillKey}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- ========== Data Templates ========== -->
    <DataTemplate DataType="{x:Type igRibbon:RibbonGroupCollection}">
        <Grid x:Name="RootPanel">
            <ItemsControl ItemsSource="{Binding}" Padding="0,3,0,2" Focusable="False">
                <ItemsControl.Template>
                    <ControlTemplate TargetType="{x:Type ItemsControl}">
                        <igWindows:XamPager ScrollViewer.CanContentScroll="True" Focusable="False" ScrollLeftButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollLeftButtonStyleKey}}" ScrollRightButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollRightButtonStyleKey}}" ScrollViewer.VerticalScrollBarVisibility="Hidden" ScrollViewer.HorizontalScrollBarVisibility="Auto" Margin="-2,0,-2,0">
                            <!-- AS 6/4/08 BR32242 
                            The DataContext will be set by WPF to the RibbonGroupCollection but pass along the Ribbon data context instead.
                            -->
                            <!-- AS 5/3/10 TFS30101
                We were propogating the DataContext of the Ribbon via the Ribbon property. However there seems to be an issue in the WPF
                framework where when the element is coming out of the visual tree but not out of the logical tree, its inherited properties 
                are not getting fixed up properly. In this case the element's datacontext goes to null and never gets a change notification 
                back to the new value when its back in the visual tree - presumably because the value would be the same as what would be 
                provided by the logical parent. To try and get around this issue we can get a reference to the ribbon once since it will 
                never change once set and then just bind to the datacontext off that cached value.
              <ItemsPresenter DataContext="{Binding Path=(igRibbon:XamRibbon.Ribbon).DataContext, RelativeSource={x:Static RelativeSource.Self}}"  Margin="{TemplateBinding Padding}"/>
              -->
                            <ItemsPresenter Tag="{Binding Path=(igRibbon:XamRibbon.Ribbon), RelativeSource={x:Static RelativeSource.Self}, Mode=OneTime}" DataContext="{Binding Path=Tag.DataContext, RelativeSource={x:Static RelativeSource.Self}}" Margin="{TemplateBinding Padding}" />
                        </igWindows:XamPager>
                    </ControlTemplate>
                </ItemsControl.Template>

                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <igRibbon:RibbonGroupPanel />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
        </Grid>
    </DataTemplate>

    <DataTemplate DataType="{x:Type igRibbon:ContextualTabGroup}">
        <igWindows:CardPanel SnapsToDevicePixels="True">
            <Rectangle SnapsToDevicePixels="True" Height="Auto" Margin="0,0,0,0" VerticalAlignment="Stretch" x:Name="baseColorInCaption" Fill="{Binding Path=BaseBackColorResolvedBrush}">
                <Rectangle.OpacityMask>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#00000000" Offset="0.357" />
                        <GradientStop Color="#8FFFFFFF" Offset="1" />
                        <GradientStop Color="#19808080" Offset="0.646" />
                        <GradientStop Color="#42DDDDDD" Offset="0.837" />
                        <GradientStop Color="#38C7C7C7" Offset="0.824" />
                    </LinearGradientBrush>
                </Rectangle.OpacityMask>
            </Rectangle>
            <Rectangle SnapsToDevicePixels="True" Height="2" Margin="1,0,1,0" VerticalAlignment="Bottom" x:Name="BaseColorBottomGlow" Fill="{Binding Path=BaseBackColorResolvedBrush}">
                <Rectangle.OpacityMask>
                    <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
                        <GradientStop Color="#99000000" Offset="0.5" />
                        <GradientStop Color="#00FFFFFF" Offset="1" />
                        <GradientStop Color="#00000000" Offset="0" />
                        <GradientStop Color="#3F000000" Offset="0.25" />
                        <GradientStop Color="#3F575757" Offset="0.75" />
                        <GradientStop Color="#99000000" Offset="0.364" />
                        <GradientStop Color="#99262626" Offset="0.636" />
                    </LinearGradientBrush>
                </Rectangle.OpacityMask>
            </Rectangle>

            <Rectangle x:Name="ContextualTabSideBorderLeft" HorizontalAlignment="Left" VerticalAlignment="Stretch" Width="1" Height="Auto" SnapsToDevicePixels="True" IsHitTestVisible="False" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabSideBorderFillKey}}" />

            <Rectangle x:Name="ContextualTabSideBorderRight" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="1" Height="Auto" SnapsToDevicePixels="True" IsHitTestVisible="False" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabSideBorderFillKey}}" />

            <!-- 8/19/11 TFS83576 -->
            <igRibbon:OuterGlowDecorator x:Name="CaptionGlow" Margin="8,0,8,0" VerticalAlignment="Center">
                <TextBlock x:Name="CaptionGroupLabel" Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualCaptionTextFillKey}}" Text="{Binding Path=Caption}" TextAlignment="Left" TextTrimming="CharacterEllipsis" igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True" igWindows:ClippedTextToolTipService.AncestorTypeForToolTip="{x:Type ContentControl}" igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}" />
            </igRibbon:OuterGlowDecorator>

            <Rectangle SnapsToDevicePixels="True" Height="1" x:Name="BottomMask" Width="Auto" VerticalAlignment="Bottom" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelBottomSeparatorStrokeKey}}" Margin="1,0,1,0" />

        </igWindows:CardPanel>
        <DataTemplate.Triggers>

            <!--<DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True">
				<Setter TargetName="CaptionGroupLabel" Property="BitmapEffect" Value="{igWindows:SafeOuterGlow GlowColor=White, GlowSize=10, Opacity=0.6}" />
				<Setter TargetName="CaptionGroupLabel" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" />
			</DataTrigger>-->

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <!-- 8/19/11 TFS83576
										<Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />-->
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <!-- 8/19/11 TFS83576
								<Setter TargetName="CaptionGroupLabel" Property="BitmapEffect" Value="{igWindows:SafeOuterGlow GlowColor=White, GlowSize=10, Opacity=0.6}" />-->
                <Setter TargetName="CaptionGlow" Property="IsGlowVisible" Value="True" />
                <Setter TargetName="CaptionGroupLabel" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" />
            </MultiDataTrigger>

            <!-- HC 1/4/2008 === When a window==Maximized and IsGlassActive==True, any text that lives in the caption turns white-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="Maximized" />
                    <!-- 8/19/11 TFS83576 -->
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="CaptionGroupLabel" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VistaWindowMaximizedTextFillKey}}" />
            </MultiDataTrigger>

        </DataTemplate.Triggers>
    </DataTemplate>

    <!-- ======================================== Styles ================================================== -->

    <!-- =================================================================== -->
    <!-- Styles for buttons in MenuButtonArea -->
    <!-- =================================================================== -->
    <!-- AS 11/8/07 BR27990  Moved up and adjusted the template to have a root level panel that could be used to provide the background -->
    <Style TargetType="{x:Type ContentControl}" x:Key="PlainContentControlStyle">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <igWindows:CardPanel Background="{TemplateBinding Background}">
                        <ContentPresenter Margin="{TemplateBinding Padding}" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" />
                    </igWindows:CardPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== Caption Button Styles ========== -->

    <!--LeftCaptionButton-->
    <Style x:Key="XamRibbonCaptionButton_Left" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="XamRibbonCaptionButton_Left" Background="#00000000">
                        <Border SnapsToDevicePixels="True" Visibility="Hidden" x:Name="BorderDark" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverBorderDarkFillKey}}" CornerRadius="3,3,3,3" />
                        <Border SnapsToDevicePixels="True" Visibility="Hidden" Margin="1,1,1,1" x:Name="BorderLight" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverBorderLightFillKey}}" CornerRadius="2,2,2,2" />
                        <Border SnapsToDevicePixels="True" Visibility="Hidden" Margin="2,2,2,2" x:Name="Center" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverCenterFillKey}}" CornerRadius="1,1,1,1" />
                        <Border SnapsToDevicePixels="True" Visibility="Hidden" Margin="2,2,2,2" x:Name="Overlay1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverOverlayFillKey}}" />
                        <Border SnapsToDevicePixels="True" Visibility="Hidden" Margin="2,2,2,2" x:Name="Overlay2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedTopOverlayFillKey}}" />
                        <Path Opacity="1" Width="7" Height="2" Stretch="Fill" Data="F1 M0,-4.4703484E-08 L7,-4.4703484E-08 7,1 7,2 0,2 0,1 0,-4.4703484E-08 z" x:Name="IconBackground" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMinimizeNormalBackgroundFillKey}}" HorizontalAlignment="Center" Margin="0,8,0,0" VerticalAlignment="Center" />
                        <Path Opacity="1" Width="7" Height="2" Stretch="Fill" Data="F1 M0,-4.4703484E-08 L7,-4.4703484E-08 7,1 7,2 0,2 0,1 0,-4.4703484E-08 z" x:Name="IconForeground" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMinimizeNormalForegroundFillKey}}" HorizontalAlignment="Center" Margin="0,7,0,1" VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <DataTrigger Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False">
                            <Setter TargetName="IconForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMinimizeInactiveForegroundFillKey}}" />
                        </DataTrigger>

                        <!-- AS 11/4/11 TFS91009 -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="IconForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalDisabledForegroundFillKey}}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible" />
                            <Setter Property="Visibility" TargetName="BorderLight" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Center" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Overlay1" Value="Visible" />
                            <Setter Property="Fill" TargetName="IconBackground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMinimizeHoverBackgroundFillKey}}" />
                            <Setter Property="Fill" TargetName="IconForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMinimizeHoverForegroundFillKey}}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible" />
                            <Setter Property="Visibility" TargetName="BorderLight" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Center" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Overlay1" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Overlay2" Value="Visible" />
                            <Setter Property="Background" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedBorderDarkFillKey}}" />
                            <Setter Property="Background" TargetName="BorderLight" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedBorderLightFillKey}}" />
                            <Setter Property="Background" TargetName="Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedCenterFillKey}}" />
                            <Setter Property="Background" TargetName="Overlay1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedBottomOverlayFillKey}}" />
                            <Setter Property="Fill" TargetName="IconForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMinimizeNormalForegroundFillKey}}" />
                            <Setter Property="Fill" TargetName="IconBackground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMinimizeNormalBackgroundFillKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- MiddleCaptionButton-->
    <Style x:Key="XamRibbonCaptionButton_Middle" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="XamRibbonCaptionButton_MiddleContainer" Background="#00000000">
                        <Border SnapsToDevicePixels="True" Visibility="Hidden" x:Name="BorderDark" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverBorderDarkFillKey}}" CornerRadius="3,3,3,3" />
                        <Border SnapsToDevicePixels="True" Visibility="Hidden" Margin="1,1,1,1" x:Name="BorderLight" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverBorderLightFillKey}}" CornerRadius="2,2,2,2" />
                        <Border SnapsToDevicePixels="True" Visibility="Hidden" Margin="2,2,2,2" x:Name="Center" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverCenterFillKey}}" CornerRadius="1,1,1,1" />
                        <Border SnapsToDevicePixels="True" Visibility="Hidden" Margin="2,2,2,2" x:Name="Overlay1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverOverlayFillKey}}" />
                        <Border SnapsToDevicePixels="True" Visibility="Hidden" Margin="2,2,2,2" x:Name="Overlay2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedTopOverlayFillKey}}" />
                        <Grid x:Name="Maximize" HorizontalAlignment="Center" VerticalAlignment="Center" IsHitTestVisible="False">
                            <Path x:Name="MaximizeBackground" Height="7" Width="9" Stretch="Fill" Opacity="1" Data="M 44,17 C44,17 51,17 51,17 51,17 51,20 51,20 51,20 44,20 44,20 44,20 44,17 44,17 zM 43,14 C43,14 43,21 43,21 43,21 52,21 52,21 52,21 52,14 52,14 52,14 43,14 43,14 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalBackgroundFillKey}}" d:LayoutOverrides="Height" Margin="0,3,0,0" VerticalAlignment="Center" />
                            <Path x:Name="MaximizeForeground" Height="7" Width="9" Stretch="Fill" Opacity="1" Data="M 44,17 C44,17 51,17 51,17 51,17 51,20 51,20 51,20 44,20 44,20 44,20 44,17 44,17 zM 43,14 C43,14 43,21 43,21 43,21 52,21 52,21 52,21 52,14 52,14 52,14 43,14 43,14 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalForegroundFillKey}}" d:LayoutOverrides="Width, Height" Margin="0,1,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Grid>
                        <Grid x:Name="MaximizeRestore" Visibility="Collapsed" Height="8" Width="9" HorizontalAlignment="Center" VerticalAlignment="Center" IsHitTestVisible="False">
                            <Grid.Resources />
                            <Path Stretch="Fill" Opacity="1" Data="M 1,3 C1,3 6,3 6,3 6,3 6,6 6,6 6,6 1,6 1,6 1,6 1,3 1,3 zM 0,1 C0,1 0,7 0,7 0,7 7,7 7,7 7,7 7,1 7,1 7,1 0,1 0,1 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMinimizeNormalBackgroundFillKey}}" Margin="0,2,2,0" x:Name="MaximizeRestoreBackground1" />
                            <Path Stretch="Fill" Opacity="1" Data="M 2,0 C2,0 2,2 2,2 2,2 3,2 3,2 3,2 7,2 7,2 7,2 8,2 8,2 8,2 8,5 8,5 8,5 7,5 7,5 7,5 7,6 7,6 7,6 9,6 9,6 9,6 9,0 9,0 9,0 2,0 2,0 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMinimizeNormalBackgroundFillKey}}" Margin="2,1,0,1" x:Name="MaximizeRestoreBackground2" />
                            <Path Margin="2,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="6" Width="7" Stretch="Fill" Opacity="1" Data="M 2,0 C2,0 2,2 2,2 2,2 3,2 3,2 3,2 7,2 7,2 7,2 8,2 8,2 8,2 8,5 8,5 8,5 7,5 7,5 7,5 7,6 7,6 7,6 9,6 9,6 9,6 9,0 9,0 9,0 2,0 2,0 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalForegroundFillKey}}" x:Name="MaximizeRestoreForeground2" />
                            <Path Margin="0,1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="6" Width="7" Stretch="Fill" Opacity="1" Data="M 1,3 C1,3 6,3 6,3 6,3 6,6 6,6 6,6 1,6 1,6 1,6 1,3 1,3 zM 0,1 C0,1 0,7 0,7 0,7 7,7 7,7 7,7 7,1 7,1 7,1 0,1 0,1 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalForegroundFillKey}}" x:Name="MaximizeRestoreForeground1" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False" />
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="MaximizeRestoreForeground1" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseInactiveForegroundFillKey}}" />
                            <Setter TargetName="MaximizeRestoreForeground2" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseInactiveForegroundFillKey}}" />
                            <Setter TargetName="MaximizeForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseInactiveForegroundFillKey}}" />
                        </MultiDataTrigger>

                        <!-- Trigger that will hide the left two caption buttons when the ResizeMode of the window is NoResize-->
                        <DataTrigger Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Maximized">
                            <Setter TargetName="Maximize" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="MaximizeRestore" Property="Visibility" Value="Visible" />
                        </DataTrigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="MaximizeForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalDisabledForegroundFillKey}}" />
                            <Setter Property="Fill" TargetName="MaximizeRestoreForeground1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalDisabledForegroundFillKey}}" />
                            <Setter Property="Fill" TargetName="MaximizeRestoreForeground2" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalDisabledForegroundFillKey}}" />
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False" />
                                <Condition Binding="{Binding Path=IsEnabled, ElementName=XamRibbonCaptionButton_Middle}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="MaximizeForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseInactiveDisabledForegroundFillKey}}" />
                            <Setter Property="Fill" TargetName="MaximizeRestoreForeground1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseInactiveDisabledForegroundFillKey}}" />
                            <Setter Property="Fill" TargetName="MaximizeRestoreForeground2" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseInactiveDisabledForegroundFillKey}}" />
                        </MultiDataTrigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible" />
                            <Setter Property="Visibility" TargetName="BorderLight" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Center" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Overlay1" Value="Visible" />
                            <Setter Property="Fill" TargetName="MaximizeForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseHoverForegroundFillKey}}" />
                            <Setter Property="Fill" TargetName="MaximizeBackground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseHoverBackgroundFillKey}}" />
                            <Setter Property="Fill" TargetName="MaximizeRestoreForeground1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseHoverForegroundFillKey}}" />
                            <Setter Property="Fill" TargetName="MaximizeRestoreBackground1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseHoverBackgroundFillKey}}" />
                            <Setter Property="Fill" TargetName="MaximizeRestoreForeground2" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseHoverForegroundFillKey}}" />
                            <Setter Property="Fill" TargetName="MaximizeRestoreBackground2" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseHoverBackgroundFillKey}}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible" />
                            <Setter Property="Visibility" TargetName="BorderLight" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Center" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Overlay1" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Overlay2" Value="Visible" />
                            <Setter Property="Background" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedBorderDarkFillKey}}" />
                            <Setter Property="Background" TargetName="BorderLight" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedBorderLightFillKey}}" />
                            <Setter Property="Background" TargetName="Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedCenterFillKey}}" />
                            <Setter Property="Background" TargetName="Overlay1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedBottomOverlayFillKey}}" />
                            <Setter Property="Fill" TargetName="MaximizeBackground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalBackgroundFillKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- RightCaptionButton -->
    <Style x:Key="XamRibbonCaptionButton_Right" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0,2,2,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="XamRibbonCaptionButton_Right" Background="#00000000">
                        <Border SnapsToDevicePixels="True" Visibility="Hidden" x:Name="BorderDark" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverBorderDarkFillKey}}" CornerRadius="3,3,3,3" />
                        <Border SnapsToDevicePixels="True" Visibility="Hidden" Margin="1,1,1,1" x:Name="BorderLight" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverBorderLightFillKey}}" CornerRadius="2,2,2,2" />
                        <Border SnapsToDevicePixels="True" Visibility="Hidden" Margin="2,2,2,2" x:Name="Center" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverCenterFillKey}}" CornerRadius="1,1,1,1" />
                        <Border SnapsToDevicePixels="True" Visibility="Hidden" Margin="2,2,2,2" x:Name="Overlay1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverOverlayFillKey}}" />
                        <Border SnapsToDevicePixels="True" Visibility="Hidden" Margin="2,2,2,2" x:Name="Overlay2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedTopOverlayFillKey}}" />
                        <!-- AS 8/21/08 BR35778
						<Path x:Name="IconBackground"
                                Stretch="Fill"
                                Opacity="1"
                                Data="M 646,303 C646,303 644.5,305 644.5,305 644.5,305 643,303 643,303 643,303 640,303 640,303 640,303 643,307 643,307 643,307 640,311 640,311 640,311 643,311 643,311 643,311 644.5,309 644.5,309 644.5,309 646,311 646,311 646,311 649,311 649,311 649,311 646,307 646,307 646,307 649,303 649,303 649,303 646,303 646,303 z" 
                                SnapsToDevicePixels="True" 
                                Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalBackgroundFillKey}}" 
                                d:LayoutOverrides="Height" 
                                Margin="8,9,8,7" 
                                VerticalAlignment="Bottom"/>
						<Path x:Name="IconForeground"
                                Stretch="Fill"
                                Opacity="1"
                                Data="M 646,303 C646,303 644.5,305 644.5,305 644.5,305 643,303 643,303 643,303 640,303 640,303 640,303 643,307 643,307 643,307 640,311 640,311 640,311 643,311 643,311 643,311 644.5,309 644.5,309 644.5,309 646,311 646,311 646,311 649,311 649,311 649,311 646,307 646,307 646,307 649,303 649,303 649,303 646,303 646,303 z" 
                                SnapsToDevicePixels="True" 
                                Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalForegroundFillKey}}" 
                                d:LayoutOverrides="Width, Height" 
                                HorizontalAlignment="Stretch" 
                                Margin="8,9,8,8" 
                                VerticalAlignment="Bottom"/>
                        -->
                        <Path x:Name="IconBackground" Height="8" Width="9" Stretch="Fill" Opacity="1" Data="M 0,0 C0,0 0,1 0,1 0,1 3,4 3,4 3,4 0,7 0,7 0,7 0,8 0,8 0,8 3,8 3,8 3,8 4,6 4,6 4,6 5,6 5,6 5,6 6,8 6,8 6,8 9,8 9,8 9,8 9,7 9,7 9,7 6,4 6,4 6,4 9,1 9,1 9,1 9,0 9,0 9,0 6,0 6,0 6,0 5,2 5,2 5,2 4,2 4,2 4,2 3,0 3,0 3,0 0,0 0,0 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalBackgroundFillKey}}" d:LayoutOverrides="Height" VerticalAlignment="Center" />
                        <Path x:Name="IconForeground" Height="8" Width="9" Stretch="Fill" Opacity="1" Data="M 0,0 C0,0 0,1 0,1 0,1 3,4 3,4 3,4 0,7 0,7 0,7 0,8 0,8 0,8 3,8 3,8 3,8 4,6 4,6 4,6 5,6 5,6 5,6 6,8 6,8 6,8 9,8 9,8 9,8 9,7 9,7 9,7 6,4 6,4 6,4 9,1 9,1 9,1 9,0 9,0 9,0 6,0 6,0 6,0 5,2 5,2 5,2 4,2 4,2 4,2 3,0 3,0 3,0 0,0 0,0 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalForegroundFillKey}}" d:LayoutOverrides="Width, Height" HorizontalAlignment="Stretch" VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <DataTrigger Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False">
                            <Setter TargetName="IconForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseInactiveForegroundFillKey}}" />
                        </DataTrigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible" />
                            <Setter Property="Visibility" TargetName="BorderLight" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Center" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Overlay1" Value="Visible" />
                            <Setter Property="Fill" TargetName="IconBackground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseHoverBackgroundFillKey}}" />
                            <Setter Property="Fill" TargetName="IconForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseHoverForegroundFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible" />
                            <Setter Property="Visibility" TargetName="BorderLight" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Center" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Overlay1" Value="Visible" />
                            <Setter Property="Visibility" TargetName="Overlay2" Value="Visible" />
                            <Setter Property="Background" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedBorderDarkFillKey}}" />
                            <Setter Property="Background" TargetName="BorderLight" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedBorderLightFillKey}}" />
                            <Setter Property="Background" TargetName="Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedCenterFillKey}}" />
                            <Setter Property="Background" TargetName="Overlay1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedBottomOverlayFillKey}}" />
                            <Setter Property="Fill" TargetName="IconForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalForegroundFillKey}}" />
                            <Setter Property="Fill" TargetName="IconBackground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalBackgroundFillKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Styles -->

    <!-- Templates Start -->

    <ControlTemplate TargetType="{x:Type ButtonBase}" x:Key="RibbonButtonToolTemplate">
        <igRibbon:RibbonButtonChrome x:Name="chrome" IsPressed="{TemplateBinding IsPressed}" IsChecked="{TemplateBinding ToggleButton.IsChecked}" SnapsToDevicePixels="True">
            <!-- JM BR27007 10-3-07 -->
            <!--<Grid Margin="1" x:Name="chromeContentPanel" >-->
            <Grid Margin="1" x:Name="chromeContentPanel" HorizontalAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" x:Name="row0" />
                    <RowDefinition Height="Auto" x:Name="row1" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <igWindows:AutoDisabledImage Width="16" Height="16" x:Name="image" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Visibility="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" Source="{TemplateBinding igRibbon:ButtonTool.ImageResolved}" />
                <!-- 8/19/11 TFS83576 -->
                <igRibbon:OuterGlowDecorator x:Name="textSmallGlow" Grid.Column="1" Margin="3,0,2,1" VerticalAlignment="Center">
                    <ContentPresenter x:Name="textSmall" Grid.Column="1" Content="{TemplateBinding igRibbon:ButtonTool.Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}" SnapsToDevicePixels="True" TextBlock.TextAlignment="Left" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" />
                </igRibbon:OuterGlowDecorator>
                <igRibbon:LargeToolCaptionPresenter x:Name="textLarge" Grid.Row="2" Text="{TemplateBinding igRibbon:ButtonTool.Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}" Visibility="Collapsed" />
            </Grid>
        </igRibbon:RibbonButtonChrome>

        <ControlTemplate.Triggers>

            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="igRibbon:ButtonTool.SizingMode" Value="ImageOnly" />
                    <Condition Property="igRibbon:ButtonTool.HasImage" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="textSmallGlow" Property="Visibility" Value="Collapsed" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="igRibbon:ButtonTool.SizingMode" Value="ImageAndTextLarge" />
                    <Condition Property="igRibbon:XamRibbon.Location" Value="Ribbon" />
                </MultiTrigger.Conditions>
                <Setter TargetName="textSmallGlow" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="textLarge" Property="Visibility" Value="Visible" />
                <Setter TargetName="image" Property="Width" Value="32" />
                <Setter TargetName="image" Property="Height" Value="32" />
                <Setter TargetName="image" Property="Margin" Value="0,0,0,2" />
                <Setter TargetName="row0" Property="Height" Value="Auto" />
                <Setter TargetName="row1" Property="Height" Value="*" />
                <Setter TargetName="chromeContentPanel" Property="Margin" Value="1,1,1,0" />
            </MultiTrigger>

            <Trigger Property="igRibbon:XamRibbon.Location" Value="Ribbon">
                <Setter Property="HorizontalAlignment" Value="Left" />
            </Trigger>

            <Trigger Property="igRibbon:XamRibbon.Location" Value="QuickAccessToolbar">
                <Setter Property="Margin" Value="0,-2,0,0" />
                <Setter TargetName="chrome" Property="Padding" Value="0,2,0,0" />
            </Trigger>

            <!-- AS 12/1/09 TFS24129 - Default margin when in the footer toolbar -->
            <Trigger Property="igRibbon:XamRibbon.Location" Value="ApplicationMenuFooterToolbar">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                <Setter Property="Margin" Value="6,0,0,0" />
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <!-- AS 2/22/08 BR30647 - Added parens around path -->
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Location), RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <!-- 8/19/11 TFS83576
										<Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />-->
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <!-- 8/19/11 TFS83576
								<Setter TargetName="textSmall" Property="BitmapEffect" Value="{igWindows:SafeOuterGlow GlowColor=White, GlowSize=10, Opacity=0.6}" />-->
                <Setter TargetName="textSmallGlow" Property="IsGlowVisible" Value="True" />
                <!-- 8/19/11 TFS83576 - Large text will never show in the qat
								<Setter TargetName="textLarge" Property="BitmapEffect" Value="{igWindows:SafeOuterGlow GlowColor=White, GlowSize=10, Opacity=0.6}" />-->
            </MultiDataTrigger>

            <Trigger Property="igRibbon:XamRibbon.HideAccessKey" Value="False">
                <Setter TargetName="textSmall" Property="RecognizesAccessKey" Value="True" />
                <Setter TargetName="textSmall" Property="Content" Value="{Binding Path=(igRibbon:ButtonTool.Caption), RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- AS 7/13/09 TFS18489 
        Changed all properties that were using a FindAncestor to the RibbonWindowContentHost to use a new inherited property 
        since the findancestor is asynchronous and causes the initial measure to have the wrong value and therefore get another 
        measure/arrange when the ancestor binding is updated.
    -->
    <ControlTemplate TargetType="{x:Type Control}" x:Key="{ComponentResourceKey {x:Type igRibbon:XamRibbon}, CaptionButtonAreaTemplate}">
        <StackPanel x:Name="captionButtonPanel" MinHeight="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).MinCaptionHeight, RelativeSource={RelativeSource TemplatedParent}}" Margin="1,1,1,0" Orientation="Horizontal">

            <Button x:Name="XamRibbonCaptionButton_Left" Focusable="False" Style="{StaticResource XamRibbonCaptionButton_Left}" Width="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonWidth, RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonHeight, RelativeSource={RelativeSource TemplatedParent}}" Command="igRibbon:RibbonWindowCommands.MinimizeCommand" CommandTarget="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}}}" />

            <Button x:Name="XamRibbonCaptionButton_Middle" Focusable="False" Style="{StaticResource XamRibbonCaptionButton_Middle}" Width="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonWidth, RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonHeight, RelativeSource={RelativeSource TemplatedParent}}" Command="igRibbon:RibbonWindowCommands.MaximizeCommand" CommandTarget="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}}}" />

            <Button x:Name="XamRibbonCaptionButton_Right" Focusable="False" Style="{StaticResource XamRibbonCaptionButton_Right}" Width="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonWidth, RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonHeight, RelativeSource={RelativeSource TemplatedParent}}" Command="igRibbon:RibbonWindowCommands.CloseCommand" CommandTarget="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}}}" />

        </StackPanel>
        <ControlTemplate.Triggers>
            <!-- Trigger that will hide the left two caption buttons when the ResizeMode of the window is NoResize-->
            <DataTrigger Binding="{Binding Path=ResizeMode, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="NoResize">
                <Setter TargetName="XamRibbonCaptionButton_Left" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="XamRibbonCaptionButton_Middle" Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <!-- The CaptionButtonAreaWidth is really only used when glass is active. for all other cases we can 
					 let the panel determine the width based on the buttons within. Otherwise this property must 
					 also make the same check as above for when the caption buttons would be hidden-->
            <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                <!-- JJD 8/25/11 - TFS84336
						 Instead of binding to the Width of the captionButtonPanel bind to the Width of the templated parent so that when
						 IsGlassActive reverts to false the templated parent's measure will get invalidated -->
                <!--<Setter TargetName="captionButtonPanel" Property="Width" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonAreaWidth, RelativeSource={RelativeSource TemplatedParent}}" />-->
                <Setter Property="Width" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonAreaWidth, RelativeSource={RelativeSource TemplatedParent}}" />
            </DataTrigger>

            <!-- Trigger that will change the command of the middle button to restore a maximized window -->
            <DataTrigger Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Maximized">
                <Setter TargetName="XamRibbonCaptionButton_Middle" Property="Command" Value="igRibbon:RibbonWindowCommands.RestoreCommand" />
            </DataTrigger>

            <!-- JJD 05/17/10 - NA 2010 Volume 2 - Scenic Ribbon support-->
            <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsScenicTheme), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                <Setter TargetName="XamRibbonCaptionButton_Left" Property="Style" Value="{DynamicResource {x:Static igRibbon:RibbonWindowContentHost.ScenicMinimizeButtonStyleKey}}" />
                <Setter TargetName="XamRibbonCaptionButton_Middle" Property="Style" Value="{DynamicResource {x:Static igRibbon:RibbonWindowContentHost.ScenicMaximizeRestoreButtonStyleKey}}" />
                <Setter TargetName="XamRibbonCaptionButton_Right" Property="Style" Value="{DynamicResource {x:Static igRibbon:RibbonWindowContentHost.ScenicCloseWindowButtonStyleKey}}" />
                <Setter TargetName="captionButtonPanel" Property="Margin" Value="1,4,5,0" />
            </DataTrigger>

            <!--<Trigger SourceName="MiddleCaptionButton" Property="IsPressed" Value="True">
							<Setter Property="Fill" TargetName="MaximizeBackground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalBackgroundFillKey}}"/>
							<Setter Property="Fill" TargetName="MaximizeForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalForegroundFillKey}}"/>
						</Trigger>-->

            <!-- AS 11/4/11 TFS91009 -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="XamRibbonCaptionButton_Left" Property="IsEnabled" Value="False" />
                    <Condition SourceName="XamRibbonCaptionButton_Middle" Property="IsEnabled" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="XamRibbonCaptionButton_Left" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="XamRibbonCaptionButton_Middle" Property="Visibility" Value="Collapsed" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Templates End -->

    <!-- =================================================================== -->
    <!-- XamRibbonWindow Style -->
    <!-- =================================================================== -->
    <!-- AS 6/3/08 BR32772 - Moved to the XamRibbonWindow static ctor or else the xaml cannot be used in xbap.
    <Style TargetType="{x:Type igRibbon:XamRibbonWindow}">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
    <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.WindowBackgroundBrushKey}}"/>
    <Setter Property="BorderThickness" Value="0,0,0,0"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="MinWidth" Value="255"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igRibbon:XamRibbonWindow}">
          <Grid>
            <AdornerDecorator>
              <ContentPresenter/>
            </AdornerDecorator>


            <ResizeGrip x:Name="WindowResizeGrip"
                        Visibility="Collapsed"
                        Style="{DynamicResource {x:Static igRibbon:XamRibbonWindow.ResizeGripStyleKey}}"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Bottom"
                        IsTabStop="False"
                        />
          </Grid>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                <Condition Property="WindowState" Value="Normal" />
              </MultiTrigger.Conditions>
              <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>-->

    <!-- =================================================================== -->
    <!-- ScenicRibbonCaptionArea Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:ScenicRibbonCaptionArea}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ScenicCaptionAreaFillKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ScenicCaptionAreaBorderKey}}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:ScenicRibbonCaptionArea}">
                    <Grid>
                        <Border x:Name="Main" Background="{TemplateBinding Background}" CornerRadius="3,3,0,0" />
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsWithinRibbonWindow" Value="False">
                            <Setter TargetName="Main" Property="Margin" Value="0" />
                        </Trigger>
                        <Trigger Property="RoundCorners" Value="False">
                            <Setter TargetName="Main" Property="CornerRadius" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).IsRibbonWindowActive, RelativeSource={RelativeSource Self}}" Value="False">
                <Setter Property="BorderBrush" Value="{StaticResource {x:Static igRibbon:RibbonBrushKeys.ScenicCaptionAreaInactiveBorderKey}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- RibbonWindowContentHost Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:RibbonWindowContentHost}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.WindowBackgroundBrushKey}}" />
        <Setter Property="BorderThickness" Value="0,0,0,0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:RibbonWindowContentHost}">
                    <Grid>
                        <AdornerDecorator>
                            <!-- AS 7/13/09 TFS18489 
                Removed SharedSizeGroup as this leads to extra unnecessary measure/arrange. Instead a custom 
                placeholder element will be used to act as a proxy and provide the extent of the element in 
                the other grid. I also moved the panel containing the ribbon/statusbar up so the element name
                binding will find the DesiredSizeDecorator element right away. Changed the RowDefinitions in 
                the other grid to bind to the exposed extent properties.
              -->
                            <igWindows:CardPanel Grid.IsSharedSizeScope="True" SnapsToDevicePixels="True">
                                <DockPanel Panel.ZIndex="1" LastChildFill="False">
                                    <!-- Ribbon Area -->
                                    <igWindows:DesiredSizeDecorator DockPanel.Dock="Top" x:Name="ribbonSize">
                                        <igWindows:CardPanel>
                                            <ContentPresenter x:Name="RibbonArea" Margin="{TemplateBinding RibbonAreaMargin}" Content="{TemplateBinding Ribbon}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                            <!-- Caption Area - When No Ribbon is Present -->
                                            <Grid x:Name="CaptionArea" Margin="{TemplateBinding CaptionAreaMargin}" Visibility="{TemplateBinding CaptionVisibility}">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto" />
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="Auto" />
                                                </Grid.ColumnDefinitions>
                                                <Border Grid.ColumnSpan="3" CornerRadius="3,3,0,0" x:Name="PART_XamRibbonCaption" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelFillKey}}" />
                                                <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Height="1" Grid.ColumnSpan="3" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelBottomSeparatorStrokeKey}}" Stroke="{x:Null}" />
                                                <!-- JJD 01/28/14 wrap image in border to expand hit test area  -->
                                                <Border x:Name="PART_WindowIcon" Background="Transparent" Grid.Column="0" >
                                                    <Image x:Name="WindowIconIamge" Stretch="None" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="6,0,6,0" Source="{TemplateBinding IconResolved}" />
                                                </Border>
                                                <ContentControl TextBlock.TextAlignment="Left" Grid.Column="1" Content="{Binding Path=Title, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Style="{DynamicResource {x:Static igRibbon:RibbonCaptionPanel.CaptionStyleKey}}" />
                                                <Control x:Name="captionButtonArea" Grid.Column="2" Focusable="False" Template="{DynamicResource {ComponentResourceKey {x:Type igRibbon:XamRibbon}, CaptionButtonAreaTemplate}}" igRibbon:RibbonWindowContentHost.CaptionButtonVersion="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonVersion, RelativeSource={RelativeSource Self}}" />
                                            </Grid>
                                        </igWindows:CardPanel>
                                    </igWindows:DesiredSizeDecorator>

                                    <!--StatusBar Area-->
                                    <igWindows:DesiredSizeDecorator DockPanel.Dock="Bottom" x:Name="statusSize">
                                        <ContentPresenter x:Name="StatusBarArea" Margin="{TemplateBinding StatusBarAreaMargin}" Content="{TemplateBinding StatusBar}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </igWindows:DesiredSizeDecorator>

                                </DockPanel>
                                <igRibbon:RibbonWindowBorder BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Name="WindowBorder" />
                                <!--<igWindows:CardPanel>-->
                                <Grid x:Name="ContentArea">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="{Binding Path=ChildDesiredHeight, ElementName=ribbonSize}" />
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="{Binding Path=ChildDesiredHeight, ElementName=statusSize}" />
                                    </Grid.RowDefinitions>

                                    <!-- Background (covers both content and statusbar areas -->
                                    <Rectangle Grid.Row="1" Grid.RowSpan="2" Fill="{TemplateBinding Background}" Margin="{TemplateBinding BackgroundAreaMargin}" />

                                    <!-- Ribbon Area -->
                                    <!--<ContentPresenter Content ="{TemplateBinding Ribbon}" />-->

                                    <!-- Content Area-->
                                    <ContentPresenter x:Name="PART_Content" Grid.Row="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding ContentAreaMargin}" />

                                    <!-- StatusBar Area -->
                                    <!--<ContentPresenter Grid.Row="2" Content ="{TemplateBinding StatusBar}" />-->

                                </Grid>

                                <!--</igWindows:CardPanel>-->
                                <!--</igRibbon:RibbonWindowBorder>-->
                            </igWindows:CardPanel>
                        </AdornerDecorator>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!-- JJD 05/14/10 - NA 2010 volume 2 - Scenic Ribbon supportt 
                  added margin properties for all 3 areas so we don't need to use triggers -->
                        <!--<Trigger Property="BorderThickness" Value="0,0,0,0">
              <Setter Property="Margin" TargetName="RibbonArea" Value="0,0,0,0" />
              <Setter Property="Margin" TargetName="StatusBarArea" Value="0,0,0,0" />
            </Trigger>-->

                        <!-- Glass is active - Make caption transparent -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <!-- AS 8/21/08 BR35778
                <Condition Binding="{Binding Path=CaptionVisibility, RelativeSource={RelativeSource TemplatedParent}}" Value="Visible" />-->
                                <Condition Binding="{Binding Path=CaptionVisibility, RelativeSource={x:Static RelativeSource.Self}}" Value="Visible" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="PART_XamRibbonCaption" Value="Transparent" />
                            <Setter Property="Visibility" TargetName="captionButtonArea" Value="Hidden" />
                        </MultiDataTrigger>

                        <!-- Toggle the Caption Styling when Inactive -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                                <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False" />
                                <!-- AS 8/21/08 BR35778
                <Condition Binding="{Binding Path=CaptionVisibility, RelativeSource={RelativeSource TemplatedParent}}" Value="Visible" />-->
                                <Condition Binding="{Binding Path=CaptionVisibility, RelativeSource={x:Static RelativeSource.Self}}" Value="Visible" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="PART_XamRibbonCaption" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelInactiveFillKey}}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsRenderingMinimizedWindow" Value="True">
                            <Setter Property="Visibility" TargetName="statusSize" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="ContentArea" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- XamRibbon Style -->
    <!-- =================================================================== -->
    <!-- NA 13.1 Backstage - Moved here from the Office2010 xaml and is shared with that xaml -->
    <ControlTemplate TargetType="{x:Type igRibbon:XamRibbon}" x:Key="office2010RibbonTemplate">
        <AdornerDecorator>
            <Grid x:Name="rootVisual">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" MinHeight="22" />
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding TabHeaderActualHeight}" />
                    <RowDefinition x:Name="tabContentRow" Height="*" />
                    <RowDefinition x:Name="qatBelowRow" Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelFillKey}}" CornerRadius="3,3,0,0" Grid.ColumnSpan="3" x:Name="PART_XamRibbonCaption" Height="Auto" />
                <Rectangle x:Name="Separator" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Width="Auto" Height="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelBackgroundKey}}" Stroke="{x:Null}" Grid.ColumnSpan="3" />

                <Control x:Name="captionButtonArea" Grid.Column="2" VerticalAlignment="Top" Focusable="False" Template="{DynamicResource {ComponentResourceKey {x:Type igRibbon:XamRibbon}, CaptionButtonAreaTemplate}}" igRibbon:RibbonWindowContentHost.CaptionButtonVersion="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonVersion, RelativeSource={RelativeSource Self}}" Visibility="Collapsed" />
                <igRibbon:RibbonCaptionPanel x:Name="PART_RibbonCaptionPanel" Margin="{TemplateBinding CaptionPanelMargin}" Grid.Column="1" Grid.Row="0" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" />
                <Rectangle x:Name="minimizedRibbonBorder" Height="1" Margin="{TemplateBinding TabAreaMargin}" VerticalAlignment="Bottom" Visibility="Collapsed" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}" Grid.Row="1" Grid.RowSpan="2" Grid.ColumnSpan="3" />
                <ContentControl x:Name="PART_RibbonTabControlSite" Margin="{TemplateBinding TabAreaMargin}" Grid.Row="1" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="3" Focusable="False" HorizontalContentAlignment="Stretch" KeyboardNavigation.TabIndex="0" KeyboardNavigation.TabNavigation="Local" VerticalContentAlignment="Stretch" />
                <!-- JJD 01/28/14 wrap image in border to expand hit test area  -->
                <Border x:Name="PART_WindowIcon" Background="Transparent" Grid.Column="0" Margin="{TemplateBinding WindowIconMargin}">
                    <Image x:Name="WindowIconIamge" Stretch="None" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="6,0,6,0" />
                </Border>
                <ContentControl x:Name="PART_ApplicationMenuSite" Grid.Row="1" Grid.RowSpan="1" Grid.Column="0" Grid.ColumnSpan="2" HorizontalAlignment="Left" Margin="{TemplateBinding ApplicationMenuMargin}" VerticalAlignment="Stretch" Focusable="False" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local" />
                <ContentControl x:Name="PART_QuickAccessToolbarBottomSite" Margin="{TemplateBinding QuickAccessToolbarMargin}" Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="3" Focusable="False" KeyboardNavigation.TabIndex="3" KeyboardNavigation.TabNavigation="Local" Visibility="Collapsed" />
            </Grid>
        </AdornerDecorator>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                <Setter TargetName="WindowIconIamge" Property="Source" Value="{Binding Path=IconResolved, RelativeSource={RelativeSource AncestorType={x:Type igRibbon:RibbonWindowContentHost}}}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <!-- JJD 01/09/14 - NA 2014 vol 1 - Added 2013 Backstage feature -->
                    <Condition Binding="{Binding Path=IsOffice2013Theme, RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_XamRibbonCaption" Property="Background" Value="Transparent" />
                <Setter TargetName="captionButtonArea" Property="Visibility" Value="Hidden" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                    <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" TargetName="PART_XamRibbonCaption" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelInactiveFillKey}}" />
                <Setter Property="Fill" TargetName="Separator" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelInactiveFillKey}}" />
            </MultiDataTrigger>
            <Trigger Property="QuickAccessToolbarLocation" Value="BelowRibbon">
                <Setter TargetName="PART_QuickAccessToolbarBottomSite" Property="Visibility" Value="Visible" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="captionButtonArea" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            
            <!-- JJD 01/09/14 - NA 2014 vol 1 - Added 2013 Backstage feature -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=IsOffice2013Theme, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="captionButtonArea" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>

            <!-- JJD 02/28/14 - NA 2014 vol 1 - Added 2013 Backstage feature -->
            <Trigger Property="IsOffice2013Theme" Value="True">
                <Setter TargetName="PART_XamRibbonCaption" Property="CornerRadius" Value="0" />
            </Trigger>

            <Trigger Property="IsMinimized" Value="True">
                <Setter TargetName="tabContentRow" Property="Height" Value="0" />
                <Setter TargetName="minimizedRibbonBorder" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="AutoHideState" Value="Hidden">
                <Setter TargetName="rootVisual" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <!-- AS 6/29/12 No line between the caption and tab header -->
            <Trigger Property="igRibbon:XamRibbon.IsGlassActive" Value="True">
                <Setter TargetName="Separator" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type igRibbon:XamRibbon}">
        <Setter Property="FontSize" Value="11" />
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource Self}, Path=(igRibbon:XamRibbon.Ribbon).PreferredFont, FallbackValue='Segoe UI'}" />
        <!-- AS 11/6/07 BR28165 
		Do not stretch by default. Doing so when the ribbon is in a panel like a grid will 
		cause it to vertically fill and not use its preferred size information -->
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:XamRibbon}">
                    <!-- JM 10-13-08 TFS8859 - Ensure that elements within the Ribbon always find an AdornerLayer -->
                    <AdornerDecorator>
                        <Grid x:Name="rootVisual">
                            <Grid.RowDefinitions>
                                <!-- AS 11/6/07 BR28165
								The application menu must remain in the top two rows. If the second row is hard coded for 16
								then the first row must be at least 27 (since the app menu is 43). Also, we'll set the second
								row's height to auto since we cannot assume the tab item height to be 16. Lastly, we need to
								collapse the 3rd row when the ribbon is minimized since the only thing that exists there
								is the tab control and its content area will not be there when its minimized.
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="16"/>
								<RowDefinition Height="*"/>
								-->
                                <RowDefinition Height="Auto" MinHeight="27" />
                                <RowDefinition Height="Auto" MinHeight="{TemplateBinding TabHeaderActualHeight}" />
                                <RowDefinition Height="*" x:Name="tabContentRow" />
                                <RowDefinition Height="Auto" x:Name="qatBelowRow" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="43" MaxWidth="43" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <!--<Border HorizontalAlignment="Stretch" Margin="0,0,0,0" VerticalAlignment="Stretch" Width="Auto" Grid.ColumnSpan="2" Height="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelFillKey}}" BorderBrush="#FF323232" BorderThickness="1,1,1,0" CornerRadius="5,5,0,0" x:Name="PART_XamRibbonCaption"/>-->
                            <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelFillKey}}" CornerRadius="3,3,0,0" Grid.ColumnSpan="3" x:Name="PART_XamRibbonCaption" Height="Auto" />
                            <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Width="Auto" Height="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelBottomSeparatorStrokeKey}}" Stroke="{x:Null}" Grid.ColumnSpan="3" />

                            <!-- AS 3/5/09 TFS13129 - Added VerticalAlignment="Top" to ensure they were 
                                clickable when the caption area was taller and the window was maximized -->
                            <Control x:Name="captionButtonArea" VerticalAlignment="Top" Template="{DynamicResource {ComponentResourceKey {x:Type igRibbon:XamRibbon}, CaptionButtonAreaTemplate}}" igRibbon:RibbonWindowContentHost.CaptionButtonVersion="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonVersion, RelativeSource={RelativeSource Self}}" Grid.Column="2" Visibility="Collapsed" Focusable="False" />

                            <igRibbon:RibbonCaptionPanel x:Name="PART_RibbonCaptionPanel" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" Margin="{TemplateBinding CaptionPanelMargin}" Grid.Row="0" Grid.Column="1" />

                            <ContentControl x:Name="PART_RibbonTabControlSite" KeyboardNavigation.TabIndex="0" KeyboardNavigation.TabNavigation="Local" Margin="{TemplateBinding TabAreaMargin}" Grid.Row="1" Grid.RowSpan="2" Grid.Column="0" Grid.ColumnSpan="3" Focusable="False" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" />

                            <ContentControl x:Name="PART_ApplicationMenuSite" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local" Grid.Row="0" Grid.RowSpan="3" Grid.Column="0" Grid.ColumnSpan="2" Focusable="False" Width="47" Height="47" HorizontalAlignment="Left" Margin="{TemplateBinding ApplicationMenuMargin}" VerticalAlignment="Top" />

                            <ContentControl x:Name="PART_QuickAccessToolbarBottomSite" KeyboardNavigation.TabIndex="3" KeyboardNavigation.TabNavigation="Local" Margin="{TemplateBinding QuickAccessToolbarMargin}" Visibility="Collapsed" Focusable="False" Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="3" />

                        </Grid>
                    </AdornerDecorator>

                    <ControlTemplate.Triggers>
                        <!--Trigger targeted to Caption to decide to whether to apply a style or not in WPF Ribbon-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <!-- JJD 01/09/14 - NA 2014 vol 1 - Added 2013 Backstage feature -->
                                <Condition Binding="{Binding Path=IsOffice2013Theme, RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="PART_XamRibbonCaption" Value="Transparent" />
                            <!-- Changed visibilities to hidden so they still take up space in the layout -->
                            <Setter Property="Visibility" TargetName="captionButtonArea" Value="Hidden" />
                        </MultiDataTrigger>

                        <!--Trigger targeted to Caption to handle the inactive style in the WPF Ribbon-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                                <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="PART_XamRibbonCaption" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelInactiveFillKey}}" />
                        </MultiDataTrigger>

                        <Trigger Property="IsWithinRibbonWindow" Value="False">
                            <Setter Property="CornerRadius" TargetName="PART_XamRibbonCaption" Value="0" />
                        </Trigger>

                        <Trigger Property="QuickAccessToolbarLocation" Value="BelowRibbon">
                            <Setter TargetName="PART_QuickAccessToolbarBottomSite" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="QuickAccessToolbarLocation" Value="AboveRibbon">
                            <Setter TargetName="qatBelowRow" Property="Height" Value="0" />
                        </Trigger>

                        <!-- Trigger that determines whether to make the caption buttons visible. -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="captionButtonArea" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>

                        <!-- JJD 01/09/14 - NA 2014 vol 1 - Added 2013 Backstage feature -->
                        <!-- Trigger that determines whether to make the caption buttons visible. -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=IsOffice2013Theme, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="captionButtonArea" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>

                        <!-- JJD 05/27/10 - NA 2010 volume 2 - Scenic Ribbon supportt 
                        added margin properties for this area so we don't need to use triggers -->
                        <!-- Trigger that whether the window borders extend into the ribbon area. -->
                        <!--<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
								<Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
								<Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Margin" TargetName="PART_RibbonTabControlSite" Value="3,0,3,0" />
						</MultiDataTrigger>-->

                        <!-- JJD 05/27/10 - NA 2010 volume 2 - Scenic Ribbon supportt 
                        added margin properties for this area so we don't need to use triggers -->
                        <!-- Trigger that whether the window borders extend into the ribbon area by the quick access bar. -->
                        <!--<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
								<Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
								<Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />
								<Condition Binding="{Binding Path=QuickAccessToolbarLocation, RelativeSource={x:Static RelativeSource.Self}}" Value="BelowRibbon" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Margin" TargetName="PART_QuickAccessToolbarBottomSite" Value="3,0,3,0" />
						</MultiDataTrigger>-->

                        <!-- AS 11/6/07 BR28165 -->
                        <!-- Hide the 3rd row when the ribbon is minimized -->
                        <Trigger Property="IsMinimized" Value="True">
                            <Setter Property="Height" TargetName="tabContentRow" Value="0" />
                        </Trigger>

                        <!-- Hide the ribbon contents when collapsed -->
                        <Trigger Property="AutoHideState" Value="Hidden">
                            <Setter Property="Visibility" TargetName="rootVisual" Value="Collapsed" />
                        </Trigger>

                        <!-- JJD 05/27/10 - NA 2010 volume 2 - Scenic Ribbon supportt 
                        added margin properties for this area so we don't need to use triggers -->
                        <!-- AS 3/5/09 TFS13129 - The caption panel needs to be shifted down when maximized on vista -->
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Maximized" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Margin" TargetName="PART_RibbonCaptionPanel" Value="0,4,0,0" />
                            <Setter Property="Margin" TargetName="PART_ApplicationMenuSite" Value="0,6,0,0" />
                        </MultiDataTrigger>-->

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!-- NA 13.1 Backstage -->
            <Trigger Property="IsUsingApplicationMenu2010" Value="True">
                <Setter Property="Template" Value="{StaticResource office2010RibbonTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- ApplicationMenu Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:ApplicationMenu}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:ApplicationMenu}">
                    <ContentPresenter x:Name="PART_MenuToolPresenterSite" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- MenuTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:MenuTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:MenuTool}">
                    <ContentPresenter x:Name="PART_MenuToolPresenterSite" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="Location" Value="Ribbon">
                            <Setter Property="HorizontalAlignment" Value="Left" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Location" Value="ApplicationMenu">
                <Setter Property="UseLargeImages" Value="True" />
            </Trigger>

            <!-- AS 12/1/09 TFS24129 - Default margin when in the footer toolbar -->
            <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                <Setter Property="Margin" Value="6,0,0,0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToolMenuItemDescription_ContentPresenter" TargetType="{x:Type ContentPresenter}">
        <Style.Resources>
            <DataTemplate DataType="{x:Type sys:String}">
                <TextBlock TextWrapping="Wrap" TextAlignment="Left" Text="{Binding}" />
            </DataTemplate>
        </Style.Resources>
    </Style>

    <!-- JJD 12/4/07 - BR28873 -->
    <!-- Added Border style for menu item icon area background -->
    <Style x:Key="MenuItem_IconAreaBackground" TargetType="{x:Type Border}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuToolPresenterLeftColumnFillKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionStrokeFillKey}}" />
        <Setter Property="BorderThickness" Value="0,0,1,0" />
    </Style>

    <!-- =================================================================== -->
    <!-- SubmenuItem Template (used for NON-menu tools inside a menu)        -->
    <!-- =================================================================== -->
    <ControlTemplate x:Key="{x:Static igRibbon:MenuToolBase.SubmenuItemTemplateKey}" TargetType="{x:Type igRibbon:ToolMenuItem}">
        <Grid Margin="0,0,0,0">
            <Grid x:Name="ApplicationMenuItem_Hover" Height="Auto" Width="Auto" Visibility="Collapsed">
                <Rectangle SnapsToDevicePixels="True" x:Name="BorderDark" Width="Auto" Height="Auto" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderFillKey}}" RadiusX="3" RadiusY="3" />
                <Border SnapsToDevicePixels="True" Margin="1,1,1,1" x:Name="BorderLight_CenterFill" Width="Auto" Height="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderLightFillKey}}" BorderThickness="1,1,1,1" CornerRadius="2,2,2,2" />
            </Grid>
            <Grid x:Name="MenuItem_Hover" Height="Auto" Width="Auto" Visibility="Collapsed">
                <Border SnapsToDevicePixels="True" x:Name="BorderDark1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}" CornerRadius="3" BorderThickness="1">
                    <Rectangle SnapsToDevicePixels="True" x:Name="BorderLight_CenterFill1" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderLightFillKey}}" RadiusX="1" RadiusY="1" StrokeThickness="1" />
                </Border>
            </Grid>
            <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition MinWidth="17" Width="Auto" x:Name="iconColumn" SharedSizeGroup="MenuItemIconColumnGroup" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                        <ColumnDefinition Width="14" />
                    </Grid.ColumnDefinitions>

                    <!-- JJD 12/4/07 - BR28873 -->
                    <!-- Added icon area background element-->
                    <Border x:Name="IconAreaBackground" Style="{StaticResource MenuItem_IconAreaBackground}" />

                    <!-- OrangeBox for IsChecked -->
                    <Border x:Name="OrangeCheckBox" SnapsToDevicePixels="True" BorderThickness="1" CornerRadius="1" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="2,2,3,2">
                        <!--Margin="2">-->

                        <igWindows:CardPanel>
                            <!-- Small check mark -->
                            <Grid x:Name="GlyphPanel" Visibility="Collapsed" FlowDirection="LeftToRight" Background="{x:Null}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="16" Height="16" igRibbon:XamRibbon.KeyTipPlacementType="CheckIndicator">
                                <Path Margin="4.946,2.008,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="11.069" Width="7.026" Stretch="Fill" Opacity="1" Data="M 27.9883975982666,68.03516387939453 C27.9883975982666,68.03516387939453 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 35.01433563232422,61.019805908203125 35.01433563232422,61.019805908203125 " Stroke="#eae9d5" StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                <Path Margin="3.946,2.393,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="10.684" Width="8.459" Stretch="Fill" Opacity="1" Data="M 26.9883975982666,67.03516387939453 C26.9883975982666,67.03516387939453 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 35.44744110107422,61.404788970947266 35.44744110107422,61.404788970947266 " Stroke="#eae9d5" StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                <Path Margin="4.946,2.008,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="9.069" Width="6.026" Stretch="Fill" Opacity="1" Data="M 27.9883975982666,68.03516387939453 C27.9883975982666,68.03516387939453 30.490787506103516,70.08806610107422 30.490787506103516,70.08806610107422 30.490787506103516,70.08806610107422 34.01433563232422,61.019805908203125 34.01433563232422,61.019805908203125 " Stroke="#eae9d5" StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                <Path Margin="4.946,2.393,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="10.684" Width="7.459" Stretch="Fill" Opacity="1" Data="M 27.9883975982666,67.03516387939453 C27.9883975982666,67.03516387939453 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 35.44744110107422,61.404788970947266 35.44744110107422,61.404788970947266 " Stroke="#eae9d5" StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                <Path Margin="4.75,2.24,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="9.862" Width="6.785" Stretch="Fill" Opacity="1" Data="M27.561812,66.880152 C27.561812,66.880152 30.275803,71.118003 30.275803,71.118003 30.275803,71.118003 34.457825,61.276845 34.457825,61.276845" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}" StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                <Path HorizontalAlignment="Left" VerticalAlignment="Top" Height="9.899" Width="6.908" Stretch="Fill" Opacity="1" Data="M27.616231,66.205115 C27.616231,66.205115 30.445511,71.297952 30.445511,71.297952 30.445511,71.297952 34.499006,61.29204 34.499006,61.29204" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}" StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" Margin="4.627,2.363,0,0" />
                            </Grid>

                            <!-- Big check mark -->
                            <Grid FlowDirection="LeftToRight" x:Name="GlyphPanel32" Height="32" Width="32" Background="{x:Null}" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed" igRibbon:XamRibbon.KeyTipPlacementType="CheckIndicator">
                                <Path Margin="0,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Height="18" Width="13" Stretch="Fill" Opacity="1" Data="M 59,344 C59,344 63,353 63,353 63,353 72,335 72,335 " Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}" StrokeThickness="2" SnapsToDevicePixels="True" />
                                <Path Margin="0,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Height="18" Width="13.272" Stretch="Fill" Opacity="1" Data="M59,344 C59,344 63.32169,353 63.32169,353 63.32169,353 72.32169,335 72.32169,335" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}" StrokeThickness="2" SnapsToDevicePixels="True" />
                            </Grid>

                            <!-- icon -->
                            <ContentPresenter x:Name="Icon" Width="16" Height="16" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" HorizontalAlignment="Left" VerticalAlignment="Center" ContentSource="Icon" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </igWindows:CardPanel>
                    </Border>

                    <!-- content -->
                    <Grid x:Name="ContentArea" Grid.Column="1" VerticalAlignment="Center" Margin="0,0,1,0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" x:Name="descriptionRow" />
                        </Grid.RowDefinitions>

                        <!-- content -->
                        <ContentPresenter x:Name="Content" ContentSource="Header" Margin="15,0,7,0" HorizontalAlignment="Stretch" VerticalAlignment="Center" RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                        <!-- MenuItemDescription -->
                        <!--<TextBlock MaxWidth="{Binding ElementName=Content, Path=ActualWidth}" TextAlignment="Left" x:Name="MenuItemDescription"  Grid.Row="1" Margin="6,0,6,1" Text="{TemplateBinding igRibbon:MenuToolBase.MenuItemDescription}" TextWrapping="Wrap"/>-->
                        <!--<igWindows:CardPanel Grid.Row="1" >
              <igWindows:CardPanel.Resources>
                <DataTemplate DataType="{x:Type sys:String}">
                  <TextBlock TextWrapping="Wrap" TextAlignment="Left"  Text="{Binding}" />
                </DataTemplate>
              </igWindows:CardPanel.Resources>
              <ContentPresenter MaxWidth="{Binding ElementName=Content, Path=ActualWidth}" x:Name="MenuItemDescription"  Margin="6,0,6,1" Content="{TemplateBinding igRibbon:MenuToolBase.MenuItemDescription}"/>
            </igWindows:CardPanel>-->
                        <ContentPresenter Style="{StaticResource ToolMenuItemDescription_ContentPresenter}" Grid.Row="1" MaxWidth="{Binding ElementName=Content, Path=ActualWidth}" Name="MenuItemDescription" Margin="6,0,6,1" Content="{TemplateBinding igRibbon:MenuToolBase.MenuItemDescription}" />
                    </Grid>

                    <!-- InputGestureText -->
                    <TextBlock x:Name="InputGestureText" VerticalAlignment="Center" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="0,0,0,0" DockPanel.Dock="Right" />

                </Grid>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </Trigger>

            <Trigger Property="UseLargeImage" Value="False">
                <Setter TargetName="Content" Property="Margin" Value="7,3,7,4" />
                <!-- JJD 12/4/07 - BR28873 -->
                <!--<Setter TargetName="OrangeCheckBox" Property="Margin" Value="2,1,1,1"/>-->
                <Setter TargetName="Icon" Property="Margin" Value="2,0,0,0" />
            </Trigger>

            <Trigger Property="UseLargeImage" Value="True">
                <Setter TargetName="Content" Property="Margin" Value="4,0,0,1" />
                <Setter TargetName="Icon" Property="Width" Value="32" />
                <Setter TargetName="Icon" Property="Height" Value="32" />
                <Setter TargetName="Icon" Property="Margin" Value="1" />
                <!-- JJD 12/4/07 - BR28873 -->
                <!-- Added icon area background element which needs to be hidden when we are showing LargeImages-->
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed" />
            </Trigger>

            <!-- JJD 12/4/07 - BR28873 -->
            <!-- Added icon area background element which needs to be hidden when we are in the recent items area -->
            <Trigger Property="igRibbon:XamRibbon.Location" Value="ApplicationMenuRecentItems">
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed" />
            </Trigger>

            <Trigger Property="igRibbon:XamRibbon.Location" Value="ApplicationMenu">
                <Setter TargetName="OrangeCheckBox" Property="Margin" Value="4" />
                <Setter TargetName="Icon" Property="Margin" Value="1,1,1,1" />
            </Trigger>

            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Bd" Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                <!-- JJD 12/4/07 - BR28873 -->
                <!-- Added icon area background element which needs to be hidden when we are highlighted-->
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="UseLargeImage" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ApplicationMenuItem_Hover" Property="Visibility" Value="Visible" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="UseLargeImage" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="MenuItem_Hover" Property="Visibility" Value="Visible" />
            </MultiTrigger>

            <!--========================== IsChecked Triggers ==========================-->

            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="OrangeCheckBox" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.IsCheckedBoxCenterFillKey}}" />
                <Setter TargetName="OrangeCheckBox" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.IsCheckedBoxBorderFillKey}}" />
                <Setter TargetName="Bd" Property="Background" Value="Transparent" />
            </Trigger>

            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Hidden" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="UseLargeImage" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="UseLargeImage" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="GlyphPanel32" Value="Visible" />
            </MultiTrigger>

            <!-- END  IsChecked Triggers ==========================-->

            <Trigger Property="igRibbon:MenuToolBase.HasMenuItemDescription" Value="False">
                <Setter TargetName="descriptionRow" Property="Height" Value="0" />
            </Trigger>

            <Trigger Property="igRibbon:MenuToolBase.HasMenuItemDescription" Value="True">
                <Setter TargetName="Content" Property="TextBlock.FontWeight" Value="Bold" />
                <Setter TargetName="Content" Property="Margin" Value="6,4,0,1" />
                <Setter TargetName="Content" Property="MinWidth" Value="{Binding Path=MenuItemDescriptionMinWidth, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="MenuItemDescription" Property="Margin" Value="6,0,6,4" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsCheckable" Value="False" />
                    <Condition Property="Location" Value="ApplicationMenuRecentItems" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="OrangeCheckBox" Value="Collapsed" />
                <Setter Property="SharedSizeGroup" TargetName="iconColumn" Value="{x:Null}" />
                <Setter Property="MinWidth" TargetName="iconColumn" Value="0" />
            </MultiTrigger>

            <!-- JJD 12/4/07 - BR28873 -->
            <!-- If IsSeparator is true collapse the Icon and InputGestureText and set the columnspan of the 
           content area to 3 -->
            <Trigger Property="IsSeparator" Value="True">
                <Setter Property="Grid.ColumnSpan" TargetName="ContentArea" Value="3" />
                <Setter Property="Visibility" TargetName="InputGestureText" Value="Collapsed" />
                <Setter Property="Margin" TargetName="OrangeCheckBox" Value="2,0,3,0" />
                <Setter Property="Visibility" TargetName="Icon" Value="Hidden" />
                <Setter Property="Height" TargetName="Icon" Value="1" />
                <Setter Property="Margin" TargetName="Content" Value="5,0,0,0" />
                <Setter Property="Margin" TargetName="ContentArea" Value="0" />
                <!-- AS 12/4/09 TFS25258 -->
                <Setter Property="IsHitTestVisible" Value="False" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSeparator" Value="True" />
                    <Condition Property="UseLargeImage" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" TargetName="Content" Value="2,0,0,0" />
            </MultiTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- =================================================================== -->
    <!-- SubmenuHeader Template (used for menu tools inside another menu)    -->
    <!-- =================================================================== -->
    <ControlTemplate x:Key="{x:Static igRibbon:MenuToolBase.SubmenuHeaderTemplateKey}" TargetType="{x:Type igRibbon:ToolMenuItem}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="ApplicationMenu_SideSelect_SecondaryHover" x:Name="Timeline1">
                <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Storyboard.TargetProperty="(UIElement.Visibility)">
                    <DiscreteObjectKeyFrame KeyTime="00:00:00.4000000" Value="{x:Static Visibility.Visible}" />
                </ObjectAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Width="Auto" Height="Auto" Margin="0,0,0,0">
            <Grid x:Name="MenuItem_Hover" Height="Auto" Width="Auto" Visibility="Collapsed">
                <Rectangle SnapsToDevicePixels="True" x:Name="BorderDark1" Width="Auto" Height="Auto" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}" RadiusX="3" RadiusY="3" />
                <Border SnapsToDevicePixels="True" Margin="1,1,1,1" x:Name="BorderLight_CenterFill1" Width="Auto" Height="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderLightFillKey}}" BorderThickness="1,1,1,1" CornerRadius="1,1,1,1" />
            </Grid>
            <Grid d:LayoutOverrides="HorizontalAlignment" x:Name="ApplicationMenu_SideSelect_SecondaryButton" Visibility="Collapsed" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Width="Auto" Height="Auto" Background="#00000000">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="HottrackLeftPortion" Width="*" />
                    <ColumnDefinition x:Name="HottrackRightPortion" Width="24" />
                </Grid.ColumnDefinitions>

                <Rectangle x:Name="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderFillKey}}" RadiusX="3" RadiusY="3" HorizontalAlignment="Stretch" Margin="0,0,0,0" VerticalAlignment="Stretch" SnapsToDevicePixels="True" Visibility="Collapsed" Grid.ColumnSpan="2" />

                <Rectangle x:Name="ApplicationMenu_SideSelect_Secondary_BorderLightFill" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderLightFillKey}}" RadiusX="2" RadiusY="2" Margin="1,1,1,1" VerticalAlignment="Stretch" Visibility="Collapsed" Grid.ColumnSpan="2" />

                <Rectangle x:Name="ApplicationMenu_SideSelect_CenterFillSecondary" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectCenterSecondaryFillKey}}" RadiusX="2" RadiusY="2" Margin="2,2,2,2" Visibility="Collapsed" Grid.ColumnSpan="2" />

                <Border x:Name="ApplicationMenu_SideSelect_CenterFill" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" Margin="2,2,2,2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectCenterFillKey}}" CornerRadius="0,0,0,0" Visibility="Collapsed" Grid.ColumnSpan="1" />

                <Border x:Name="ApplicationMenu_SideSelect_SecondarySideHover" Visibility="Collapsed" HorizontalAlignment="Stretch" Margin="0,2,2,2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectCenterFillKey}}" CornerRadius="0,2,2,0" SnapsToDevicePixels="True" Grid.Column="1" />

                <Rectangle x:Name="ApplicationMenu_SideSelect_Divider" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderFillKey}}" SnapsToDevicePixels="True" RadiusX="0" RadiusY="0" HorizontalAlignment="Right" Margin="0,1,0,1" Width="1" Visibility="Collapsed" />

                <Border Opacity="0" HorizontalAlignment="Stretch" Margin="3,3,3,3" x:Name="border" Width="Auto" Height="Auto" Grid.ColumnSpan="2" />
            </Grid>
            <Border Name="Bd" Background="Transparent" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                <Grid>
                    <!-- AS 11/7/07 BR27990 
					This portion of the template was reorganized. We needed the left side to be a single unit for the case where
					the menu item represents a segmented menu tool. This is necessary to provide a separate clickable area and 
					also to provide a means of disabling the left hand side when the associated command is disabled without
					disabling the entire menu item.
					-->
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition x:Name="arrowColumn" Width="23" />
                    </Grid.ColumnDefinitions>

                    <Button x:Name="PART_SegmentedButton" Background="Transparent" Style="{StaticResource PlainContentControlStyle}">

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                            </Grid.ColumnDefinitions>

                            <!-- JJD 12/4/07 - BR28873 -->
                            <!-- Added icon area background element-->
                            <Border x:Name="IconAreaBackground" Style="{StaticResource MenuItem_IconAreaBackground}" />

                            <!-- OrangeBox for IsChecked -->
                            <Border x:Name="OrangeCheckBox" SnapsToDevicePixels="True" BorderThickness="1" CornerRadius="1" Margin="2,2,3,2" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <!--Margin="2">-->

                                <igWindows:CardPanel>
                                    <!-- Small check mark -->
                                    <Grid x:Name="GlyphPanel" Visibility="Collapsed" FlowDirection="LeftToRight" Background="{x:Null}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="16" Height="16" igRibbon:XamRibbon.KeyTipPlacementType="CheckIndicator">
                                        <Path Margin="4.946,2.008,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="11.069" Width="7.026" Stretch="Fill" Opacity="1" Data="M 27.9883975982666,68.03516387939453 C27.9883975982666,68.03516387939453 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 35.01433563232422,61.019805908203125 35.01433563232422,61.019805908203125 " Stroke="#eae9d5" StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                        <Path Margin="3.946,2.393,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="10.684" Width="8.459" Stretch="Fill" Opacity="1" Data="M 26.9883975982666,67.03516387939453 C26.9883975982666,67.03516387939453 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 35.44744110107422,61.404788970947266 35.44744110107422,61.404788970947266 " Stroke="#eae9d5" StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                        <Path Margin="4.946,2.008,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="9.069" Width="6.026" Stretch="Fill" Opacity="1" Data="M 27.9883975982666,68.03516387939453 C27.9883975982666,68.03516387939453 30.490787506103516,70.08806610107422 30.490787506103516,70.08806610107422 30.490787506103516,70.08806610107422 34.01433563232422,61.019805908203125 34.01433563232422,61.019805908203125 " Stroke="#eae9d5" StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                        <Path Margin="4.946,2.393,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="10.684" Width="7.459" Stretch="Fill" Opacity="1" Data="M 27.9883975982666,67.03516387939453 C27.9883975982666,67.03516387939453 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 35.44744110107422,61.404788970947266 35.44744110107422,61.404788970947266 " Stroke="#eae9d5" StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                        <Path Margin="4.75,2.24,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="9.862" Width="6.785" Stretch="Fill" Opacity="1" Data="M27.561812,66.880152 C27.561812,66.880152 30.275803,71.118003 30.275803,71.118003 30.275803,71.118003 34.457825,61.276845 34.457825,61.276845" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}" StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                        <Path HorizontalAlignment="Left" VerticalAlignment="Top" Height="9.899" Width="6.908" Stretch="Fill" Opacity="1" Data="M27.616231,66.205115 C27.616231,66.205115 30.445511,71.297952 30.445511,71.297952 30.445511,71.297952 34.499006,61.29204 34.499006,61.29204" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}" StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" Margin="4.627,2.363,0,0" />
                                    </Grid>

                                    <!-- Big check mark -->
                                    <Grid FlowDirection="LeftToRight" x:Name="GlyphPanel32" Height="32" Width="32" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed">
                                        <Path Margin="0,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Height="18" Width="13" Stretch="Fill" Opacity="1" Data="M 59,344 C59,344 63,353 63,353 63,353 72,335 72,335 " Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}" StrokeThickness="2" SnapsToDevicePixels="True" />
                                        <Path Margin="0,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Height="18" Width="13.272" Stretch="Fill" Opacity="1" Data="M59,344 C59,344 63.32169,353 63.32169,353 63.32169,353 72.32169,335 72.32169,335" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}" StrokeThickness="2" SnapsToDevicePixels="True" />
                                    </Grid>

                                    <!-- icon -->
                                    <ContentPresenter x:Name="Icon" Width="16" Height="16" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" HorizontalAlignment="Left" VerticalAlignment="Center" ContentSource="Icon" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </igWindows:CardPanel>
                            </Border>

                            <!-- content -->
                            <Grid Grid.Column="1" VerticalAlignment="Center" Margin="0,0,1,0">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" x:Name="descriptionRow" />
                                </Grid.RowDefinitions>

                                <!-- content -->
                                <ContentPresenter Name="Content" Grid.Column="1" ContentSource="Header" Margin="8,0,5,1" RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Stretch" VerticalAlignment="Center" />

                                <!-- MenuItemDescription -->
                                <!--<TextBlock MaxWidth="{Binding ElementName=Content, Path=ActualWidth}" TextAlignment="Left" Name="MenuItemDescription"  Grid.Row="1" Margin="6,0,6,1" Text="{TemplateBinding igRibbon:MenuToolBase.MenuItemDescription}" TextWrapping="Wrap"/>-->
                                <!--<igWindows:CardPanel Grid.Row="1" >
									<igWindows:CardPanel.Resources>
										<DataTemplate DataType="{x:Type sys:String}">
											<TextBlock TextWrapping="Wrap" TextAlignment="Left"  Text="{Binding}" />
										</DataTemplate>
									</igWindows:CardPanel.Resources>
									<ContentPresenter MaxWidth="{Binding ElementName=Content, Path=ActualWidth}" Name="MenuItemDescription"  Margin="6,0,6,1" Content="{TemplateBinding igRibbon:MenuToolBase.MenuItemDescription}"/>
								</igWindows:CardPanel>-->
                                <ContentPresenter Style="{StaticResource ToolMenuItemDescription_ContentPresenter}" Grid.Row="1" MaxWidth="{Binding ElementName=Content, Path=ActualWidth}" Name="MenuItemDescription" Margin="6,0,6,1" Content="{TemplateBinding igRibbon:MenuToolBase.MenuItemDescription}" />
                            </Grid>
                        </Grid>
                    </Button>

                    <!-- Glyph Arrow-->
                    <Control Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuItemDropDownArrowStyleKey}}" x:Name="Menu_Arrow" Margin="3,0,0,0" DockPanel.Dock="Right" igRibbon:XamRibbon.KeyTipPlacementType="DropDownButton" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Width="Auto" Height="Auto" />

                    <!-- popup -->
                    <Popup Name="PART_Popup" AllowsTransparency="true" Placement="Right" VerticalOffset="-3" Focusable="false" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                        <!-- AS 10/20/10 TFS57641 -->
                        <AdornerDecorator>
                            <luna:SystemDropShadowChrome Name="Shdw" Color="Transparent">
                                <!-- JJD 12/4/07 - BR28873 -->
                                <!-- Moved  Grid.IsSharedSizeScope to ItemsPresenter -->
                                <!--<Grid HorizontalAlignment="Stretch" x:Name="SubMenuPopUp" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Grid.IsSharedSizeScope="true" >-->
                                <Grid HorizontalAlignment="Stretch" x:Name="SubMenuPopUp" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                                    <Rectangle Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderDarkFillKey}}" RadiusX="3" RadiusY="3" HorizontalAlignment="Stretch" Margin="0,0,0,0" x:Name="BorderDark" VerticalAlignment="Stretch" Width="Auto" Height="Auto" SnapsToDevicePixels="True" />
                                    <Rectangle Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderLightFillKey}}" RadiusX="2" RadiusY="2" HorizontalAlignment="Stretch" Margin="1,1,1,1" x:Name="BorderLight" VerticalAlignment="Stretch" Width="Auto" Height="Auto" SnapsToDevicePixels="True" />
                                    <Border SnapsToDevicePixels="True" Margin="2,2,2,2" x:Name="Center" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpCenterFillKey}}" CornerRadius="0,0,1,1">
                                        <!-- JJD 12/4/07 - BR28873 -->
                                        <!-- Moved  Grid.IsSharedSizeScope to ItemsPresenter so we don't need 
                         multi-column grid to display icon area background any more-->
                                        <!--<Grid>-->
                                        <!-- JJD 12/4/07 - BR28873 -->
                                        <!-- Moved  Grid.IsSharedSizeScope to ItemsPresenter so we don't need icon area background any more-->
                                        <!--<Grid.ColumnDefinitions>
											<ColumnDefinition SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto" />
											<ColumnDefinition Width="*"/>
										</Grid.ColumnDefinitions>-->
                                        <!--<Border SnapsToDevicePixels="True" Margin="0,0,0,0" x:Name="LeftIconArea" CornerRadius="1,0,0,1"
											Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuToolPresenterLeftColumnFillKey}}"
											BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionStrokeFillKey}}"
											BorderThickness="0,0,1,0"/>-->
                                        <igWindows:PopupResizerDecorator Grid.ColumnSpan="2" ResizeMode="{TemplateBinding ResizeMode}" ResizerBarStyle="{DynamicResource {x:Static igRibbon:XamRibbon.PopupResizerBarStyleKey}}">
                                            <ScrollViewer x:Name="Popup_ScrollViewer" VerticalScrollBarVisibility="{TemplateBinding PopupVerticalScrollBarVisibility}" HorizontalScrollBarVisibility="Disabled" Style="{StaticResource MenuScrollViewer}">
                                                <!--Style ="{DynamicResource {ComponentResourceKey {x:Type FrameworkElement}, MenuScrollViewer}}">-->
                                                <!-- JJD 12/4/07 - BR28873 -->
                                                <!-- Moved  Grid.IsSharedSizeScope to ItemsPresenter -->
                                                <!--<ItemsPresenter  Margin="0"  KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>-->
                                                <ItemsPresenter Grid.IsSharedSizeScope="true" Margin="0" KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                            </ScrollViewer>
                                        </igWindows:PopupResizerDecorator>
                                        <!--</Grid>-->
                                    </Border>
                                </Grid>
                            </luna:SystemDropShadowChrome>
                        </AdornerDecorator>
                    </Popup>
                </Grid>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <!-- JJD 12/4/07 - BR28873 -->
            <!-- Added icon area background element which needs to be hidden when we are highlighted-->
            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <!-- AS 11/30/07 BR28788 -->
            <Trigger Property="IsSubmenuOpen" Value="False">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" />
            </Trigger>
            <!-- AS 11/30/07 BR28788 - The application menu tools do not show animations on close -->
            <Trigger Property="Location" Value="ApplicationMenu">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False" SourceName="PART_SegmentedButton">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </Trigger>

            <!-- JJD 12/4/07 - BR28873 -->
            <!-- Moved icon area background to menu item templates -->
            <!-- Hide the icon area in the popup when the children are using large images -->
            <!--<DataTrigger Binding="{Binding Path=(igRibbon:MenuToolBase.UseLargeImages)}" Value="True">
				<Setter Property="Visibility" TargetName="LeftIconArea" Value="Collapsed" />
			</DataTrigger>-->

            <!-- Initialize the elements when showing a large image -->
            <Trigger Property="UseLargeImage" Value="True">
                <Setter TargetName="Content" Property="Margin" Value="4,0,0,1" />
                <Setter TargetName="Icon" Property="Width" Value="32" />
                <Setter TargetName="Icon" Property="Height" Value="32" />
                <Setter TargetName="arrowColumn" Property="Width" Value="25" />
                <!-- JJD 12/4/07 - BR28873 -->
                <!-- Added icon area background element which needs to be hidden when we are showing LargeImages-->
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed" />
            </Trigger>

            <!-- Initialize the elements when showing a small image -->
            <Trigger Property="UseLargeImage" Value="False">
                <Setter TargetName="Content" Property="Margin" Value="7,0,5,1" />
                <Setter TargetName="HottrackRightPortion" Property="Width" Value="22" />
                <Setter TargetName="Menu_Arrow" Property="Margin" Value="4,0,0,0" />
                <Setter TargetName="Icon" Property="Margin" Value="2,0,0,0" />
            </Trigger>

            <Trigger Property="igRibbon:XamRibbon.Location" Value="ApplicationMenu">
                <Setter TargetName="OrangeCheckBox" Property="Margin" Value="4" />
                <Setter TargetName="Icon" Property="Margin" Value="1" />
            </Trigger>

            <!-- JJD 12/4/07 - BR28873 -->
            <!-- Added icon area background element which needs to be hidden when we are in the recent items area -->
            <Trigger Property="igRibbon:XamRibbon.Location" Value="ApplicationMenuRecentItems">
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed" />
            </Trigger>

            <Trigger Property="UseLargeImage" Value="False">
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}" />
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderLightFillKey}}" />
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}" />
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Divider" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}" />
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}" />
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterSecondaryFillKey}}" />
            </Trigger>

            <!-- AS 11/7/07 BR27990 -->
            <Trigger Property="IsSegmented" Value="True">
                <Setter Property="Command" TargetName="PART_SegmentedButton" Value="{x:Static igRibbon:MenuTool.SegmentedButtonCommand}" />
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Visibility" Value="Visible" />
            </Trigger>

            <!-- AS 11/7/07 BR27990 -->
            <Trigger SourceName="PART_SegmentedButton" Property="IsEnabled" Value="False">
                <Setter Property="Foreground" TargetName="PART_SegmentedButton" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </Trigger>

            <!-- AS 11/30/07 BR28788
			This trigger prevents the hide animation from occuring.
			
			<Trigger Property="IsSuspendingPopupAnimation" Value="true">
				<Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
			</Trigger>
			-->

            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                    <Condition Property="IsSegmented" Value="True" />
                </MultiTrigger.Conditions>
                <!--<MultiTrigger.EnterActions>
					<BeginStoryboard x:Name="ApplicationMenu_SideSelect_SecondaryHover_BeginStoryboard" Storyboard="{StaticResource ApplicationMenu_SideSelect_SecondaryHover}"/>
				</MultiTrigger.EnterActions>
				<MultiTrigger.ExitActions>
					<StopStoryboard BeginStoryboardName="ApplicationMenu_SideSelect_SecondaryHover_BeginStoryboard"/>
				</MultiTrigger.ExitActions>-->
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_SecondaryButton" Value="Visible" />
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="Visible" />
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="Visible" />
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="Visible" />
                <Setter Property="Opacity" TargetName="border" Value="1" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="UseLargeImage" Value="True" />
                    <Condition Property="IsSegmented" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="MenuItem_Hover" Property="Visibility" Value="Visible" />
                <Setter Property="Fill" TargetName="BorderDark1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderFillKey}}" />
                <Setter Property="Background" TargetName="BorderLight_CenterFill1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectCenterFillKey}}" />
                <Setter Property="BorderBrush" TargetName="BorderLight_CenterFill1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderLightFillKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="UseLargeImage" Value="False" />
                    <Condition Property="IsSegmented" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="MenuItem_Hover" Property="Visibility" Value="Visible" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSegmented" Value="True" />
                    <Condition Property="UseLargeImage" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ApplicationMenu_SideSelect_SecondaryButton" Property="Visibility" Value="Visible" />
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Margin" Value="0,4,0,4" />
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.IsSegmentedNonHottrackDividerFillKey}}" />
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Visibility" Value="Visible" />
            </MultiTrigger>

            <!-- AS 11/7/07 BR27990 
			I'm not sure why we were basing this trigger on when the mouse was over the highlight but basically it should
			be when the mouse is over the element. Either way we should not be turning off the hittest visibility of the 
			content portion. This is especially important now that there is a button with that content that is used to
			represent the segmented button portion of the tool.
			-->
            <!-- No longer an issue - HC 11/13/07-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSegmented" Value="true" />
                    <Condition Property="IsMouseOver" Value="True" SourceName="PART_SegmentedButton" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ApplicationMenu_SideSelect_CenterFill" Property="Visibility" Value="Visible" />
            </MultiTrigger>

            <!-- ================= Trigger for enabled segmented button ================= -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="UseLargeImage" Value="False" />
                    <Condition Property="IsSegmented" Value="True" />
                    <Condition Property="IsEnabled" Value="True" SourceName="PART_SegmentedButton" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_Divider" Value="0,1,0,1" />
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_SecondaryButton" Value="Visible" />
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}" />
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderLightFillKey}}" />
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}" />
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Divider" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}" />
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}" />
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Value="1,2,2,2" />
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="2,2,0,2" />
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="Visible" />
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="Visible" />
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="Visible" />

            </MultiTrigger>
            <!-- ================= END Trigger for enabled segmented button in MENU ================= -->

            <!-- ================= Trigger for disabled segmented button ================= -->
            <!-- For when in menu -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="true" />
                    <Condition Property="IsSegmented" Value="True" />
                    <Condition Property="UseLargeImage" Value="False" />
                    <Condition Property="IsEnabled" Value="False" SourceName="PART_SegmentedButton" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_Divider" Value="0,1,0,1" />
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_SecondaryButton" Value="Visible" />
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuDisabledHottrackBorderDarkFillKey}}" />
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuDisabledHottrackBorderLightFillKey}}" />
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuDisabledHottrackCenterFillKey}}" />
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Divider" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuDisabledHottrackBorderDarkFillKey}}" />
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}" />
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Value="1,2,2,2" />
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="2,2,0,2" />
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="Visible" />
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="Visible" />
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="Visible" />
                <Setter Property="Grid.ColumnSpan" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="1" />
                <Setter Property="Grid.Column" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="1" />
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="0,2,2,2" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </MultiTrigger>

            <!-- For when in ApplicationMenu -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="true" />
                    <Condition Property="IsSegmented" Value="True" />
                    <Condition Property="UseLargeImage" Value="True" />
                    <Condition Property="IsEnabled" Value="False" SourceName="PART_SegmentedButton" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_SecondaryButton" Value="Visible" />
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuDisabledSideSelectBorderDarkFillKey}}" />
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuDisabledSideSelectBorderLightFillKey}}" />
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuDisabledSideSelectCenterFillKey}}" />
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Divider" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuDisabledSideSelectBorderDarkFillKey}}" />
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="Visible" />
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="Visible" />
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="Visible" />
                <Setter Property="Grid.ColumnSpan" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="1" />
                <Setter Property="Grid.Column" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="1" />
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="0,2,2,2" />
            </MultiTrigger>
            <!-- ================= End Trigger for disabled segmented ================= -->

            <!-- ========== IsChecked Triggers for Default, Menu, ApplicationMenu ==========  -->

            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="OrangeCheckBox" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.IsCheckedBoxCenterFillKey}}" />
                <Setter TargetName="OrangeCheckBox" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.IsCheckedBoxBorderFillKey}}" />
            </Trigger>

            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Hidden" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="UseLargeImage" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="UseLargeImage" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="GlyphPanel32" Value="Visible" />
            </MultiTrigger>

            <!-- ==========  End IsChecked Triggers ==========  -->

            <Trigger Property="igRibbon:MenuToolBase.HasMenuItemDescription" Value="False">
                <Setter TargetName="descriptionRow" Property="Height" Value="0" />
            </Trigger>

            <Trigger Property="igRibbon:MenuToolBase.HasMenuItemDescription" Value="True">
                <Setter TargetName="Content" Property="TextBlock.FontWeight" Value="Bold" />
                <Setter TargetName="Content" Property="Margin" Value="6,4,5,1" />
                <Setter TargetName="Content" Property="MinWidth" Value="{Binding Path=MenuItemDescriptionMinWidth, RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="MenuItemDescription" Property="Margin" Value="6,0,6,4" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="IsSegmented" Value="True" />
                    <Condition Property="IsSubmenuOpen" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ApplicationMenu_SideSelect_SecondaryButton" Property="Visibility" Value="Visible" />
                <Setter TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Property="Visibility" Value="Visible" />
                <Setter TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Property="Visibility" Value="Visible" />
                <Setter TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Property="Visibility" Value="Visible" />
                <Setter TargetName="ApplicationMenu_SideSelect_CenterFill" Property="Visibility" Value="Visible" />
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Visibility" Value="Visible" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="IsSegmented" Value="True" />
                    <Condition Property="IsSubmenuOpen" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="ApplicationMenu_SideSelect_SecondaryButton" Property="Visibility" Value="Visible" />
                <Setter TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Property="Visibility" Value="Visible" />
                <Setter TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Property="Visibility" Value="Visible" />
                <Setter TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Property="Visibility" Value="Visible" />
                <Setter TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Property="Visibility" Value="Visible" />
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Visibility" Value="Visible" />
            </MultiTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- =================================================================== -->
    <!-- ToolMenuItem Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:ToolMenuItem}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="TextBlock.TextAlignment" Value="Left" />
        <!-- AS 1/7/08 BR29445
				 This issue has manifested itself in several different ways. Basically, the following two bindings end
				 up leading to null reference exceptions within the wpf framework when the Style property is changed. The
				 Style property is changed when we encounter a menu item that represents a tool that should be embedded.
				 When WPF is unhooking the old style, they're making assumptions that they initialized certain variables - 
				 they even assert for it - but they don't do null checks so in a release version it ends up resulting in
				 a null reference exception. There doesn't seem to be any way for us to force them to update this internal
				 state so the best we can do is to remove the setters that they are evaluating that cause them to create
				 the null reference exception. The following two find ancestor bindings are leading to that here.
				 
		<Setter Property="Control.HorizontalContentAlignment">
			<Setter.Value>
				<Binding Path="HorizontalContentAlignment" RelativeSource="{RelativeSource AncestorLevel=1, Mode=FindAncestor, AncestorType=ItemsControl}" />
			</Setter.Value>
		</Setter>
		<Setter Property="Control.VerticalContentAlignment">
			<Setter.Value>
				<Binding Path="VerticalContentAlignment" RelativeSource="{RelativeSource AncestorLevel=1, Mode=FindAncestor, AncestorType=ItemsControl}" />
			</Setter.Value>
		</Setter>-->
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Control.Template" Value="{DynamicResource {x:Static igRibbon:MenuToolBase.SubmenuItemTemplateKey}}" />
        <Style.Triggers>
            <Trigger Property="MenuItem.Role">
                <Setter Property="FrameworkElement.Margin">
                    <Setter.Value>
                        <Thickness>0,1,0,1</Thickness>
                    </Setter.Value>
                </Setter>
                <Setter Property="Control.Padding">
                    <Setter.Value>
                        <Thickness>6,3,6,3</Thickness>
                    </Setter.Value>
                </Setter>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <DynamicResource ResourceKey="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly=MenuItem}" />
                    </Setter.Value>
                </Setter>
                <Trigger.Value>
                    <x:Static Member="MenuItemRole.TopLevelHeader" />
                </Trigger.Value>
            </Trigger>
            <Trigger Property="MenuItem.Role">
                <Setter Property="DockPanel.Dock">
                    <Setter.Value>
                        <x:Static Member="Dock.Top" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Control.Padding">
                    <Setter.Value>
                        <Thickness>0,2,0,2</Thickness>
                    </Setter.Value>
                </Setter>
                <Setter Property="Control.Template" Value="{DynamicResource {x:Static igRibbon:MenuToolBase.SubmenuHeaderTemplateKey}}" />
                <Trigger.Value>
                    <x:Static Member="MenuItemRole.SubmenuHeader" />
                </Trigger.Value>
            </Trigger>
            <Trigger Property="MenuItem.Role">
                <Setter Property="DockPanel.Dock">
                    <Setter.Value>
                        <x:Static Member="Dock.Top" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Control.Padding">
                    <Setter.Value>
                        <Thickness>0,2,0,2</Thickness>
                    </Setter.Value>
                </Setter>
                <Trigger.Value>
                    <x:Static Member="MenuItemRole.SubmenuItem" />
                </Trigger.Value>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- MenuToolPresenter Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:MenuToolPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:MenuToolPresenter}">
                    <igWindows:CardPanel x:Name="ContentArea">
                        <igRibbon:MenuButtonArea x:Name="PART_MenuButtonArea" />
                        <!-- AS 11/14/07 BR28450 
								The namescope was broken because the recordlistcontrol was not in the logical tree. We 
								need to use a ContentControl instead so the content	is made a logical child. -->
                        <ContentControl x:Name="PART_GalleryToolPreviewSite" Visibility="{TemplateBinding PreviewGalleryVisibility}" />
                        <Popup Name="PART_Popup" AllowsTransparency="true" Placement="Bottom" PlacementTarget="{Binding ElementName=ContentArea}" Focusable="false" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                            <!-- AS 10/20/10 TFS57641 -->
                            <AdornerDecorator>
                                <luna:SystemDropShadowChrome Name="Shdw" Color="Transparent">
                                    <!--<Border Name="SubMenuBorder" Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}">-->
                                    <Border Name="SubMenuBorder" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderLightFillKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderDarkFillKey}}" CornerRadius="2,2,2,2">
                                        <!-- JJD 12/4/07 - BR28873 -->
                                        <!-- Moved  Grid.IsSharedSizeScope to ItemsPresenter -->
                                        <!--<Grid Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpCenterFillKey}}" Width="Auto" Height="Auto" Margin="1,1,1,1"  Grid.IsSharedSizeScope="true" >-->
                                        <Grid Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpCenterFillKey}}" Width="Auto" Height="Auto" Margin="1,1,1,1">
                                            <!-- JJD 12/4/07 - BR28873 -->
                                            <!-- Moved  Grid.IsSharedSizeScope to ItemsPresenter so we don't need 
                         multi-column grid to display icon area background any more-->
                                            <!--<Grid.ColumnDefinitions>
											<ColumnDefinition SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto" />
											<ColumnDefinition Width="*"/>
										</Grid.ColumnDefinitions>-->
                                            <!-- JJD 12/4/07 - BR28873 -->
                                            <!-- Moved  Grid.IsSharedSizeScope to ItemsPresenter so we don't need icon area background any more-->
                                            <!--<Border SnapsToDevicePixels="True" Margin="0,0,0,0" x:Name="LeftIconArea" CornerRadius="1,0,0,1"
											Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuToolPresenterLeftColumnFillKey}}" 
											BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionStrokeFillKey}}" 
											BorderThickness="0,0,1,0"/>-->
                                            <igWindows:PopupResizerDecorator Grid.ColumnSpan="2" ResizeMode="{TemplateBinding ResizeMode}" ResizerBarStyle="{DynamicResource {x:Static igRibbon:XamRibbon.PopupResizerBarStyleKey}}">
                                                <ScrollViewer x:Name="Popup_ScrollViewer" VerticalScrollBarVisibility="{TemplateBinding PopupVerticalScrollBarVisibility}" HorizontalScrollBarVisibility="Disabled" Style="{StaticResource MenuScrollViewer}">
                                                    <!--Style ="{DynamicResource {ComponentResourceKey {x:Type FrameworkElement}, MenuScrollViewer}}">-->
                                                    <!-- JJD 12/4/07 - BR28873 -->
                                                    <!-- Moved  Grid.IsSharedSizeScope to ItemsPresenter -->
                                                    <!--<ItemsPresenter Margin="0"  KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>-->
                                                    <ItemsPresenter Grid.IsSharedSizeScope="True" Margin="0" KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                </ScrollViewer>
                                            </igWindows:PopupResizerDecorator>
                                        </Grid>
                                    </Border>
                                </luna:SystemDropShadowChrome>
                            </AdornerDecorator>
                        </Popup>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <!-- AS 11/30/07 BR28788 -->
                        <Trigger Property="IsSubmenuOpen" Value="False">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" />
                        </Trigger>

                        <!-- JJD 12/4/07 - BR28873 -->
                        <!-- Moved icon area background to menu item templates -->
                        <!-- Hide the icon area in the popup when the children are using large images -->
                        <!--<DataTrigger Binding="{Binding Path=(igRibbon:MenuToolBase.UseLargeImages)}" Value="True">
							<Setter Property="Visibility" TargetName="LeftIconArea" Value="Collapsed" />
						</DataTrigger>-->

                        <Trigger Property="PreviewGalleryVisibility" Value="Visible">
                            <Setter TargetName="PART_MenuButtonArea" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_Popup" Property="Placement" Value="RelativePoint" />
                            <Setter TargetName="PART_Popup" Property="MinWidth" Value="{Binding Path=ActualWidth, ElementName=PART_GalleryToolPreviewSite}" />
                        </Trigger>
                        <!-- AS 11/30/07 BR28788
			This trigger prevents the hide animation from occuring.
			
						<Trigger Property="IsSuspendingPopupAnimation" Value="true">
							<Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
						</Trigger>
						-->
                        <!--<Trigger Value="{x:Null}" Property="Icon">
<Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
</Trigger>
<Trigger Property="IsChecked" Value="true">
<Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
<Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
</Trigger>-->
                        <!--<Trigger Property="IsHighlighted" Value="true">
<Setter TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Property="Background" />
<Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" Property="Foreground" />
</Trigger>-->
                        <!--<Trigger Property="IsEnabled" Value="false">
<Setter Value="{DynamicResource {x:Static GrayTextBrush}}" Property="Foreground" />
</Trigger>-->
                        <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
                        </Trigger>
                        <!--<Trigger Property="IsMouseOver" Value="true">
<Setter TargetName="label" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolHoverCenterFillKey}}" />
</Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- MenuButtonArea Style -->
    <!-- =================================================================== -->
    <ControlTemplate TargetType="{x:Type igRibbon:MenuButtonArea}" x:Key="MenuButtonAreaSegmented">
        <!-- AS 3/3/09 TFS14852
            Made the grid its own shared size scope since we need to synchronize the 
            placement of the button and dropdowntoggle content when the sizing mode is large.
        -->
        <!-- AS 10/22/09 TFS24142 Removed the SharedSizeScope
        <Grid Grid.IsSharedSizeScope="True">-->
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" x:Name="row0" />
                <RowDefinition Height="Auto" x:Name="row1" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <!-- AS 11/7/07 BR27990
			Since we do not want to bind to the command of the menu tool itself (since we want the menu tool to not only 
			fire the command but also raise a click even if it doesn't have a command), we're now using a command that the 
			menu can always listen for. This command will be disabled if the command of the menu is disabled. When the command 
			is executed, the menu can then execute its associated command and raise its click. -->
            <Button Style="{StaticResource PlainContentControlStyle}" x:Name="PART_SegmentedButton" Command="{x:Static igRibbon:MenuTool.SegmentedButtonCommand}">
                <Button.Content>
                    <igRibbon:RibbonButtonChrome x:Name="buttonChrome" IsPressed="{Binding Path=IsPressed, ElementName=PART_SegmentedButton}" IsSegmentedButton="True" SnapsToDevicePixels="True" ClipToBounds="True">
                        <!-- AS 3/3/09 TFS14852 Added HorizontalContentAlignment binding-->
                        <Grid Margin="1" x:Name="btnChromeChild" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <!-- AS 3/3/09 TFS14852 Added Name to allow changes in triggers -->
                                <ColumnDefinition x:Name="col0" Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <!-- AS 10/22/09 TFS24142 
                                Removed the SharedSizeScope and used a new custom element to synchronize the width 
                                of the image and text in the segmented menu. -->
                            <igWindows:SynchronizedSizeDecorator x:Name="syncImage" SynchronizeWidth="False" SynchronizeHeight="False" Target="{Binding ElementName=syncText}">
                                <igWindows:AutoDisabledImage Width="16" Height="16" x:Name="image" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Source="{Binding Path=MenuTool.ImageResolved, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Visibility="{Binding Path=MenuTool.HasImage, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                            </igWindows:SynchronizedSizeDecorator>
                            <ContentPresenter x:Name="textSmall" Grid.Column="1" Content="{Binding Path=MenuTool.Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource stringWithoutMnemonicsConverter}}" SnapsToDevicePixels="True" VerticalAlignment="Center" TextBlock.TextAlignment="Left" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" Margin="0,0,0,0" />
                        </Grid>
                    </igRibbon:RibbonButtonChrome>
                </Button.Content>
            </Button>
            <igRibbon:DropDownToggle x:Name="dropDownBtn" Grid.Column="1" Style="{StaticResource PlainContentControlStyle}" IsDroppedDown="{Binding Path=MenuTool.IsOpen, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
                <igRibbon:DropDownToggle.Content>
                    <igRibbon:RibbonButtonChrome x:Name="dropdownChrome" ClipToBounds="True" IsPressed="{Binding Path=IsPressed, ElementName=dropDownBtn}" SnapsToDevicePixels="True" IsChecked="{Binding Path=IsDroppedDown, ElementName=dropDownBtn}">
                        <!-- AS 3/3/09 TFS14852
              Changed to grid to use SharedSizeScope to sync button/dropdowntoggle content and
              added HorizontalContentAlignment binding
            <igWindows:CardPanel x:Name="dropdownPanel" >-->
                        <Grid x:Name="dropdownPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <Grid.ColumnDefinitions>
                                <!-- AS 10/22/09 TFS24142 Removed the SharedSizeScope and use a SynchronizedSizeDecorator
                    <ColumnDefinition x:Name="dropDownCol" SharedSizeGroup="largeCol" />-->
                                <ColumnDefinition x:Name="dropDownCol" />
                            </Grid.ColumnDefinitions>
                            <Control x:Name="dropdownArrow" Margin="2,0,1,0" Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuToolDropDownArrowStyleKey}}" igRibbon:XamRibbon.KeyTipPlacementType="DropDownButton" />
                            <igWindows:SynchronizedSizeDecorator x:Name="syncText" SynchronizeWidth="False" SynchronizeHeight="False" Target="{Binding ElementName=syncImage}">
                                <igRibbon:LargeToolCaptionPresenter x:Name="textLarge" Visibility="Collapsed" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" Text="{Binding Path=MenuTool.Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource stringWithoutMnemonicsConverter}}">
                                    <igRibbon:LargeToolCaptionPresenter.Glyph>
                                        <Control Margin="0,4,0,0" Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuToolDropDownArrowStyleKey}}" />
                                    </igRibbon:LargeToolCaptionPresenter.Glyph>
                                </igRibbon:LargeToolCaptionPresenter>
                            </igWindows:SynchronizedSizeDecorator>
                        </Grid>
                    </igRibbon:RibbonButtonChrome>
                </igRibbon:DropDownToggle.Content>
            </igRibbon:DropDownToggle>

        </Grid>
        <ControlTemplate.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False" SourceName="PART_SegmentedButton">
                <Setter TargetName="textSmall" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </Trigger>
            <!-- AS 12/7/07 BR29011 
			The following setter was in the trigger above but the text in a large segmented menu is in the bottom 
			and therefore should not be disabled unless the section containing it is disabled. -->
            <Trigger Property="IsEnabled" Value="False" SourceName="dropDownBtn">
                <Setter TargetName="textLarge" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </Trigger>

            <Trigger Property="IsCheckable" Value="True">
                <Setter TargetName="buttonChrome" Property="IsChecked" Value="{Binding Path=MenuTool.IsChecked, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=OneWay}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="SizingMode" Value="ImageOnly" />
                    <Condition Property="HasImage" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="textSmall" Property="Visibility" Value="Collapsed" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="SizingMode" Value="ImageAndTextLarge" />
                    <Condition Property="Location" Value="Ribbon" />
                </MultiTrigger.Conditions>
                <Setter TargetName="dropdownArrow" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="textSmall" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="textLarge" Property="Visibility" Value="Visible" />
                <Setter TargetName="image" Property="Width" Value="32" />
                <Setter TargetName="image" Property="Height" Value="32" />
                <Setter TargetName="image" Property="Margin" Value="0,0,0,2" />
                <!-- AS 3/3/09 TFS14852
                This should be bound to the HorizontalContentAlignment. Also, we need to 
                set some properties on the image and column definition to get them to 
                line up with the dropdown button content.
            <Setter TargetName="btnChromeChild" Property="HorizontalAlignment" Value="Center"/>
            -->
                <Setter TargetName="image" Property="HorizontalAlignment" Value="Center" />
                <!-- AS 10/22/09 TFS24142 
                Removed the SharedSizeGroup and use the SynchronizedSizeDecorator to 
                keep the image and text width in sync.
            <Setter TargetName="col0" Property="SharedSizeGroup" Value="largeCol"/>-->
                <Setter TargetName="syncImage" Property="SynchronizeWidth" Value="True" />
                <Setter TargetName="syncText" Property="SynchronizeWidth" Value="True" />
                <Setter TargetName="dropDownCol" Property="Width" Value="Auto" />

                <Setter TargetName="dropDownBtn" Property="Grid.Column" Value="0" />
                <Setter TargetName="dropDownBtn" Property="Grid.Row" Value="2" />
                <Setter TargetName="PART_SegmentedButton" Property="Grid.RowSpan" Value="2" />
                <Setter TargetName="row0" Property="Height" Value="Auto" />
                <Setter TargetName="row1" Property="Height" Value="*" />
                <Setter TargetName="btnChromeChild" Property="Margin" Value="1,1,1,0" />
            </MultiTrigger>
            
             <DataTrigger Binding="{Binding Path=MenuTool.(HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                  <Setter TargetName="textSmall" Property="Margin" Value="3,0,2,1" />
             </DataTrigger>
            
            <DataTrigger Binding="{Binding Path=MenuTool.(igRibbon:XamRibbon.HideAccessKey), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False">
                <Setter TargetName="textSmall" Property="RecognizesAccessKey" Value="True" />
                <Setter TargetName="textSmall" Property="Content" Value="{Binding Path=(igRibbon:ButtonTool.Caption), RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
            </DataTrigger>

            <Trigger Property="Location" Value="QuickAccessToolbar">
                <Setter Property="Margin" Value="0,-2,0,0" />
                <Setter Property="Padding" TargetName="buttonChrome" Value="0,2,0,0" />
                <Setter Property="Padding" TargetName="dropdownChrome" Value="0,2,0,0" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
            </Trigger>
            
            <DataTrigger Binding="{Binding Path=MenuTool.(igRibbon:ButtonGroup.IsInButtonGroup), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                <Setter TargetName="dropdownArrow" Property="Margin" Value="0,0,1,0" />
            </DataTrigger>
            
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="{x:Type igRibbon:MenuButtonArea}" x:Key="MenuButtonAreaDropDownOnly">
        <igRibbon:DropDownToggle x:Name="dropdownBtn" Style="{StaticResource PlainContentControlStyle}" IsDroppedDown="{Binding Path=MenuToolPresenter.IsSubmenuOpen, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
            <igRibbon:DropDownToggle.Content>
                <igRibbon:RibbonButtonChrome x:Name="dropdownChrome" IsPressed="{Binding Path=IsPressed, ElementName=dropdownBtn}" IsChecked="{Binding Path=IsDroppedDown, ElementName=dropdownBtn}" SnapsToDevicePixels="True">
                    <!-- AS 3/3/09 TFS14852 Added HorizontalContentAlignment binding -->
                    <Grid Margin="1,1,0,1" x:Name="chromeContentPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" x:Name="row0" />
                            <RowDefinition Height="Auto" x:Name="row1" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <igWindows:AutoDisabledImage Width="16" Height="16" x:Name="image" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Source="{Binding Path=MenuTool.ImageResolved, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Visibility="{Binding Path=MenuTool.HasImage, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        <!-- 8/19/11 TFS83576 -->
                        <igRibbon:OuterGlowDecorator x:Name="textSmallGlow" Grid.Column="1" VerticalAlignment="Center"  Margin="0,0,0,0">
                            <ContentPresenter x:Name="textSmall" Grid.Column="1" Content="{Binding Path=MenuTool.Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource stringWithoutMnemonicsConverter}}" SnapsToDevicePixels="True" TextBlock.TextAlignment="Left" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" />
                        </igRibbon:OuterGlowDecorator>
                        <Control x:Name="dropdownArrow" Margin="1,0,0,0" Grid.Column="2" Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuToolDropDownArrowStyleKey}}" />
                        <igRibbon:LargeToolCaptionPresenter x:Name="textLarge" Grid.Row="2" Visibility="Collapsed" Text="{Binding Path=MenuTool.Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource stringWithoutMnemonicsConverter}}">
                            <igRibbon:LargeToolCaptionPresenter.Glyph>
                                <Control x:Name="largeCaptionGlyph" Margin="0,4,0,0" Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuToolDropDownArrowStyleKey}}" />
                            </igRibbon:LargeToolCaptionPresenter.Glyph>
                        </igRibbon:LargeToolCaptionPresenter>
                    </Grid>
                </igRibbon:RibbonButtonChrome>

            </igRibbon:DropDownToggle.Content>
        </igRibbon:DropDownToggle>
        <ControlTemplate.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="SizingMode" Value="ImageOnly" />
                    <Condition Property="HasImage" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="textSmallGlow" Property="Visibility" Value="Collapsed" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="SizingMode" Value="ImageAndTextLarge" />
                    <Condition Property="Location" Value="Ribbon" />
                </MultiTrigger.Conditions>
                <Setter TargetName="dropdownArrow" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="textSmallGlow" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="textLarge" Property="Visibility" Value="Visible" />
                <Setter TargetName="image" Property="Width" Value="32" />
                <Setter TargetName="image" Property="Height" Value="32" />
                <Setter TargetName="image" Property="Margin" Value="0,0,0,2" />
                <Setter TargetName="row0" Property="Height" Value="Auto" />
                <Setter TargetName="row1" Property="Height" Value="*" />
                <Setter TargetName="chromeContentPanel" Property="Margin" Value="1,1,1,0" />
            </MultiTrigger>
            <Trigger Property="IsQuickCustomizeMenu" Value="True">
                <Setter Property="Style" TargetName="largeCaptionGlyph" Value="{DynamicResource {x:Static igRibbon:MenuTool.QuickCustomizeMenuDropDownArrowStyleKey}}" />
                <Setter Property="Style" TargetName="dropdownArrow" Value="{DynamicResource {x:Static igRibbon:MenuTool.QuickCustomizeMenuDropDownArrowStyleKey}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=MenuTool.(igRibbon:XamRibbon.HideAccessKey), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False">
                <Setter TargetName="textSmall" Property="RecognizesAccessKey" Value="True" />
                <Setter TargetName="textSmall" Property="Content" Value="{Binding Path=(igRibbon:ButtonTool.Caption), RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
            </DataTrigger>
            
              <DataTrigger Binding="{Binding Path=MenuTool.(HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                  <Setter TargetName="textSmallGlow" Property="Margin" Value="3,0,2,1" />
             </DataTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False" />
                    <Condition Property="Location" Value="QuickAccessToolbar" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" Value="0,-2,0,0" />
                <Setter Property="Padding" TargetName="dropdownChrome" Value="0,2,0,0" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="Location" Value="QuickAccessToolbar" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
            </MultiTrigger>
        
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </Trigger>
                      
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <!-- AS 2/22/08 BR30647 - Added parens around path -->
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Location), RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).QuickAccessToolbar.IsBelowRibbon, RelativeSource={RelativeSource Self}}" Value="False" />
                    <!-- 8/19/11 TFS83576
										<Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />-->
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <!-- 8/19/11 TFS83576
								<Setter TargetName="textSmall" Property="BitmapEffect" Value="{igWindows:SafeOuterGlow GlowColor=White, GlowSize=10, Opacity=0.6}" />-->
                <Setter TargetName="textSmallGlow" Property="IsGlowVisible" Value="True" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).QuickAccessToolbar.IsBelowRibbon, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <!-- 8/19/11 TFS83576
										<Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Maximized" />-->
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VistaWindowMaximizedTextFillKey}}" />
            </MultiDataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type igRibbon:MenuButtonArea}">
        <Setter Property="Template" Value="{StaticResource MenuButtonAreaDropDownOnly}" />
        <!-- AS 3/3/09 TFS14852 Added HorizontalContentAlignment binding -->
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=MenuTool.HorizontalContentAlignment, RelativeSource={x:Static RelativeSource.Self}}" />
        <Style.Triggers>
            <Trigger Property="IsSegmented" Value="True">
                <Setter Property="Template" Value="{StaticResource MenuButtonAreaSegmented}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- ApplicationMenuPresenter Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:ApplicationMenuPresenter}">
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:ApplicationMenuPresenter}">

                    <!-- ============ ApplicationMenu button Animations -->

                    <ControlTemplate.Resources>
                        <Storyboard x:Key="HoverFadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedFadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HoverFadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PressedFadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="Pressed" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <!-- ============ End ApplicationMenu button Animations -->

                    <igWindows:CardPanel x:Name="ApplicationMenuButton" Background="Transparent" SnapsToDevicePixels="true">
                        <Rectangle x:Name="PopupPlacementRect" Visibility="Hidden" Margin="2, 0, 0, 18" />

                        <!-- Office Orb -->
                        <Grid x:Name="orbPanel" Margin="4,4,0,0" Width="40" Height="40" Background="#00ffffff" HorizontalAlignment="Left" VerticalAlignment="Top">

                            <Ellipse x:Name="orbShadow" Opacity="0.5" Margin="2,2,0,0" SnapsToDevicePixels="True" HorizontalAlignment="Center" VerticalAlignment="Center" Width="37" Height="37" Fill="#3F333333" Stroke="{x:Null}" />

                            <Grid HorizontalAlignment="Center" Margin="0,0,0,0" x:Name="Normal" VerticalAlignment="Center">
                                <Path Height="Auto" Width="37" Stretch="None" Opacity="1" Data="M 0,18.5 C0,8.282600402832031 8.282600402832031,0 18.5,0 28.71739959716797,0 37,8.282600402832031 37,18.5 37,28.71739959716797 28.71739959716797,37 18.5,37 8.282600402832031,37 0,28.71739959716797 0,18.5 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonNormalOuterBorderFillKey}}" SnapsToDevicePixels="True" x:Name="NormalBorder" HorizontalAlignment="Left" VerticalAlignment="Top" />
                                <Path Height="Auto" Width="37" Stretch="None" Opacity="1" Data="M 1,18.5 C1,8.834892272949219 8.834892272949219,1 18.5,1 28.16510772705078,1 36,8.834892272949219 36,18.5 36,28.16510772705078 28.16510772705078,36 18.5,36 8.834892272949219,36 1,28.16510772705078 1,18.5 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonNormalInnerBorderFillKey}}" SnapsToDevicePixels="True" x:Name="NormalInnerBorder" HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Top" />
                                <Path Height="Auto" Width="35" Stretch="None" Opacity="1" Data="M 2,18.5 C2,9.387184143066406 9.387184143066406,2 18.5,2 27.612815856933594,2 35,9.387184143066406 35,18.5 35,27.612815856933594 27.612815856933594,35 18.5,35 9.387184143066406,35 2,27.612815856933594 2,18.5 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonNormalCenterFillKey}}" SnapsToDevicePixels="True" x:Name="NormalCenter" HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Top" />
                                <Path Height="17.915" Width="35" Stretch="None" Opacity="1" Data="M 2,17.5 C2,17.5 2.0049972534179688,17.91499900817871 2.0049972534179688,17.91499900817871 5.062736511230469,16.779298782348633 11.203304290771484,16.279211044311523 18.402122497558594,16.279211044311523 25.60094451904297,16.279211044311523 31.937255859375,16.779298782348633 34.9949951171875,17.91499900817871 34.9949951171875,17.91499900817871 35,17.5 35,17.5 35,8.387184143066406 27.612815856933594,2 18.5,2 9.387184143066406,2 2,8.387184143066406 2,17.5 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonNormalHighlightFillKey}}" SnapsToDevicePixels="True" x:Name="NormalHighlight" HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Top" />
                            </Grid>
                            <Grid x:Name="Hover" Opacity="0" HorizontalAlignment="Center" Margin="0,0,0,0" VerticalAlignment="Center">
                                <Path Height="Auto" Width="37" Stretch="None" Opacity="1" Data="M 0,18.5 C0,8.282600402832031 8.282600402832031,0 18.5,0 28.71739959716797,0 37,8.282600402832031 37,18.5 37,28.71739959716797 28.71739959716797,37 18.5,37 8.282600402832031,37 0,28.71739959716797 0,18.5 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonHoverOuterBorderFillKey}}" SnapsToDevicePixels="True" x:Name="HoverBorder" HorizontalAlignment="Left" VerticalAlignment="Top" />
                                <Path Height="Auto" Width="37" Stretch="None" Opacity="1" Data="M 1,18.5 C1,8.834892272949219 8.834892272949219,1 18.5,1 28.16510772705078,1 36,8.834892272949219 36,18.5 36,28.16510772705078 28.16510772705078,36 18.5,36 8.834892272949219,36 1,28.16510772705078 1,18.5 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonHoverInnerBorderFillKey}}" SnapsToDevicePixels="True" x:Name="HoverInnerBorder" HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Top" />
                                <Path Height="Auto" Width="35" Stretch="None" Opacity="1" Data="M 2,18.5 C2,9.387184143066406 9.387184143066406,2 18.5,2 27.612815856933594,2 35,9.387184143066406 35,18.5 35,27.612815856933594 27.612815856933594,35 18.5,35 9.387184143066406,35 2,27.612815856933594 2,18.5 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonHoverCenterFillKey}}" SnapsToDevicePixels="True" x:Name="HoverCenter" HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Top" />
                                <Path Height="17.915" Width="35" Stretch="None" Opacity="1" Data="M 2,17.5 C2,17.5 2.0049972534179688,17.91499900817871 2.0049972534179688,17.91499900817871 5.062736511230469,16.779298782348633 11.203304290771484,16.279211044311523 18.402122497558594,16.279211044311523 25.60094451904297,16.279211044311523 31.937255859375,16.779298782348633 34.9949951171875,17.91499900817871 34.9949951171875,17.91499900817871 35,17.5 35,17.5 35,8.387184143066406 27.612815856933594,2 18.5,2 9.387184143066406,2 2,8.387184143066406 2,17.5 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonHoverHighlightFillKey}}" SnapsToDevicePixels="True" x:Name="HoverHighlight" HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Top" />
                            </Grid>
                            <Grid x:Name="Pressed" Opacity="0" d:LayoutOverrides="Width, Height" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Path Height="Auto" Width="37" Stretch="None" Opacity="1" Data="M 0,18.5 C0,8.282600402832031 8.282600402832031,0 18.5,0 28.71739959716797,0 37,8.282600402832031 37,18.5 37,28.71739959716797 28.71739959716797,37 18.5,37 8.282600402832031,37 0,28.71739959716797 0,18.5 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonPressedOuterBorderFillKey}}" SnapsToDevicePixels="True" x:Name="HoverBorder1" HorizontalAlignment="Left" VerticalAlignment="Top" />
                                <Path Height="Auto" Width="37" Stretch="None" Opacity="1" Data="M 1,18.5 C1,8.834892272949219 8.834892272949219,1 18.5,1 28.16510772705078,1 36,8.834892272949219 36,18.5 36,28.16510772705078 28.16510772705078,36 18.5,36 8.834892272949219,36 1,28.16510772705078 1,18.5 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonPressedInnerBorderFillKey}}" SnapsToDevicePixels="True" x:Name="HoverInnerBorder1" HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Top" />
                                <Path Height="Auto" Width="35" Stretch="None" Opacity="1" Data="M 2,18.5 C2,9.387184143066406 9.387184143066406,2 18.5,2 27.612815856933594,2 35,9.387184143066406 35,18.5 35,27.612815856933594 27.612815856933594,35 18.5,35 9.387184143066406,35 2,27.612815856933594 2,18.5 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonPressedCenterFillKey}}" SnapsToDevicePixels="True" x:Name="HoverCenter1" HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Top" />
                                <Path Height="17.915" Width="35" Stretch="None" Opacity="1" Data="M 2,17.5 C2,17.5 2.0049972534179688,17.91499900817871 2.0049972534179688,17.91499900817871 5.062736511230469,16.779298782348633 11.203304290771484,16.279211044311523 18.402122497558594,16.279211044311523 25.60094451904297,16.279211044311523 31.937255859375,16.779298782348633 34.9949951171875,17.91499900817871 34.9949951171875,17.91499900817871 35,17.5 35,17.5 35,8.387184143066406 27.612815856933594,2 18.5,2 9.387184143066406,2 2,8.387184143066406 2,17.5 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonPressedHighlightFillKey}}" SnapsToDevicePixels="True" x:Name="HoverHighlight1" HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Top" />
                            </Grid>
                            <!-- Orb Image -->

                            <!-- AS 6/4/08 BR32242 Changed source binding to bind to explicit property rather than rely on datacontext. -->
                            <Image Source="{Binding Path=Tool.Image, RelativeSource={x:Static RelativeSource.TemplatedParent}}" SnapsToDevicePixels="True" MaxWidth="32" MaxHeight="32" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Grid>
                        <!-- End Orb -->

                        <!-- Main Menu Area -->
                        <Popup Name="PART_Popup" AllowsTransparency="true" Placement="Bottom" PlacementTarget="{Binding ElementName=PopupPlacementRect}" Focusable="false" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                            <luna:SystemDropShadowChrome Name="Shdw" Color="Transparent">
                                <igWindows:CardPanel Margin="1,0,0,0" KeyboardNavigation.DirectionalNavigation="Cycle">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="16" />
                                                <RowDefinition />
                                            </Grid.RowDefinitions>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>

                                            <!-- Menu Chrome -->
                                            <Border SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuOuterBorderDarkFillKey}}" CornerRadius="2,2,0,0" Grid.RowSpan="2" Grid.ColumnSpan="2" />
                                            <Border SnapsToDevicePixels="True" Margin="1,1,1,0" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuChromeFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuOuterBorderLightFillKey}}" BorderThickness="1,1,1,0" CornerRadius="2,2,0,0" Grid.RowSpan="2" Grid.ColumnSpan="2" />
                                            <Border SnapsToDevicePixels="True" Margin="4,0,4,0" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuInnerBorderDarkFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuInnerBorderLightFillKey}}" BorderThickness="1,1,1,1" Grid.Row="1" Grid.ColumnSpan="2" />
                                            <!-- End Menu Chrome -->

                                            <!-- Menu Items Background -->
                                            <Border SnapsToDevicePixels="True" Grid.Row="1" Margin="6,2,0,2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuLeftAreaCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuLeftAreaBorderFillKey}}" BorderThickness="0,0,1,0" />

                                            <!-- Menu Items Area -->

                                            <!-- AS 10/2/09 TFS22994 - Prevent ScrollViewer from taking focus -->
                                            <ScrollViewer x:Name="MenuItemsArea" Grid.Row="1" CanContentScroll="true" Focusable="False" HorizontalScrollBarVisibility="Disabled" Margin="6,0,1,0" Style="{StaticResource MenuScrollViewer}">
                                                <!--Style ="{DynamicResource {ComponentResourceKey {x:Type FrameworkElement}, MenuScrollViewer}}">-->
                                                <!--<ItemsPresenter Margin="0,2,0,2" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local"   KeyboardNavigation.ControlTabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.IsSharedSizeScope="true" />-->
                                                <igRibbon:ApplicationMenuItemsPanel IsItemsHost="True" x:Name="PART_ApplicationMenuItemsPanel" Margin="0,2,0,2" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.ControlTabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Continue" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.IsSharedSizeScope="true" />
                                                <!--<ItemsPresenter Margin="2"  KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.IsSharedSizeScope="true" />-->
                                            </ScrollViewer>

                                            <!-- RecentItems -->
                                            <!--<ContentPresenter
                         x:Name="PART_RecentItems" 
                          Grid.Row="1"
                         Grid.Column="1"
                         Content="{Binding RecentItems}"
                         Focusable="False"
                         KeyboardNavigation.TabIndex="2"
                         KeyboardNavigation.TabNavigation="Local"
                         KeyboardNavigation.ControlTabNavigation="Local"
                         Margin="0,0,6,0"
                         />-->
                                            <!--JJD 10/26/07 - removed height binding-->
                                            <!--Height="{Binding ElementName=MenuItemsArea, Path=ActualHeight}"-->

                                            <!-- RecentItems Background-->
                                            <Border x:Name="RecentItemsBackGround" Grid.Row="1" Grid.Column="1" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" Width="Auto" Margin="0,2,6,2" MinWidth="250" MinHeight="64" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsBorderFillKey}}" BorderThickness="0">
                                                <Grid>
                                                    <Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" Width="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuOuterBorderDarkFillKey}}" CornerRadius="0,5,0,0" Visibility="Collapsed" />
                                                    <Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" Margin="0,1,1,0" Width="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuChromeFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuOuterBorderLightFillKey}}" BorderThickness="0,1,1,0" CornerRadius="0,5,0,0" Visibility="Collapsed" />
                                                    <Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" Margin="0,16,4,0" Width="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuOuterBorderDarkFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuOuterBorderLightFillKey}}" BorderThickness="0,1,1,1" Visibility="Collapsed" />
                                                    <Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" Width="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsBorderFillKey}}" BorderThickness="1,0,0,0">
                                                        <!-- AS 10/2/09 TFS22994 - Prevent ScrollViewer from taking focus -->
                                                        <ScrollViewer Focusable="False" HorizontalScrollBarVisibility="Disabled" Style="{StaticResource MenuScrollViewer}">
                                                            <StackPanel>
                                                                <!-- AS 11/29/07 BR28758
															We have to use a ContentControl here. The CP will change its DataContext based on 
															the content so the bindings will look for the HeaderTemplate(Selector) paths on 
															the content instead of the ApplicationMenu.
															<ContentPresenter x:Name="RecentItemsHeader"-->
                                                                <!-- AS 12/4/07 BR28887 Set Focusable to false -->
                                                                <!-- AS 6/4/08 BR32242 Changed source binding to bind to explicit property rather than rely on datacontext. -->
                                                                <ContentControl x:Name="RecentItemsHeader" Focusable="False" Content="{Binding Path=Tool.RecentItemsHeader, RelativeSource={x:Static RelativeSource.TemplatedParent}}" ContentTemplate="{Binding Path=Tool.RecentItemsHeaderTemplate, RelativeSource={x:Static RelativeSource.TemplatedParent}}" ContentTemplateSelector="{Binding Path=Tool.RecentItemsHeaderTemplateSelector, RelativeSource={x:Static RelativeSource.TemplatedParent}}" TextBlock.FontWeight="Bold" Margin="7,3,0,3" />
                                                                <Border x:Name="RecentItemsHeaderSeparator" Height="2" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsSeparatorDarkFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsSeparatorLightFillKey}}" BorderThickness="0,0,0,1" />
                                                                <igRibbon:ApplicationMenuRecentItemsPanel x:Name="PART_RecentItemsPanel" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.ControlTabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Continue" />
                                                            </StackPanel>
                                                        </ScrollViewer>
                                                    </Border>
                                                </Grid>
                                            </Border>

                                            <!-- SubMenu -->
                                            <FrameworkElement x:Name="PART_SubMenuArea" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Grid.Row="1" Grid.Column="1" Margin="0,6,5,-2" />

                                        </Grid>

                                        <!-- FooterToolbar -->
                                        <!-- Temp (FooterToolbar Chrome) -->

                                        <Grid Grid.Row="1">
                                            <Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuFooterToolbarOuterBorderDarkFillKey}}" CornerRadius="0,0,2,2" />
                                            <Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuFooterToolbarOuterBorderLightFillKey}}" CornerRadius="0,0,2,2" Margin="1,0,1,1" />
                                            <Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuFooterToolbarFillKey}}" CornerRadius="0,0,2,2" Margin="2,0,2,2" />
                                            <!-- JM 06-13-08 BR33882 - Since we are no longer setting the DataContext of ToolMenuItems to the Tool
												 we cannot do a simple binding.  Instead, bind to the Tool property on our
												 TemplatedParent-->
                                            <!--<ContentPresenter
						x:Name="PART_FooterToolbar"
						Content="{Binding FooterToolbar}"
						Focusable="False"
						KeyboardNavigation.TabIndex="3"
						KeyboardNavigation.TabNavigation="Local"
						KeyboardNavigation.ControlTabNavigation="Local"
						KeyboardNavigation.DirectionalNavigation="Continue"
						Margin="6,1,5,2"/>-->
                                            <ContentPresenter x:Name="PART_FooterToolbar" Content="{Binding Path=Tool.FooterToolbar, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Focusable="False" KeyboardNavigation.TabIndex="3" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.ControlTabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Continue" Margin="6,1,5,2" />
                                        </Grid>
                                    </Grid>

                                    <!-- Overlay Button -->
                                    <ToggleButton x:Name="ButtonOverlay" Focusable="False" IsTabStop="False" IsChecked="{Binding ElementName=PART_Popup, Path=IsOpen, Mode=TwoWay}" ClickMode="Press" Width="{Binding ElementName=orbPanel, Path=ActualWidth}" Height="{Binding ElementName=orbPanel, Path=ActualHeight}" HorizontalAlignment="Left" VerticalAlignment="Top">
                                        <ToggleButton.RenderTransform>
                                            <MultiBinding Mode="OneWay">
                                                <MultiBinding.Converter>
                                                    <igRibbon:ApplicationMenuButtonTransformConverter />
                                                </MultiBinding.Converter>
                                                <Binding ElementName="PART_Popup" Path="IsOpen" />
                                                <Binding ElementName="orbPanel" />
                                                <Binding ElementName="ButtonOverlay" />
                                            </MultiBinding>
                                        </ToggleButton.RenderTransform>
                                        <ToggleButton.Template>
                                            <ControlTemplate TargetType="ToggleButton">
                                                <Rectangle>
                                                    <Rectangle.Fill>
                                                        <VisualBrush x:Name="orbBrush" Stretch="None" Visual="{Binding ElementName=orbPanel, Mode=OneTime}" />
                                                    </Rectangle.Fill>
                                                </Rectangle>

                                            </ControlTemplate>
                                        </ToggleButton.Template>

                                    </ToggleButton>
                                </igWindows:CardPanel>
                            </luna:SystemDropShadowChrome>
                        </Popup>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <!-- AS 11/30/07 BR28788 -->
                        <Trigger Property="IsSubmenuOpen" Value="False">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" />
                        </Trigger>

                        <!-- AS 6/4/08 BR32242 Changed trigger binding to bind to explicit property rather than rely on datacontext. -->
                        <DataTrigger Binding="{Binding Path=Tool.HasRecentItemsHeader, RelativeSource={x:Static RelativeSource.Self}}" Value="False">
                            <Setter Property="Visibility" TargetName="RecentItemsHeaderSeparator" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="RecentItemsHeader" Value="Collapsed" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <!-- AS 3/5/09 TFS13129
                            The orb is too high & close to the left in vista
                            <Setter TargetName="orbPanel" Property="Margin" Value="-2,0,0,0"/>-->
                            <Setter TargetName="orbPanel" Property="Margin" Value="2,6,0,0" />
                        </DataTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSuspendingPopupAnimation" Value="True" />
                                <Condition Property="IsPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Pressed" Property="Opacity" Value="1" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hover" Property="Opacity" Value="1" />
                        </MultiTrigger>

                        <!--<Trigger Property="HasRecentItems" Value="False">
								-->
                        <!--<Setter TargetName="PART_RecentItems" Property="Visibility" Value="Collapsed" />-->
                        <!--
								<Setter TargetName="RecentItemsBackGround" Property="Visibility" Value="Visible" />
							</Trigger>-->

                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HoverFadeOut}" x:Name="HoverFadeOut_BeginStoryboard" />
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="HoverFadeIn_BeginStoryboard" Storyboard="{StaticResource HoverFadeIn}" />
                            </Trigger.EnterActions>
                        </Trigger>

                        <!--<Trigger Property="IsPressed" Value="True">
							<Trigger.ExitActions>
								<BeginStoryboard x:Name="PressedFadeOut_BeginStoryboard" Storyboard="{StaticResource PressedFadeOut}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard x:Name="PressedFadeIn_BeginStoryboard" Storyboard="{StaticResource PressedFadeIn}"/>
							</Trigger.EnterActions>
						</Trigger>-->

                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <!-- AS 11/30/07 BR28788
							This trigger prevents the hide animation from occuring.
							<Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
							-->
                            <Setter TargetName="Pressed" Property="Opacity" Value="1" />
                        </Trigger>
                        <!--<Trigger Value="{x:Null}" Property="Icon">
							<Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
							<Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
						</Trigger>-->
                        <!--<Trigger Property="IsHighlighted" Value="true">
							<Setter TargetName="Bd" Value="{DynamicResource {x:Static HighlightBrush}}" Property="Background" />
							<Setter Value="{DynamicResource {x:Static HighlightTextBrush}}" Property="Foreground" />
						</Trigger>-->
                        <!--<Trigger Property="IsEnabled" Value="false">
							<Setter Value="{DynamicResource {x:Static GrayTextBrush}}" Property="Foreground" />
						</Trigger>-->
                        <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Button_QATOverflow" BasedOn="{x:Null}" TargetType="{x:Type igRibbon:DropDownToggle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:DropDownToggle}">
                    <igWindows:CardPanel Background="Transparent">
                        <Grid x:Name="QATOverflow" Background="#00000000" Margin="0,2,0,0">
                            <Border SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolHoverBorderDarkFillKey}}" BorderThickness="0,0,0,0" CornerRadius="2,2,2,2" Visibility="Collapsed" x:Name="BorderDark" />
                            <Border SnapsToDevicePixels="True" Margin="1,1,1,1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolHoverCenterFillKey}}" CornerRadius="1,1,1,1" Visibility="Collapsed" x:Name="BorderLight_Center" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolHoverBorderLightFillKey}}" BorderThickness="1,1,1,1" />
                            <Grid Height="5" Width="3" Background="{x:Null}" HorizontalAlignment="Left" Margin="3,0,0,0" VerticalAlignment="Center">
                                <Path Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="5" Width="3" Stretch="Fill" Opacity="1" Data="M 0,0 C0,0 0,5 0,5 0,5 1,5 1,5 1,5 1,4 1,4 1,4 2,4 2,4 2,4 2,3 2,3 2,3 3,3 3,3 3,3 3,2 3,2 3,2 2,2 2,2 2,2 2,1 2,1 2,1 1,1 1,1 1,1 1,0 1,0 1,0 0,0 0,0 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphNormalBackgroundFillKey}}" SnapsToDevicePixels="True" x:Name="LeftGlyphBackground" />
                                <Path Margin="0,1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="3" Width="2" Stretch="Fill" Opacity="1" Data="M 0,1 C0,1 0,4 0,4 0,4 1,4 1,4 1,4 1,3 1,3 1,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphNormalForegroundFillKey}}" SnapsToDevicePixels="True" x:Name="LeftGlyphForeground" />
                            </Grid>

                            <Grid Height="5" Width="3" Background="{x:Null}" d:LayoutOverrides="Width, Height" HorizontalAlignment="Right" Margin="0,0,3,0" VerticalAlignment="Center">
                                <Path Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="5" Width="3" Stretch="Fill" Opacity="1" Data="M 0,0 C0,0 0,5 0,5 0,5 1,5 1,5 1,5 1,4 1,4 1,4 2,4 2,4 2,4 2,3 2,3 2,3 3,3 3,3 3,3 3,2 3,2 3,2 2,2 2,2 2,2 2,1 2,1 2,1 1,1 1,1 1,1 1,0 1,0 1,0 0,0 0,0 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphNormalBackgroundFillKey}}" SnapsToDevicePixels="True" x:Name="RightGlyphBackground" />
                                <Path Margin="0,1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="3" Width="2" Stretch="Fill" Opacity="1" Data="M 0,1 C0,1 0,4 0,4 0,4 1,4 1,4 1,4 1,3 1,3 1,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphNormalForegroundFillKey}}" SnapsToDevicePixels="True" x:Name="RightGlyphForeground" />
                            </Grid>

                        </Grid>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="BorderLight_Center" Value="Visible" />
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.IsActive" Value="True">
                            <Setter Property="Visibility" TargetName="BorderLight_Center" Value="Visible" />
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsDroppedDown" Value="True">
                            <Setter Property="Visibility" TargetName="BorderLight_Center" Value="Visible" />
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible" />
                            <Setter Property="Margin" TargetName="BorderLight_Center" Value="1,1,1,0" />
                            <Setter Property="Margin" TargetName="BorderDark" Value="0,0,0,1" />
                            <Setter Property="Background" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolPressedBorderDarkFillKey}}" />
                            <Setter Property="Background" TargetName="BorderLight_Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolPressedCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="BorderLight_Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolPressedInnerBorderFillKey}}" />
                            <Setter Property="Fill" TargetName="LeftGlyphForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphHoverForegroundFillKey}}" />
                            <Setter Property="Fill" TargetName="RightGlyphForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphHoverForegroundFillKey}}" />
                            <Setter Property="Fill" TargetName="LeftGlyphBackground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphHoverBackgroundFillKey}}" />
                            <Setter Property="Fill" TargetName="RightGlyphBackground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphHoverBackgroundFillKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- ApplicationMenuFooterToolbar Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:ApplicationMenuFooterToolbar}">
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:ApplicationMenuFooterToolbar}">
                    <Grid>
                        <Border HorizontalAlignment="Stretch" Margin="0,1,0,1" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                            <ItemsPresenter HorizontalAlignment="Right" VerticalAlignment="Center" Width="Auto" Height="Auto" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- ToolbarBase Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:ToolbarBase}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:ToolbarBase}">
                    <Border>
                        <ItemsPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- QAT_CaptionAreaSeparator Style -->
    <!-- =================================================================== -->
    <!-- NA 13.1 Backstage - Moved here from the Scenic xaml and shared with that file -->
    <Style x:Key="QAT_CaptionAreaSeparator" TargetType="{x:Type Control}">
        <!-- NA 13.1 Backstage - this should not be focusable -->
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <igWindows:CardPanel>
                        <!-- Vertical Separator used to separate the QAT from the caption and the system menu icon. -->
                        <igWindows:CardPanel x:Name="VerticalSeparator" Width="3" Margin="4,10,4,6">
                            <Rectangle Width="3" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VerticalSeparatorNormalLightFillKey}}" SnapsToDevicePixels="true" RadiusX="1" RadiusY="1" />
                            <Rectangle Width="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VerticalSeparatorNormalDarkFillKey}}" SnapsToDevicePixels="true" HorizontalAlignment="Center" Margin="0,0,0,1" />
                        </igWindows:CardPanel>
                    </igWindows:CardPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- TabItemAreaToolbar Style   NA 14.1                                      -->
    <!-- =================================================================== -->

    <Style TargetType="{x:Type igRibbon:TabItemAreaToolbar}">
        <Setter Property="Padding" Value="5,3,2,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:TabItemAreaToolbar}">
                    <Border Margin="{TemplateBinding Padding}">
                        <DockPanel x:Name="ToolsAndButtonsArea" LastChildFill="True" VerticalAlignment="Bottom" HorizontalAlignment="Left" >
                            <igWindows:CardPanel x:Name="DropDownButtonsArea" DockPanel.Dock="Right" Width="Auto" Height="Auto" VerticalAlignment="Center" HorizontalAlignment="Right" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                <igRibbon:DropDownToggle x:Name="PART_OverflowButton" Margin="4,-2,0,0" Style="{StaticResource Button_QATOverflow}" Focusable="True" VerticalAlignment="Center" Width="13.286" Height="20" Content="OverflowButton" FocusVisualStyle="{x:Null}" Visibility="{Binding Path=OverflowButtonVisibility, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" IsDroppedDown="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />

                                <Popup StaysOpen="False" x:Name="PART_OverflowPopup" Placement="Bottom" Focusable="false" igWindows:PopupHelper.HandleMouseDownOnClose="True" IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" AllowsTransparency="True">
                                    <AdornerDecorator>
                                        <Border x:Name="TabItemAreaToolbarOverflowPanel" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowPanelCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowPanelBorderFillKey}}" BorderThickness="1,1,1,1" CornerRadius="2" Padding="2,3,2,1">
                                            <igRibbon:TabItemAreaToolbarOverflowPanel x:Name="PART_TabItemAreaToolbarOverflowPanel" />
                                        </Border>
                                    </AdornerDecorator>
                                </Popup>
                            </igWindows:CardPanel>

                            <Grid x:Name="ToolsArea" KeyboardNavigation.TabIndex="0" KeyboardNavigation.TabNavigation="Local" Background="{x:Null}" HorizontalAlignment="Left" Margin="7,0,0,0" VerticalAlignment="Center">
                                <igRibbon:TabItemAreaToolbarPanel x:Name="PART_TabItemAreaToolbarPanel" IsItemsHost="True" />
                            </Grid>

                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- AS 11/30/07 BR28788 -->
                        <Trigger Property="IsOverflowOpen" Value="False">
                            <Setter Property="PopupAnimation" TargetName="PART_OverflowPopup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" />
                        </Trigger>

                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- =================================================================== -->
    <!-- QuickAccessToolbar Style -->
    <!-- =================================================================== -->
    <!-- NA 13.1 Backstage - Moved here from the Scenic xaml and shared with that file -->
    <ControlTemplate TargetType="{x:Type igRibbon:QuickAccessToolbar}" x:Key="scenicQatTemplate">
        <igWindows:CardPanel x:Name="QatCardPanelBelowRibbon">
            <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                <DockPanel x:Name="ToolsAndButtonsArea" HorizontalAlignment="Left">
                    <Control x:Name="IconSeparator" Style="{StaticResource QAT_CaptionAreaSeparator}" DockPanel.Dock="Left" />
                    <Control x:Name="CaptionSeparator" Style="{StaticResource QAT_CaptionAreaSeparator}" DockPanel.Dock="Right" />
                    <igWindows:CardPanel x:Name="DropDownButtonsArea" HorizontalAlignment="Right" VerticalAlignment="Center" DockPanel.Dock="Right" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                        <ContentControl x:Name="PART_QuickCustomizeMenuSite" Height="22" VerticalAlignment="Center" Content="QuickCustomizeButtonSite" />
                        <igRibbon:DropDownToggle x:Name="PART_OverflowButton" Width="13" Height="22" VerticalAlignment="Center" Content="OverflowButton" Focusable="True" FocusVisualStyle="{x:Null}" IsDroppedDown="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource Button_QATOverflow}" Visibility="{Binding Path=OverflowButtonVisibility, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <Popup x:Name="PART_OverflowPopup" AllowsTransparency="True" Focusable="false" igWindows:PopupHelper.HandleMouseDownOnClose="True" IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" StaysOpen="False">
                            <AdornerDecorator>
                                <Border x:Name="QuickAccessToolbarOverflowPanel" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowPanelCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowPanelBorderFillKey}}" BorderThickness="1" CornerRadius="2" Padding="2,2,2,1" SnapsToDevicePixels="True">
                                    <igRibbon:QuickAccessToolbarOverflowPanel x:Name="PART_QuickAccessToolbarOverflowPanel" />
                                </Border>
                            </AdornerDecorator>
                        </Popup>
                    </igWindows:CardPanel>
                    <Grid x:Name="ToolsArea" HorizontalAlignment="Left" Margin="7,2,0,0" VerticalAlignment="Center" KeyboardNavigation.TabIndex="0" KeyboardNavigation.TabNavigation="Local">
                        <igRibbon:QuickAccessToolbarPanel x:Name="PART_QuickAccessToolbarPanel" Grid.Column="1" Grid.ColumnSpan="1" IsItemsHost="True" />
                    </Grid>
                </DockPanel>
            </Border>
        </igWindows:CardPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsOverflowOpen" Value="False">
                <Setter TargetName="PART_OverflowPopup" Property="PopupAnimation" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" />
            </Trigger>
            <Trigger Property="OverflowButtonVisibility" Value="Visible">
                <Setter TargetName="PART_QuickCustomizeMenuSite" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsBelowRibbon" Value="True">
                <Setter TargetName="ToolsAndButtonsArea" Property="Margin" Value="-4,0,0,0" />
                <Setter TargetName="DropDownButtonsArea" Property="Margin" Value="5,0,0,0" />
                <Setter TargetName="IconSeparator" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="CaptionSeparator" Property="Visibility" Value="Collapsed" />
            </Trigger>

            <!--Trigger targeted to Caption to handle the inactive style in the WPF Ribbon-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsWithinRibbonWindow), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="IconSeparator" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="CaptionSeparator" Property="Visibility" Value="Collapsed" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type igRibbon:QuickAccessToolbar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:QuickAccessToolbar}">
                    <igWindows:CardPanel x:Name="QatCardPanelBelowRibbon">
                        <Grid x:Name="QATBelowRibbonBackground" Visibility="Collapsed" Margin="0,2,0,0">
                            <Border SnapsToDevicePixels="True" x:Name="BorderShadow" Margin="1,1,0,0" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATBelowRibbonShadowFillKey}}" CornerRadius="2,2,2,2" />
                            <Border SnapsToDevicePixels="True" x:Name="BorderDark" Margin="0,0,1,1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATBelowRibbonBorderDarkFillKey}}" CornerRadius="3,3,3,3" />
                            <Border SnapsToDevicePixels="True" Margin="1,1,2,2" x:Name="BorderLight" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATBelowRibbonBorderLightFillKey}}" BorderThickness="0,0,0,0" CornerRadius="2,2,2,2" />
                            <Border SnapsToDevicePixels="True" Margin="2,2,2,2" x:Name="Center" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATBelowRibbonCenterFillKey}}" CornerRadius="1,1,2,2" />
                        </Grid>

                        <DockPanel x:Name="ToolsAndButtonsArea" LastChildFill="True" VerticalAlignment="Bottom" HorizontalAlignment="Left" Height="26" Margin="-13,1,0,1">
                            <igWindows:CardPanel x:Name="DropDownButtonsArea" DockPanel.Dock="Right" Margin="0,1,0,0" Width="Auto" Height="Auto" VerticalAlignment="Center" HorizontalAlignment="Right" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                <!-- AS 3/5/09 TFS13129 Added negative top margins so the button can be clicked 
                                    when the window is maximized just like the overflow button has. -->
                                <ContentControl x:Name="PART_QuickCustomizeMenuSite" Margin="2,-2,0,1" VerticalAlignment="Center" Width="Auto" Height="22" Content="QuickCustomizeButtonSite" />
                                <igRibbon:DropDownToggle x:Name="PART_OverflowButton" Margin="4,-2,0,0" Style="{StaticResource Button_QATOverflow}" Focusable="True" VerticalAlignment="Center" Width="13.286" Height="22" Content="OverflowButton" FocusVisualStyle="{x:Null}" Visibility="{Binding Path=OverflowButtonVisibility, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" IsDroppedDown="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />

                                <!-- AS 9/23/09 TFS2236 - Added HandleMouseDownOnClose -->
                                <Popup StaysOpen="False" x:Name="PART_OverflowPopup" Placement="Bottom" Focusable="false" igWindows:PopupHelper.HandleMouseDownOnClose="True" IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" AllowsTransparency="True">
                                    <AdornerDecorator>
                                        <Border x:Name="QuickAccessToolbarOverflowPanel" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowPanelCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowPanelBorderFillKey}}" BorderThickness="1,1,1,1" CornerRadius="2" Padding="2,3,2,1">
                                            <igRibbon:QuickAccessToolbarOverflowPanel x:Name="PART_QuickAccessToolbarOverflowPanel" />
                                        </Border>
                                    </AdornerDecorator>
                                </Popup>
                            </igWindows:CardPanel>

                            <Grid x:Name="ToolsArea" KeyboardNavigation.TabIndex="0" KeyboardNavigation.TabNavigation="Local" MinHeight="26" Background="{x:Null}" HorizontalAlignment="Left" Margin="7,0,0,0" VerticalAlignment="Center">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="ToolsAreaColumn0" Width="15" />
                                    <ColumnDefinition x:Name="ToolsAreaColumn1" Width="*" />
                                </Grid.ColumnDefinitions>
                                <Path Margin="0,0,0,0" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="15" Stretch="Fill" Opacity="1" IsHitTestVisible="False" Data="M 54,4 C54,4 39,4 39,4 39,4 39,5 39,5 47,9 52,18 52,27 52,28 52,29 52,30 52,30 54,30 54,30 " Fill="{x:Null}" x:Name="BorderLeft" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATBorderFillKey}}" StrokeEndLineCap="Square" StrokeStartLineCap="Square" />
                                <Path Margin="0,1,0,1" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="16" Stretch="Fill" Opacity="0.45" IsHitTestVisible="False" Data="M54,5 C54,5 40,5 40,5 40,5 38.063154,5 38.063154,5 47.119384,9.0364523 51,17 51,25 51,26 51,28 51,29 51,29 54,29 54,29" x:Name="InnerBorderLeft" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATInnerBorderFillKey}}" StrokeEndLineCap="Square" StrokeMiterLimit="10" StrokeStartLineCap="Square" />
                                <Path Margin="0,2,0,2" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="14" Stretch="Fill" Opacity="1" IsHitTestVisible="False" Data="M 54,6 C54,6 40,6 40,6 47,10 51,17 51,25 51,26 51,27 51,28 51,28 54,28 54,28 " x:Name="CenterBorderLeft" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATCenterBorderFillKey}}" StrokeEndLineCap="Square" StrokeStartLineCap="Square" />
                                <Path Margin="0,3,0,3" HorizontalAlignment="Right" VerticalAlignment="Stretch" Width="11.8" Stretch="Fill" Opacity="1" IsHitTestVisible="False" Data="M54,7 C54,7 43,7 43,7 43,7 39.693711,6.9889888 39.693711,6.9889888 46.935618,10.999991 50.617812,17.656245 50.617812,25 50.617812,26 50.617812,26 50.617812,27 50.617812,27 54,27 54,27" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATCenterFillKey}}" x:Name="CenterLeft" SnapsToDevicePixels="True" />
                                <Border Grid.Column="1" VerticalAlignment="Stretch" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATBorderFillKey}}" CornerRadius="0,14,12,0" SnapsToDevicePixels="True" IsHitTestVisible="False" x:Name="BorderRight" />
                                <Border Margin="0,1,0,1" Grid.Column="1" Grid.ColumnSpan="1" VerticalAlignment="Stretch" CornerRadius="0,12,11,0" SnapsToDevicePixels="True" x:Name="InnerBorderRight" IsHitTestVisible="False" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATInnerBorderFillKey}}" BorderThickness="0,1,1,1" Opacity="0.25" />
                                <Border x:Name="CenterBorderRight_CenterRight" Margin="0,2,0,2" VerticalAlignment="Stretch" Grid.Column="1" Grid.ColumnSpan="1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATCenterBorderFillKey}}" IsHitTestVisible="False" BorderThickness="0,1,1,1" CornerRadius="0,11,11,0" SnapsToDevicePixels="True" />
                                <igRibbon:QuickAccessToolbarPanel x:Name="PART_QuickAccessToolbarPanel" IsItemsHost="True" Margin="0,3,11,0" d:LayoutOverrides="Width" Grid.Column="1" Grid.ColumnSpan="1" />
                            </Grid>

                        </DockPanel>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <!-- AS 11/30/07 BR28788 -->
                        <Trigger Property="IsOverflowOpen" Value="False">
                            <Setter Property="PopupAnimation" TargetName="PART_OverflowPopup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" />
                        </Trigger>

                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter TargetName="CenterBorderRight_CenterRight" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATActiveGlassCenterFillKey}}" />
                            <Setter TargetName="CenterLeft" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATActiveGlassCenterFillKey}}" />
                            <Setter TargetName="InnerBorderLeft" Property="Stroke" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATActiveGlassInnerBorderFillKey}}" />
                            <Setter TargetName="InnerBorderRight" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATActiveGlassInnerBorderFillKey}}" />
                            <Setter TargetName="CenterBorderLeft" Property="Stroke" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATActiveGlassCenterBorderFillKey}}" />
                            <Setter TargetName="CenterBorderRight_CenterRight" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATActiveGlassCenterBorderFillKey}}" />
                            <Setter TargetName="BorderLeft" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="BorderRight" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ToolsAndButtonsArea" Property="Margin" Value="-15,1,0,0" />
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:XamRibbon}, 1}}" Value="True" />
                                <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="CenterBorderRight_CenterRight" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATActiveGlassCenterFillKey}}" />
                            <Setter TargetName="CenterLeft" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATActiveGlassCenterFillKey}}" />
                            <Setter TargetName="InnerBorderLeft" Property="Stroke" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATActiveGlassInnerBorderFillKey}}" />
                            <Setter TargetName="InnerBorderRight" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATActiveGlassInnerBorderFillKey}}" />
                            <Setter TargetName="CenterBorderLeft" Property="Stroke" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATActiveGlassCenterBorderFillKey}}" />
                            <Setter TargetName="CenterBorderRight_CenterRight" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATActiveGlassCenterBorderFillKey}}" />
                            <Setter TargetName="BorderLeft" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="BorderRight" Property="Visibility" Value="Collapsed" />
                            <!-- AS 10/10/08 TFS6044
                                 The difference in margin between active and deactive causes the qat to change size
                                 when the window is activated/deactivated.
                            <Setter TargetName="ToolsAndButtonsArea" Property="Margin" Value="-15,2,0,0"/>-->
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                                <Condition Binding="{Binding Path=IsWithinRibbonWindow, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:XamRibbon}, 1}}" Value="True" />
                                <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="CenterBorderRight_CenterRight" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATInactiveCenterFillKey}}" />
                            <Setter TargetName="CenterBorderRight_CenterRight" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATInactiveCenterBorderFillKey}}" />
                            <Setter TargetName="CenterLeft" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATInactiveCenterFillKey}}" />
                            <Setter TargetName="CenterBorderLeft" Property="Stroke" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATInactiveCenterBorderFillKey}}" />
                        </MultiDataTrigger>

                        <Trigger Property="OverflowButtonVisibility" Value="Visible">
                            <Setter TargetName="PART_QuickCustomizeMenuSite" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsBelowRibbon" Value="True">
                            <Setter TargetName="QatCardPanelBelowRibbon" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelBackgroundKey}}" />
                            <Setter TargetName="ToolsAreaColumn0" Property="Width" Value="0" />
                            <Setter TargetName="CenterBorderRight_CenterRight" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="CenterBorderRight_CenterRight" Property="BorderBrush" Value="{x:Null}" />
                            <Setter TargetName="InnerBorderRight" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="BorderRight" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ToolsAndButtonsArea" Property="Margin" Value="-4,2,0,0" />
                            <Setter TargetName="PART_QuickCustomizeMenuSite" Property="Margin" Value="-6,0,0,1" />
                            <Setter TargetName="QATBelowRibbonBackground" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="IsBelowRibbon" Value="False">
                            <Setter Property="Margin" Value="0,2,0,0" />
                            <Setter Property="VerticalAlignment" Value="Top" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!-- NA 13.1 Backstage -->
            <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).IsUsingApplicationMenu2010, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Template" Value="{StaticResource scenicQatTemplate}" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).IsUsingApplicationMenu2010, RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATBelowRibbonCenterFillKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATBelowRibbonBorderDarkFillKey}}" />
                <Setter Property="BorderThickness" Value="0,0,0,1" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).IsUsingApplicationMenu2010, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationMenu2010.IsOpen, RelativeSource={RelativeSource Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="IsEnabled" Value="False" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- QatPlaceholderTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:QatPlaceholderTool}">
        <Setter Property="Margin" Value="0,-1,0,1" />
    </Style>

    <!-- =================================================================== -->
    <!-- RibbonTabItem Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:RibbonTabItem}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:RibbonTabItem}" x:Name="ControlTemplate">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="TabMouseOver">
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TabHottrack" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00.0000" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TabHottrack" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="TabMouseOut" FillBehavior="Stop">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TabHottrack" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TabHottrack" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00.310000" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="ContextualTabMouseOver">
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ContextualTabHottrack" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00.0000" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ContextualTabHottrack" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="ContextualTabMouseOut" FillBehavior="Stop">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ContextualTabHottrack" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ContextualTabHottrack" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00.21000" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="TabMouseOverNotSelected">
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TabMouseOverNotSelected" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00.00000" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="TabMouseOverNotSelected" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="TabMouseOutNotSelected" FillBehavior="Stop">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TabMouseOverNotSelected" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="TabMouseOverNotSelected" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00.21000" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="Tab">
                        <Line x:Name="ContextualTabInTabAreaSeparatorLeft" HorizontalAlignment="Left" Stretch="Fill" Visibility="{TemplateBinding Converter={StaticResource BoolToVisConverter}, Property=IsFirstTabInContextualTabGroup}" SnapsToDevicePixels="True" StrokeThickness="1" Margin="0, -2, 0, 0" X1="0" X2="0" Y1="0" Y2="1" IsHitTestVisible="False" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabSeparatorFillKey}}" />

                        <Grid Visibility="Collapsed" x:Name="TabMouseOverNotSelected" Height="Auto" Opacity="0" Margin="3,0,4,0" SnapsToDevicePixels="True" d:IsHidden="True">
                            <Border x:Name="BorderDark" SnapsToDevicePixels="True" Background="{x:Null}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabInactiveHoverBorderDarkFillKey}}" BorderThickness="1,1,1,0" CornerRadius="4,4,0,0" Visibility="Visible" />
                            <Border x:Name="BorderLightANDCenterBackground" SnapsToDevicePixels="True" Margin="1,1,1,0" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabInactiveHoverCenterBackgroundFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabInactiveHoverBorderLightFillKey}}" BorderThickness="1,1,1,0" CornerRadius="3,3,0,0" Visibility="Visible" d:IsHidden="True" />
                            <Border x:Name="Center" SnapsToDevicePixels="True" Margin="2,2,2,0" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabInactiveHoverCenterFillKey}}" CornerRadius="2,2,0,0" Visibility="Visible" />
                            <Border x:Name="contextualHoverNotSelected" SnapsToDevicePixels="True" Background="{Binding Path=ContextualTabGroup.BaseBackColorResolved, Converter={StaticResource contextualTabBaseColorToHoverBrushConverter}, ConverterParameter=Silver, RelativeSource={x:Static RelativeSource.TemplatedParent}}" BorderBrush="#FFBDBEC1" BorderThickness="1,1,1,0" CornerRadius="4,4,0,0" Visibility="Collapsed" />
                        </Grid>

                        <Grid x:Name="TabSelected" Height="Auto" Visibility="Collapsed" Background="{x:Null}" Margin="0,0,0,-1" VerticalAlignment="Stretch">
                            <Border SnapsToDevicePixels="True" Margin="3,1,3,0" CornerRadius="4,3,0,0" x:Name="InnerBorder1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalInnerBorderFillKey}}" />
                            <Path Height="4" Width="4" Stretch="Fill" Opacity="1" Data="M 24,71 C24,71 24,72 24,72 24,73 23,74 22,74 22,74 21,74 21,74 21,74 21,75 21,75 21,75 22,75 22,75 22,75 23,75 23,75 24,75 25,74 25,73 25,73 25,71 25,71 25,71 24,71 24,71 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalLeftHighlightFillKey}}" SnapsToDevicePixels="True" x:Name="BottomLeftInnerFilet1" HorizontalAlignment="Left" Margin="1,0,0,0" VerticalAlignment="Bottom" />
                            <Path Height="4" Width="4" Stretch="Fill" Opacity="1" Data="M 28,75 C28,75 29,75 29,75 29,75 30,75 30,75 30,75 30,74 30,74 30,74 29,74 29,74 28,74 27,73 27,72 27,72 27,71 27,71 27,71 26,71 26,71 26,71 26,72 26,72 26,72 26,73 26,73 26,74 27,75 28,75 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalLeftHighlightFillKey}}" SnapsToDevicePixels="True" x:Name="BottomRightInnerFilet1" HorizontalAlignment="Right" Margin="0,0,1,0" VerticalAlignment="Bottom" />
                            <Border SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="4,1,4,3" x:Name="InnerSideHighlightLeft1" Width="3" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalLeftHighlightFillKey}}" BorderThickness="1,0,0,0" CornerRadius="2,0,0,0" />
                            <Border x:Name="InnerSideHighlightRight1" Width="3" BorderThickness="0,0,1,0" CornerRadius="2,2,0,0" SnapsToDevicePixels="True" HorizontalAlignment="Right" Margin="0,1,4,3" VerticalAlignment="Stretch" Height="Auto" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalRightHighlightFillKey}}" />
                            <Border SnapsToDevicePixels="True" Margin="4,1,4,0" BorderThickness="0,1,0,0" CornerRadius="2,2,0,0" x:Name="TopHighlight" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalTopHighlightFillKey}}" />
                            <Path Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Bottom" Height="4" Width="4" Stretch="Fill" Opacity="1" Data="M 24,71 C24,71 24,72 24,72 24,73 23,74 22,74 22,74 21,74 21,74 21,74 21,75 21,75 21,75 22,75 22,75 22,75 23,75 23,75 24,75 25,74 25,73 25,73 25,71 25,71 25,71 24,71 24,71 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}" SnapsToDevicePixels="True" x:Name="BottomLeftFilet1" />
                            <Path Margin="0,0,0,0" HorizontalAlignment="Right" VerticalAlignment="Bottom" Height="4" Width="4" Stretch="Fill" Opacity="1" Data="M 28,75 C28,75 29,75 29,75 29,75 30,75 30,75 30,75 30,74 30,74 30,74 29,74 29,74 28,74 27,73 27,72 27,72 27,71 27,71 27,71 26,71 26,71 26,71 26,72 26,72 26,72 26,73 26,73 26,74 27,75 28,75 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}" SnapsToDevicePixels="True" x:Name="BottomRightFilet1" />
                            <Border SnapsToDevicePixels="True" Margin="3,0,3,3" x:Name="OuterStroke1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}" BorderThickness="1,1,1,0" CornerRadius="3,3,0,0" />
                            <Border Margin="6,4,6,0" CornerRadius="1,1,0,0" SnapsToDevicePixels="True" x:Name="Center1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalCenterFillKey}}" />
                        </Grid>

                        <Grid x:Name="TabHottrack" Visibility="Collapsed" Opacity="0" d:IsHidden="True" Margin="0,0,0,0">
                            <Border Height="Auto" CornerRadius="2,0,1,0" SnapsToDevicePixels="True" Opacity="1" x:Name="OuterGlowLeft" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveHottrackOuterGlowFillKey}}" HorizontalAlignment="Left" Margin="1,0,0,0" Width="2" Padding="0,0,0,0" />
                            <Border Height="Auto" CornerRadius="0,2,0,1" SnapsToDevicePixels="True" Opacity="1" x:Name="OuterGlowRight" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveHottrackOuterGlowFillKey}}" Width="2" Padding="0,0,0,0" HorizontalAlignment="Right" Margin="0,0,1,0" />
                            <Border SnapsToDevicePixels="True" x:Name="HotTrackOuterStroke" BorderThickness="1,1,1,0" CornerRadius="3,3,0,0" Margin="3,0,3,0" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveHoverBorderFillKey}}" />
                            <Rectangle SnapsToDevicePixels="True" HorizontalAlignment="Right" Margin="0,3,4,0" x:Name="HoverSideHighlightRight" Width="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveHoverSideHighlightFillKey}}" />
                            <Rectangle SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="4,3,0,0" x:Name="HoverSideHighlightLeft" Width="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveHoverSideHighlightFillKey}}" />
                            <Border SnapsToDevicePixels="True" Margin="4,1,4,0" VerticalAlignment="Top" Height="2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveHoverTopHighlightFillKey}}" CornerRadius="3,3,0,0" x:Name="TopHighlight2" />
                        </Grid>

                        <Border x:Name="ContextualTabBase" Visibility="Collapsed" BorderThickness="1,1,1,0" CornerRadius="3,3,0,0" d:IsHidden="True" />
                        <!--JJD 12/11/07 moved setting to Trigger if IsInContextualTabGroup == true -->
                        <!--Background="{Binding Path=ContextualTabGroup.BaseBackColorResolved, Converter={StaticResource contextualTabBaseColorToHoverBrushConverter}, ConverterParameter=Black, RelativeSource={x:Static RelativeSource.TemplatedParent}}"-->

                        <Grid x:Name="ContextualTabSelected" Visibility="Collapsed" Margin="0,0,0,-1">
                            <Border SnapsToDevicePixels="True" CornerRadius="4,4,0,0" x:Name="InnerBorder2_Copy" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabActiveBackgroundFillKey}}" Margin="3,1,3,0" />
                            <Border SnapsToDevicePixels="True" CornerRadius="2,2,0,0" x:Name="InnerBorderContextual" Margin="3,1,3,0" Width="Auto" Height="Auto">
                                <!--JJD 12/11/07 moved setting to Trigger if IsInContextualTabGroup == true -->
                                <!--Background="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}">-->
                                <Border.OpacityMask>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#BF000000" Offset="0" />
                                        <GradientStop Color="#3FFFFFFF" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.OpacityMask>
                            </Border>
                            <Path Height="4" Width="4" Stretch="Fill" Opacity="1" Data="M 24,71 C24,71 24,72 24,72 24,73 23,74 22,74 22,74 21,74 21,74 21,74 21,75 21,75 21,75 22,75 22,75 22,75 23,75 23,75 24,75 25,74 25,73 25,73 25,71 25,71 25,71 24,71 24,71 z" SnapsToDevicePixels="True" x:Name="BottomLeftInnerFiletContextual" HorizontalAlignment="Left" Margin="1,0,0,0" VerticalAlignment="Bottom" />
                            <!--JJD 12/11/07 moved setting to Trigger if IsInContextualTabGroup == true -->
                            <!--Fill="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"-->
                            <Path Height="4" Width="4" Stretch="Fill" Opacity="1" Data="M 28,75 C28,75 29,75 29,75 29,75 30,75 30,75 30,75 30,74 30,74 30,74 29,74 29,74 28,74 27,73 27,72 27,72 27,71 27,71 27,71 26,71 26,71 26,71 26,72 26,72 26,72 26,73 26,73 26,74 27,75 28,75 z" SnapsToDevicePixels="True" x:Name="BottomRightInnerFiletContextual" HorizontalAlignment="Right" Margin="0,0,1,0" VerticalAlignment="Bottom" />
                            <!--JJD 12/11/07 moved setting to Trigger if IsInContextualTabGroup == true -->
                            <!--Fill="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"-->
                            <Border SnapsToDevicePixels="True" x:Name="InnerSideHighlightLeftContextual" Width="3" BorderThickness="1,0,0,0" CornerRadius="2,0,0,0" HorizontalAlignment="Left" Margin="4,1,0,3" />
                            <!--JJD 12/11/07 moved setting to Trigger if IsInContextualTabGroup == true -->
                            <!--BorderBrush="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"-->
                            <Border x:Name="InnerSideHighlightRightContextual" Width="3" BorderThickness="0,0,1,0" CornerRadius="2,2,0,0" SnapsToDevicePixels="True" Height="Auto" HorizontalAlignment="Right" Margin="0,1,4,3">
                                <!--JJD 12/11/07 moved setting to Trigger if IsInContextualTabGroup == true -->
                                <!--BorderBrush="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}">-->
                                <Border.OpacityMask>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#00000000" Offset="0" />
                                        <GradientStop Color="#FFFFFFFF" Offset="0.65" />
                                    </LinearGradientBrush>
                                </Border.OpacityMask>
                            </Border>
                            <Path Height="4" Width="4" Stretch="Fill" Opacity="1" Data="M 24,71 C24,71 24,72 24,72 24,73 23,74 22,74 22,74 21,74 21,74 21,74 21,75 21,75 21,75 22,75 22,75 22,75 23,75 23,75 24,75 25,74 25,73 25,73 25,71 25,71 25,71 24,71 24,71 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabActiveNormalBorderFillKey}}" SnapsToDevicePixels="True" x:Name="BottomLeftFilet2_Copy" HorizontalAlignment="Left" VerticalAlignment="Bottom" />
                            <Path Height="4" Width="4" Stretch="Fill" Opacity="1" Data="M 28,75 C28,75 29,75 29,75 29,75 30,75 30,75 30,75 30,74 30,74 30,74 29,74 29,74 28,74 27,73 27,72 27,72 27,71 27,71 27,71 26,71 26,71 26,71 26,72 26,72 26,72 26,73 26,73 26,74 27,75 28,75 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabActiveNormalBorderFillKey}}" SnapsToDevicePixels="True" x:Name="BottomRightFilet2_Copy" HorizontalAlignment="Right" VerticalAlignment="Bottom" />
                            <Border SnapsToDevicePixels="True" x:Name="OuterStroke2_Copy" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabActiveNormalBorderFillKey}}" BorderThickness="1,1,1,0" CornerRadius="3,3,0,0" Margin="3,0,3,3" />
                            <Border SnapsToDevicePixels="True" BorderThickness="0,0,0,0" CornerRadius="3,3,0,0" x:Name="TopHighlight1_Copy" Height="4" Margin="4,0,4,0" VerticalAlignment="Top" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabActiveTopHighlightFillKey}}" />
                        </Grid>

                        <Grid x:Name="ContextualTabHottrack" Visibility="Collapsed" Height="Auto" Margin="0,0,0,-1" Background="{x:Null}" Opacity="0">
                            <Border Height="Auto" CornerRadius="2,0,1,0" SnapsToDevicePixels="True" Opacity="0.50" x:Name="OuterGlowLeft_Copy" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveHottrackOuterGlowFillKey}}" Width="2" Padding="0,0,0,0" HorizontalAlignment="Left" Margin="1,0,0,1" />
                            <Border Height="Auto" CornerRadius="0,2,0,1" SnapsToDevicePixels="True" Opacity="0.50" x:Name="OuterGlowRight_Copy" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveHottrackOuterGlowFillKey}}" Width="2" Padding="0,0,0,0" HorizontalAlignment="Right" Margin="0,0,1,1" />
                            <Border SnapsToDevicePixels="True" Margin="3,1,3,0" CornerRadius="4,4,0,0" x:Name="InnerBorder2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabHoverCenterFillKey}}" />
                            <Path Height="4" Width="4" Stretch="Fill" Opacity="1" Data="M 24,71 C24,71 24,72 24,72 24,73 23,74 22,74 22,74 21,74 21,74 21,74 21,75 21,75 21,75 22,75 22,75 22,75 23,75 23,75 24,75 25,74 25,73 25,73 25,71 25,71 25,71 24,71 24,71 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabHoverLeftHighlightFillKey}}" SnapsToDevicePixels="True" x:Name="BottomLeftInnerFilet2" HorizontalAlignment="Left" Margin="1,0,0,0" VerticalAlignment="Bottom" />
                            <Path Height="4" Width="4" Stretch="Fill" Opacity="1" Data="M 28,75 C28,75 29,75 29,75 29,75 30,75 30,75 30,75 30,74 30,74 30,74 29,74 29,74 28,74 27,73 27,72 27,72 27,71 27,71 27,71 26,71 26,71 26,71 26,72 26,72 26,72 26,73 26,73 26,74 27,75 28,75 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabHoverLeftHighlightFillKey}}" SnapsToDevicePixels="True" x:Name="BottomRightInnerFilet2" HorizontalAlignment="Right" Margin="0,0,1,0" VerticalAlignment="Bottom" />
                            <Border SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="4,1,4,3" x:Name="InnerSideHighlightLeft2" Width="3" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabHoverLeftHighlightFillKey}}" BorderThickness="1,0,0,0" CornerRadius="2,0,0,0" />
                            <Border x:Name="InnerSideHighlightRight2" Width="3" BorderThickness="0,0,1,0" CornerRadius="2,2,0,0" SnapsToDevicePixels="True" HorizontalAlignment="Right" Margin="0,1,4,3" VerticalAlignment="Stretch" Height="Auto" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabHoverRightHighlightFillKey}}" />
                            <Path Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Bottom" Height="4" Width="4" Stretch="Fill" Opacity="1" Data="M 24,71 C24,71 24,72 24,72 24,73 23,74 22,74 22,74 21,74 21,74 21,74 21,75 21,75 21,75 22,75 22,75 22,75 23,75 23,75 24,75 25,74 25,73 25,73 25,71 25,71 25,71 24,71 24,71 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}" SnapsToDevicePixels="True" x:Name="BottomLeftFilet2" />
                            <Path Margin="0,0,0,0" HorizontalAlignment="Right" VerticalAlignment="Bottom" Height="4" Width="4" Stretch="Fill" Opacity="1" Data="M 28,75 C28,75 29,75 29,75 29,75 30,75 30,75 30,75 30,74 30,74 30,74 29,74 29,74 28,74 27,73 27,72 27,72 27,71 27,71 27,71 26,71 26,71 26,71 26,72 26,72 26,72 26,73 26,73 26,74 27,75 28,75 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}" SnapsToDevicePixels="True" x:Name="BottomRightFilet2" />
                            <Border SnapsToDevicePixels="True" Margin="3,0,3,3" x:Name="OuterStroke2" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabContextualHoverBorderFillKey}}" BorderThickness="1,1,1,0" CornerRadius="3,3,0,0" />
                            <Border SnapsToDevicePixels="True" Margin="4,1,4,0" BorderThickness="0,0,0,0" CornerRadius="3,3,0,0" x:Name="TopHighlight1" VerticalAlignment="Top" Height="3" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabHoverTopHighlightFillKey}}" />
                            <Border SnapsToDevicePixels="True" Margin="4,1,4,0" BorderThickness="0,0,0,0" CornerRadius="3,3,0,0" x:Name="ContextualTopHighlight" VerticalAlignment="Top" Height="3" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabActiveTopHighlightFillKey}}" />
                        </Grid>
                        <ContentPresenter x:Name="tabItemText" Margin="6,4,6,3" Content="{TemplateBinding Header, Converter={StaticResource stringWithoutMnemonicsConverter}}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" VerticalAlignment="Center" HorizontalAlignment="Stretch" TextBlock.TextAlignment="Center" Width="Auto" igRibbon:XamRibbon.KeyTipPlacementType="Caption" igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True" igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}" igWindows:ClippedTextToolTipService.AncestorTypeForToolTip="{x:Type igRibbon:RibbonTabItem}" TextElement.Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabNotSelectedTextFillKey}}" />

                        <Line x:Name="TabSeparator" HorizontalAlignment="Right" Stretch="Fill" Opacity="{TemplateBinding igWindows:TabItemPanel.TabSeparatorOpacity}" StrokeThickness="1" X1="0" X2="0" Y1="0" Y2="1" IsHitTestVisible="False" SnapsToDevicePixels="True" Margin="0, -2, 0, 0" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabSeparatorFillKey}}" />

                        <Line x:Name="ContextualTabInTabAreaSeparatorRight" HorizontalAlignment="Right" Stretch="Fill" Visibility="{TemplateBinding Converter={StaticResource BoolToVisConverter}, Property=IsLastTabInContextualTabGroup}" StrokeThickness="1" Margin="0, -2, 0, 0" X1="0" X2="0" Y1="0" Y2="1" IsHitTestVisible="False" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabSeparatorFillKey}}" />

                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- IsInContextualTabGroup -->
                        <Trigger Property="IsInContextualTabGroup" Value="True">
                            <Setter TargetName="Center" Property="Background" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolved, Converter={StaticResource contextualTabBaseColorToHoverBrushConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                            <Setter TargetName="BottomLeftInnerFiletContextual" Property="Fill" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                            <Setter TargetName="BottomRightInnerFiletContextual" Property="Fill" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                            <Setter TargetName="InnerSideHighlightLeftContextual" Property="BorderBrush" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                            <Setter TargetName="InnerSideHighlightRightContextual" Property="BorderBrush" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                            <Setter TargetName="ContextualTabBase" Property="Background" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolved, Converter={StaticResource contextualTabBaseColorToHoverBrushConverter}, ConverterParameter=Black, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                            <Setter TargetName="InnerBorderContextual" Property="Background" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                            <Setter TargetName="BorderLightANDCenterBackground" Property="Background" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolved, Converter={StaticResource contextualTabBaseColorToHoverBrushConverter}, ConverterParameter=Black, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                            <Setter TargetName="BorderLightANDCenterBackground" Property="BorderBrush" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolved, Converter={StaticResource contextualTabBaseColorToHoverBrushConverter}, ConverterParameter=Black, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                        </Trigger>

                        <!-- IsSelected && !IsInContextualTabGroup -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsInContextualTabGroup" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="TabSelected" Value="Visible" />
                            <Setter Property="TextElement.Foreground" TargetName="tabItemText" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}" />
                        </MultiTrigger>

                        <!-- IsSelected && IsInContextualTabGroup && !XamRibbon.IsActive -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsInContextualTabGroup" Value="True" />
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="ContextualTabSelected" Value="Visible" />
                            <Setter Property="TextElement.Foreground" TargetName="tabItemText" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}" />
                        </MultiTrigger>

                        <!-- IsMouseOverTab && !IsSelected -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOverTab, RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard x:Name="TabMouseOverNotSelected_BeginStoryboard" Storyboard="{StaticResource TabMouseOverNotSelected}" />
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard x:Name="TabMouseOutNotSelected_BeginStoryboard" Storyboard="{StaticResource TabMouseOutNotSelected}" />
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>

                        <!-- IsMouseOverTab && IsSelected && !XamRibbon.IsActive -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOverTab" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource TabMouseOver}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="TabMouseOut_BeginStoryboard" Storyboard="{StaticResource TabMouseOut}" />
                            </MultiTrigger.ExitActions>
                            <Setter Property="TextElement.Foreground" TargetName="tabItemText" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}" />
                        </MultiTrigger>

                        <!-- IsMouseOverTab && IsSelected && IsInContextualTabGroup -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOverTab" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsInContextualTabGroup" Value="True" />
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource ContextualTabMouseOver}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="ContextualTabMouseOut_BeginStoryboard" Storyboard="{StaticResource ContextualTabMouseOut}" />
                            </MultiTrigger.ExitActions>
                            <Setter Property="TextElement.Foreground" TargetName="tabItemText" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}" />
                        </MultiTrigger>

                        <!-- IsSelected && XamRibbon.IsActive -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContextualTabHottrack" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContextualTabHottrack" Property="Opacity" Value="1" />
                            <Setter Property="TextElement.Foreground" TargetName="tabItemText" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}" />
                        </MultiTrigger>

                        <!-- !IsSelected && XamRibbon.IsActive -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard x:Name="ActivatedNotSelected_BeginStoryboard" Storyboard="{StaticResource TabMouseOverNotSelected}" />
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard x:Name="DeactivatedNotSelected_BeginStoryboard" Storyboard="{StaticResource TabMouseOutNotSelected}" />
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>

                        <!-- IsSelected && IsInContextualTabGroup && !XamRibbon.IsActive -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="True" />
                                <Condition Property="IsInContextualTabGroup" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContextualTabSelected" Property="Visibility" Value="Visible" />
                            <Setter Property="TextElement.Foreground" TargetName="tabItemText" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}" />
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsInContextualTabGroup" Value="True">
                <Setter Property="igWindows:XamTabControl.TabPriority" Value="10" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- RibbonGroup Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:RibbonGroup}">
        <!--<Setter Property="Background" Value="{StaticResource RibbonGroupBackground}"/>
<Setter Property="BorderBrush" Value="{StaticResource RibbonGroupBorder}"/>
<Setter Property="BorderThickness" Value="1"/>
<Setter Property="Margin" Value="0,0,4,0"/>-->
        <Setter Property="SmallImage">
            <Setter.Value>
                <DrawingImage>
                    <DrawingImage.Drawing>
                        <DrawingGroup>
                            <GeometryDrawing Brush="#00FFFFFF">
                                <GeometryDrawing.Geometry>
                                    <RectangleGeometry Rect="0,0,11,11" />
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                            <DrawingGroup Opacity="0.67058823529411771">
                                <GeometryDrawing Brush="#FFFFFFFF" Geometry="M1,1C1,1 10,1 10,1 10,1 10,10 10,10 10,10 1,10 1,10 1,10 1,1 1,1z M0,0C0,0 0,11 0,11 0,11 11,11 11,11 11,11 11,0 11,0 11,0 0,0 0,0z" />
                            </DrawingGroup>
                            <DrawingGroup>
                                <DrawingGroup.Transform>
                                    <MatrixTransform Matrix="1,0,0,1,3,3" />
                                </DrawingGroup.Transform>
                                <GeometryDrawing Brush="#FFFFFFFF" Geometry="M5,0 C5,0 4.2857132,0 4.2857132,0 4.2857132,0 0,5 0,5 0,5 0.7142868,5 0.7142868,5 0.7142868,5 5,0 5,0 z" />
                            </DrawingGroup>
                        </DrawingGroup>
                    </DrawingImage.Drawing>
                </DrawingImage>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:RibbonGroup}">
                    <ControlTemplate.Resources>
                        <!-- Fade-In Animations -->
                        <Storyboard x:Key="RibbonGroup_FadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Center" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BorderHover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="RibbonGroup_IsInContextual_FadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IsInContextualCenter" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BorderHover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PART_Header_FadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Header_Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="InnerBorder_FadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="InnerBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="borderLight_FadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="borderLight" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <!-- Fade-Out Animations -->
                        <Storyboard x:Key="RibbonGroup_FadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Center" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BorderHover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="RibbonGroup_IsInContextual_FadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IsInContextualCenter" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BorderHover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="PART_Header_FadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Header_Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="InnerBorder_FadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="InnerBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="borderLight_FadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="borderLight" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid><AdornerDecorator>
                    <igWindows:CardPanel>
                        <ContentControl x:Name="PART_RibbonGroupSite" Style="{StaticResource PlainContentControlStyle}" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}">
                            <igWindows:CardPanel x:Name="groupPanel" Background="{TemplateBinding Background}">
                                <Grid Opacity="0" x:Name="Center">
                                    <Border HorizontalAlignment="Stretch" Margin="1,1,2,2" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverCenterFillKey}}" CornerRadius="2,2,2,2" />
                                </Grid>
                                <Grid Opacity="0" x:Name="IsInContextualCenter">
                                    <Border HorizontalAlignment="Stretch" Margin="1,1,2,2" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupIsInContextualHoverCenterFillKey}}" CornerRadius="2,2,2,2" />
                                </Grid>
                                <Border x:Name="borderLight" HorizontalAlignment="Stretch" Margin="1,1,0,0" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupNormalBorderLightFillKey}}" BorderThickness="1" CornerRadius="3" SnapsToDevicePixels="True" />
                                <Grid Margin="2,2,1,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <DockPanel LastChildFill="True" KeyboardNavigation.TabNavigation="Local">
                                        <Grid Width="Auto" Height="Auto" DockPanel.Dock="Bottom" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                            <Border x:Name="Header_Background" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupNormalBottomGradientFillKey}}" Margin="-1,0,1,2" HorizontalAlignment="Stretch" CornerRadius="0,0,2,2" SnapsToDevicePixels="True" />
                                            <Border x:Name="Header_Hover" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverBottomGradientFillKey}}" Margin="-1,0,0,0" HorizontalAlignment="Stretch" CornerRadius="0,0,2,2" SnapsToDevicePixels="True" Opacity="0" />
                                            <DockPanel LastChildFill="True" d:IsHidden="True">
                                                <ContentControl x:Name="DialogBoxLauncher" Height="15" DockPanel.Dock="Right" Content="{TemplateBinding DialogBoxLauncherTool}" Visibility="Hidden" Focusable="False" />
                                                <TextBlock x:Name="PART_Caption" Text="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}" Grid.Row="1" Margin="5,0,5,3" VerticalAlignment="Bottom" HorizontalAlignment="Stretch" TextTrimming="CharacterEllipsis" igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True" igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}" TextAlignment="Center" Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCaptionTextFillKey}}" />
                                            </DockPanel>
                                        </Grid>
                                        <ItemsPresenter x:Name="PART_Items" Margin="2,0,4,1" HorizontalAlignment="Center" KeyboardNavigation.TabIndex="0" KeyboardNavigation.TabNavigation="Local" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </DockPanel>
                                </Grid>
                                <Border x:Name="InnerBorder" HorizontalAlignment="Stretch" Margin="1,1,2,2" BorderBrush="#FFFFFFFF" BorderThickness="1" CornerRadius="3" SnapsToDevicePixels="True" Opacity="0" />
                                <Border x:Name="borderDarkNormal" Margin="0,0,1,1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupNormalBorderDarkFillKey}}" BorderThickness="1" CornerRadius="3" SnapsToDevicePixels="True" />
                                <Grid x:Name="BorderHover" Opacity="0" SnapsToDevicePixels="True">
                                    <Border x:Name="borderDarkHover" Margin="0,0,1,1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverBorderFillKey}}" BorderThickness="1" CornerRadius="3" SnapsToDevicePixels="True" />
                                </Grid>
                            </igWindows:CardPanel>
                        </ContentControl>
                        <igRibbon:DropDownToggle x:Name="PART_RibbonGroupButton" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" IsDroppedDown="{Binding Path=IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource {x:Static igRibbon:RibbonGroup.CollapsedGroupButtonStyleKey}}" Visibility="Collapsed" />
                        <!-- AS 9/23/09 TFS2236 - Added HandleMouseDownOnClose -->
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" StaysOpen="False" igWindows:PopupHelper.HandleMouseDownOnClose="True" PlacementTarget="{Binding ElementName=PART_RibbonGroupButton}" Placement="Bottom" IsOpen="{Binding Path=IsOpen, RelativeSource={RelativeSource TemplatedParent}}">
                            <luna:SystemDropShadowChrome x:Name="Shdw" Color="#3F000000" Margin="0,0,5,5">
                                <AdornerDecorator KeyboardNavigation.DirectionalNavigation="Cycle">
                                    <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerFillKey}}" CornerRadius="3,3,3,3">
                                        <ContentControl x:Name="PART_PopupRibbonGroupSite" Style="{StaticResource PlainContentControlStyle}" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" />
                                    </Border>
                                </AdornerDecorator>
                            </luna:SystemDropShadowChrome>
                        </Popup>
                    </igWindows:CardPanel>
                    </AdornerDecorator></Grid>
                    <ControlTemplate.Triggers>
                        <!-- AS 11/30/07 BR28788 -->
                        <Trigger Property="IsOpen" Value="False">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <!-- JM BR28878 12-04-07 - Do not execute the trigger actions if we are at designtime -->
                                <Condition Property="compModel:DesignerProperties.IsInDesignMode" Value="False" />
                                <Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="True" />
                                <!-- AS BR33990 6/18/08 -->
                                <!--<Condition Property="IsMouseOver" SourceName="groupPanel" Value="True"/>-->
                                <!-- AS BR28885 12/5/07 - Added sourcename to only prevent highlight when something within the group has capture -->
                                <!--<Condition Property="IsMouseCaptureWithin" SourceName="groupPanel" Value="False"/>-->
                                <Condition Property="HighlightContent" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard x:Name="RibbonGroup_IsInContextual_FadeIn_BeginStoryboard" Storyboard="{StaticResource RibbonGroup_IsInContextual_FadeIn}" />
                                <BeginStoryboard x:Name="PART_Header_IsInContextual_FadeIn_BeginStoryboard" Storyboard="{StaticResource PART_Header_FadeIn}" />
                                <BeginStoryboard x:Name="Contextual_InnerBorder_FadeIn_BeginStoryboard" Storyboard="{StaticResource InnerBorder_FadeIn}" />
                                <BeginStoryboard x:Name="Contextual_borderLight_FadeOut_BeginStoryboard" Storyboard="{StaticResource borderLight_FadeOut}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="RibbonGroup_IsInContextual_FadeIn_BeginStoryboard" />
                                <StopStoryboard BeginStoryboardName="PART_Header_IsInContextual_FadeIn_BeginStoryboard" />
                                <BeginStoryboard x:Name="RibbonGroup_IsInContextual_FadeOut_BeginStoryboard" Storyboard="{StaticResource RibbonGroup_IsInContextual_FadeOut}" />
                                <BeginStoryboard x:Name="PART_Header_IsInContextual_FadeOut_BeginStoryboard" Storyboard="{StaticResource PART_Header_FadeOut}" />
                                <BeginStoryboard x:Name="Contextual_InnerBorder_FadeOut_BeginStoryboard" Storyboard="{StaticResource InnerBorder_FadeOut}" />
                                <BeginStoryboard x:Name="Contextual_borderLight_FadeIn_BeginStoryboard" Storyboard="{StaticResource borderLight_FadeIn}" />
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <!-- JM BR28878 12-04-07 - Do not execute the trigger actions if we are at designtime -->
                                <Condition Property="compModel:DesignerProperties.IsInDesignMode" Value="False" />
                                <Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="False" />
                                <!-- AS BR33990 6/18/08 -->
                                <!--<Condition Property="IsMouseOver" SourceName="groupPanel" Value="True"/>-->
                                <!-- AS BR28885 12/5/07 - Added sourcename to only prevent highlight when something within the group has capture -->
                                <!--<Condition Property="IsMouseCaptureWithin" SourceName="groupPanel" Value="False"/>-->
                                <Condition Property="HighlightContent" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard x:Name="RibbonGroup_FadeIn_BeginStoryboard" Storyboard="{StaticResource RibbonGroup_FadeIn}" />
                                <BeginStoryboard x:Name="PART_Header_FadeIn_BeginStoryboard" Storyboard="{StaticResource PART_Header_FadeIn}" />
                                <BeginStoryboard x:Name="InnerBorder_FadeIn_BeginStoryboard" Storyboard="{StaticResource InnerBorder_FadeIn}" />
                                <BeginStoryboard x:Name="borderLight_FadeOut_BeginStoryboard" Storyboard="{StaticResource borderLight_FadeOut}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="RibbonGroup_FadeIn_BeginStoryboard" />
                                <StopStoryboard BeginStoryboardName="PART_Header_FadeIn_BeginStoryboard" />
                                <BeginStoryboard x:Name="RibbonGroup_FadeOut_BeginStoryboard" Storyboard="{StaticResource RibbonGroup_FadeOut}" />
                                <BeginStoryboard x:Name="PART_Header_FadeOut_BeginStoryboard" Storyboard="{StaticResource PART_Header_FadeOut}" />
                                <BeginStoryboard x:Name="InnerBorder_FadeOut_BeginStoryboard" Storyboard="{StaticResource InnerBorder_FadeOut}" />
                                <BeginStoryboard x:Name="borderLight_FadeIn_BeginStoryboard" Storyboard="{StaticResource borderLight_FadeIn}" />
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="IsCollapsed" Value="True">
                            <Setter Property="Visibility" TargetName="PART_RibbonGroupButton" Value="Visible" />
                            <Setter Property="igRibbon:RibbonGroup.Caption" TargetName="PART_RibbonGroupButton" Value="{Binding Path=Caption, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="igRibbon:RibbonGroup.SmallImage" TargetName="PART_RibbonGroupButton" Value="{Binding Path=SmallImage, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Visibility" TargetName="PART_RibbonGroupSite" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsActive" Value="True">
                            <Setter Property="Background" TargetName="PART_RibbonGroupButton" Value="Yellow" />
                        </Trigger>
                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter Property="Style" TargetName="PART_RibbonGroupButton" Value="{DynamicResource {x:Static igRibbon:RibbonGroup.QuickAccessToolbarGroupButtonStyleKey}}" />
                            <Setter Property="Visibility" TargetName="PART_RibbonGroupButton" Value="Visible" />
                            <Setter Property="igRibbon:RibbonGroup.Caption" TargetName="PART_RibbonGroupButton" Value="{Binding Path=Caption, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="igRibbon:RibbonGroup.SmallImage" TargetName="PART_RibbonGroupButton" Value="{Binding Path=SmallImage, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Visibility" TargetName="PART_RibbonGroupSite" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasDialogBoxLauncherTool" Value="True">
                            <Setter Property="Visibility" TargetName="DialogBoxLauncher" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="2,0,0,0" />
        <Style.Triggers>
            <Trigger Property="Location" Value="QuickAccessToolbar">
                <Setter Property="Margin" Value="0" />
                <Setter Property="Focusable" Value="True" />
            </Trigger>
            <Trigger Property="IsCollapsed" Value="True">
                <Setter Property="Focusable" Value="True" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- RadioButtonTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:RadioButtonTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template" Value="{StaticResource RibbonButtonToolTemplate}" />

        <Style.Triggers>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />
                </MultiDataTrigger.Conditions>
                <!--<Setter Property="BitmapEffect" Value="{igWindows:SafeOuterGlow GlowColor=White, GlowSize=10, Opacity=0.6}" />-->
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <!--8/19/11 TFS83576
										<Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Maximized" />-->
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VistaWindowMaximizedTextFillKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
            </MultiDataTrigger>

        </Style.Triggers>

    </Style>

    <!-- =================================================================== -->
    <!-- ToggleButtonTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:ToggleButtonTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template" Value="{StaticResource RibbonButtonToolTemplate}" />

        <Style.Triggers>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />
                </MultiDataTrigger.Conditions>
                <!--<Setter Property="BitmapEffect" Value="{igWindows:SafeOuterGlow GlowColor=White, GlowSize=10, Opacity=0.6}" />-->
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <!-- 8/19/11 TFS83576
										<Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Maximized" />-->
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VistaWindowMaximizedTextFillKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
            </MultiDataTrigger>

        </Style.Triggers>

    </Style>

    <!-- =================================================================== -->
    <!-- CheckBoxTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:CheckBoxTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:CheckBoxTool}">
                    <Grid Width="Auto">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <igWindows:AutoDisabledImage x:Name="image" Width="16" Height="16" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Visibility="{Binding Path=HasImage, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" Source="{TemplateBinding ImageResolved}" />
                        <Grid x:Name="CheckBox" VerticalAlignment="Center" Grid.Column="1" Margin="3,0,3,0" igRibbon:XamRibbon.KeyTipPlacementType="CheckIndicator">
                            <Rectangle Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxNormalOuterBoxCenterFillKey}}" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxNormalOuterBoxBorderFillKey}}" HorizontalAlignment="Left" VerticalAlignment="Top" Width="13" Height="13" x:Name="CheckBox_OuterBox" SnapsToDevicePixels="True" />
                            <Rectangle Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxNormalInnerBoxCenterFillKey}}" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxNormalInnerBoxBorderFillKey}}" HorizontalAlignment="Left" Margin="2,2,0,0" VerticalAlignment="Top" Width="9" Height="9" x:Name="CheckBox_InnerBox" SnapsToDevicePixels="True" />
                            <Grid Visibility="Hidden" Margin="0,0,0,0" x:Name="CheckMark">
                                <Path Height="9.661" Width="10.137" Stretch="Fill" Opacity="0.8" Data="M2.6673452,7.8617508 C2.6673452,7.8617508 5.817048,10.192734 5.817048,10.192734 5.817048,10.192734 9.5967099,4.4942121 9.5967099,4.4942121" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckmarkBackgroundFillKey}}" StrokeThickness="3" SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="1.138,0.965,0,0" x:Name="Background" VerticalAlignment="Top" />
                                <Path Height="8.915" Width="8.66" Stretch="Fill" Opacity="1" Data="M1.6839831,7.7438574 C1.6839831,7.7438574 5.8697866,10.85053 5.8697866,10.85053 5.8697866,10.85053 10.540217,1.6301305 10.540217,1.6301305" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckmarkForegroundFillKey}}" StrokeThickness="2" SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="1.855,1.465,0,0" x:Name="Foreground" VerticalAlignment="Top" />
                            </Grid>
                        </Grid>
                        <Rectangle x:Name="activeRect" Visibility="Collapsed" Grid.Column="2" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2" SnapsToDevicePixels="true" />
                        <!-- 8/19/11 TFS83576 -->
                        <igRibbon:OuterGlowDecorator x:Name="textGlow" Grid.Column="2" Margin="2,1,4,1" VerticalAlignment="Center" HorizontalAlignment="Left">
                            <ContentPresenter x:Name="text" Content="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}" TextBlock.TextAlignment="Left" />
                        </igRibbon:OuterGlowDecorator>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Location" Value="ApplicationMenu" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </MultiTrigger>

                        <Trigger Property="Location" Value="Ribbon">
                            <Setter Property="HorizontalAlignment" Value="Left" />
                        </Trigger>

                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
                            <Setter Property="Visibility" Value="Collapsed" TargetName="image" />
                        </Trigger>

                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />

                            <!-- AS 12/1/09 TFS24129 - Default margin when in the footer toolbar -->
                            <Setter Property="Margin" Value="6,0,0,0" />
                        </Trigger>

                        <Trigger Property="IsActive" Value="True">
                            <Setter Property="Fill" TargetName="CheckBox_InnerBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxHoverInnerBoxCenterFillKey}}" />
                            <Setter Property="Stroke" TargetName="CheckBox_OuterBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxHoverOuterBoxBorderFillKey}}" />
                            <Setter Property="Stroke" TargetName="CheckBox_InnerBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxHoverInnerBoxBorderFillKey}}" />
                            <Setter Property="Visibility" TargetName="activeRect" Value="Visible" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="CheckBox_InnerBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxHoverInnerBoxCenterFillKey}}" />
                            <Setter Property="Stroke" TargetName="CheckBox_OuterBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxHoverOuterBoxBorderFillKey}}" />
                            <Setter Property="Stroke" TargetName="CheckBox_InnerBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxHoverInnerBoxBorderFillKey}}" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="CheckMark" Value="Visible" />
                            <Setter Property="Stroke" TargetName="CheckBox_InnerBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxPressedInnerBoxBorderFillKey}}" />
                            <Setter Property="Fill" TargetName="CheckBox_InnerBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxPressedInnerBoxCenterFillKey}}" />
                            <Setter Property="Stroke" TargetName="CheckBox_OuterBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxPressedOuterBoxBorderFillKey}}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="CheckMark" Value="Visible" />
                            <Setter Property="Stroke" TargetName="CheckBox_InnerBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxPressedInnerBoxBorderFillKey}}" />
                            <Setter Property="Fill" TargetName="CheckBox_InnerBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxPressedInnerBoxCenterFillKey}}" />
                            <Setter Property="Stroke" TargetName="CheckBox_OuterBox" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxPressedOuterBoxBorderFillKey}}" />
                        </MultiTrigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="CheckMark" Value="Visible" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckBox_InnerBox" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxIndeterminateCenterFillKey}}" />
                            <Setter TargetName="CheckBox_InnerBox" Property="Stroke" Value="Transparent" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="CheckBox_OuterBox" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxDisabledOuterBoxCenterFillKey}}" />
                            <Setter TargetName="CheckBox_OuterBox" Property="Stroke" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxDisabledOuterBoxBorderFillKey}}" />
                            <Setter TargetName="CheckBox_InnerBox" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxDisabledInnerBoxCenterFillKey}}" />
                            <Setter TargetName="CheckBox_InnerBox" Property="Stroke" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckBoxDisabledInnerBoxBorderFillKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
                        </Trigger>

                        <Trigger Property="igRibbon:XamRibbon.HideAccessKey" Value="False">
                            <Setter TargetName="text" Property="RecognizesAccessKey" Value="True" />
                            <Setter TargetName="text" Property="Content" Value="{Binding Path=Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                        </Trigger>

                        <!-- AS 1/4/08 BR29210 -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                                <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                                <!-- 8/19/11 TFS83576
																<Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />-->
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <!-- 8/19/11 TFS83576
														<Setter TargetName="text" Property="BitmapEffect" Value="{igWindows:SafeOuterGlow GlowColor=White, GlowSize=10, Opacity=0.6}" />-->
                            <Setter TargetName="textGlow" Property="IsGlowVisible" Value="True" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                                <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <!-- 8/19/11 TFS83576
																<Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Maximized" />-->
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VistaWindowMaximizedTextFillKey}}" />
                        </MultiDataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- ButtonTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:ButtonTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template" Value="{StaticResource RibbonButtonToolTemplate}" />
        <Style.Triggers>
            <Trigger Property="igRibbon:RibbonGroup.IsDialogBoxLauncherTool" Value="True">
                <Setter Property="Template" Value="{DynamicResource {x:Static igRibbon:RibbonGroup.DialogBoxLauncherToolTemplateKey}}" />
            </Trigger>

            <!--<Trigger Property="Location" Value="QuickAccessToolbar">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}"/>
			</Trigger>-->

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />
                </MultiDataTrigger.Conditions>
                <!--<Setter Property="BitmapEffect" Value="{igWindows:SafeOuterGlow GlowColor=White, GlowSize=10, Opacity=0.6}" />-->
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <!-- 8/19/11 TFS83576
										<Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Maximized" />-->
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VistaWindowMaximizedTextFillKey}}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
            </MultiDataTrigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </Trigger>

        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- Ribbon's XamTabControl Style -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:XamRibbon.RibbonTabControlStyleKey}" TargetType="{x:Type igWindows:XamTabControl}">
        <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Continue" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igWindows:XamTabControl}">
                    <Grid Margin="0" ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="gridCol0" />
                            <ColumnDefinition Width="0" x:Name="gridCol1" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" x:Name="gridRow0" />
                            <RowDefinition Height="*" x:Name="gridRow1" />
                        </Grid.RowDefinitions>
                        <Border SnapsToDevicePixels="True" BorderBrush="{x:Null}" x:Name="ContentPanel" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Continue" Grid.Row="1" Visibility="Visible" Margin="0,-1,0,0" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelBackgroundKey}}">
                            <Grid Margin="1,0,0,1" SnapsToDevicePixels="True">
                                <Border x:Name="BlueThemeOnlyOuterBorder" SnapsToDevicePixels="True" CornerRadius="5" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderLightFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}" BorderThickness="1,1,1,1" Margin="0,1,0,0">
                                    <Border x:Name="innerContentBorder" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerFillKey}}" CornerRadius="4" Margin="1,0,1,1" Padding="1,0,2,0">
                                        <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Height="Auto" Width="Auto" Margin="0,-1,0,-2">
                                            <Border x:Name="ContextualFill" CornerRadius="5,5,5,5" Visibility="Visible" SnapsToDevicePixels="True">
                                                <!--JJD 12/11/07 moved setting to Trigger if IsInContextualTabGroup == true -->
                                                <!--<Border.Background>
													<SolidColorBrush Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolved, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
												</Border.Background>-->
                                                <Border.OpacityMask>
                                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                        <GradientStop Color="#1E000000" Offset="0" />
                                                        <GradientStop Color="#00FFFFFF" Offset="0.51" />
                                                    </LinearGradientBrush>
                                                </Border.OpacityMask>
                                            </Border>
                                            <ContentPresenter ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" Height="{TemplateBinding TabItemContentHeight}" x:Name="PART_SelectedContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentTemplate="{TemplateBinding SelectedContentTemplate}" Content="{TemplateBinding SelectedContent}" />
                                        </Grid>
                                    </Border>
                                </Border>
                            </Grid>
                        </Border>
                        <DockPanel x:Name="PART_HeaderArea" Panel.ZIndex="1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelBackgroundKey}}" SnapsToDevicePixels="True">
                            <ContentPresenter x:Name="PreTabItemContent" DockPanel.Dock="Left" 
                                              Content="{TemplateBinding PreTabItemContent}" 
                                              ContentTemplate="{TemplateBinding PreTabItemContentTemplate}" 
                                              ContentTemplateSelector="{TemplateBinding PreTabItemContentTemplateSelector}" 
								                KeyboardNavigation.DirectionalNavigation="Continue"
                                                KeyboardNavigation.TabIndex="0" 
                                              />
                            <ContentPresenter x:Name="PostTabItemContent" DockPanel.Dock="Right" 
                                              Content="{TemplateBinding PostTabItemContent}" 
                                              ContentTemplate="{TemplateBinding PostTabItemContentTemplate}" 
                                              ContentTemplateSelector="{TemplateBinding PostTabItemContentTemplateSelector}" 
                                                KeyboardNavigation.TabIndex="2" 
								                KeyboardNavigation.TabNavigation="Continue"
                                              />
                            <igWindows:XamPager x:Name="PART_TabItemScrollViewer" Focusable="False" CanContentScroll="True" 
                                                KeyboardNavigation.TabIndex="1" 
                                                KeyboardNavigation.TabNavigation="Local" 
                                                KeyboardNavigation.DirectionalNavigation="Continue" 
                                                ScrollLeftButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollLeftButtonStyleKey}}" 
                                                ScrollRightButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollRightButtonStyleKey}}" 
                                                ScrollViewer.VerticalScrollBarVisibility="{TemplateBinding TabItemVerticalScrollBarVisibility}" 
                                                ScrollViewer.HorizontalScrollBarVisibility="{TemplateBinding TabItemHorizontalScrollBarVisibility}">
                                <ItemsPresenter x:Name="PART_TabHeaderPanel" Margin="2,1,2,0" KeyboardNavigation.TabNavigation="Once" />
                            </igWindows:XamPager>
                        </DockPanel>
                        <!-- AS 9/23/09 TFS2236 - Added HandleMouseDownOnClose -->
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" igWindows:PopupHelper.HandleMouseDownOnClose="True" StaysOpen="False" IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Width="{TemplateBinding PreferredDropDownExtent}" CustomPopupPlacementCallback="{TemplateBinding PreferredDropDownPlacementCallback}" Placement="Custom" SnapsToDevicePixels="True">
                            <AdornerDecorator>
                                <Border SnapsToDevicePixels="True" BorderThickness="0,0,0,0" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Continue" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelBackgroundKey}}">
                                    <Border SnapsToDevicePixels="True" BorderBrush="{TemplateBinding Border.BorderBrush}" BorderThickness="{TemplateBinding Border.BorderThickness}" Margin="1,0,1,4">
                                        <Border SnapsToDevicePixels="True" Background="{TemplateBinding Panel.Background}" BorderThickness="1,1,1,1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}" CornerRadius="3,3,3,3" Padding="2,0,2,0">
                                            <ContentPresenter ContentSource="SelectedContent" Margin="{TemplateBinding Control.Padding}" Height="{TemplateBinding TabItemContentHeight}" Name="PART_SelectedContentHostMinimized" HorizontalAlignment="{Binding ElementName=PART_SelectedContentHost, Path=HorizontalAlignment}" VerticalAlignment="{Binding ElementName=PART_SelectedContentHost, Path=VerticalAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" ContentTemplate="{TemplateBinding TabControl.SelectedContentTemplate}" Content="{x:Null}" />
                                        </Border>
                                    </Border>
                                </Border>
                            </AdornerDecorator>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDropDownOpen" Value="False">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="Fade" />
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GrayTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMinimized" Value="True">
                            <Setter Property="Content" TargetName="PART_SelectedContentHostMinimized" Value="{Binding Path=SelectedContent, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Visibility" TargetName="ContentPanel" Value="Collapsed" />
                            <Setter Property="Content" TargetName="PART_SelectedContentHost" Value="{x:Null}" />
                            <!-- AS 7/20/11 TFS80142 -->
                            <Setter Property="Grid.RowSpan" TargetName="PART_HeaderArea" Value="2" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.IsSelectedItemInContextualTabGroup" Value="True">
                            <Setter Property="Background" TargetName="innerContentBorder">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FFF0F0F0" Offset="0" />
                                        <GradientStop Color="#FFFFFFFF" Offset="0.396" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Background" TargetName="BlueThemeOnlyOuterBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerInContextualBorderFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="innerContentBorder" Value="#3fFFFFFF" />
                            <Setter Property="Background" TargetName="ContextualFill" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                            <Setter Property="Visibility" TargetName="ContextualFill" Value="Visible" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).IsUsingApplicationMenu2010, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="BlueThemeOnlyOuterBorder" Property="CornerRadius" Value="0 5 5 5" />
                            <Setter TargetName="innerContentBorder" Property="CornerRadius" Value="0 4 4 4" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PreTabItemContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Rectangle Width="{x:Static igRibbon:XamRibbon.ApplicationMenuButtonWidth}" Height="18" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerFillKey}}" />
        <Setter Property="MaximumSizeToFitAdjustment" Value="18" />
        <Setter Property="MinimumTabExtent" Value="28" />

        <Style.Triggers>
            <!-- NA 13.1 Backstage -->
            <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).IsUsingApplicationMenu2010, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="PreTabItemContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Rectangle Width="56" Height="19" />
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- TextEditorTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:TextEditorTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="4,0,4,0" />
        <Setter Property="Margin" Value="1,0,1,0" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:TextEditorTool}">
                    <!-- JM 09-05-18 TFS254718 - Change the StackPanel to a grid and bind the Width of the column containing the ComboBox to the EditAreaWidth property. -->
                    <Grid Background="#00000000">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="{TemplateBinding Property=EditAreaWidth}"/>
                        </Grid.ColumnDefinitions>
                        <igWindows:AutoDisabledImage Grid.Column="0" Width="16" Height="16" x:Name="Image" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Visibility="Collapsed" Source="{TemplateBinding igRibbon:TextEditorTool.ImageResolved}" />
                        <ContentPresenter x:Name="Caption" Grid.Column="1" Margin="0,-1,5,0" Visibility="{Binding Path=(igRibbon:ButtonTool.HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}" />
                        <Border x:Name="MainBorder" Grid.Column="2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" BorderThickness="1,1,1,1" SnapsToDevicePixels="True" Width="{TemplateBinding EditAreaWidth}">
                            <Grid>
                                <TextBlock x:Name="TextBlock" Margin="2,-1,0,0" Text="{TemplateBinding DisplayText}" TextWrapping="{TemplateBinding TextWrapping}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextAlignment="{TemplateBinding TextAlignmentResolved}" />
                                <!-- SSP 6/24/11 TFS57835 Added InputMethod.PreferredImeState template binding. This property needs to be set
                                                    on the element that is given focus in the editors SetFocusToFocusSite.-->
                                <!-- SSP 11/14/11 TFS95730 - Added InputMethod.IsInputMethodEnabled template binding. -->
                                <TextBox Name="PART_FocusSite" AcceptsReturn="{TemplateBinding AcceptsReturn}" AcceptsTab="{TemplateBinding AcceptsTab}" Margin="0,-1,0,0" Padding="0,0,0,0" BorderThickness="0,0,0,0" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" TextWrapping="{TemplateBinding TextWrapping}" HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextAlignment="{TemplateBinding TextAlignmentResolved}" IsReadOnly="{TemplateBinding ReadOnly}" MaxLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ValueConstraint.MaxLength, Mode=OneWay}" Background="Transparent" BorderBrush="Transparent" ContextMenu="{TemplateBinding ContextMenu}" Visibility="Collapsed" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}" InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}" InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <!-- JJD 12/11/07 Added condition to check if we are in a menu before doing the FindAncestor for ToolMenuItem to prevent binding errors -->
                                <Condition Binding="{Binding Path=Location, RelativeSource={RelativeSource Self}, Converter={x:Static igRibbon:ToolLocationToIsInMenuConverter.Instance}}" Value="True" />
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:ToolMenuItem}, 1}}" Value="True" />
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Caption" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </MultiDataTrigger>

                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
                            <Setter TargetName="TextBlock" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                        </Trigger>

                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />

                            <!-- AS 12/1/09 TFS24129 - Default margin when in the footer toolbar -->
                            <Setter Property="Margin" Value="6,0,0,0" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledCenterFillKey}}" />
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledBorderFillKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="MainBorder">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                            <Setter Property="IsTabStop" Value="False" />
                            <Setter TargetName="PART_FocusSite" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_FocusSite" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter TargetName="TextBlock" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter TargetName="MainBorder" Property="CornerRadius" Value="0" />
                        </Trigger>
                        <Trigger Property="Location" Value="Ribbon">
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.HideAccessKey" Value="False">
                            <Setter TargetName="Caption" Property="RecognizesAccessKey" Value="True" />
                            <Setter TargetName="Caption" Property="Content" Value="{Binding Path=Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="igRibbon:RibbonToolHelper.SizingMode" Value="ImageOnly">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="EditTemplate">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igRibbon:TextEditorTool}">
					<StackPanel Orientation="Horizontal">
						<igWindows:AutoDisabledImage Width="16" Height="16" x:Name="Image"
							 igRibbon:XamRibbon.KeyTipPlacementType="SmallImage"
							 Visibility="Collapsed"
							 Source="{TemplateBinding igRibbon:TextEditorTool.ImageResolved}"
						 />
						<TextBlock x:Name="Caption"
						Margin="0,-1,5,0"
						Visibility="{Binding Path=(igRibbon:ButtonTool.HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}"
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
						Text="{TemplateBinding Caption}"/>
						<Border
							x:Name="MainBorder"
							Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}"
							BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}"
							BorderThickness="1,1,1,1"
							Width="{TemplateBinding EditAreaWidth}"
							SnapsToDevicePixels="True"
							>
							-->
        <!-- SSP 10/3/07 BR25672 Took the Margin="{TemplateBinding Padding}" code out of Border element above
								and instead added Padding="{TemplateBinding Padding}" to the TextBox below. Padding should not
								be outside the border and the background. It should be inside the border and around the editor's
								contents.-->
        <!--
							<TextBox
								Name="PART_FocusSite"
								Margin="-3,-1,0,0"
								Padding="0,0,0,0"
								BorderThickness="0,0,0,0"
								Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
								TextWrapping="{TemplateBinding TextWrapping}"
								HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
								VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
								HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								TextAlignment="{TemplateBinding TextAlignmentResolved}"
								IsReadOnly="{TemplateBinding ReadOnly}"
								MaxLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ValueConstraint.MaxLength, Mode=OneWay}"
								Background="Transparent"
								BorderBrush="Transparent"
								Foreground="{TemplateBinding Foreground}"
								ContextMenu="{TemplateBinding ContextMenu}"
							/>
						</Border>
					</StackPanel>
					-->
        <!-- 
SSP 6/6/07 BR23366
Added trigger that sets IsTabStop to False based on IsInEditMode setting.
We need this in order to make the Tab and Shift+Tab navigation work properly.
Apparently presense of nested textbox causes Shift+Tab to misbehave and cause
the framwork to give focus to the parent ContentPresenter if the editor
is inside a HeaderedContentControl. This is similar to what inbox ComboBox
does.
-->
        <!--
					<ControlTemplate.Triggers>
						<Trigger Property="IsInEditMode" Value="True">
							<Setter Property="IsTabStop" Value="False" />
						</Trigger>
						<Trigger Property="Location" Value="Ribbon">
							<Setter TargetName="Image"  Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}"/>
							<Setter TargetName="Caption"  Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}"/>
						</Trigger>
						<Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
							<Setter TargetName="Image"  Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}"/>
							<Setter TargetName="Caption"  Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}"/>
						</Trigger>
						<Trigger Property="Location" Value="QuickAccessToolbar">
							<Setter TargetName="Caption"  Property="Visibility" Value="Collapsed"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>-->
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- SSP 8/18/10 TFS34483 -->
    <!--  _________________________ Spin Button Style  _______________________________________  -->
    <Style x:Key="spinButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnNormalCenterFillKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnNormalOuterBorderFillKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnGlyphNormalForegroundFillKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="3,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.SpinButtonCornerRadiusKey}}">
                        <Grid>
                            <Border x:Name="innerBd" BorderBrush="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnNormalInnerBorderFillKey}}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.SpinButtonCornerRadiusKey}}" />
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="innerBd" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackInnerBorderFillKey}}" />
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackOuterBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnPressedOuterBorderFillKey}}" />
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnPressedCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="innerBd" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnPressedInnerBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- MaskedEditorTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:MaskedEditorTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="4,0,4,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="SpinButtonStyle" Value="{StaticResource spinButtonStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:MaskedEditorTool}">
                    <!-- JM 09-05-18 TFS254718 - Change the StackPanel to a grid and bind the Width of the column containing the ComboBox to the EditAreaWidth property. -->
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="{TemplateBinding Property=EditAreaWidth}"/>
                        </Grid.ColumnDefinitions>
                        <igWindows:AutoDisabledImage Grid.Column="0" Width="16" Height="16" x:Name="Image" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Visibility="Collapsed" Source="{TemplateBinding igRibbon:TextEditorTool.ImageResolved}" />
                        <ContentPresenter x:Name="Caption" Grid.Column="1" Margin="0,-1,5,0" Visibility="{Binding Path=(igRibbon:ButtonTool.HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}" />
                        <Border x:Name="MainBorder" Grid.Column="2" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" BorderThickness="1,1,1,1" Width="{TemplateBinding EditAreaWidth}">
                            <!--SSP 10/1/09 NAS10.1 - Spin Buttons - Enclosed in dock panel element so we can display spin buttons-->
                            <DockPanel>
                                <!--SSP 10/1/09 NAS10.1 - Spin Buttons -->
                                <Grid x:Name="PART_SpinButtons" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}" Margin="0,1">
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="1" />
                                        <RowDefinition Height="*" />
                                    </Grid.RowDefinitions>
                                    <RepeatButton Style="{TemplateBinding SpinButtonStyle}" Focusable="false" Command="{x:Static igEditors:MaskedEditorCommands.SpinUp}" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.IncreaseGlyphKey}}" />
                                    <RepeatButton Style="{TemplateBinding SpinButtonStyle}" Focusable="false" Command="{x:Static igEditors:MaskedEditorCommands.SpinDown}" Grid.Row="2" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DecreaseGlyphKey}}" />
                                </Grid>
                                <Grid>
                                    <TextBlock x:Name="TextBlock" Margin="2,-1,0,0" Text="{TemplateBinding DisplayText}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                    <!-- SSP 3/29/12 IME - TFS107196 - Enclosed the SectionsList in a CardPanel and added ImeTextBox. 
													Also renamed SectionsList element to 'SectionsList' from 'PART_FocusSite' and assigned
													that name to 'CardPanel'
												-->
                                    <igWindows:CardPanel x:Name="PART_FocusSite" Visibility="Collapsed">
                                        <!-- SSP 6/24/11 TFS57835 Added InputMethod.PreferredImeState template binding. This property needs to be set
                                                        on the element that is given focus in the editors SetFocusToFocusSite.-->
                                        <!-- SSP 11/16/11 TFS95805 - Added InputMethod.IsInputMethodEnabled template binding. -->
                                        <igEditors:SectionsList x:Name="SectionsList" Margin="2,-1,0,0" ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Sections, Mode=OneWay}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FlowDirection="LeftToRight" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}" InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}" InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}" />
                                        <!-- SSP 3/29/12 IME - TFS107196 -->
                                        <TextBox x:Name="PART_InputTextBox" Visibility="Collapsed" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" TextAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource horizToTextAlignmentConverter}}" Background="Transparent" BorderBrush="Transparent" BorderThickness="0,0,0,0" Foreground="{TemplateBinding Foreground}" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}" InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}" />
                                    </igWindows:CardPanel>
                                </Grid>
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <!-- JJD 12/11/07 Added condition to check if we are in a menu before doing the FindAncestor for ToolMenuItem to prevent binding errors -->
                                <Condition Binding="{Binding Path=Location, RelativeSource={RelativeSource Self}, Converter={x:Static igRibbon:ToolLocationToIsInMenuConverter.Instance}}" Value="True" />
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:ToolMenuItem}, 1}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Caption" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </MultiDataTrigger>

                        <!-- SSP 3/29/12 IME - TFS107196 - Added the trigger that sets Visibility on sections 
														list and text box based on isTextBoxEntryEnabled. -->
                        <Trigger Property="IsTextBoxEntryEnabled" Value="True">
                            <Setter TargetName="SectionsList" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_InputTextBox" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
                            <Setter TargetName="TextBlock" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                        </Trigger>

                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />

                            <!-- AS 12/1/09 TFS24129 - Default margin when in the footer toolbar -->
                            <Setter Property="Margin" Value="6,0,0,0" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledCenterFillKey}}" />
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledBorderFillKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True" SourceName="MainBorder">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                            <Setter TargetName="PART_FocusSite" Property="Visibility" Value="Visible" />
                            <Setter TargetName="TextBlock" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="SectionsList" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter TargetName="PART_InputTextBox" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="HasCaption" Value="True">
                            <Setter TargetName="Caption" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter TargetName="MainBorder" Property="CornerRadius" Value="0" />
                        </Trigger>
                        <Trigger Property="Location" Value="Ribbon">
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.HideAccessKey" Value="False">
                            <Setter TargetName="Caption" Property="RecognizesAccessKey" Value="True" />
                            <Setter TargetName="Caption" Property="Content" Value="{Binding Path=Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="igRibbon:RibbonToolHelper.SizingMode" Value="ImageOnly">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="EditTemplate">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igRibbon:MaskedEditorTool}">
					<StackPanel Orientation="Horizontal">
						<TextBlock x:Name="Caption"
						Margin="0,-1,5,0"
						Visibility="Collapsed"
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
						Text="{TemplateBinding Caption}"/>
						<Border x:Name="MainBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Width="{TemplateBinding EditAreaWidth}"
							>
							-->
        <!-- SSP 10/3/07 BR25672 Took the following code out of Border element above
									since we are setting that value on the SectionsList element below.
									We don't want to substract the padding twice
						    Margin="{TemplateBinding Padding}"-->
        <!--
							<igEditors:SectionsList
								x:Name="PART_FocusSite"
								Margin="2,-1,0,0"
								Foreground="{TemplateBinding Foreground}"
								ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Sections, Mode=OneWay}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								FlowDirection="LeftToRight"
							/>
						</Border>
					</StackPanel>
					<ControlTemplate.Triggers>
						<Trigger Property="HasCaption" Value="True">
							<Setter TargetName="Caption" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsEmbedded" Value="False">
							<Setter TargetName="MainBorder" Property="CornerRadius" Value="0" />
						</Trigger>
						-->
        <!-- 
SSP 6/6/07 BR23366
Added trigger that sets IsTabStop to False based on IsInEditMode setting.
We need this in order to make the Tab and Shift+Tab navigation work properly.
Apparently presense of nested textbox causes Shift+Tab to misbehave and cause
the framwork to give focus to the parent ContentPresenter if the editor
is inside a HeaderedContentControl. This is similar to what inbox ComboBox
does.
-->
        <!--
						<Trigger Property="IsInEditMode" Value="True">
							<Setter Property="IsTabStop" Value="False" />
							<Setter Property="Background" TargetName="MainBorder" Value="#FFFFFFFF"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>-->
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
            </MultiTrigger>
            <Trigger Property="IsInEditMode" Value="True">
                <!-- SSP 5/13/10 TFS30701 - Commented out setting of ClipToBounds which I believe was
                added to clip the caret element and so instead added the necessary code to clip the caret
                in XamMaskedEditor.ArrangeOverride. This bug-fix was done to make the UIElement.Effect work. -->
                <!--<Setter Property="ClipToBounds" Value="True" />-->
                <!--
// SSP 3/15/07 BR21086 BR20704
// Do this through the style via a trigger so when the masked editor is not in edit mode, it draws 
// the focus rect. For example, in DataPresenter when the cell exits edit mode via Escape key, the
// editor retains focus and is not in edit mode. In such a case, it should draw focus rect.
-->
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- GalleryItemPresenter Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:GalleryItemPresenter}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <!--<Setter Property="Margin" Value="2"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:GalleryItemPresenter}">
                    <Grid x:Name="borderEntireItem" Background="#00ffffff">
                        <Rectangle Opacity="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,0,0,0" RadiusX="2.8000000000000003" RadiusY="2.8000000000000003" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterHoverBorderDarkFillKey}}" SnapsToDevicePixels="True" Visibility="Hidden" x:Name="BorderDark" />
                        <Rectangle Opacity="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="1,1,1,1" RadiusX="2.75" RadiusY="2.75" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterHoverBorderLightFillKey}}" SnapsToDevicePixels="True" Visibility="Hidden" x:Name="BorderLight" />
                        <Rectangle SnapsToDevicePixels="True" Visibility="Hidden" Margin="1,1,1,1" x:Name="BottomOverlay" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterHoverBottomOverlayGradientKey}}" />
                        <Rectangle SnapsToDevicePixels="True" Visibility="Hidden" Margin="2,2,2,2" x:Name="CenterBorder" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterHoverCenterFillKey}}" RadiusX="1" RadiusY="1" />
                        <Border SnapsToDevicePixels="True" Visibility="Hidden" Margin="3,3,3,3" x:Name="Center" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterSelectedCenterFillKey}}" CornerRadius="1,1,1,1" />
                        <!-- JM BR27280 10-10-07 -->
                        <!--<Grid Margin="2,2,2,2" >-->
                        <Grid Margin="2,2,2,2" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Border x:Name="borderImage" Grid.Row="0" Grid.Column="0" BorderBrush="Transparent" BorderThickness="2" CornerRadius="3">
                                <igWindows:AutoDisabledImage x:Name="image" Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Item.Image}" igWindows:Utilities.SnapElementToDevicePixels="True" />
                            </Border>
                            <TextBlock x:Name="text" Grid.Row="1" Grid.Column="0" Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" Visibility="{TemplateBinding TextVisibility}" TextAlignment="{TemplateBinding HorizontalTextAlignmentResolved}" VerticalAlignment="{TemplateBinding VerticalTextAlignmentResolved}" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Item.Text}" />
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!-- Text visible and above Image-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TextPlacementResolved" Value="AboveImage" />
                                <Condition Property="TextVisibility" Value="Visible" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="borderImage" Property="Grid.Row" Value="1" />
                            <Setter TargetName="text" Property="Grid.Row" Value="0" />
                        </MultiTrigger>

                        <!-- Text visible and left of Image-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TextPlacementResolved" Value="LeftOfImage" />
                                <Condition Property="TextVisibility" Value="Visible" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="borderImage" Property="Grid.Column" Value="1" />
                            <Setter TargetName="text" Property="Grid.Row" Value="0" />
                        </MultiTrigger>

                        <!-- Text visible and right of Image-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TextPlacementResolved" Value="RightOfImage" />
                                <Condition Property="TextVisibility" Value="Visible" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="text" Property="Grid.Column" Value="1" />
                            <Setter TargetName="text" Property="Grid.Row" Value="0" />
                        </MultiTrigger>

                        <!-- Set highlight on the appropriate part of the Item when selected (i.e., IsSelected = true).  Check SelectionDisplayModeResolved 
to determine what part of the item to highlight -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="SelectionDisplayModeResolved" Value="HighlightImageOnly" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="borderImage" Property="BorderBrush">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0,0" StartPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0" Color="Gold" />
                                            <GradientStop Offset="1" Color="Orange" />
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>

                        <!-- Selected State-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="SelectionDisplayModeResolved" Value="HighlightEntireItem" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible" />
                            <Setter Property="Fill" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterSelectedBorderDarkFillKey}}" />
                            <Setter Property="Fill" TargetName="BorderLight" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterSelectedBorderLightFillKey}}" />
                            <Setter Property="Visibility" TargetName="BorderLight" Value="Visible" />
                            <Setter Property="Margin" TargetName="BorderLight" Value="1,1,1,0" />
                            <Setter Property="Margin" TargetName="BorderDark" Value="0,0,0,1" />
                            <Setter Property="Fill" TargetName="BottomOverlay" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterSelectedBottomOverlayGradientKey}}" />
                            <Setter Property="Visibility" TargetName="BottomOverlay" Value="Visible" />
                            <Setter Property="Margin" TargetName="BottomOverlay" Value="1,1,1,0" />
                            <Setter Property="Visibility" TargetName="CenterBorder" Value="Visible" />
                            <Setter Property="Fill" TargetName="CenterBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterSelectedBorderLightFillInnerKey}}" />
                            <Setter Property="Visibility" TargetName="Center" Value="Visible" />
                            <Setter Property="Margin" TargetName="Center" Value="3,3,3,2" />
                        </MultiTrigger>

                        <!-- Mouseover state-->
                        <!-- Set highlight when active (i.e., IsSelected = false and IsMouseOver = true) -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False" />
                                <!-- JJD 11/20/07 - BR27066
								     Trigger off IsHighlighted property instead of IsMouseOver to support keyboard navigation -->
                                <!--<Condition Property="IsMouseOver" Value="True"/>-->
                                <Condition Property="IsHighlighted" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible" />
                            <Setter Property="Visibility" TargetName="BorderLight" Value="Visible" />
                            <Setter Property="Visibility" TargetName="BottomOverlay" Value="Visible" />
                            <Setter Property="Visibility" TargetName="CenterBorder" Value="Visible" />
                            <Setter TargetName="text" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsInPreviewArea" Value="True">
                <Setter Property="Focusable" Value="False" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- GalleryToolPreviewPresenter Style -->
    <!-- =================================================================== -->

    <!-- Preview Button Styles -->
    <Style x:Key="GalleryToolPreviewPresenter_ScrollUpButton" BasedOn="{x:Null}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid x:Name="GalleryToolPreviewPresenter_ScrollUpButton" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                        <Border Width="Auto" Height="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonDisabledBorderDarkFillKey}}" CornerRadius="0,3,0,0" x:Name="border" SnapsToDevicePixels="True" IsHitTestVisible="True" />
                        <Border CornerRadius="0,2,0,0" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollUpButtonDisabledBorderLightFillKey}}" Margin="1,1,1,1" x:Name="border1" SnapsToDevicePixels="True" IsHitTestVisible="True" />
                        <Border Margin="2,2,2,2" CornerRadius="0,1,0,0" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollUpButtonDisabledCenterFillKey}}" x:Name="border2" SnapsToDevicePixels="True" IsHitTestVisible="True">
                            <Grid Opacity="1" x:Name="GalleryToolPreviewPresenter_EnabledArrowUp" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Path Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="4" Width="8" Stretch="Fill" Opacity="1" Data="M 0,4 C0,4 8,4 8,4 8,4 4,0 4,0 4,0 0,4 0,4 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterDisabledArrowBackgroundFillKey}}" SnapsToDevicePixels="True" />
                                <Path Margin="1,1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="3" Width="6" Stretch="Fill" Opacity="1" Data="M 1,4 C1,4 7,4 7,4 7,4 4,1 4,1 4,1 1,4 1,4 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterDisabledArrowForegroundFillKey}}" SnapsToDevicePixels="True" x:Name="path" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonNormalBorderFillKey}}" />
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonNormalInnerBorderFillKey}}" />
                            <Setter Property="Background" TargetName="border2" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonNormalCenterFillKey}}" />
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterEnabledArrowForegroundFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverBorderFillKey}}" />
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverInnerBorderFillKey}}" />
                            <Setter Property="Background" TargetName="border2" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverCenterFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollUpButtonPressedBorderFillKey}}" />
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollUpButtonPressedInnerBorderFillKey}}" />
                            <Setter Property="Background" TargetName="border2" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollUpButtonPressedCenterFillKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GalleryToolPreviewPresenter_ScrollDownButton" BasedOn="{x:Null}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid x:Name="GalleryToolPreviewPresenter_ScrollDownButton" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                        <Rectangle SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonDisabledBorderDarkFillKey}}" x:Name="rectangle" />
                        <Rectangle Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollDownButtonDisabledBorderLightFillKey}}" SnapsToDevicePixels="True" Margin="1,0,1,0" x:Name="rectangle1" />
                        <Border Margin="2,1,2,1" x:Name="border" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollDownButtonDisabledCenterFillKey}}" SnapsToDevicePixels="True">
                            <Grid Opacity="1" x:Name="GalleryToolPreviewPresenter_EnabledArrowDown" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Path x:Name="ArrowBackground" Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="4" Width="8" Stretch="Fill" Opacity="1" Data="M 0,0 C0,0 8,0 8,0 8,0 4,4 4,4 4,4 0,0 0,0 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterDisabledArrowBackgroundFillKey}}" SnapsToDevicePixels="True" ClipToBounds="False" />
                                <Path x:Name="ArrowForeground" Margin="1,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="3" Width="6" Stretch="Fill" Opacity="1" Data="M 1,0 C1,0 7,0 7,0 7,0 4,3 4,3 4,3 1,0 1,0 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterDisabledArrowForegroundFillKey}}" SnapsToDevicePixels="True" ClipToBounds="False" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonNormalBorderFillKey}}" />
                            <Setter Property="Fill" TargetName="rectangle1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonNormalInnerBorderFillKey}}" />
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonNormalCenterFillKey}}" />
                            <Setter Property="Fill" TargetName="ArrowForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterEnabledArrowForegroundFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Margin" TargetName="rectangle1" Value="1,1,1,0" />
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverCenterFillKey}}" />
                            <Setter Property="Fill" TargetName="rectangle1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverInnerBorderFillKey}}" />
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollUpButtonPressedBorderFillKey}}" />
                            <Setter Property="Margin" TargetName="rectangle1" Value="1,0,1,0" />
                            <Setter Property="Fill" TargetName="rectangle1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollDownButtonPressedInnerBorderFillKey}}" />
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollDownButtonPressedCenterFillKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GalleryToolPreviewPresenter_DropDownButton" TargetType="{x:Type ButtonBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid x:Name="GalleryToolPreviewPresenter_DropDownButton" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                        <Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonNormalBorderFillKey}}" CornerRadius="0,0,3,0" x:Name="border" />
                        <Border SnapsToDevicePixels="True" CornerRadius="0,0,2,0" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonNormalInnerBorderFillKey}}" Margin="1,1,1,1" x:Name="border1" />
                        <Border SnapsToDevicePixels="True" CornerRadius="0,0,1,0" Margin="2,2,2,2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonNormalCenterFillKey}}" x:Name="border2">
                            <Grid HorizontalAlignment="Center" VerticalAlignment="Center" Background="#00ffffff">
                                <Path SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterDropDownButtonIconBackgroundFillKey}}" Stretch="None" Data="M0,0L7,0 3.5,4z" d:LayoutOverrides="Height" HorizontalAlignment="Center" Margin="0,3,0,0" VerticalAlignment="Top" />
                                <Path SnapsToDevicePixels="True" d:LayoutOverrides="Height" HorizontalAlignment="Center" Margin="0,3,0,0" VerticalAlignment="Top" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterDropDownButtonIconForegroundFillKey}}" Stretch="None" Data="M0,0L5,0 2.5,3z" />
                                <Rectangle SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Top" Width="5" Height="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterDropDownButtonIconForegroundFillKey}}" />
                                <Rectangle SnapsToDevicePixels="True" HorizontalAlignment="Center" Margin="0,1,0,0" VerticalAlignment="Top" Width="5" Height="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterDropDownButtonIconBackgroundFillKey}}" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverBorderFillKey}}" />
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverInnerBorderFillKey}}" />
                            <Setter Property="Background" TargetName="border2" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverCenterFillKey}}" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.IsActive" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverBorderFillKey}}" />
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverInnerBorderFillKey}}" />
                            <Setter Property="Background" TargetName="border2" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterScrollButtonHoverCenterFillKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type igRibbon:GalleryToolPreviewPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:GalleryToolPreviewPresenter}">
                    <Border x:Name="GalleryToolPreviewPresenterBorder" Grid.Column="0" BorderThickness="1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterBorderFillKey}}" SnapsToDevicePixels="True" CornerRadius="0,5,5,0" Margin="3">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="15" />
                            </Grid.ColumnDefinitions>

                            <igRibbon:GalleryPreviewScroller x:Name="galleryPreviewScroller" Grid.Column="0" Margin="3" VerticalAlignment="Stretch">
                                <igRibbon:GalleryWrapPanel IsItemsHost="true" MinColumns="{Binding Path=MinColumns, RelativeSource={RelativeSource TemplatedParent}}" MaxColumns="{Binding Path=MaxColumns, RelativeSource={RelativeSource TemplatedParent}}" />
                            </igRibbon:GalleryPreviewScroller>

                            <Grid Grid.Column="1">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>

                                <RepeatButton Focusable="False" Grid.Row="0" Command="igRibbon:GalleryPreviewScroller.ScrollUpCommand" CommandTarget="{Binding ElementName=galleryPreviewScroller}" Style="{StaticResource GalleryToolPreviewPresenter_ScrollUpButton}" Margin="0,-1,-1,0" />
                                <RepeatButton Focusable="False" Grid.Row="1" Command="igRibbon:GalleryPreviewScroller.ScrollDownCommand" CommandTarget="{Binding ElementName=galleryPreviewScroller}" Style="{StaticResource GalleryToolPreviewPresenter_ScrollDownButton}" Margin="0,0,-1,0" />
                                <Button x:Name="PART_DropDownButton" Focusable="False" Grid.Row="2" Command="igRibbon:GalleryPreviewScroller.DropdownGalleryCommand" CommandTarget="{Binding ElementName=galleryPreviewScroller}" Style="{StaticResource GalleryToolPreviewPresenter_DropDownButton}" igRibbon:XamRibbon.KeyTipPlacementType="DropDownButton" Margin="0,0,-1,-1" />
                            </Grid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- Scroll Bar, RepeatButton, ScrollBarThumb -->
    <!-- =================================================================== -->

    <!-- IncreaseRepeatButton - This is used by ScrollBar -->
    <Style x:Key="GalleryToolDropDownPresenter_IncreaseRepeatButton" d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Hover">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Pressed">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Enabled_Fade-In">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Enabled" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Enabled_Fade-Out">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Enabled" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Hover_FadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Pressed_FadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Margin="1,0,0,0">
                        <Grid Opacity="0" x:Name="Enabled">
                            <Border x:Name="EnabledBorder" SnapsToDevicePixels="True" Visibility="Visible" CornerRadius="2,2,2,2" Opacity="1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonNormalBorderDarkFillKey}}" BorderThickness="1,1,1,1" Width="Auto" Height="Auto" />
                            <Border SnapsToDevicePixels="True" Visibility="Visible" x:Name="EnabledCenter" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonNormalBorderLightFillKey}}" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" Opacity="1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonNormalCenterFillKey}}" Margin="1,1,1,1" Width="Auto" Height="Auto" />
                        </Grid>
                        <Grid Opacity="0" x:Name="Hover">
                            <Border x:Name="HoverBorder" SnapsToDevicePixels="True" Visibility="Visible" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonHoverBorderDarkFillKey}}" CornerRadius="2,2,2,2" Opacity="1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarHoverBorderDarkFillKey}}" Width="Auto" Height="Auto" />
                            <Border SnapsToDevicePixels="True" Visibility="Visible" x:Name="HoverCenter" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonHoverBorderLightFillKey}}" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" Opacity="1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonHoverCenterFillKey}}" Margin="1,1,1,1" Width="Auto" Height="Auto" />
                        </Grid>
                        <Grid x:Name="Pressed" Opacity="0">
                            <Border x:Name="PressedBorder" Opacity="1" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonPressedBorderDarkFillKey}}" CornerRadius="2,2,2,2" Width="Auto" Height="Auto" />
                            <Border Opacity="1" SnapsToDevicePixels="True" x:Name="PressedCenter" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonPressedCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonPressedBorderLightFillKey}}" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" Margin="1,1,1,1" Width="Auto" Height="Auto" />
                        </Grid>
                        <ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Center" Margin="0,0,0,0" VerticalAlignment="Center" />
                        <Path SnapsToDevicePixels="True" Margin="0,0,0,0" VerticalAlignment="Center" Width="Auto" Height="5" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarArrowFillKey}}" Stretch="None" Data="M0,0L9,0 4.5,5z" HorizontalAlignment="Center" x:Name="path" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarDisabledArrowFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonNormalBorderDarkFillKey}}" TargetName="EnabledBorder" />
                        </Trigger>
                        <Trigger Property="Tag" Value="ScrollBarMouseOverTrue">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="Enabled_Fade_In_BeginStoryboard" Storyboard="{StaticResource Enabled_Fade-In}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="Enabled_Fade_Out_BeginStoryboard" Storyboard="{StaticResource Enabled_Fade-Out}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="Hover_BeginStoryboard" Storyboard="{StaticResource Hover}" />
                                <StopStoryboard BeginStoryboardName="Pressed_BeginStoryboard" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="Hover_BeginStoryboard" />
                                <BeginStoryboard x:Name="Hover_FadeOut_BeginStoryboard" Storyboard="{StaticResource Hover_FadeOut}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="Pressed_BeginStoryboard" Storyboard="{StaticResource Pressed}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="Pressed_BeginStoryboard" />
                                <BeginStoryboard x:Name="Pressed_FadeOut_BeginStoryboard" Storyboard="{StaticResource Pressed_FadeOut}" />
                            </Trigger.ExitActions>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DecreaseRepeatButton - This is used by ScrollBar -->
    <Style x:Key="GalleryToolDropDownPresenter_DecreaseRepeatButton" d:IsControlPart="True" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Hover">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Pressed">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Enabled_Fade-In">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Enabled" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Enabled_Fade-Out">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Enabled" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Hover_FadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Pressed_FadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Margin="1,0,0,0">
                        <Grid Opacity="0" x:Name="Enabled">
                            <Border x:Name="EnabledBorder" SnapsToDevicePixels="True" Visibility="Visible" CornerRadius="2,2,2,2" Opacity="1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonNormalBorderDarkFillKey}}" BorderThickness="1,1,1,1" Width="Auto" Height="Auto" />
                            <Border SnapsToDevicePixels="True" Visibility="Visible" x:Name="EnabledCenter" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonNormalBorderLightFillKey}}" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" Opacity="1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonNormalCenterFillKey}}" Margin="1,1,1,1" Width="Auto" Height="Auto" />
                        </Grid>
                        <Grid Opacity="0" x:Name="Hover">
                            <Border x:Name="HoverBorder" SnapsToDevicePixels="True" Visibility="Visible" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonHoverBorderDarkFillKey}}" CornerRadius="2,2,2,2" Opacity="1" Width="Auto" Height="Auto" />
                            <Border SnapsToDevicePixels="True" Visibility="Visible" x:Name="HoverCenter" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonHoverBorderLightFillKey}}" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" Opacity="1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonHoverCenterFillKey}}" Margin="1,1,1,1" Width="Auto" Height="Auto" />
                        </Grid>
                        <Grid x:Name="Pressed" Opacity="0">
                            <Border x:Name="PressedBorder" Opacity="1" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonPressedBorderDarkFillKey}}" CornerRadius="2,2,2,2" Width="Auto" Height="Auto" />
                            <Border Opacity="1" SnapsToDevicePixels="True" x:Name="PressedCenter" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonPressedCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonPressedBorderLightFillKey}}" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" Margin="1,1,1,1" Width="Auto" Height="Auto" />
                        </Grid>
                        <ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Center" Margin="0,0,0,0" VerticalAlignment="Center" />
                        <Path SnapsToDevicePixels="True" d:LayoutOverrides="Width" Width="Auto" Height="Auto" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarArrowFillKey}}" Stretch="None" Data="M0,5L9,5 4.5,0z" HorizontalAlignment="Center" x:Name="path" VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarDisabledArrowFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarBorderDarkFillKey}}" TargetName="EnabledBorder" />
                        </Trigger>
                        <Trigger Property="Tag" Value="ScrollBarMouseOverTrue">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="Enabled_Fade_In_BeginStoryboard" Storyboard="{StaticResource Enabled_Fade-In}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="Enabled_Fade_Out_BeginStoryboard" Storyboard="{StaticResource Enabled_Fade-Out}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="Hover_BeginStoryboard" Storyboard="{StaticResource Hover}" />
                                <StopStoryboard BeginStoryboardName="Pressed_BeginStoryboard" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="Hover_BeginStoryboard" />
                                <BeginStoryboard x:Name="Hover_FadeOut_BeginStoryboard" Storyboard="{StaticResource Hover_FadeOut}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="Pressed_BeginStoryboard" Storyboard="{StaticResource Pressed}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="Pressed_BeginStoryboard" />
                                <BeginStoryboard x:Name="Pressed_FadeOut_BeginStoryboard" Storyboard="{StaticResource Pressed_FadeOut}" />
                            </Trigger.ExitActions>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ScrollRepeatButton Style - This RepeatButton is used above and below the Thumb in the Scrollbar. They are set to transparent si that they do not show over the scrollbar -->
    <Style x:Key="GalleryToolDropDownPresenter_ScrollRepeatButton" d:IsControlPart="True" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid>
                        <Rectangle Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Thumb - The Thumb is the draggable part of the Scrollbar -->
    <Style x:Key="GalleryToolDropDownPresenter_ScrollbarThumb" d:IsControlPart="True" TargetType="{x:Type Thumb}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="Hover_FadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Hover_FadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Pressed_FadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="Pressed_FadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Pressed" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Margin="1,0,0,0" x:Name="Grid">
                        <Grid x:Name="Normal">
                            <Rectangle x:Name="Thumb_Normal_Border" Width="Auto" Height="Auto" RadiusX="2" RadiusY="2" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarBorderDarkFillKey}}" Opacity="1" />
                            <Rectangle SnapsToDevicePixels="True" x:Name="Thumb_Normal_Center" RadiusX="0" RadiusY="0" Margin="1,1,1,1" Width="Auto" Height="Auto" Opacity="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarCenterFillKey}}" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarBorderLightFillKey}}" />
                        </Grid>
                        <Grid Opacity="0" x:Name="Hover">
                            <Rectangle Opacity="1" SnapsToDevicePixels="True" x:Name="Thumb_Hover_Border" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarHoverBorderDarkFillKey}}" RadiusX="2" RadiusY="2" Width="Auto" Height="Auto" />
                            <Rectangle Opacity="1" SnapsToDevicePixels="True" x:Name="Thumb_Hover_Center" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarHoverCenterFillKey}}" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarHoverBorderLightFillKey}}" RadiusX="0" RadiusY="0" Margin="1,1,1,1" Width="Auto" Height="Auto" />
                        </Grid>
                        <Grid Opacity="0" x:Name="Pressed">
                            <Rectangle Opacity="1" SnapsToDevicePixels="True" x:Name="Thumb_Pressed_Border" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarPressedBorderDarkFillKey}}" RadiusX="2" RadiusY="2" Width="Auto" Height="Auto" />
                            <Rectangle Opacity="1" SnapsToDevicePixels="True" x:Name="Thumb_Pressed_Center" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarPressedCenterFillKey}}" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarPressedBorderLightFillKey}}" RadiusX="0" RadiusY="0" Margin="1,1,1,1" Width="Auto" Height="Auto" />
                        </Grid>
                        <Grid x:Name="ScrollbarGripper" Background="#00ffffff" d:LayoutOverrides="Width, Height, Margin" HorizontalAlignment="Center" VerticalAlignment="Center" Width="8" Height="8">
                            <Path Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="7" Width="8" Stretch="Fill" Opacity="0.7490196078431373" Data="M 0,6 C0,6 0,7 0,7 0,7 8,7 8,7 8,7 8,6 8,6 8,6 0,6 0,6 zM 0,4 C0,4 0,5 0,5 0,5 8,5 8,5 8,5 8,4 8,4 8,4 0,4 0,4 zM 0,2 C0,2 0,3 0,3 0,3 8,3 8,3 8,3 8,2 8,2 8,2 0,2 0,2 zM 0,0 C0,0 0,1 0,1 0,1 8,1 8,1 8,1 8,0 8,0 8,0 0,0 0,0 z" StrokeThickness="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarThumbGripperForegroundFillKey}}" SnapsToDevicePixels="True" />
                            <Path Margin="2,1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="7" Width="6" Stretch="Fill" Opacity="0.34901960784313724" Data="M 2,7 C2,7 2,8 2,8 2,8 8,8 8,8 8,8 8,7 8,7 8,7 2,7 2,7 zM 2,5 C2,5 2,6 2,6 2,6 8,6 8,6 8,6 8,5 8,5 8,5 2,5 2,5 zM 2,3 C2,3 2,4 2,4 2,4 8,4 8,4 8,4 8,3 8,3 8,3 2,3 2,3 zM 2,1 C2,1 2,2 2,2 2,2 8,2 8,2 8,2 8,1 8,1 8,1 2,1 2,1 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarThumbGripperBackgroundFillKey}}" SnapsToDevicePixels="True" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDragging" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="Pressed_FadeIn_BeginStoryboard" Storyboard="{StaticResource Pressed_FadeIn}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="Pressed_FadeOut_BeginStoryboard" Storyboard="{StaticResource Pressed_FadeOut}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Hover_FadeIn}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="Hover_FadeOut_BeginStoryboard" Storyboard="{StaticResource Hover_FadeOut}" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ScrollBar  This makes use of Thumb, IncreaseRepeatButton, DecreaseRepeatButton and ScrollRepeatButton -->

    <Style x:Key="GalleryToolDropDownPresenter_Scrollbar" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Foreground" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="hover">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="DecreaseRepeat" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IncreaseRepeat" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="fade">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="DecreaseRepeat" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.5" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PART_Track" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.5" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IncreaseRepeat" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.5" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="GridRoot" Width="{StaticResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="18" />
                            <RowDefinition Height="0.00001*" />
                            <RowDefinition MaxHeight="18" />
                        </Grid.RowDefinitions>

                        <Rectangle SnapsToDevicePixels="True" Margin="0,0,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarTrackBorderDarkFillKey}}" Grid.RowSpan="3" x:Name="rectangle" />
                        <Rectangle SnapsToDevicePixels="True" Margin="1,0,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarTrackBorderLightFillKey}}" Grid.RowSpan="3" />
                        <Rectangle SnapsToDevicePixels="True" Margin="2,0,0,0" Grid.RowSpan="3" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarTrackCenterFillKey}}" />

                        <RepeatButton x:Name="DecreaseRepeat" Focusable="False" Style="{StaticResource GalleryToolDropDownPresenter_DecreaseRepeatButton}" Command="ScrollBar.LineUpCommand" Background="{x:Null}" BorderBrush="{x:Null}" Tag="ScrollBarMouseOverFalse">
                            <Grid>
                                <Path SnapsToDevicePixels="True" d:LayoutOverrides="Width" HorizontalAlignment="Left" Margin="0,0,0,0" VerticalAlignment="Top" Width="Auto" Height="Auto" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarArrowFillKey}}" Stretch="None" Data="M0,5L9,5 4.5,0z" />
                            </Grid>
                        </RepeatButton>

                        <!-- Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it -->
                        <Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
                            <Track.Thumb>
                                <Thumb Style="{StaticResource GalleryToolDropDownPresenter_ScrollbarThumb}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp" Focusable="False" Style="{StaticResource GalleryToolDropDownPresenter_ScrollRepeatButton}" Command="ScrollBar.PageDownCommand" />
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown" Focusable="False" Style="{StaticResource GalleryToolDropDownPresenter_ScrollRepeatButton}" Command="ScrollBar.PageUpCommand" />
                            </Track.DecreaseRepeatButton>
                        </Track>

                        <RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Focusable="False" Style="{StaticResource GalleryToolDropDownPresenter_IncreaseRepeatButton}" Command="ScrollBar.LineDownCommand" Background="{x:Null}" BorderBrush="{x:Null}" Tag="ScrollBarMouseOverFalse" />
                    </Grid>

                    <!-- This uses a single template for ScrollBar and rotate it to be Horizontal
It also changes the commands so that the it does Left and Right instead of Up and Down Commands -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Tag" TargetName="DecreaseRepeat" Value="ScrollBarMouseOverTrue" />
                            <Setter Property="Tag" TargetName="IncreaseRepeat" Value="ScrollBarMouseOverTrue" />
                        </Trigger>
                        <EventTrigger RoutedEvent="Mouse.MouseEnter" SourceName="rectangle" />
                        <Trigger Property="IsEnabled" SourceName="DecreaseRepeat" Value="True" />
                        <Trigger Property="Orientation" Value="Horizontal">

                            <!-- Rotate the ScrollBar from Vertical to Horizontal -->
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>

                            <!-- Track is bound to Orientation internally, so we need to rotate it back to Vertical -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical" />

                            <!-- Change the commands to do Horizontal commands -->
                            <Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat" />
                            <Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat" />
                            <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown" />
                            <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{x:Null}" />
    </Style>

    <!-- ScrollViewer Styles for the GalleryToolDropDownPresenter -->
    <Style x:Key="GalleryToolDropDownPresenter_ScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}" />

                        <!-- The visibility of the ScrollBars is controlled by the implementation fo the control -->
                        <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{StaticResource GalleryToolDropDownPresenter_Scrollbar}" Orientation="Horizontal" Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}" AutomationProperties.AutomationId="HorizontalScrollBar" />
                        <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{StaticResource GalleryToolDropDownPresenter_Scrollbar}" Orientation="Vertical" Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}" AutomationProperties.AutomationId="VerticalScrollBar" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- GalleryToolDropDownPresenter Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:GalleryToolDropDownPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:GalleryToolDropDownPresenter}">
                    <Border x:Name="Background" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterCenterFillKey}}" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <!-- JJD 11/8/07 added pre separator, visibility triggered off IsFirstInMenu property -->
                            <Rectangle x:Name="PreGallerySeparator" Grid.Row="0" Height="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterBorderFillKey}}" Visibility="Collapsed" />

                            <!-- JJD 11/1/07 - BR27851 - Set CanContentScroll to false to enable pixel level scrolling -->
                            <ScrollViewer Grid.Row="1" Margin="0,0,0,0" CanContentScroll="false" Focusable="false" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" Style="{StaticResource GalleryToolDropDownPresenter_ScrollViewer}">
                                <ItemsPresenter />
                            </ScrollViewer>

                            <!-- JJD 11/8/07 added post separator, visibility triggered off IsLastInMenu property -->
                            <Rectangle x:Name="PostGallerySeparator" Height="1" Grid.Row="2" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterBorderFillKey}}" Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- JJD 11/8/07 added pre separator, visibility triggered off IsFirstInMenu property -->
                        <Trigger Property="IsFirstInMenu" Value="False">
                            <Setter TargetName="PreGallerySeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <!-- JJD 11/8/07 added post separator, visibility triggered off IsLastInMenu property -->
                        <Trigger Property="IsLastInMenu" Value="False">
                            <Setter TargetName="PostGallerySeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- GalleryItemGroup Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:GalleryItemGroup}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:GalleryItemGroup}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border x:Name="Caption" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionStrokeFillKey}}" BorderThickness="0,0,0,1" CornerRadius="2,2,0,0" Padding="11,2,0,1">
                            <TextBlock Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextNormalForegroundFillKey}}" Grid.Row="0" FontWeight="Bold" Text="{TemplateBinding Title}" />
                        </Border>
                        <igRibbon:GalleryWrapPanel Grid.Row="1" MinColumns="{Binding Path=GalleryTool.MinDropDownColumns, RelativeSource={RelativeSource TemplatedParent}}" MaxColumns="{Binding Path=GalleryTool.MaxDropDownColumns, RelativeSource={RelativeSource TemplatedParent}}" PreferredColumns="{Binding Path=GalleryTool.PreferredDropDownColumns, RelativeSource={RelativeSource TemplatedParent}}" IsItemsHost="True" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- GalleryTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:GalleryTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:GalleryTool}">
                    <Border>
                        <!-- AS 11/14/07 BR28450 
								The namescope was broken because the recordlistcontrol was not in the logical tree. We 
								need to use a ContentControl instead so the content	is made a logical child. -->
                        <ContentControl x:Name="PART_DropDownPresenterSite" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- StatusBar Style -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:RibbonWindowContentHost.StatusBarStyleKey}" TargetType="{x:Type StatusBar}">
        <!--<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>-->
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.StatusBarFillKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.StatusBarBorderFillKey}}" />
        <Setter Property="BorderThickness" Value="0,1" />
        <Setter Property="Border.CornerRadius" Value="0,0,3,3" />
        <Setter Property="FocusManager.IsFocusScope" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.StatusBarTextForegroundFillKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.StatusFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.StatusFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.StatusFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.StatusFontWeightKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBar}">
                    <Grid x:Name="StatusBar">
                        <Border x:Name="StatusBar_BackgroundLayer" SnapsToDevicePixels="True" CornerRadius="{TemplateBinding Border.CornerRadius}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                        <!-- AS 12/2/09 TFS24267
                            Added Margin binding to a new property on RibbonWindowContentHost that returns a thickness
                            which provides the border extent. Note since someone may be using the Padding to add additional 
                            space I'm not binding the actual padding property of the statusbar to this property. -->
                        <!-- AS 12/3/09 TFS24545 
                            Removed hard coded padding which accounted for size grip and conditionally 
                            included the required extent in the StatusBarPadding -->
                        <Border Padding="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).(StatusBarPadding), RelativeSource={RelativeSource Self}}">
                            <ItemsPresenter OpacityMask="{x:Null}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Margin="{TemplateBinding Padding}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter Property="CornerRadius" TargetName="StatusBar_BackgroundLayer" Value="0,0,0,0" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Maximized">
                            <Setter Property="CornerRadius" TargetName="StatusBar_BackgroundLayer" Value="0,0,0,0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsScenicTheme, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:RibbonWindowContentHost}, 1}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ScenicStatusBarFillKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ScenicStatusBarBorderFillKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ScenicStatusBarTextForegroundFillKey}}" />
                <Setter Property="BorderThickness" Value="0,1,0,0" />
                <Setter Property="Border.CornerRadius" Value="0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- StatusBarItem Style -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:RibbonWindowContentHost.StatusBarItemStyleKey}" TargetType="{x:Type StatusBarItem}">
        <Setter Property="BorderThickness" Value="0,0,0,0" />
        <Setter Property="Padding" Value="3,3,3,3" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBarItem}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.StatusBarTextForegroundFillKey}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsScenicTheme, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:RibbonWindowContentHost}, 1}}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ScenicStatusBarTextForegroundFillKey}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- StatusBar Separator Style -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:RibbonWindowContentHost.StatusBarSeparatorStyleKey}" TargetType="{x:Type Separator}">
        <!--<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>-->
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.StatusBarSeparatorGradientRightKey}}" />
        <Setter Property="Margin" Value="2,0,2,0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Width="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Margin="0,1,0,0" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0,0,1,0" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.StatusBarSeparatorGradientLeftKey}}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsScenicTheme, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:RibbonWindowContentHost}, 1}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.StatusBarSeparatorGradientRightKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ScenicStatusBarSeparatorGradientLeftKey}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- RibbonGroup Collapsed Toggle Button Style -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:RibbonGroup.CollapsedGroupButtonStyleKey}" TargetType="{x:Type igRibbon:DropDownToggle}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:DropDownToggle}">
                    <igWindows:CardPanel d:LayoutOverrides="Height" Background="#00ffffff" Margin="0,0,0,1">
                        <Rectangle x:Name="BorderDark" HorizontalAlignment="Stretch" Margin="0,0,0,0" Width="Auto" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedNormalBorderDarkFillKey}}" RadiusX="2" RadiusY="2" SnapsToDevicePixels="True" />
                        <Rectangle x:Name="BorderLight" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" Margin="1,1,1,1" Width="Auto" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedNormalBorderLightFillKey}}" RadiusX="1" RadiusY="1" />
                        <Rectangle x:Name="BaseColorBorderLight" StrokeThickness="2" SnapsToDevicePixels="True" Margin="1,1,1,1" Height="Auto" Width="Auto" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RadiusX="1" RadiusY="1" Visibility="Collapsed">
                            <!--JJD 12/11/07 moved setting to Trigger if IsInContextualTabGroup == true -->
                            <!--<Rectangle.Stroke>
								<SolidColorBrush Color="{Binding Path=ContextualTabGroup.BaseBackColorResolved, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:RibbonGroup}, 1}}"/>
							</Rectangle.Stroke>-->
                            <Rectangle.OpacityMask>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#00000000" Offset="0" />
                                    <GradientStop Color="#26FFFFFF" Offset="0.4" />
                                    <GradientStop Color="#7FFFFFFF" Offset="0.75" />
                                    <GradientStop Color="#FFFFFFFF" Offset="1" />
                                </LinearGradientBrush>
                            </Rectangle.OpacityMask>
                        </Rectangle>
                        <Rectangle SnapsToDevicePixels="True" HorizontalAlignment="Stretch" Margin="1,1,1,1" x:Name="IsActive_Highlight" Width="Auto" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedIsActiveHighlightFillKey}}" RadiusX="1" RadiusY="1" Visibility="Collapsed" />
                        <Border SnapsToDevicePixels="True" Margin="2,1,2,2" x:Name="CenterFill" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedNormalCenterFillKey}}" CornerRadius="1,1,1,1" />
                        <Rectangle SnapsToDevicePixels="True" Visibility="Collapsed" HorizontalAlignment="Stretch" Margin="1,1,1,1" x:Name="Pressed_Highlight" Width="Auto" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedPressedHighlightFillKey}}" />
                        <Border SnapsToDevicePixels="True" HorizontalAlignment="Stretch" Margin="2,2,2,2">
                            <StackPanel>
                                <Border x:Name="InnerArea" SnapsToDevicePixels="True" CornerRadius="3" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedInnerAreaNormalBorderFillKey}}" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedInnerAreaNormalCenterFillKey}}" BorderThickness="1" Padding="0" HorizontalAlignment="Center" Margin="0,3,0,3">
                                    <Grid Width="Auto" Height="Auto">
                                        <Border x:Name="InnerAreaBottom" HorizontalAlignment="Stretch" Margin="0" VerticalAlignment="Bottom" Height="7" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedInnerAreaNormalBottomGradientFillKey}}" CornerRadius="0,0,2,2" />
                                        <igWindows:AutoDisabledImage x:Name="image" Margin="8,5,7,10" Width="16" Height="16" Source="{Binding Path=(igRibbon:RibbonGroup.SmallImage), RelativeSource={x:Static RelativeSource.TemplatedParent}}" igWindows:Utilities.SnapElementToDevicePixels="True" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" />
                                    </Grid>
                                </Border>
                                <igRibbon:LargeToolCaptionPresenter x:Name="Caption" HorizontalAlignment="Center" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" Text="{Binding Path=(igRibbon:RibbonGroup.Caption), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource stringWithoutMnemonicsConverter}}">
                                    <igRibbon:LargeToolCaptionPresenter.Glyph>
                                        <Control x:Name="largeCaptionGlyph" Margin="0,4,0,0" Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuToolDropDownArrowStyleKey}}" />
                                    </igRibbon:LargeToolCaptionPresenter.Glyph>
                                </igRibbon:LargeToolCaptionPresenter>
                            </StackPanel>
                        </Border>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="igRibbon:XamRibbon.IsActive" Value="True">
                            <Setter Property="Visibility" TargetName="IsActive_Highlight" Value="Visible" />
                            <Setter Property="Stroke" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedIsActiveBorderDarkFillKey}}" />
                            <Setter Property="Fill" TargetName="BorderLight" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedIsActiveBorderLightFillKey}}" />
                            <Setter Property="Background" TargetName="CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedIsActiveCenterFillKey}}" />
                            <Setter Property="Background" TargetName="InnerAreaBottom" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedInnerAreaIsActiveBottomGradientFillKey}}" />
                            <Setter Property="Background" TargetName="InnerArea" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedInnerAreaIsActiveCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="InnerArea" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedInnerAreaIsActiveBorderFillKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsDroppedDown" Value="True">
                            <Setter Property="Stroke" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedPressedBorderDarkFillKey}}" />
                            <Setter Property="Visibility" TargetName="Pressed_Highlight" Value="Visible" />
                            <Setter Property="RadiusX" TargetName="Pressed_Highlight" Value="1" />
                            <Setter Property="RadiusY" TargetName="Pressed_Highlight" Value="1" />
                            <Setter Property="Fill" TargetName="BorderLight" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedPressedBorderLightFillKey}}" />
                            <Setter Property="Background" TargetName="CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedPressedCenterFillKey}}" />
                            <Setter Property="Background" TargetName="InnerAreaBottom" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedInnerAreaPressedBottomGradientFillKey}}" />
                            <Setter Property="Background" TargetName="InnerArea" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedInnerAreaPressedCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="InnerArea" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedInnerAreaPressedBorderFillKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedHoverBorderDarkFillKey}}" />
                            <Setter Property="Fill" TargetName="BorderLight" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedHoverBorderLightFillKey}}" />
                            <Setter Property="Background" TargetName="CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedHoverCenterFillKey}}" />
                            <Setter Property="Background" TargetName="InnerAreaBottom" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedInnerAreaHoverBottomGradientFillKey}}" />
                            <Setter Property="Background" TargetName="InnerArea" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedInnerAreaHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="InnerArea" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedInnerAreaHoverBorderFillKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </Trigger>

                        <!-- Triggers for when IsInContextualTabGroup -->

                        <Trigger Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="True">
                            <Setter Property="Stroke" TargetName="BaseColorBorderLight" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolved, RelativeSource={RelativeSource AncestorType={x:Type igRibbon:RibbonGroup}}}" />

                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="True" />
                                <Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="BorderLight" Value="Visible" />
                            <Setter Property="Visibility" TargetName="CenterFill" Value="Visible" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="False" />
                                <Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedIsInContextualNormalBorderFillKey}}" />
                            <Setter Property="Fill" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedIsInContextualNormalCenterFillKey}}" />
                            <Setter Property="Visibility" TargetName="IsActive_Highlight" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="Pressed_Highlight" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="BorderLight" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="CenterFill" Value="Collapsed" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="BorderDark" Property="Stroke" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedIsInContextualHoverBorderFillKey}}" />
                            <Setter TargetName="CenterFill" Property="Background" Value="Transparent" />
                            <Setter TargetName="CenterFill" Property="CornerRadius" Value="0,3,3,0" />
                            <Setter TargetName="CenterFill" Property="BorderThickness" Value="0,0,1,1" />
                            <Setter TargetName="CenterFill" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedIsInContextualHoverBorderFillKey}}" />
                            <Setter TargetName="CenterFill" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BaseColorBorderLight" Property="Visibility" Value="Visible" />
                            <Setter TargetName="IsActive_Highlight" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Pressed_Highlight" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="True" />
                                <Condition Property="IsDroppedDown" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedIsInContextualPressedBorderFillKey}}" />
                            <Setter Property="Fill" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedIsInContextualPressedCenterFillKey}}" />
                            <Setter Property="Visibility" TargetName="IsActive_Highlight" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="Pressed_Highlight" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="BorderLight" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="CenterFill" Value="Collapsed" />
                        </MultiTrigger>
                        <!-- END Triggers for when IsInContextualTabGroup -->

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- RibbonGroup Qat Toggle Button Style -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:RibbonGroup.QuickAccessToolbarGroupButtonStyleKey}" TargetType="{x:Type igRibbon:DropDownToggle}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:DropDownToggle}">
                    <!-- The element is shifted up by 2 to meet fitt's law -->
                    <Grid x:Name="RibbonGroupQAT" Background="#00ffffff" Margin="0,-2,0,0">
                        <Rectangle x:Name="BorderAndInnerBorder" Opacity="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,2,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATNormalCenterFillKey}}" SnapsToDevicePixels="True" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATBorderDarkFillKey}}" RadiusX="3" RadiusY="3" />
                        <Rectangle Opacity="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="1,3,1,1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATHover2InnerBorderFillKey}}" SnapsToDevicePixels="True" Visibility="Collapsed" x:Name="rectangle" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATHover1InnerBorderFillKey}}" RadiusX="2" RadiusY="2" />
                        <Border SnapsToDevicePixels="True" Margin="2,4,2,2" x:Name="border" BorderThickness="1,1,1,1" CornerRadius="1,1,1,1">
                            <igWindows:AutoDisabledImage x:Name="image" Source="{Binding Path=(igRibbon:RibbonGroup.SmallImage), RelativeSource={x:Static RelativeSource.TemplatedParent}}" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="igRibbon:XamRibbon.IsActive" Value="True">
                            <Setter Property="Visibility" TargetName="rectangle" Value="Visible" />
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATHover3InnerBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="rectangle" Value="Visible" />
                            <Setter TargetName="BorderAndInnerBorder" Property="Stroke" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATHoverBorderDarkFillKey}}" />
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATHover3InnerBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsDroppedDown" Value="True">
                            <Setter Property="Visibility" TargetName="rectangle" Value="Visible" />
                            <Setter Property="Stroke" TargetName="rectangle" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATPressed1InnerBorderFillKey}}" />
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATPressed2InnerBorderFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{x:Null}" />
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATPressedCenterFillKey}}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter TargetName="BorderAndInnerBorder" Property="Stroke" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATVistaNormalBorderDarkFillKey}}" />
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="rectangle" Value="Visible" />
                            <Setter Property="Visibility" TargetName="border" Value="Visible" />
                            <Setter TargetName="BorderAndInnerBorder" Property="Stroke" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATVistaHoverBorderDarkFillKey}}" />
                            <Setter Property="Stroke" TargetName="rectangle" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATVistaHover1InnerBorderFillKey}}" />
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATVistaHover2InnerBorderFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATVistaHover3InnerBorderFillKey}}" />
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupQATVistaHoverCenterFillKey}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- ResizeGrip -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:RibbonWindowContentHost.ResizeGripStyleKey}" TargetType="{x:Type ResizeGrip}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid x:Name="ResizeGrippers" Background="#00ffffff">
                        <Path Margin="1,1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="10" Width="10" Stretch="Fill" Opacity="1" Data="M 9,9 C9,9 9,11 9,11 9,11 11,11 11,11 11,11 11,9 11,9 11,9 9,9 9,9 zM 5,9 C5,9 5,11 5,11 5,11 7,11 7,11 7,11 7,9 7,9 7,9 5,9 5,9 zM 1,9 C1,9 1,11 1,11 1,11 3,11 3,11 3,11 3,9 3,9 3,9 1,9 1,9 zM 5,5 C5,5 5,7 5,7 5,7 7,7 7,7 7,7 7,5 7,5 7,5 5,5 5,5 zM 9,5 C9,5 9,7 9,7 9,7 11,7 11,7 11,7 11,5 11,5 11,5 9,5 9,5 zM 9,1 C9,1 9,3 9,3 9,3 11,3 11,3 11,3 11,1 11,1 11,1 9,1 9,1 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ResizeGrippersBackgroundFillKey}}" SnapsToDevicePixels="True" />
                        <Path Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="10" Width="10" Stretch="Fill" Opacity="1" Data="M 8,8 C8,8 8,10 8,10 8,10 10,10 10,10 10,10 10,8 10,8 10,8 8,8 8,8 zM 4,8 C4,8 4,10 4,10 4,10 6,10 6,10 6,10 6,8 6,8 6,8 4,8 4,8 zM 0,8 C0,8 0,10 0,10 0,10 2,10 2,10 2,10 2,8 2,8 2,8 0,8 0,8 zM 4,4 C4,4 4,6 4,6 4,6 6,6 6,6 6,6 6,4 6,4 6,4 4,4 4,4 zM 8,4 C8,4 8,6 8,6 8,6 10,6 10,6 10,6 10,4 10,4 10,4 8,4 8,4 zM 8,0 C8,0 8,2 8,2 8,2 10,2 10,2 10,2 10,0 10,0 10,0 8,0 8,0 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ResizeGrippersForegroundFillKey}}" SnapsToDevicePixels="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- ScenicResizeGrip -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:RibbonWindowContentHost.ScenicResizeGripStyleKey}" TargetType="{x:Type ResizeGrip}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid x:Name="ResizeGrippers" Background="#00ffffff">
                        <Path Margin="1,1,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="10" Width="10" Stretch="Fill" Opacity="1" Data="M 9,9 C9,9 9,11 9,11 9,11 11,11 11,11 11,11 11,9 11,9 11,9 9,9 9,9 zM 5,9 C5,9 5,11 5,11 5,11 7,11 7,11 7,11 7,9 7,9 7,9 5,9 5,9 zM 1,9 C1,9 1,11 1,11 1,11 3,11 3,11 3,11 3,9 3,9 3,9 1,9 1,9 zM 5,5 C5,5 5,7 5,7 5,7 7,7 7,7 7,7 7,5 7,5 7,5 5,5 5,5 zM 9,5 C9,5 9,7 9,7 9,7 11,7 11,7 11,7 11,5 11,5 11,5 9,5 9,5 zM 9,1 C9,1 9,3 9,3 9,3 11,3 11,3 11,3 11,1 11,1 11,1 9,1 9,1 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ScenicResizeGrippersBackgroundFillKey}}" SnapsToDevicePixels="True" />
                        <Path Margin="0,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="10" Width="10" Stretch="Fill" Opacity="1" Data="M 8,8 C8,8 8,10 8,10 8,10 10,10 10,10 10,10 10,8 10,8 10,8 8,8 8,8 zM 4,8 C4,8 4,10 4,10 4,10 6,10 6,10 6,10 6,8 6,8 6,8 4,8 4,8 zM 0,8 C0,8 0,10 0,10 0,10 2,10 2,10 2,10 2,8 2,8 2,8 0,8 0,8 zM 4,4 C4,4 4,6 4,6 4,6 6,6 6,6 6,6 6,4 6,4 6,4 4,4 4,4 zM 8,4 C8,4 8,6 8,6 8,6 10,6 10,6 10,6 10,4 10,4 10,4 8,4 8,4 zM 8,0 C8,0 8,2 8,2 8,2 10,2 10,2 10,2 10,0 10,0 10,0 8,0 8,0 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ScenicResizeGrippersForegroundFillKey}}" SnapsToDevicePixels="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- XamRibbonScreenTip -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:XamRibbonScreenTip}">
        <Style.Resources>
            <DataTemplate DataType="{x:Type sys:String}">
                <TextBlock TextWrapping="Wrap" Text="{Binding}" />
            </DataTemplate>
        </Style.Resources>

        <Setter Property="Foreground" Value="#EE000000" />
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource Self}, Path=(igRibbon:XamRibbon.Ribbon).PreferredFont, FallbackValue='Segoe UI'}" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamScreenTipBorderFillKey}}" />
        <Setter Property="Width" Value="210" />
        <Setter Property="MinHeight" Value="50" />

        <!-- JM BR27833 10-26-07 -->
        <!--<Setter Property="FooterSeparatorVisibility" Value="Collapsed"/>-->

        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamScreenTipFillKey}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:XamRibbonScreenTip}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="2">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <!-- Header Content -->
                            <ContentControl Grid.Row="0" FontWeight="Bold" Margin="5,7,5,5" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" SnapsToDevicePixels="True" />

                            <!-- Header Separator -->
                            <StackPanel Grid.Row="1" Margin="4,0,3,5" Visibility="{TemplateBinding HeaderSeparatorVisibility}">
                                <Rectangle Height="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamScreenTipSeparatorDarkFillKey}}" HorizontalAlignment="Stretch" SnapsToDevicePixels="True" />
                                <Rectangle Height="1" Fill="White" HorizontalAlignment="Stretch" SnapsToDevicePixels="True" />
                            </StackPanel>

                            <!-- Main Content -->
                            <Grid Grid.Row="2" Margin="0,3,13,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <Image Grid.Column="0" Margin="12,0,0,0" Source="{TemplateBinding ContentImage}" />
                                <ContentPresenter x:Name="mainContent" Margin="0,0,0,0" Grid.Column="1" />
                                <!--<ContentControl Margin="13,0,0,0" Grid.Column="1" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>-->
                            </Grid>

                            <!-- Footer Separator -->
                            <StackPanel Grid.Row="3" Margin="4,5,4,7" Visibility="{TemplateBinding FooterSeparatorVisibility}">
                                <Rectangle Height="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamScreenTipSeparatorDarkFillKey}}" HorizontalAlignment="Stretch" SnapsToDevicePixels="True" />
                                <Rectangle Height="1" Fill="White" HorizontalAlignment="Stretch" SnapsToDevicePixels="True" />
                            </StackPanel>

                            <!-- Footer Content -->
                            <ContentControl Grid.Row="4" FontWeight="Bold" Margin="5,-1,5,6" Content="{TemplateBinding Footer}" ContentTemplate="{TemplateBinding FooterTemplate}" ContentTemplateSelector="{TemplateBinding FooterTemplateSelector}" />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContentImage" Value="True">
                            <Setter Property="Width" Value="318" />
                            <Setter Property="Margin" Value="13,0,0,0" TargetName="mainContent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- DialogBoxLauncherToolTemplate -->
    <!-- =================================================================== -->
    <ControlTemplate TargetType="{x:Type igRibbon:ButtonTool}" x:Key="{x:Static igRibbon:RibbonGroup.DialogBoxLauncherToolTemplateKey}">
        <Grid Margin="0,0,1,0" HorizontalAlignment="Center" VerticalAlignment="Center" Width="15" Height="14" Background="#00000000">
            <Border Margin="0,0,0,0" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateHoverBorderDarkFillKey}}" CornerRadius="0,0,2,0" SnapsToDevicePixels="True" Visibility="Hidden" x:Name="border" />
            <Border Margin="1,1,1,1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateHoverBorderLightFillKey}}" CornerRadius="0,0,1,0" SnapsToDevicePixels="True" Visibility="Hidden" x:Name="border1" />
            <Border Margin="2,2,2,2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateHoverCenterFillKey}}" SnapsToDevicePixels="True" Visibility="Hidden" x:Name="border2" />
            <Grid x:Name="ToolBar_Corner" Margin="1,0,0,0" Width="8" Height="8" HorizontalAlignment="Center" VerticalAlignment="Center">
                <Path x:Name="CornerForeground" Stretch="Fill" Opacity="1" Data="M 0,0 C0,0 0,1 0,1 0,1 0,6 0,6 0,6 1,6 1,6 1,6 1,1 1,1 1,1 6,1 6,1 6,1 6,0 6,0 6,0 0,0 0,0 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphNormalForegroundFillKey}}" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" Margin="0,0,2,2" />
                <Path x:Name="CornerBackground" Stretch="Fill" Opacity="1" Data="M 1,1 C1,1 1,2 1,2 1,2 1,6 1,6 1,6 2,6 2,6 2,6 2,2 2,2 2,2 6,2 6,2 6,2 6,1 6,1 6,1 1,1 1,1 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphNormalBackgroundFillKey}}" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" Margin="1,1,2,2" />
                <Path x:Name="ArrowForeground" Opacity="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphNormalForegroundFillKey}}" Stretch="Fill" Margin="3,3,1,1" Data="F1 M3,-3 L4,-3 4,-2 4,-1 4,1 2,1 1,1 0,1 0,0 1,0 1,-2 3,-2 3,-3 z M0,-3 L1,-3 1,-2 0,-2 0,-3 z" />
                <Path x:Name="ArrowBackground" Opacity="1" SnapsToDevicePixels="True" d:LayoutOverrides="VerticalAlignment" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphNormalBackgroundFillKey}}" Stretch="Fill" HorizontalAlignment="Right" Margin="0,3,0,0" Width="4" Data="F1 M1.4901161E-08,0 L1,0 1,4 1,5 1.4901161E-08,5 -3,5 -3,4 1.4901161E-08,4 1.4901161E-08,0 z M-3,0 L-2,0 -2,1 -3,1 -3,0 z" />
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsActive" Value="True">
                <Setter Property="Visibility" TargetName="border" Value="Visible" />
                <Setter Property="Visibility" TargetName="border1" Value="Visible" />
                <Setter Property="Visibility" TargetName="border2" Value="Visible" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Visibility" TargetName="border" Value="Visible" />
                <Setter Property="Visibility" TargetName="border1" Value="Visible" />
                <Setter Property="Visibility" TargetName="border2" Value="Visible" />
                <Setter TargetName="CornerForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphHoverForegroundFillKey}}" />
                <Setter TargetName="CornerBackground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphHoverBackgroundFillKey}}" />
                <Setter TargetName="ArrowForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphHoverForegroundFillKey}}" />
                <Setter TargetName="ArrowBackground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphHoverBackgroundFillKey}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Visibility" TargetName="border" Value="Visible" />
                <Setter Property="Visibility" TargetName="border1" Value="Visible" />
                <Setter Property="Visibility" TargetName="border2" Value="Visible" />
                <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplatePressedBorderDarkFillKey}}" />
                <Setter Property="Background" TargetName="border1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplatePressedBorderLightFillKey}}" />
                <Setter Property="Background" TargetName="border2" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplatePressedCenterFillKey}}" />
                <Setter TargetName="CornerForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphPressedForegroundFillKey}}" />
                <Setter TargetName="CornerBackground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphPressedBackgroundFillKey}}" />
                <Setter TargetName="ArrowForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphPressedForegroundFillKey}}" />
                <Setter TargetName="ArrowBackground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DialogBoxLauncherToolTemplateGlyphPressedBackgroundFillKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- =================================================================== -->
    <!-- LabelTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:LabelTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:LabelTool}">
                    <Grid>
                        <Border x:Name="NormalLabel" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}">
                            <StackPanel Orientation="Horizontal">
                                <igWindows:AutoDisabledImage Source="{TemplateBinding ImageResolved}" x:Name="NormalLabel_image" igWindows:Utilities.SnapElementToDevicePixels="True" />
                                <!-- AS 5/11/09 17190 Like the buttontools, the labeltool should have been using the caption -->
                                <ContentPresenter x:Name="NormalLabelContent" Margin="3,0,0,0" VerticalAlignment="Center" Content="{TemplateBinding Caption}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                            </StackPanel>
                        </Border>
                        <Border x:Name="ApplicationMenuSubMenuLabel" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionStrokeFillKey}}" BorderThickness="0,0,0,1" CornerRadius="2,2,0,0" SnapsToDevicePixels="True" Padding="7,3,4,3" Visibility="Collapsed">
                            <StackPanel Orientation="Horizontal">
                                <igWindows:AutoDisabledImage Source="{TemplateBinding ImageResolved}" x:Name="ApplicationMenuSubMenuLabel_image" igWindows:Utilities.SnapElementToDevicePixels="True" />
                                <!-- AS 9/18/09 22320 Like the buttontools, the labeltool should have been using the caption -->
                                <ContentPresenter x:Name="ApplicationMenuSubMenuLabelContent" VerticalAlignment="Center" Content="{TemplateBinding Caption}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                            </StackPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Location" Value="ApplicationMenuSubMenu">
                            <Setter TargetName="NormalLabel" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ApplicationMenuSubMenuLabel" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Location" Value="Menu">
                            <Setter Property="FontWeight" Value="Bold" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionFillKey}}" TargetName="NormalLabel" />
                            <Setter Property="Margin" Value="7,3,14,4" TargetName="NormalLabelContent" />
                            <Setter Property="CornerRadius" Value="2,2,0,0" TargetName="NormalLabel" />
                            <Setter Property="BorderThickness" Value="0,0,0,1" TargetName="NormalLabel" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionStrokeFillKey}}" TargetName="NormalLabel" />
                        </Trigger>

                        <Trigger Property="Location" Value="ApplicationMenu">
                            <Setter Property="FontWeight" Value="Bold" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionFillKey}}" TargetName="NormalLabel" />
                            <Setter Property="Margin" Value="7,3,14,4" TargetName="NormalLabelContent" />
                            <Setter Property="Margin" Value="1,0,1,0" TargetName="NormalLabel" />
                            <Setter Property="CornerRadius" Value="2,2,0,0" TargetName="NormalLabel" />
                            <Setter Property="BorderThickness" Value="0,0,0,1" TargetName="NormalLabel" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionStrokeFillKey}}" TargetName="NormalLabel" />
                        </Trigger>

                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />

                            <!-- AS 12/1/09 TFS24129 - Default margin when in the footer toolbar -->
                            <Setter Property="Margin" Value="6,0,0,0" />
                        </Trigger>

                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
                        </Trigger>

                    </ControlTemplate.Triggers>

                    <!--<Border x:Name="background" HorizontalAlignment="Stretch" VerticalAlignment="Top" Width="Auto" Height="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionFillKey}}" CornerRadius="2,2,0,0" SnapsToDevicePixels="True" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionStrokeFillKey}}" BorderThickness="0,0,0,1">
            <ContentPresenter x:Name="labelContent" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="Location" Value="Menu">
              <Setter Property="FontWeight" Value="Bold"/>
              <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionFillKey}}" TargetName="background"/>
              <Setter Property="Margin" Value="7,3,7,4" TargetName="labelContent"/>
              <Setter Property="BorderThickness" Value="0,0,0,1" TargetName="background"/>
              <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionStrokeFillKey}}" TargetName="background"/>
            </Trigger>
          </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- SeparatorTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:SeparatorTool}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:SeparatorTool}">
                    <igWindows:CardPanel>

                        <!-- Horizontal Separator used in menus. -->
                        <!-- JJD 12/4/07 - BR28873 -->
                        <!-- Adjusted margins for new approach for having the SeparatorTool in the Header of the ToolMenuItem -->
                        <!--<igWindows:CardPanel x:Name="HorizontalSeparator" Margin="30,0,1,1" Height="3" SnapsToDevicePixels="true" Grid.Column="1">-->
                        <igWindows:CardPanel x:Name="HorizontalSeparator" Margin="1,0,1,0" SnapsToDevicePixels="true" Grid.Column="1">
                            <Rectangle Height="1" Margin="0,0,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.HorizontalSeparatorNormalDarkFillKey}}" SnapsToDevicePixels="true" />
                            <Rectangle Height="1" Margin="0,1,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.HorizontalSeparatorNormalLightFillKey}}" SnapsToDevicePixels="true" />
                        </igWindows:CardPanel >

                        <!-- Vertical Separator used in RibbonGroups and ApplicationMenuFooterToolbar. -->
                        <igWindows:CardPanel x:Name="VerticalSeparator" Width="3" Visibility="Collapsed" Margin="4,5,4,7" Grid.ColumnSpan="2">
                            <Rectangle Width="1" Margin="0,0,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VerticalSeparatorNormalLightFillKey}}" SnapsToDevicePixels="true" />
                            <Rectangle Width="1" Margin="1,0,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VerticalSeparatorNormalDarkFillKey}}" SnapsToDevicePixels="true" />
                        </igWindows:CardPanel>
                    </igWindows:CardPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Location" Value="Ribbon">
                            <Setter Property="Visibility" Value="Visible" TargetName="VerticalSeparator" />
                            <Setter Property="Visibility" Value="Collapsed" TargetName="HorizontalSeparator" />
                        </Trigger>
                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Visibility" Value="Visible" TargetName="VerticalSeparator" />

                            <!-- AS 12/1/09 TFS24129 - Default margin when in the footer toolbar -->
                            <!--<Setter Property="Margin" Value="4,2,4,4" TargetName="VerticalSeparator"/>-->
                            <Setter Property="Margin" Value="0,2,0,4" TargetName="VerticalSeparator" />
                            <Setter Property="Margin" Value="6,0,0,0" />

                            <Setter Property="Visibility" Value="Collapsed" TargetName="HorizontalSeparator" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- LargeToolCaptionPresenter Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:LargeToolCaptionPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:LargeToolCaptionPresenter}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <TextBlock x:Name="PART_Line1" Grid.Row="0" TextAlignment="Center" Margin="3,0,3,0" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" />
                        <TextBlock x:Name="PART_Line2" Grid.Row="1" TextAlignment="Center" Margin="3,-2,3,0" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========================================================================================= -->
    <!-- ToolTip Style - Used for Non ScreenTip ToolTips for RibbonTabItem and ContextualTabGroup  -->
    <!-- ========================================================================================= -->
    <Style TargetType="{x:Type ToolTip}" x:Key="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}">
        <Setter Property="Foreground" Value="#EE000000" />
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource Self}, Path=(igRibbon:XamRibbon.Ribbon).PreferredFont, FallbackValue='Segoe UI'}" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolTipNonScreenTipBorderFillKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolTipNonScreenTipCenterFillKey}}" />
    </Style>

    <!-- =================================================================== -->
    <!-- KeyTip Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:KeyTip}">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="3,2,3,2" />
        <Setter Property="Border.CornerRadius" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:KeyTip}">
                    <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.KeyTipCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.KeyTipBorderFillKey}}" BorderThickness="1,1,1,1" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding Border.CornerRadius}" SnapsToDevicePixels="True">
                        <TextBlock HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Text="{TemplateBinding Value}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.7" />
                <Setter Property="BorderBrush" Value="Gray" />
                <Setter Property="Foreground" Value="Gray" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- ComboEditorTool Style -->
    <!-- =================================================================== -->
    <!-- NOTE: do not modify the key of this style unless you make a corresponding change to the 
             Infragistics.Windows.Themes.RibbonResourceSet<T>.ComboEditorTool_DropDownButtonStyle property-->
    <Style x:Key="ComboEditor_DropDownButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                        </Grid.ColumnDefinitions>
                        <Grid x:Name="ComboEditorDropdown" Visibility="Hidden" HorizontalAlignment="Right" Background="#00000000" Grid.Column="1" Width="14" Margin="0,-1,-1,-1">
                            <Border SnapsToDevicePixels="True" x:Name="OuterBorder" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownEnabledBorderDarkFillKey}}" />
                            <Border SnapsToDevicePixels="True" Margin="1,1,1,1" x:Name="InnerBorder_Center" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownEnabledCenterFillKey}}" BorderThickness="0,0,0,0" />
                        </Grid>
                        <Grid Grid.Column="1" Width="14" HorizontalAlignment="Right" Margin="1,-1,-1,-1">
                            <Path x:Name="ArrowBackground" Grid.Column="1" SnapsToDevicePixels="True" Margin="0,1,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Width="Auto" Height="3" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownGlyphNormalBackgroundFillKey}}" Stretch="None" Data="M 0,0 C0,0 0,1 0,1 0,1 1,1 1,1 1,1 1,2 1,2 1,2 2,2 2,2 2,2 2,3 2,3 2,3 3,3 3,3 3,3 3,2 3,2 3,2 4,2 4,2 4,2 4,1 4,1 4,1 5,1 5,1 5,1 5,0 5,0 5,0 0,0 0,0 z" />
                            <Path x:Name="ArrowForeground" Grid.Column="1" SnapsToDevicePixels="True" Margin="0,0,0,0" HorizontalAlignment="Center" VerticalAlignment="Center" Width="Auto" Height="3" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownGlyphNormalForegroundFillKey}}" Stretch="None" Data="M 0,0 C0,0 0,1 0,1 0,1 1,1 1,1 1,1 1,2 1,2 1,2 2,2 2,2 2,2 2,3 2,3 2,3 3,3 3,3 3,3 3,2 3,2 3,2 4,2 4,2 4,2 4,1 4,1 4,1 5,1 5,1 5,1 5,0 5,0 5,0 0,0 0,0 z" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="Tag" Value="MouseOverControlTrue">
                            <Setter Property="Visibility" TargetName="ComboEditorDropdown" Value="Visible" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ArrowForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolPreviewPresenterDisabledArrowForegroundFillKey}}" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="ComboEditorDropdown" Value="Visible" />
                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownPressedBorderDarkFillKey}}" />
                            <Setter Property="Background" TargetName="InnerBorder_Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownPressedCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="InnerBorder_Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownPressedBorderLightFillKey}}" />
                            <Setter Property="BorderThickness" TargetName="InnerBorder_Center" Value="1,1,1,1" />
                            <Setter TargetName="ArrowForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownGlyphHoverForegroundFillKey}}" />
                            <Setter TargetName="ArrowBackground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownGlyphHoverBackgroundFillKey}}" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="ComboEditorDropdown" Value="Visible" />
                            <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownHoverBorderDarkFillKey}}" />
                            <Setter Property="BorderThickness" TargetName="InnerBorder_Center" Value="1,1,1,1" />
                            <Setter Property="Background" TargetName="InnerBorder_Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="InnerBorder_Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownHoverBorderLightFillKey}}" />
                            <Setter TargetName="ArrowBackground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownGlyphHoverBackgroundFillKey}}" />
                            <Setter TargetName="ArrowForeground" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.DropdownGlyphHoverForegroundFillKey}}" />
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboEditor_TextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboEditor_EditableComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid Background="Transparent" SnapsToDevicePixels="True">
            <Grid IsSharedSizeScope="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                </Grid.ColumnDefinitions>
                <Grid Grid.Column="0" Margin="{TemplateBinding Padding}">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <!-- SSP 6/24/11 TFS57835 Added InputMethod.PreferredImeState template binding. This property needs to be set
                                                    on the element that is given focus in the editors SetFocusToFocusSite.-->
                    <!-- SSP 11/14/11 TFS95730 - Added InputMethod.IsInputMethodEnabled template binding. -->
                    <TextBox Name="PART_EditableTextBox" Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" Grid.Column="1" Padding="-1,0,0,0" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Background="Transparent" Style="{StaticResource ComboEditor_TextBoxStyle}" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}" InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}" InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}" />
                    <!-- SSP 3/12/10 TFS27090 - Added support for displaying image (ComboBoxDataItem.Image). 
                        Added above Grid element and the following CardPanel element hierarchy.
                    -->
                    <igWindows:GrowOnlyDecorator x:Name="imageDecorator">
                        <igWindows:CardPanel x:Name="imagePanel" Visibility="Collapsed" VerticalAlignment="Center" Margin="1,0,-1,0">
                            <!-- This text block is used to make sure the image height is as tall as text because that's how
                                the image is displayed in the ComboBoxDataItem template.-->
                            <TextBlock x:Name="textBlock" Visibility="Hidden" VerticalAlignment="Center" />
                            <Image x:Name="image" Stretch="Uniform" StretchDirection="Both" VerticalAlignment="Center" Height="{Binding ElementName=textBlock, Path=ActualHeight, Mode=OneWay}" />
                        </igWindows:CardPanel>
                    </igWindows:GrowOnlyDecorator>
                </Grid>
                <!--SSP 11/9/10 TFS33587 - Added IsEnabled setter-->
                <ToggleButton Grid.Column="1" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{x:Null}" Style="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownButtonStyle, RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}" />
            </Grid>
            <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" VerticalOffset="1" HorizontalOffset="-1" IsOpen="{TemplateBinding IsDropDownOpen}" Focusable="False" SnapsToDevicePixels="True" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MinDropDownWidthResolved, RelativeSource={RelativeSource TemplatedParent}}" MaxWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}}">

                <luna:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">

                    <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderDarkFillKey}}" CornerRadius="2,2,2,2" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                        <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderLightFillKey}}" Margin="1,1,1,1" BorderThickness="1,1,1,1" CornerRadius="1,1,1,1" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                            <igWindows:PopupResizerDecorator ResizeMode="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownResizeMode, RelativeSource={RelativeSource TemplatedParent}}" ResizerBarStyle="{DynamicResource {x:Static igRibbon:XamRibbon.PopupResizerBarStyleKey}}">
                                <DockPanel>
                                    <!--JJD 07/06/10 - TFS32174-->
                                    <ContentPresenter DockPanel.Dock="Top" ContentTemplate="{Binding Path=PreDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igRibbon:ComboEditorTool}}}" />
                                    <!--JJD 07/06/10 - TFS32174-->
                                    <ContentPresenter DockPanel.Dock="Bottom" ContentTemplate="{Binding Path=PostDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igRibbon:ComboEditorTool}}}" />
                                    <ScrollViewer x:Name="ScrollViewer" Style="{StaticResource GalleryToolDropDownPresenter_ScrollViewer}" Width="Auto" HorizontalAlignment="Stretch">
                                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </DockPanel>
                            </igWindows:PopupResizerDecorator>
                        </Border>
                    </Border>
                </luna:SystemDropShadowChrome>
            </Popup>
        </Grid>

        <ControlTemplate.Triggers>
            <!-- AS 11/30/07 BR28788 -->
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" />
            </Trigger>

            <Trigger Property="HasItems" Value="False">
                <!--SSP 4/19/11 TFS72329 - Set the Height instead of MinHeight. Setting the MinHeight causes TFS72329
                where the drop-down is sized to the height of the resizer bar and doesn't show any items when the
                control is bound to items source.-->
                <!--<Setter TargetName="PART_Popup" Property="MinHeight" Value="95" />-->
                <Setter TargetName="PART_Popup" Property="Height" Value="95" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
                <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Foreground" />
                <!--<Setter Value="{DynamicResource {x:Static ControlBrush}}" Property="Background" />-->
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
            <!-- SSP 3/12/10 TFS27090 - Added support for displaying image (ComboBoxDataItem.Image). 
                Added the following MultiDataTrigger and the DataTrigger after that that sets the
                ResetSize on the image decorator.
            -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <!-- This condition checks to see if the SelectedItem is ComboBoxDataItem. -->
                    <Condition Value="True" Binding="{Binding Path=SelectedItem, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource typeCheckConverter}, ConverterParameter={x:Type igEditors:ComboBoxDataItem}, Mode=OneWay}" />
                    <!-- This condition checks to see if DisplayMemberPath is null or empty string. -->
                    <Condition Value="False" Binding="{Binding Path=DisplayMemberPath, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource nullToFalseConverter}, Mode=OneWay}" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="image" Property="Source" Value="{Binding Path=SelectedItem.Image, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=OneWay}" />
                <Setter TargetName="imagePanel" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <DataTrigger Value="False" Binding="{Binding Path=(igEditors:XamComboEditor.ComboEditor).IsInEditMode, RelativeSource={RelativeSource TemplatedParent}}">
                <Setter TargetName="imageDecorator" Property="ResetSize" Value="True" />
            </DataTrigger>
            <!-- SSP 5/11/10 TFS21311 -->
            <DataTrigger Value="True" Binding="{Binding Path=ContextMenu, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource nullToFalseConverter}}">
                <Setter TargetName="PART_EditableTextBox" Property="ContextMenu" Value="{Binding Path=ContextMenu, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboEditor_NonEditableComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid Background="Transparent" SnapsToDevicePixels="True">
            <Grid IsSharedSizeScope="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                </Grid.ColumnDefinitions>
                <Border Name="SelectedItemBorder" BorderBrush="Transparent" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}">
                    <ContentPresenter Grid.Column="1" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="1,0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </Border>
                <!--SSP 11/9/10 TFS33587 - Added IsEnabled setter-->
                <ToggleButton Grid.ColumnSpan="3" Style="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownButtonStyle, RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}" />
            </Grid>
            <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" VerticalOffset="1" HorizontalOffset="-1" IsOpen="{TemplateBinding IsDropDownOpen}" Focusable="False" SnapsToDevicePixels="True" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MinDropDownWidthResolved, RelativeSource={RelativeSource TemplatedParent}}" MaxWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}}">
                <!--SSP 11/5/10 TFS26988 - Commented out the MinHeight set and instead uncommented the 
                trigger that sets it further below.-->
                <!--MinHeight="95"-->
                <luna:SystemDropShadowChrome x:Name="Shdw" Color="Transparent">

                    <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderDarkFillKey}}" CornerRadius="2,2,2,2" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                        <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderLightFillKey}}" Margin="1,1,1,1" BorderThickness="1,1,1,1" CornerRadius="1,1,1,1" SnapsToDevicePixels="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                            <igWindows:PopupResizerDecorator ResizeMode="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownResizeMode, RelativeSource={RelativeSource TemplatedParent}}" ResizerBarStyle="{DynamicResource {x:Static igRibbon:XamRibbon.PopupResizerBarStyleKey}}">
                                <DockPanel>
                                    <!--JJD 07/06/10 - TFS32174-->
                                    <ContentPresenter DockPanel.Dock="Top" ContentTemplate="{Binding Path=PreDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igRibbon:ComboEditorTool}}}" />
                                    <!--JJD 07/06/10 - TFS32174-->
                                    <ContentPresenter DockPanel.Dock="Bottom" ContentTemplate="{Binding Path=PostDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igRibbon:ComboEditorTool}}}" />

                                    <ScrollViewer x:Name="ScrollViewer" Style="{StaticResource GalleryToolDropDownPresenter_ScrollViewer}" Width="Auto" HorizontalAlignment="Stretch">
                                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                </DockPanel>
                            </igWindows:PopupResizerDecorator>
                        </Border>
                    </Border>
                </luna:SystemDropShadowChrome>
            </Popup>
        </Grid>

        <ControlTemplate.Triggers>
            <!-- AS 11/30/07 BR28788 -->
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelectionBoxHighlighted" Value="True" />
                    <Condition Property="IsDropDownOpen" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" Property="Foreground" />
            </MultiTrigger>
            <Trigger Property="IsSelectionBoxHighlighted" Value="True">
                <Setter TargetName="SelectedItemBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
            </Trigger>
            <!-- SSP 11/9/07 BR27357 
				 For some mysterious reasons, setting MinHeight here causes BR27357 issue.
				 So instead of having a trigger that conditionally sets the MinHeight, just set the MinHeight.
				 This behavior is probably better anyways.
			-->
            <!--SSP 11/5/10 TFS26988 - Uncommented out the following trigger. We don't need it
            for BR27357 because in addition to this change, we had made other changes in the popup resizer
            to fix BR27357 which are all that's necessary.-->
            <Trigger Property="HasItems" Value="False">
                <!--SSP 4/19/11 TFS72329 - Set the Height instead of MinHeight. Setting the MinHeight causes TFS72329
                where the drop-down is sized to the height of the resizer bar and doesn't show any items when the
                control is bound to items source.-->
                <!--<Setter TargetName="PART_Popup" Property="MinHeight" Value="95" />-->
                <Setter TargetName="PART_Popup" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Foreground" />
                <!--<Setter Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Property="Background" />-->
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
                <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
            </Trigger>
            <!--SSP 11/9/10 TFS33587 - Disable auto-edit if the editor is read-only. Otherwise when characters are pressed,
                the combobox will select matching entries and and cause the value of the editor to change.-->
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="IsTextSearchEnabled" Value="False" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Static igRibbon:ComboEditorTool.ComboEditorToolComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Template" Value="{StaticResource ComboEditor_EditableComboBoxTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{StaticResource ComboEditor_NonEditableComboBoxTemplate}" />
        <!-- SSP 1/7/08 BR27432  - set IsSynchronizedWithCurrentItem to False -->
        <Setter Property="IsSynchronizedWithCurrentItem" Value="False" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <igEditors:VirtualizingStackPanelEx />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <!--SSP 11/7/07 BR27220
			In Non-Editable mode, we don't want to draw dashed focus rect which was happening when you toggle
			through items with keyboard.
			-->
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style />
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type igRibbon:ComboEditorTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2,2,2,2" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <!--<Setter Property="Margin" Value="{StaticResource TextEditorMargin}" />-->
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <!--SSP 11/2/07 Now this is being done in code. See ComboBoxStyleKey property of the XamComboEditor-->
        <!--<Setter Property="ComboBoxStyle" Value="{StaticResource ComboEditor_ComboBoxStyle}" />-->
        <Setter Property="DropDownButtonStyle" Value="{StaticResource ComboEditor_DropDownButtonStyle}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:ComboEditorTool}">
                    <!-- JM 09-05-18 TFS254718 - Change the StackPanel to a grid and bind the Width of the column containing the ComboBox to the EditAreaWidth property. -->
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="{TemplateBinding Property=EditAreaWidth}"/>
                        </Grid.ColumnDefinitions>
                        <igWindows:AutoDisabledImage Grid.Column="0"  Width="16" Height="16" x:Name="Image" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Visibility="Collapsed" Source="{TemplateBinding igRibbon:TextEditorTool.ImageResolved}" />
                        <ContentPresenter x:Name="Caption" Grid.Column="1"  Margin="0,0,5,0" Visibility="{Binding Path=(igRibbon:ButtonTool.HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Content="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}" />
                        <Border x:Name="MainBorder" Grid.Column="2"  SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" BorderThickness="1,1,1,1" Width="{TemplateBinding EditAreaWidth}" CornerRadius="0,0,0,0">
                            <Grid>
                                <!-- SSP 6/24/11 TFS57835 Added InputMethod.PreferredImeState template binding. -->
                                <!-- SSP 11/14/11 TFS95730 - Added InputMethod.IsInputMethodEnabled template binding. -->
                                <ComboBox Name="PART_FocusSite" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{TemplateBinding ReadOnly}" Background="Transparent" BorderBrush="Transparent" BorderThickness="0,0,0,0" ContextMenu="{TemplateBinding ContextMenu}" IsDropDownOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{TemplateBinding ComboBoxStyle}" IsEditable="{TemplateBinding IsEditable}" SelectedValuePath="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsProvider.ValuePath}" DisplayMemberPath="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsProvider.DisplayMemberPath}" MaxDropDownHeight="{TemplateBinding MaxDropDownHeight}" igEditors:XamComboEditor.ComboEditor="{Binding RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}" InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}" InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}" />

                                <Grid Name="TextBlockGrid">
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <TextBlock x:Name="TextBlock" Grid.Column="0" Padding="{TemplateBinding Padding}" Margin="1,0,0,0" Text="{TemplateBinding DisplayText}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                                    <!--SSP 11/9/10 TFS33587 - Added IsEnabled setter-->
                                    <ToggleButton x:Name="DropDownButton" Grid.Column="1" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" ClickMode="Press" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{TemplateBinding DropDownButtonStyle}" Visibility="Visible" IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}" />
                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <!-- JJD 12/11/07 Added condition to check if we are in a menu before doing the FindAncestor for ToolMenuItem to prevent binding errors -->
                                <Condition Binding="{Binding Path=Location, RelativeSource={RelativeSource Self}, Converter={x:Static igRibbon:ToolLocationToIsInMenuConverter.Instance}}" Value="True" />
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:ToolMenuItem}, 1}}" Value="True" />
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Caption" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </MultiDataTrigger>

                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
                            <Setter TargetName="TextBlock" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                        </Trigger>

                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />

                            <!-- AS 12/1/09 TFS24129 - Default margin when in the footer toolbar -->
                            <Setter Property="Margin" Value="6,0,0,0" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledCenterFillKey}}" />
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledBorderFillKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
                        </Trigger>

                        <Trigger SourceName="MainBorder" Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="MainBorder">
                            <Setter TargetName="DropDownButton" Property="Tag" Value="MouseOverControlTrue" />
                        </Trigger>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                            <Setter TargetName="PART_FocusSite" Property="Visibility" Value="Visible" />
                            <Setter TargetName="TextBlock" Property="Visibility" Value="Collapsed" />
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                        <Trigger Property="Location" Value="Ribbon">
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter TargetName="MainBorder" Property="CornerRadius" Value="1" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.HideAccessKey" Value="False">
                            <Setter TargetName="Caption" Property="RecognizesAccessKey" Value="True" />
                            <Setter TargetName="Caption" Property="Content" Value="{Binding Path=Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="igRibbon:RibbonToolHelper.SizingMode" Value="ImageOnly">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="EditTemplate">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igRibbon:ComboEditorTool}">
					<StackPanel Orientation="Horizontal">
						<TextBlock x:Name="Caption"
						Visibility="Collapsed"
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
						Text="{TemplateBinding Caption}"/>
						<Border x:Name="MainBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Width="{TemplateBinding EditAreaWidth}"
							>
							-->
        <!-- SSP 10/3/07 BR25672 Took the Margin="{TemplateBinding Padding}" code out of Border element above
								since the ComboBox below is already setting its Padding to that value. We don't want to
								substract the Padding twice. -->
        <!--
							<ComboBox
								Name="PART_FocusSite"
								Padding="{TemplateBinding Padding}"
								HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
								IsReadOnly="{TemplateBinding ReadOnly}"
								Background="Transparent"
								BorderBrush="Transparent"
								BorderThickness="0,0,0,0"
								Foreground="{TemplateBinding Foreground}"
								ContextMenu="{TemplateBinding ContextMenu}"
								IsDropDownOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
								Style="{TemplateBinding ComboBoxStyle}"
								IsEditable="{TemplateBinding IsEditable}"
								SelectedValuePath="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsProvider.ValuePath}"
								DisplayMemberPath="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsProvider.DisplayMemberPath}"
								MaxDropDownHeight="{TemplateBinding MaxDropDownHeight}"
								igEditors:XamComboEditor.ComboEditor="{TemplateBinding igEditors:XamComboEditor.ComboEditor}"
							/>
						</Border>
					</StackPanel>
					<ControlTemplate.Triggers>
						<Trigger Property="HasCaption" Value="True">
							<Setter TargetName="Caption" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsEmbedded" Value="False">
							<Setter TargetName="MainBorder" Property="CornerRadius" Value="1" />
						</Trigger>
						-->
        <!-- 
SSP 6/6/07 BR23366
Added trigger that sets IsTabStop to False based on IsInEditMode setting.
We need this in order to make the Tab and Shift+Tab navigation work properly.
Apparently presense of nested textbox causes Shift+Tab to misbehave and cause
the framwork to give focus to the parent ContentPresenter if the editor
is inside a HeaderedContentControl. This is similar to what inbox ComboBox
does.
-->
        <!--
						<Trigger Property="IsInEditMode" Value="True">
							<Setter Property="IsTabStop" Value="False" />
							<Setter Property="Background" TargetName="MainBorder" Value="#FFFFFFFF"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>-->
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
            </MultiTrigger>
            <Trigger Property="IsInEditMode" Value="True">
                <!-- SSP 5/13/10 TFS30701 - Commented out setting of ClipToBounds which I believe was
                added to clip the caret element and so instead added the necessary code to clip the caret
                in XamMaskedEditor.ArrangeOverride. This bug-fix was done to make the UIElement.Effect work. -->
                <!--<Setter Property="ClipToBounds" Value="True" />-->
                <!--
// SSP 3/15/07 BR21086 BR20704
// Do this through the style via a trigger so when the masked editor is not in edit mode, it draws 
// the focus rect. For example, in DataPresenter when the cell exits edit mode via Escape key, the
// editor retains focus and is not in edit mode. In such a case, it should draw focus rect.
-->
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- PopupResizerBar Style -->
    <!-- =================================================================== -->

    <Style x:Key="{x:Static igRibbon:XamRibbon.PopupResizerBarStyleKey}" TargetType="{x:Type igWindows:PopupResizerBar}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="Height" Value="12" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igWindows:PopupResizerBar}">
                    <Grid x:Name="BorderStrokeWhenTop" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarStrokeKey}}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                        <Border x:Name="Footer" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGradientKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarStrokeKey}}" BorderThickness="0,1,0,0" CornerRadius="0,0,2,2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Margin="0,0,0,0">
                            <igWindows:CardPanel Margin="{TemplateBinding Padding}">
                                <igWindows:CardPanel x:Name="GlyphArea">

                                    <!-- the thumb is transparent and needs to be placed after the glyphs so that it is on top with respect to z-order -->
                                    <Thumb x:Name="PART_Thumb" Background="Transparent" Foreground="Transparent" Opacity="0" />

                                    <!-- the glyph that is used when the resizemode is Both and the location is Bottom-->
                                    <Grid x:Name="BottomRightGlyph" Visibility="Collapsed" Width="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight, Mode=OneWay}" VerticalAlignment="Bottom" HorizontalAlignment="Right" Margin="0,0,1,1" Background="{x:Null}" IsHitTestVisible="False">
                                        <Path Margin="1,1,0,0" VerticalAlignment="Top" Height="6" Stretch="Fill" Opacity="1" Data="M 1,6 C1,6.5522918701171875 1.4477081298828125,7 2,7 2.5522918701171875,7 3,6.5522918701171875 3,6 3,5.4477081298828125 2.5522918701171875,5 2,5 1.4477081298828125,5 1,5.4477081298828125 1,6 zM 5,2 C5,2.5522918701171875 5.4477081298828125,3 6,3 6.5522918701171875,3 7,2.5522918701171875 7,2 7,1.4477081298828125 6.5522918701171875,1 6,1 5.4477081298828125,1 5,1.4477081298828125 5,2 zM 5,6 C5,6.5522918701171875 5.4477081298828125,7 6,7 6.5522918701171875,7 7,6.5522918701171875 7,6 7,5.4477081298828125 6.5522918701171875,5 6,5 5.4477081298828125,5 5,5.4477081298828125 5,6 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphNormalBackgroundFillKey}}" SnapsToDevicePixels="True" HorizontalAlignment="Left" Width="6" />
                                        <Grid Opacity="1" Margin="0,0,0,0" HorizontalAlignment="Left" Width="6">
                                            <Path Margin="0,4,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="2" Width="2" Stretch="Fill" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}" Opacity="1" Data="M 0,5 C0,4.4477081298828125 0.4477081298828125,4 1,4 1.5522918701171875,4 2,4.4477081298828125 2,5 2,5.5522918701171875 1.5522918701171875,6 1,6 0.4477081298828125,6 0,5.5522918701171875 0,5 z" SnapsToDevicePixels="True" />
                                            <Path Margin="4,4,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="2" Width="2" Stretch="Fill" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}" Opacity="1" Data="M 4,5 C4,4.4477081298828125 4.4477081298828125,4 5,4 5.5522918701171875,4 6,4.4477081298828125 6,5 6,5.5522918701171875 5.5522918701171875,6 5,6 4.4477081298828125,6 4,5.5522918701171875 4,5 z" SnapsToDevicePixels="True" />
                                            <Path Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="2" Width="2" Stretch="Fill" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}" Opacity="1" Data="M 4,1 C4,0.4477081298828125 4.4477081298828125,0 5,0 5.5522918701171875,0 6,0.4477081298828125 6,1 6,1.5522918701171875 5.5522918701171875,2 5,2 4.4477081298828125,2 4,1.5522918701171875 4,1 z" SnapsToDevicePixels="True" />
                                        </Grid>
                                    </Grid>

                                    <!-- the glyph that is used when the resizemode is Both and the location is Top-->
                                    <Grid x:Name="TopRightGlyph" Visibility="Collapsed" d:LayoutOverrides="HorizontalAlignment" Background="{x:Null}" Width="{Binding RelativeSource={RelativeSource Self}, Path=ActualHeight, Mode=OneWay}" IsHitTestVisible="False">
                                        <Path SnapsToDevicePixels="True" HorizontalAlignment="Right" Margin="0,1,2,0" VerticalAlignment="Top" Width="6" Height="6" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphNormalBackgroundFillKey}}" Stretch="Fill" Data="F1 M1,2.9802322E-08 C1.5522847,0 2,0.44771525 2,1 C2,1.5522847 1.5522847,2 1,2 0.44771525,2 0,1.5522847 -5.9604645E-08,1 0,0.44771525 0.44771525,0 1,2.9802322E-08 z M1,-4 C1.5522847,-4 2,-3.5522847 2,-3 C2,-2.4477153 1.5522847,-2 1,-2 0.44771525,-2 0,-2.4477153 -5.9604645E-08,-3 0,-3.5522847 0.44771525,-4 1,-4 z M-3,-4 C-2.4477153,-4 -2,-3.5522847 -2,-3 C-2,-2.4477153 -2.4477153,-2 -3,-2 -3.5522847,-2 -4,-2.4477153 -4,-3 -4,-3.5522847 -3.5522847,-4 -3,-4 z" />
                                        <Grid Opacity="1" Margin="0,0,0,0" HorizontalAlignment="Right" Width="Auto" VerticalAlignment="Top">
                                            <Path Margin="0,2,7,0" HorizontalAlignment="Right" VerticalAlignment="Top" Height="2" Width="2" Stretch="Fill" Opacity="1" Data="M 0,5 C0,4.4477081298828125 0.4477081298828125,4 1,4 1.5522918701171875,4 2,4.4477081298828125 2,5 2,5.5522918701171875 1.5522918701171875,6 1,6 0.4477081298828125,6 0,5.5522918701171875 0,5 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}" />
                                            <Path Margin="0,6,3,0" HorizontalAlignment="Right" VerticalAlignment="Top" Height="2" Width="2" Stretch="Fill" Opacity="1" Data="M 4,5 C4,4.4477081298828125 4.4477081298828125,4 5,4 5.5522918701171875,4 6,4.4477081298828125 6,5 6,5.5522918701171875 5.5522918701171875,6 5,6 4.4477081298828125,6 4,5.5522918701171875 4,5 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}" />
                                            <Path Margin="0,2,3,0" HorizontalAlignment="Right" VerticalAlignment="Top" Height="2" Width="2" Stretch="Fill" Opacity="1" Data="M 4,1 C4,0.4477081298828125 4.4477081298828125,0 5,0 5.5522918701171875,0 6,0.4477081298828125 6,1 6,1.5522918701171875 5.5522918701171875,2 5,2 4.4477081298828125,2 4,1.5522918701171875 4,1 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}" />
                                        </Grid>
                                    </Grid>

                                    <!-- the glyph that is used when the resizemode is VerticalOnly-->

                                    <Grid x:Name="VerticalOnlyGlyph" IsHitTestVisible="False" Visibility="Collapsed" Margin="0,0,0,0" HorizontalAlignment="Center" Width="Auto" VerticalAlignment="Center" Height="Auto">
                                        <Path SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="1,1,0,0" x:Name="WhiteShadows" VerticalAlignment="Top" Width="17" Height="2" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphNormalBackgroundFillKey}}" Stretch="None" Data="F1 M16,5.9604645E-08 C16.552284,0 17,0.44771525 17,1 C17,1.5522847 16.552284,2 16,2 15.447715,2 15,1.5522847 15,1 15,0.44771525 15.447715,0 16,5.9604645E-08 z M11,5.9604645E-08 C11.552285,0 12,0.44771525 12,1 C12,1.5522847 11.552285,2 11,2 10.447715,2 10,1.5522847 10,1 10,0.44771525 10.447715,0 11,5.9604645E-08 z M6,5.9604645E-08 C6.5522847,0 7,0.44771525 7,1 C7,1.5522847 6.5522847,2 6,2 5.4477153,2 5,1.5522847 5,1 5,0.44771525 5.4477153,0 6,5.9604645E-08 z M0.99999994,5.9604645E-08 C1.5522847,0 2,0.44771525 1.9999999,1 C2,1.5522847 1.5522847,2 0.99999994,2 0.44771525,2 0,1.5522847 0,1 0,0.44771525 0.44771525,0 0.99999994,5.9604645E-08 z" />
                                        <Path Height="2" Width="2" Stretch="Fill" Opacity="1" Data="M 4,5 C4,4.4477081298828125 4.4477081298828125,4 5,4 5.5522918701171875,4 6,4.4477081298828125 6,5 6,5.5522918701171875 5.5522918701171875,6 5,6 4.4477081298828125,6 4,5.5522918701171875 4,5 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}" HorizontalAlignment="Left" Margin="0,0,6,0" x:Name="_1" VerticalAlignment="Top" />
                                        <Path Margin="5,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="2" Width="2" Stretch="Fill" Opacity="1" Data="M 0,5 C0,4.4477081298828125 0.4477081298828125,4 1,4 1.5522918701171875,4 2,4.4477081298828125 2,5 2,5.5522918701171875 1.5522918701171875,6 1,6 0.4477081298828125,6 0,5.5522918701171875 0,5 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}" x:Name="_2" />
                                        <Path Margin="10,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="2" Width="2" Stretch="Fill" Opacity="1" Data="M 4,5 C4,4.4477081298828125 4.4477081298828125,4 5,4 5.5522918701171875,4 6,4.4477081298828125 6,5 6,5.5522918701171875 5.5522918701171875,6 5,6 4.4477081298828125,6 4,5.5522918701171875 4,5 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}" x:Name="_3" />
                                        <Path Margin="15,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Height="2" Width="2" Stretch="Fill" Opacity="1" Data="M 4,1 C4,0.4477081298828125 4.4477081298828125,0 5,0 5.5522918701171875,0 6,0.4477081298828125 6,1 6,1.5522918701171875 5.5522918701171875,2 5,2 4.4477081298828125,2 4,1.5522918701171875 4,1 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}" x:Name="_4" />
                                    </Grid>

                                </igWindows:CardPanel>
                            </igWindows:CardPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="Both" />
                                <Condition Property="Location" Value="Bottom" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="BottomRightGlyph" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_Thumb" Property="Cursor" Value="SizeNWSE" />
                            <Setter TargetName="GlyphArea" Property="HorizontalAlignment" Value="Right" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="Both" />
                                <Condition Property="Location" Value="Bottom" />
                                <Condition Property="FlowDirection" Value="RightToLeft" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Thumb" Property="Cursor" Value="SizeNESW" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="Both" />
                                <Condition Property="Location" Value="Top" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="TopRightGlyph" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_Thumb" Property="Cursor" Value="SizeNESW" />
                            <Setter TargetName="GlyphArea" Property="HorizontalAlignment" Value="Right" />
                            <Setter TargetName="Footer" Property="BorderThickness" Value="0,0,0,0" />
                            <Setter TargetName="Footer" Property="CornerRadius" Value="2,2,2,2" />
                            <Setter TargetName="Footer" Property="Margin" Value="0,0,0,1" />
                            <Setter TargetName="BorderStrokeWhenTop" Property="Visibility" Value="Visible" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="Both" />
                                <Condition Property="Location" Value="Top" />
                                <Condition Property="FlowDirection" Value="RightToLeft" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Thumb" Property="Cursor" Value="SizeNWSE" />
                        </MultiTrigger>

                        <Trigger Property="ResizeMode" Value="VerticalOnly">
                            <Setter TargetName="VerticalOnlyGlyph" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_Thumb" Property="Cursor" Value="SizeNS" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--<Style x:Key="{x:Static igRibbon:XamRibbon.PopupResizerBarStyleKey}"
         TargetType="{x:Type igWindows:PopupResizerBar}">
    
  </Style>-->

    <!-- =================================================================== -->
    <!-- RibbonContextMenu Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:RibbonContextMenu}">
        <!-- JJD 03/21/14 - TFS167123 
            Set the font properties so we don't inherit the target element's settings -->
        <Setter Property="FontSize" Value="11" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource Self}, Path=(igRibbon:XamRibbon.Ribbon).PreferredFont, FallbackValue='Segoe UI'}" />
        <Setter Property="FontStyle" Value="Normal" />
        <Setter Property="FontStretch" Value="Normal" />
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:RibbonContextMenu}">
                    <Border Name="SubMenuBorder" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderLightFillKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderDarkFillKey}}" CornerRadius="2,2,2,2">
                        <Grid Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderLightFillKey}}" Width="Auto" Height="Auto" Margin="1,1,1,1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="IconArea" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto" />
                                <!--SSP/JJD 10/15/07
									 Use the '*' for Width instead of 'Auto' because 'Auto' will cause the menu to be unreasonably 
									 wide for the ComboEditorTool because 'MenuItemIconColumnGroup' shared size group will cause it
									 unless '*' is used.
								-->
                                <!--<ColumnDefinition x:Name="TextArea" Width="Auto"/>-->
                                <ColumnDefinition x:Name="TextArea" Width="*" />
                            </Grid.ColumnDefinitions>

                            <!-- JJD 12/4/07 - BR28873 -->
                            <!-- Moved icon area background to menu item templates -->
                            <!--<Border 
							Grid.Column="0" 
							Grid.ColumnSpan="1" 
							SnapsToDevicePixels="True" 
							Margin="0,0,0,0" 
							x:Name="LeftIconArea" 
							Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuToolPresenterLeftColumnFillKey}}" 
							CornerRadius="1,0,0,1"
							 HorizontalAlignment="Left" 
							 Width="25" 
							 BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionStrokeFillKey}}" 
							 BorderThickness="0,0,1,0"/>-->

                            <Border Grid.Column="1" Grid.ColumnSpan="1" Margin="0,0,0,0" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpCenterFillKey}}" CornerRadius="0,2,2,0" SnapsToDevicePixels="True" />

                            <Grid Margin="0,0,0,0" Grid.Column="0" Grid.ColumnSpan="2" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Width="Auto" Height="Auto">

                                <ItemsPresenter KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.IsSharedSizeScope="true" />

                            </Grid>

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- Caption ContentControl Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type ContentControl}" x:Key="{x:Static igRibbon:RibbonCaptionPanel.CaptionStyleKey}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionActiveTextForegroundKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <!-- 8/19/11 TFS83576 -->
                    <igRibbon:OuterGlowDecorator x:Name="CaptionTextGlow" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                        <TextBlock x:Name="CaptionText" Text="{TemplateBinding Content}" FontSize="{DynamicResource {x:Static SystemFonts.CaptionFontSizeKey}}" FontStyle="{DynamicResource {x:Static SystemFonts.CaptionFontStyleKey}}" TextDecorations="{DynamicResource {x:Static SystemFonts.CaptionFontTextDecorationsKey}}" TextTrimming="CharacterEllipsis" />
                    </igRibbon:OuterGlowDecorator>
                    <ControlTemplate.Triggers>

                        <!-- Glow when on Vista with glass enabled -->
                        <!-- 8/19/11 TFS83576
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
								<Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="CaptionText" Property="BitmapEffect" Value="{igWindows:SafeOuterGlow GlowColor=White, GlowSize=10, Opacity=0.6}"/>
						</MultiDataTrigger>-->
                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter TargetName="CaptionTextGlow" Property="IsGlowVisible" Value="True" />
                        </DataTrigger>

                        <!--<DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True">
							<Setter Property="BitmapEffect" Value="{igWindows:SafeOuterGlow GlowColor=White, GlowSize=10, Opacity=0.6}"/>
						</DataTrigger>-->

                        <!-- Inactive caption foreground -->
                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).IsRibbonWindowActive, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionInactiveTextForegroundKey}}" />
                        </DataTrigger>

                        <!-- Inactive glass caption foreground -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveCaptionTextBrushKey}}" />
                        </MultiDataTrigger>

                        <!-- Active glass caption foreground -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" />
                        </MultiDataTrigger>

                        <!-- Active glass caption foreground when WindowState=Maximized -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <!-- 8/19/11 TFS83576
								<Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Maximized" />-->
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VistaWindowMaximizedTextFillKey}}" />
                        </MultiDataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!--                         NA 13.1 Backstage                           -->
    <!-- =================================================================== -->

    <ig:ColorBlendConverter x:Key="overlayBlendConverter" BlendMode="Overlay" />
    <ig:CalculatedForegroundConverter x:Key="calculatedForegroundConverter" />

    <!-- =================================================================== -->
    <!-- ApplicationMenu2010FileTab Style -->
    <!-- =================================================================== -->
    <Style TargetType="igRibbon:ApplicationMenu2010FileTab">
        <Setter Property="MinHeight" Value="17" />
        <Setter Property="Margin" Value="0,1,0,0" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igRibbon:ApplicationMenu2010FileTab">
                    <ToggleButton x:Name="orbPanel" SnapsToDevicePixels="True" Width="56" Focusable="false" HorizontalAlignment="Left" VerticalAlignment="Stretch" ClickMode="Press" Foreground="{TemplateBinding Foreground}" IsChecked="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationMenu2010.IsOpen, RelativeSource={x:Static RelativeSource.Self}, Mode=TwoWay}">
                        <ToggleButton.Template>
                            <ControlTemplate TargetType="ToggleButton">
                                <ContentPresenter />
                            </ControlTemplate>
                        </ToggleButton.Template>
                        <Grid>
                            <Border x:Name="OuterBorder" BorderThickness="1,1,1,0" CornerRadius="3,3,0,0">
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF575757}" />
                                </Border.BorderBrush>
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF666666}" Offset="0.5" />
                                        <GradientStop Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF919191}" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Border x:Name="InnerBorder" BorderBrush="White" BorderThickness="1,1,1,0" CornerRadius="2,2,0,0" Opacity="0.2" />
                            </Border>
                            <Border x:Name="TabSelectedBorder" BorderThickness="1,1,1,0" CornerRadius="3,3,0,0" Visibility="Collapsed">
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, ConverterParameter=#FF575757, Converter={StaticResource overlayBlendConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                                </Border.BorderBrush>
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF555555}" Offset="0.5" />
                                        <GradientStop Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF7D7D7D}" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Border BorderBrush="White" BorderThickness="1,1,1,0" CornerRadius="2,2,0,0" Opacity="0.1" />
                            </Border>
                            <Border x:Name="HoverEffect" Opacity="0.2">
                                <Border.Background>
                                    <RadialGradientBrush Center="0.5,1" GradientOrigin="0.5,1">
                                        <GradientStop Color="#FFAAAAAA" Offset="0" />
                                        <GradientStop Color="#FFFFFFFF" />
                                        <GradientStop Offset="1" />
                                    </RadialGradientBrush>
                                </Border.Background>
                                <Border Opacity="0.3" CornerRadius="2,2,0,0" Margin="2 1 2 0">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="1,0" EndPoint="1,1">
                                            <GradientStop Offset="0" Color="#00FFFFFF" />
                                            <GradientStop Offset="0.2" Color="#FFFFFFFF" />
                                            <GradientStop Offset="1" Color="#00FFFFFF" />
                                        </LinearGradientBrush>
                                    </Border.Background>
                                </Border>
                            </Border>
                            <igWindows:CardPanel SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <Image x:Name="appMenuImage" MaxHeight="16" Stretch="Uniform" StretchDirection="DownOnly" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="True" Source="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationMenu2010.Image, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                                <Viewbox x:Name="appMenuCaption" Stretch="Uniform" StretchDirection="DownOnly" Visibility="Collapsed" Margin="3,4,3,3">
                                    <TextBlock Text="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationMenu2010.Caption, RelativeSource={RelativeSource TemplatedParent}}" />
                                </Viewbox>
                            </igWindows:CardPanel>
                        </Grid>
                    </ToggleButton>

                    <ControlTemplate.Triggers>
                        <!--<DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter TargetName="orbPanel" Property="Margin" Value="2,6,0,0" />
                        </DataTrigger>-->
                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationMenu2010.HasCaption, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter TargetName="appMenuCaption" Property="Visibility" Value="Visible" />
                            <Setter TargetName="appMenuImage" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationMenu2010.IsOpen, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter TargetName="OuterBorder" Property="Margin" Value="0,0,0,-1" />
                            <Setter TargetName="HoverEffect" Property="Margin" Value="0,0,0,-1" />
                            <Setter TargetName="TabSelectedBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="TabSelectedBorder" Property="Margin" Value="0,0,0,-1" />
                            <!-- Open - may or may not be hottracked -->
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!-- Hottracked - may or may not be open -->
                            <Setter TargetName="InnerBorder" Property="Opacity" Value="0.3" />
                            <Setter TargetName="HoverEffect" Property="Opacity" Value="0.4" />
                        </Trigger>
                        <!-- TODO remove or use
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationMenu2010.IsOpen, RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                        </MultiDataTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- JJD 01/09/14 - NA 2014 vol 1 - Added 2013 Backstage feature -->
    <!-- ================================================================================ -->
    <!-- BackButtonStyleKey Style used inside ApplicationMenu2010 in the Office2013 theme -->
    <!-- ================================================================================ -->
    <Style TargetType="Button" x:Key="{x:Static igRibbon:ApplicationMenu2010.BackButtonStyleKey }">
        <Setter Property="Margin" Value="20,16,0,14"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent">
                        <Path x:Name="Arrow" Data="M13.199192,10.544 L15.588939,10.544 10.817003,15.170555 23.6345,15.170555 23.6345,16.844623 10.809481,16.844623 15.637943,21.544 13.248196,21.544 7.6344999,16.004237 z M16,2 C8.2680135,2 2,8.2680132 2,16 2,23.731987 8.2680135,29.999999 16,29.999999 23.731987,29.999999 30,23.731987 30,16 30,8.2680132 23.731987,2 16,2 z M16,0 C24.836555,0 32,7.1634438 32,16 32,24.836555 24.836555,31.999999 16,31.999999 7.1634441,31.999999 0,24.836555 0,16 0,7.1634438 7.1634441,0 16,0 z"
                              Fill="#FFFFFFFF" Height="35" Stretch="Fill" Width="35"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FFDDDDDD}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- =================================================================== -->
    <!-- ApplicationMenu2010 Style -->
    <!-- =================================================================== -->
    <Style TargetType="igRibbon:ApplicationMenu2010">
        <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Cycle" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Cycle" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Background" Value="White" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igRibbon:ApplicationMenu2010">
                    <!-- the entire area scrolls as a unit -->
                    <ScrollViewer Focusable="False">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="1" />
                                <RowDefinition Height="1" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border Grid.Row="0" Height="1" VerticalAlignment="Top" SnapsToDevicePixels="True">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0, 0.5" EndPoint="1, 0.5">
                                        <GradientStop Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF919191}" Offset="0" />
                                        <GradientStop Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#00919191}" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                            <Border Grid.Row="1" Height="1" VerticalAlignment="Top" SnapsToDevicePixels="True">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0, 0.5" EndPoint="1, 0.5">
                                        <GradientStop Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF575757}" Offset="0" />
                                        <GradientStop Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#00575757}" Offset="1" />
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                            <Grid Grid.Row="2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenu2010ItemAreaCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenu2010ItemAreaBorderFillKey}}" BorderThickness="0,0,1,0">
                                    <igWindows:CardPanel>
                                        <!-- gray semi-transparent gradient on the right edge -->
                                        <Border Width="5" HorizontalAlignment="Right">
                                            <Border.Background>
                                                <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                                                    <GradientStop Color="#00888888" Offset="0" />
                                                    <GradientStop Color="#33000000" Offset="1" />
                                                </LinearGradientBrush>
                                            </Border.Background>
                                        </Border>
                                        <ItemsPresenter Margin="0,0,-1,0" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Once" />
                                    </igWindows:CardPanel>
                                </Border>
                                <ContentPresenter x:Name="PART_SelectedTabContentHost" KeyboardNavigation.DirectionalNavigation="Cycle" Content="{Binding SelectedTab.Content, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{Binding SelectedTab.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplateSelector="{Binding SelectedTab.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" ContentStringFormat="{Binding SelectedTab.ContentStringFormat, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="{Binding SelectedTab.HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding SelectedTab.VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" Grid.Column="1" />
                            </Grid>
                        </Grid>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- ApplicationMenu2010Item Style -->
    <!-- =================================================================== -->
    <ControlTemplate TargetType="igRibbon:ApplicationMenu2010Item" x:Key="{x:Static igRibbon:ApplicationMenu2010Item.ButtonTemplateKey}">
        <Grid>
            <Border Margin="6,0" CornerRadius="1" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Opacity="0.3" />
            <Border x:Name="outerBorder" Margin="6,0" CornerRadius="1" BorderThickness="1" SnapsToDevicePixels="True">
                <Border x:Name="innerBorder" Padding="14,3" CornerRadius="1" BorderThickness="1" Background="Transparent">
                    <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <igWindows:AutoDisabledImage x:Name="image" Width="16" Height="16" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Visibility="{Binding Path=HasImage, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" Source="{TemplateBinding Image}" />
                        <ContentPresenter RecognizesAccessKey="True" Grid.Column="1" ContentSource="Header" igRibbon:XamRibbon.KeyTipPlacementType="Caption" />
                    </Grid>
                </Border>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="Background" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource Self}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FFDDDDDD}" />
                <Setter Property="Foreground" Value="{Binding Path=Background.Color, RelativeSource={RelativeSource Self}, Converter={StaticResource calculatedForegroundConverter}}" />
                <Setter TargetName="outerBorder" Property="BorderBrush" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource Self}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF999999}" />
                <Setter TargetName="innerBorder" Property="BorderBrush" Value="#DDFFFFFF" />
            </Trigger>
            <Trigger Property="IsMouseOverTab" Value="True">
                <Setter Property="Background" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource Self}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FFDDDDDD}" />
                <Setter Property="Foreground" Value="{Binding Path=Background.Color, RelativeSource={RelativeSource Self}, Converter={StaticResource calculatedForegroundConverter}}" />
                <Setter TargetName="outerBorder" Property="BorderBrush" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource Self}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF999999}" />
                <Setter TargetName="innerBorder" Property="BorderBrush" Value="#DDFFFFFF" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GrayTextBrushKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="igRibbon:ApplicationMenu2010Item" x:Key="{x:Static igRibbon:ApplicationMenu2010Item.TabTemplateKey}">
        <Grid Background="Transparent">
            <Grid Margin="0 1">
                <Border Background="{TemplateBinding Background}" Opacity="0.4" />
                <Grid x:Name="TabSelectedBg" Visibility="Collapsed" Background="{TemplateBinding Background}">
                    <Rectangle Height="1" VerticalAlignment="Bottom" Opacity="0.65" Fill="#FF181818" />
                    <Rectangle Height="1" VerticalAlignment="Top" Opacity="0.65" Fill="#FF181818" />
                    <Rectangle Margin="0 2">
                        <Rectangle.Fill>
                            <LinearGradientBrush StartPoint="0,1" EndPoint="1,1">
                                <GradientStop Offset="0" Color="#00FFFFFF" />
                                <GradientStop Offset="0.5" Color="#33FFFFFF" />
                                <GradientStop Offset="1" Color="#00FFFFFF" />
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle>
                        <Rectangle.Fill>
                            <RadialGradientBrush Center="0.510,1" GradientOrigin="0.510,1" RadiusX="0.822" RadiusY="0.822" Opacity="0.5">
                                <GradientStop Offset="0" Color="#E5FFFFFF" />
                                <GradientStop Offset="0.3" Color="#7FFFFFFF" />
                                <GradientStop Offset="1" Color="#00FFFFFF" />
                            </RadialGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <!-- <Rectangle Margin="0,1,0,1">
                                	<Rectangle.Fill>
                                		<RadialGradientBrush  Center="0.5,1" GradientOrigin="0.5,1" RadiusX="0.5" RadiusY="1" Opacity="0.5">
                                			<GradientStop Offset="0" Color="#00000000"/>
                                			<GradientStop Offset="0.38" Color="#19000000"/>
                                			<GradientStop Offset="1" Color="#2D000000"/>
                                		</RadialGradientBrush>
                                	</Rectangle.Fill>
                                </Rectangle>-->
                    <Rectangle Height="5" Margin="0,0,0,1" VerticalAlignment="Bottom">
                        <Rectangle.Fill>
                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                <GradientStop Offset="0" Color="#00000000" />
                                <GradientStop Offset="1" Color="#2D000000" />
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle Height="5" Margin="0,1,0,0" VerticalAlignment="Top">
                        <Rectangle.Fill>
                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                <GradientStop Offset="0" Color="#2D000000" />
                                <GradientStop Offset="1" Color="#00000000" />
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                </Grid>
                <Border x:Name="outerBorder" BorderThickness="0,1">
                    <Border x:Name="innerBorder" Padding="21,10" BorderBrush="Transparent" BorderThickness="0,1" SnapsToDevicePixels="True">
                        <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <igWindows:AutoDisabledImage x:Name="image" Width="16" Height="16" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Visibility="{Binding Path=HasImage, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" Source="{TemplateBinding Image}" />
                            <ContentPresenter RecognizesAccessKey="True" x:Name="header" Grid.Column="1" TextElement.FontSize="{Binding Path=(TextElement.FontSize), ElementName=outerBorder, Converter={StaticResource applicationMenuTabFontConverter}}" ContentSource="Header" igRibbon:XamRibbon.KeyTipPlacementType="Caption" />
                        </Grid>
                    </Border>
                </Border>
            </Grid>
            <Path Data="M 0,8 8,0 8,15 Z" Fill="{Binding Path=Background, RelativeSource={RelativeSource AncestorType=igRibbon:ApplicationMenu2010}}" Stretch="None" HorizontalAlignment="Right" VerticalAlignment="Center" Visibility="{Binding Path=IsSelectedTab, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSelectedTab" Value="True">
                <Setter Property="Background" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource Self}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF666666}" />
                <Setter Property="TextElement.Foreground" TargetName="header" Value="{Binding Path=Background.Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource calculatedForegroundConverter}}" />
                <Setter TargetName="TabSelectedBg" Property="Visibility" Value="Visible" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelectedTab" Value="False" />
                    <Condition Property="IsMouseOverTab" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource Self}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FFDDDDDD}" />
                <Setter Property="TextElement.Foreground" TargetName="header" Value="{Binding Path=Background.Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource calculatedForegroundConverter}}" />
                <Setter TargetName="outerBorder" Property="BorderBrush" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource Self}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF999999}" />
                <Setter TargetName="innerBorder" Property="BorderBrush" Value="#DDFFFFFF" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="header" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GrayTextBrushKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="igRibbon:ApplicationMenu2010Item">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template" Value="{DynamicResource {x:Static igRibbon:ApplicationMenu2010Item.ButtonTemplateKey}}" />
        <Style.Triggers>
            <Trigger Property="ItemType" Value="Tab">
                <Setter Property="Template" Value="{DynamicResource {x:Static igRibbon:ApplicationMenu2010Item.TabTemplateKey}}" />
            </Trigger>

            <!-- Do not show the default focus for buttons - only for the tabs -->
            <Trigger Property="ItemType" Value="Button">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- ApplicationMenu2010Separator Style -->
    <!-- =================================================================== -->
    <Style TargetType="igRibbon:ApplicationMenu2010Separator">
        <Setter Property="Padding" Value="6,2,6,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igRibbon:ApplicationMenu2010Separator">
                    <igWindows:CardPanel SnapsToDevicePixels="true" Margin="{TemplateBinding Padding}">
                        <igWindows:CardPanel.OpacityMask>
                            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                                <GradientStop Color="#00000000" Offset="0" />
                                <GradientStop Color="#99000000" Offset="0.2" />
                                <GradientStop Color="#FF000000" Offset="0.5" />
                                <GradientStop Color="#99000000" Offset="0.8" />
                                <GradientStop Color="#00000000" Offset="1" />
                            </LinearGradientBrush>
                        </igWindows:CardPanel.OpacityMask>
                        <Rectangle Height="1" Margin="0,0,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.HorizontalSeparatorNormalDarkFillKey}}" SnapsToDevicePixels="true" />
                        <Rectangle Height="1" Margin="0,1,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.HorizontalSeparatorNormalLightFillKey}}" SnapsToDevicePixels="true" />
                    </igWindows:CardPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>