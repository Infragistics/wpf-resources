<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:compModel="clr-namespace:System.ComponentModel;assembly=PresentationFramework"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:igEditors="http://infragistics.com/Editors"
	xmlns:igRibbon="http://infragistics.com/Ribbon"
	xmlns:igThemes="http://infragistics.com/Themes"
	xmlns:igWindows="http://infragistics.com/Windows"
	xmlns:interop="clr-namespace:System.Windows.Interop;assembly=PresentationFramework"
	xmlns:luna="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Luna"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:sys="clr-namespace:System;assembly=mscorlib"
	xmlns:themes="http://infragistics.com/Themes"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:ig="http://schemas.infragistics.com/xaml"
	mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="RibbonGeneric.xaml"/>
        <ResourceDictionary Source="RibbonScenic.xaml"/>
        <ResourceDictionary Source="RibbonMetroDarkBrushes.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!-- =================================================================== -->
    <!-- TextEditorTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:TextEditorTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="4,0,4,0" />
        <Setter Property="Margin" Value="1,0,1,0" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:TextEditorTool}">
                    <!-- JM 09-05-18 TFS254718 - Change the StackPanel to a grid and bind the Width of the column containing the ComboBox to the EditAreaWidth property. -->
                    <Grid Background="#00000000">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="{TemplateBinding Property=EditAreaWidth}"/>
                        </Grid.ColumnDefinitions>
                        <igWindows:AutoDisabledImage Grid.Column="0" Width="16" Height="16" x:Name="Image" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Visibility="Collapsed" Source="{TemplateBinding igRibbon:TextEditorTool.ImageResolved}" />
                        <ContentPresenter x:Name="Caption" Grid.Column="1" Margin="0,-1,5,0" Visibility="{Binding Path=(igRibbon:ButtonTool.HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}" />
                        <Border x:Name="MainBorder" Grid.Column="2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" BorderThickness="1,1,1,1" SnapsToDevicePixels="True" Width="{TemplateBinding EditAreaWidth}">
                            <Grid>
                                <TextBlock x:Name="TextBlock" Margin="2,-1,0,0" Text="{TemplateBinding DisplayText}" TextWrapping="{TemplateBinding TextWrapping}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextAlignment="{TemplateBinding TextAlignmentResolved}" />
                                <TextBox Name="PART_FocusSite" AcceptsReturn="{TemplateBinding AcceptsReturn}" AcceptsTab="{TemplateBinding AcceptsTab}" Margin="0,-1,0,0" Padding="0,0,0,0" BorderThickness="0,0,0,0" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" TextWrapping="{TemplateBinding TextWrapping}" HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextAlignment="{TemplateBinding TextAlignmentResolved}" IsReadOnly="{TemplateBinding ReadOnly}" MaxLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ValueConstraint.MaxLength, Mode=OneWay}" Background="Transparent" BorderBrush="Transparent" ContextMenu="{TemplateBinding ContextMenu}" Visibility="Collapsed" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}" InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}" InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=Location, RelativeSource={RelativeSource Self}, Converter={x:Static igRibbon:ToolLocationToIsInMenuConverter.Instance}}" Value="True" />
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:ToolMenuItem}, 1}}" Value="True" />
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Caption" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </MultiDataTrigger>

                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
                            <Setter TargetName="TextBlock" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                        </Trigger>

                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />

                            <!--  Default margin when in the footer toolbar -->
                            <Setter Property="Margin" Value="6,0,0,0" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledCenterFillKey}}" />
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledBorderFillKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="MainBorder">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                            <Setter Property="IsTabStop" Value="False" />
                            <Setter TargetName="PART_FocusSite" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_FocusSite" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter TargetName="TextBlock" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter TargetName="MainBorder" Property="CornerRadius" Value="0" />
                        </Trigger>
                        <Trigger Property="Location" Value="Ribbon">
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.HideAccessKey" Value="False">
                            <Setter TargetName="Caption" Property="RecognizesAccessKey" Value="True" />
                            <Setter TargetName="Caption" Property="Content" Value="{Binding Path=Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="igRibbon:RibbonToolHelper.SizingMode" Value="ImageOnly">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="Location" Value="TabItemAreaToolbar">
                            <Setter TargetName="Caption" Property="TextElement.Foreground" Value="{StaticResource TabitemAreaToolbarForeground}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
            </MultiTrigger>

        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- CheckBoxTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:CheckBoxTool}">
        <Style.Triggers>
            <Trigger Property="Location" Value="TabItemAreaToolbar">
                <Setter Property="Foreground" Value="{StaticResource TabitemAreaToolbarForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- =================================================================== -->
    <!-- MenuTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:MenuTool}">
        <Style.Triggers>
            <Trigger Property="Location" Value="TabItemAreaToolbar">
                <Setter Property="Foreground" Value="{StaticResource TabitemAreaToolbarForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>
 
    <!-- =================================================================== -->
    <!-- TabItemAreaToolbar Style   NA 14.1                                      -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:TabItemAreaToolbar}">
        <Setter Property="Padding" Value="5,3,2,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:TabItemAreaToolbar}">
                    <Border Margin="{TemplateBinding Padding}">
                        <DockPanel x:Name="ToolsAndButtonsArea" LastChildFill="True" VerticalAlignment="Bottom" HorizontalAlignment="Left" >
                            <igWindows:CardPanel x:Name="DropDownButtonsArea" DockPanel.Dock="Right" Width="Auto" Height="Auto" VerticalAlignment="Center" HorizontalAlignment="Right" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                <igRibbon:DropDownToggle x:Name="PART_OverflowButton" Margin="4,-2,0,0" Style="{StaticResource Button_QATOverflow}" Focusable="True" VerticalAlignment="Center" Width="13.286" Height="20" Content="OverflowButton" FocusVisualStyle="{x:Null}" Visibility="{Binding Path=OverflowButtonVisibility, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" IsDroppedDown="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />

                                <Popup StaysOpen="False" x:Name="PART_OverflowPopup" Placement="Bottom" Focusable="false" igWindows:PopupHelper.HandleMouseDownOnClose="True" IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}" AllowsTransparency="True">
                                    <AdornerDecorator>
                                        <Border x:Name="TabItemAreaToolbarOverflowPanel" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelBackgroundKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowPanelBorderFillKey}}" BorderThickness="1,1,1,1" CornerRadius="2" Padding="2,3,2,1">
                                            <igRibbon:TabItemAreaToolbarOverflowPanel x:Name="PART_TabItemAreaToolbarOverflowPanel" />
                                        </Border>
                                    </AdornerDecorator>
                                </Popup>
                            </igWindows:CardPanel>

                            <Grid x:Name="ToolsArea" KeyboardNavigation.TabIndex="0" KeyboardNavigation.TabNavigation="Local" Background="{x:Null}" HorizontalAlignment="Left" Margin="7,0,0,0" VerticalAlignment="Center">
                                <igRibbon:TabItemAreaToolbarPanel x:Name="PART_TabItemAreaToolbarPanel" IsItemsHost="True" />
                            </Grid>

                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- AS 11/30/07 BR28788 -->
                        <Trigger Property="IsOverflowOpen" Value="False">
                            <Setter Property="PopupAnimation" TargetName="PART_OverflowPopup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" />
                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
    <igRibbon:ContextualTabBaseColorToHoverBrushConverter x:Key="contextualTabBaseColorToHoverBrushConverter" />
    <igWindows:StringWithoutMnemonicsConverter x:Key="stringWithoutMnemonicsConverter" />

    <ControlTemplate TargetType="{x:Type ButtonBase}" x:Key="RibbonButtonToolTemplate">
        <igRibbon:RibbonButtonChrome x:Name="chrome" IsPressed="{TemplateBinding IsPressed}" IsChecked="{TemplateBinding ToggleButton.IsChecked}" SnapsToDevicePixels="True" UseRoundedCorners="False">
            <Grid Margin="1" x:Name="chromeContentPanel" HorizontalAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" x:Name="row0"/>
                    <RowDefinition Height="Auto" x:Name="row1" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <igWindows:AutoDisabledImage Width="16" Height="16" x:Name="image"
					igRibbon:XamRibbon.KeyTipPlacementType="SmallImage"
                    igWindows:Utilities.SnapElementToDevicePixels="True"
				Visibility="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}"
				Source="{TemplateBinding igRibbon:ButtonTool.ImageResolved}"
				/>
                <igRibbon:OuterGlowDecorator 
					x:Name="textSmallGlow" 
					Grid.Column="1" 
					Margin="3,0,2,1"
					VerticalAlignment="Center">
                    <ContentPresenter x:Name="textSmall" Grid.Column="1"
					Content="{TemplateBinding igRibbon:ButtonTool.Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}"
					SnapsToDevicePixels="True"
					TextBlock.TextAlignment="Left"
					igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}"
					/>
                </igRibbon:OuterGlowDecorator>
                <igRibbon:LargeToolCaptionPresenter x:Name="textLarge" Grid.Row="2"
					Text="{TemplateBinding igRibbon:ButtonTool.Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}" Visibility="Collapsed" />
            </Grid>
        </igRibbon:RibbonButtonChrome>

        <ControlTemplate.Triggers>

            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}"/>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="igRibbon:ButtonTool.SizingMode" Value="ImageOnly" />
                    <Condition Property="igRibbon:ButtonTool.HasImage" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="textSmallGlow" Property="Visibility" Value="Collapsed"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="igRibbon:ButtonTool.SizingMode" Value="ImageAndTextLarge" />
                    <Condition Property="igRibbon:XamRibbon.Location" Value="Ribbon" />
                </MultiTrigger.Conditions>
                <Setter TargetName="textSmallGlow" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="textLarge" Property="Visibility" Value="Visible"/>
                <Setter TargetName="image" Property="Width" Value="32"/>
                <Setter TargetName="image" Property="Height" Value="32"/>
                <Setter TargetName="image" Property="Margin" Value="0,0,0,2"/>
                <Setter TargetName="row0" Property="Height" Value="Auto"/>
                <Setter TargetName="row1" Property="Height" Value="*"/>
                <Setter TargetName="chromeContentPanel" Property="Margin" Value="1,1,1,0"/>
            </MultiTrigger>

            <Trigger Property="igRibbon:XamRibbon.Location" Value="Ribbon">
                <Setter Property="HorizontalAlignment" Value="Left"/>
            </Trigger>

            <Trigger Property="igRibbon:XamRibbon.Location" Value="QuickAccessToolbar">
                <Setter Property="Margin" Value="0,-2,0,0"/>
                <Setter TargetName="chrome" Property="Padding" Value="0,2,0,0"/>
            </Trigger>
            <Trigger Property="igRibbon:XamRibbon.Location" Value="ApplicationMenuFooterToolbar">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                <Setter Property="Margin" Value="6,0,0,0"/>
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Location), RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="textSmallGlow" Property="IsGlowVisible" Value="True" />
            </MultiDataTrigger>

            <Trigger Property="igRibbon:XamRibbon.HideAccessKey" Value="False">
                <Setter TargetName="textSmall" Property="RecognizesAccessKey" Value="True"/>
                <Setter TargetName="textSmall" Property="Content" Value="{Binding Path=(igRibbon:ButtonTool.Caption), RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- =================================================================== -->
    <!-- MenuButtonArea Style -->
    <!-- =================================================================== -->
    <ControlTemplate TargetType="{x:Type igRibbon:MenuButtonArea}" x:Key="MenuButtonAreaSegmented">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*" x:Name="row0"/>
                <RowDefinition Height="Auto" x:Name="row1" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Button Style="{StaticResource PlainContentControlStyle}" x:Name="PART_SegmentedButton" 
					 Command="{x:Static igRibbon:MenuTool.SegmentedButtonCommand}">
                <Button.Content>
                    <igRibbon:RibbonButtonChrome x:Name="buttonChrome" IsPressed="{Binding Path=IsPressed, ElementName=PART_SegmentedButton}" IsSegmentedButton="True" SnapsToDevicePixels="True" ClipToBounds="True" UseRoundedCorners="False">
                        <Grid Margin="1" x:Name="btnChromeChild" 
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="col0" Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <igWindows:SynchronizedSizeDecorator x:Name="syncImage" SynchronizeWidth="False" SynchronizeHeight="False" Target="{Binding ElementName=syncText}">
                                <igWindows:AutoDisabledImage Width="16" Height="16"  x:Name="image"
								    igRibbon:XamRibbon.KeyTipPlacementType="SmallImage"
                                    igWindows:Utilities.SnapElementToDevicePixels="True"
								    Source="{Binding Path=MenuTool.ImageResolved, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
								    Visibility="{Binding Path=MenuTool.HasImage, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}"
								    />
                            </igWindows:SynchronizedSizeDecorator>
                            <ContentPresenter x:Name="textSmall" Grid.Column="1"
								Content="{Binding Path=MenuTool.Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource stringWithoutMnemonicsConverter}}"
								SnapsToDevicePixels="True"
								VerticalAlignment="Center"
								TextBlock.TextAlignment="Left"
								igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}"
								Margin="0,0,0,0"/>
                        </Grid>
                    </igRibbon:RibbonButtonChrome>
                </Button.Content>
            </Button>
            <igRibbon:DropDownToggle x:Name="dropDownBtn" Grid.Column="1"
					Style="{StaticResource PlainContentControlStyle}"
					IsDroppedDown="{Binding Path=MenuTool.IsOpen, RelativeSource={x:Static RelativeSource.TemplatedParent}}" >
                <igRibbon:DropDownToggle.Content>
                    <igRibbon:RibbonButtonChrome x:Name="dropdownChrome" ClipToBounds="True" IsPressed="{Binding Path=IsPressed, ElementName=dropDownBtn}" SnapsToDevicePixels="True"
								IsChecked="{Binding Path=IsDroppedDown, ElementName=dropDownBtn}" UseRoundedCorners="False">
                        <Grid x:Name="dropdownPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="dropDownCol" />
                            </Grid.ColumnDefinitions>
                            <Control x:Name="dropdownArrow" Margin="2,0,1,0" Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuToolDropDownArrowStyleKey}}"
								igRibbon:XamRibbon.KeyTipPlacementType="DropDownButton"	/>
                            <igWindows:SynchronizedSizeDecorator x:Name="syncText" SynchronizeWidth="False" SynchronizeHeight="False" Target="{Binding ElementName=syncImage}">
                                <igRibbon:LargeToolCaptionPresenter 
								x:Name="textLarge" 
								Visibility="Collapsed"
								igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}"
								Text="{Binding Path=MenuTool.Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource stringWithoutMnemonicsConverter}}">
                                    <igRibbon:LargeToolCaptionPresenter.Glyph>
                                        <Control Margin="0,4,0,0" Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuToolDropDownArrowStyleKey}}" />
                                    </igRibbon:LargeToolCaptionPresenter.Glyph>
                                </igRibbon:LargeToolCaptionPresenter>
                            </igWindows:SynchronizedSizeDecorator>
                        </Grid>
                    </igRibbon:RibbonButtonChrome>
                </igRibbon:DropDownToggle.Content>
            </igRibbon:DropDownToggle>

        </Grid>
        <ControlTemplate.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False" SourceName="PART_SegmentedButton">
                <Setter TargetName="textSmall" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False" SourceName="dropDownBtn">
                <Setter TargetName="textLarge" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}"/>
            </Trigger>

            <Trigger Property="IsCheckable" Value="True">
                <Setter TargetName="buttonChrome" Property="IsChecked" Value="{Binding Path=MenuTool.IsChecked, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=OneWay}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="SizingMode" Value="ImageOnly" />
                    <Condition Property="HasImage" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="textSmall" Property="Visibility" Value="Collapsed"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="SizingMode" Value="ImageAndTextLarge" />
                    <Condition Property="Location" Value="Ribbon" />
                </MultiTrigger.Conditions>
                <Setter TargetName="dropdownArrow" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="textSmall" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="textLarge" Property="Visibility" Value="Visible"/>
                <Setter TargetName="image" Property="Width" Value="32"/>
                <Setter TargetName="image" Property="Height" Value="32"/>
                <Setter TargetName="image" Property="Margin" Value="0,0,0,2"/>
                <Setter TargetName="image" Property="HorizontalAlignment" Value="Center"/>
                <Setter TargetName="syncImage" Property="SynchronizeWidth" Value="True" />
                <Setter TargetName="syncText" Property="SynchronizeWidth" Value="True" />
                <Setter TargetName="dropDownCol" Property="Width" Value="Auto"/>

                <Setter TargetName="dropDownBtn" Property="Grid.Column" Value="0"/>
                <Setter TargetName="dropDownBtn" Property="Grid.Row" Value="2"/>
                <Setter TargetName="PART_SegmentedButton" Property="Grid.RowSpan" Value="2"/>
                <Setter TargetName="row0" Property="Height" Value="Auto"/>
                <Setter TargetName="row1" Property="Height" Value="*"/>
                <Setter TargetName="btnChromeChild" Property="Margin" Value="1,1,1,0"/>
            </MultiTrigger>
            
            <DataTrigger Binding="{Binding Path=MenuTool.(HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                  <Setter TargetName="textSmall" Property="Margin" Value="3,0,2,1" />
             </DataTrigger>
            
            <DataTrigger Binding="{Binding Path=MenuTool.(igRibbon:XamRibbon.HideAccessKey), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False">
                <Setter TargetName="textSmall" Property="RecognizesAccessKey" Value="True"/>
                <Setter TargetName="textSmall" Property="Content" Value="{Binding Path=(igRibbon:ButtonTool.Caption), RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
            </DataTrigger>

            <Trigger Property="Location" Value="QuickAccessToolbar">
                <Setter Property="Margin" Value="0,-2,0,0"/>
                <Setter Property="Padding" TargetName="buttonChrome" Value="0,2,0,0"/>
                <Setter Property="Padding" TargetName="dropdownChrome" Value="0,2,0,0"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Location" Value="TabItemAreaToolbar"/>
                    <Condition Property="IsEnabled" Value="False" SourceName="PART_SegmentedButton"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="textSmall" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMinimizeInactiveForegroundFillKey}}" />
            </MultiTrigger>
            
              <DataTrigger Binding="{Binding Path=MenuTool.(igRibbon:ButtonGroup.IsInButtonGroup), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                <Setter TargetName="dropdownArrow" Property="Margin" Value="0,0,1,0" />
            </DataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="{x:Type igRibbon:MenuButtonArea}" x:Key="MenuButtonAreaDropDownOnly">
        <igRibbon:DropDownToggle x:Name="dropdownBtn" Style="{StaticResource PlainContentControlStyle}"
					IsDroppedDown="{Binding Path=MenuToolPresenter.IsSubmenuOpen, RelativeSource={x:Static RelativeSource.TemplatedParent}}" >
            <igRibbon:DropDownToggle.Content>
                <igRibbon:RibbonButtonChrome x:Name="dropdownChrome" IsPressed="{Binding Path=IsPressed, ElementName=dropdownBtn}"
								   IsChecked="{Binding Path=IsDroppedDown, ElementName=dropdownBtn}" SnapsToDevicePixels="True" UseRoundedCorners="False" >

                    <Grid Margin="1,1,0,1" x:Name="chromeContentPanel" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" x:Name="row0" />
                            <RowDefinition Height="Auto" x:Name="row1" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <igWindows:AutoDisabledImage Width="16" Height="16"  x:Name="image"
					    igRibbon:XamRibbon.KeyTipPlacementType="SmallImage"
                        igWindows:Utilities.SnapElementToDevicePixels="True"
					    Source="{Binding Path=MenuTool.ImageResolved, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
					    Visibility="{Binding Path=MenuTool.HasImage, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}"
							/>

                        <igRibbon:OuterGlowDecorator 
							x:Name="textSmallGlow" 
							Grid.Column="1"
							VerticalAlignment="Center"
							Margin="0,0,0,0"
							>
                            <ContentPresenter x:Name="textSmall" Grid.Column="1"
									  Content="{Binding Path=MenuTool.Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource stringWithoutMnemonicsConverter}}"
									  SnapsToDevicePixels="True"
									  TextBlock.TextAlignment="Left"
									  igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}"
									  />
                        </igRibbon:OuterGlowDecorator>
                        <Control x:Name="dropdownArrow" Margin="1,0,0,0" Grid.Column="2" Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuToolDropDownArrowStyleKey}}" />
                        <igRibbon:LargeToolCaptionPresenter x:Name="textLarge" Grid.Row="2" Visibility="Collapsed"
									  Text="{Binding Path=MenuTool.Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource stringWithoutMnemonicsConverter}}">
                            <igRibbon:LargeToolCaptionPresenter.Glyph>
                                <Control x:Name="largeCaptionGlyph"  Margin="0,4,0,0" Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuToolDropDownArrowStyleKey}}" />
                            </igRibbon:LargeToolCaptionPresenter.Glyph>
                        </igRibbon:LargeToolCaptionPresenter>
                    </Grid>
                </igRibbon:RibbonButtonChrome>

            </igRibbon:DropDownToggle.Content>
        </igRibbon:DropDownToggle>
        <ControlTemplate.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="SizingMode" Value="ImageOnly" />
                    <Condition Property="HasImage" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="textSmallGlow" Property="Visibility" Value="Collapsed"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="SizingMode" Value="ImageAndTextLarge" />
                    <Condition Property="Location" Value="Ribbon" />
                </MultiTrigger.Conditions>
                <Setter TargetName="dropdownArrow" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="textSmallGlow" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="textLarge" Property="Visibility" Value="Visible"/>
                <Setter TargetName="image" Property="Width" Value="32"/>
                <Setter TargetName="image" Property="Height" Value="32"/>
                <Setter TargetName="image" Property="Margin" Value="0,0,0,2"/>
                <Setter TargetName="row0" Property="Height" Value="Auto"/>
                <Setter TargetName="row1" Property="Height" Value="*"/>
                <Setter TargetName="chromeContentPanel" Property="Margin" Value="1,1,1,0"/>
            </MultiTrigger>
            <Trigger Property="IsQuickCustomizeMenu" Value="True">
                <Setter Property="Style" TargetName="largeCaptionGlyph" Value="{DynamicResource {x:Static igRibbon:MenuTool.QuickCustomizeMenuDropDownArrowStyleKey}}" />
                <Setter Property="Style" TargetName="dropdownArrow" Value="{DynamicResource {x:Static igRibbon:MenuTool.QuickCustomizeMenuDropDownArrowStyleKey}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=MenuTool.(igRibbon:XamRibbon.HideAccessKey), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False">
                <Setter TargetName="textSmall" Property="RecognizesAccessKey" Value="True"/>
                <Setter TargetName="textSmall" Property="Content" Value="{Binding Path=(igRibbon:ButtonTool.Caption), RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
            </DataTrigger>
            
            <DataTrigger Binding="{Binding Path=MenuTool.(HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                  <Setter TargetName="textSmallGlow" Property="Margin" Value="3,0,2,1" />
            </DataTrigger>
            
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False" />
                    <Condition Property="Location" Value="QuickAccessToolbar" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" Value="0,-2,0,0"/>
                <Setter Property="Padding" TargetName="dropdownChrome" Value="0,2,0,0"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="Location" Value="QuickAccessToolbar" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}"/>
            </MultiTrigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}"/>
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Location), RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).QuickAccessToolbar.IsBelowRibbon, RelativeSource={RelativeSource Self}}" Value="False" />

                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                </MultiDataTrigger.Conditions>

                <Setter TargetName="textSmallGlow" Property="IsGlowVisible" Value="True" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).QuickAccessToolbar.IsBelowRibbon, RelativeSource={RelativeSource Self}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />

                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VistaWindowMaximizedTextFillKey}}"/>
            </MultiDataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type igRibbon:MenuButtonArea}">
        <Setter Property="Template" Value="{StaticResource MenuButtonAreaDropDownOnly}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=MenuTool.HorizontalContentAlignment, RelativeSource={x:Static RelativeSource.Self}}"/>
        <Style.Triggers>
            <Trigger Property="IsSegmented" Value="True">
                <Setter Property="Template" Value="{StaticResource MenuButtonAreaSegmented}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Location" Value="TabItemAreaToolbar"/>
                    <Condition Property="IsSegmented" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="TextElement.Foreground" Value="{StaticResource TabitemAreaToolbarForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Location" Value="TabItemAreaToolbar"/>
                    <Condition Property="IsSegmented" Value="True"/>
                    <Condition Property="IsEnabled" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="TextElement.Foreground" Value="{StaticResource TabitemAreaToolbarForeground}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate DataType="{x:Type igRibbon:ContextualTabGroup}">
        <igWindows:CardPanel Margin="0,2,0,0">
            <Border BorderBrush="{Binding Path=BaseBackColorResolvedBrush}" BorderThickness="1,4,1,0" SnapsToDevicePixels="True">
                <Border SnapsToDevicePixels="True" x:Name="baseColorInCaption" Background="{Binding Path=BaseBackColorResolvedBrush}">
                    <Border.OpacityMask>
                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <LinearGradientBrush.GradientStops>
                                <GradientStopCollection>
                                    <GradientStop Offset="0" Color="#ddc90077"/>
                                    <GradientStop Offset="0.5" Color="#66c90077"/>
                                    <GradientStop Offset="1" Color="#33c90077"/>
                                </GradientStopCollection>
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </Border.OpacityMask>
                </Border>
            </Border>
            <TextBlock
					x:Name="CaptionGroupLabel"
					Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualCaptionTextFillKey}}"
					Text="{Binding Path=Caption}"
					VerticalAlignment="Center"
					TextAlignment="Left"
					Margin="8,0"
					TextTrimming="CharacterEllipsis"
					igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True"
					igWindows:ClippedTextToolTipService.AncestorTypeForToolTip="{x:Type ContentControl}"
					igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}"/>
        </igWindows:CardPanel>
    </DataTemplate>

    <!-- IncreaseRepeatButton - This is used by ScrollBar -->
    <Style x:Key="GalleryToolDropDownPresenter_IncreaseRepeatButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Border.CornerRadius" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Margin="1,0,0,0">
                        <Grid x:Name="Enabled">
                            <Border x:Name="EnabledBorder" SnapsToDevicePixels="True" Visibility="Visible" CornerRadius="0" Opacity="1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonNormalBorderDarkFillKey}}" BorderThickness="1,1,1,1" Width="Auto" Height="Auto"/>
                            <Border SnapsToDevicePixels="True" Visibility="Visible" x:Name="EnabledCenter" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonNormalBorderLightFillKey}}" BorderThickness="1,1,1,1" CornerRadius="0" Opacity="1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonNormalCenterFillKey}}" Margin="1,1,1,1" Width="Auto" Height="Auto"/>
                        </Grid>
                        <Grid x:Name="Hover" Visibility="Collapsed">
                            <Border x:Name="HoverBorder" SnapsToDevicePixels="True" Visibility="Visible" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonHoverBorderDarkFillKey}}" CornerRadius="0" Opacity="1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarHoverBorderDarkFillKey}}" Width="Auto" Height="Auto"/>
                            <Border SnapsToDevicePixels="True" Visibility="Visible" x:Name="HoverCenter" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonHoverBorderLightFillKey}}" BorderThickness="1,1,1,1" CornerRadius="0" Opacity="1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonHoverCenterFillKey}}" Margin="1,1,1,1" Width="Auto" Height="Auto"/>
                        </Grid>
                        <Grid x:Name="Pressed1" Visibility="Collapsed">
                            <Border x:Name="PressedBorder" Opacity="1" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonPressedBorderDarkFillKey}}" CornerRadius="0" Width="Auto" Height="Auto"/>
                            <Border Opacity="1" SnapsToDevicePixels="True" x:Name="PressedCenter" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonPressedCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonPressedBorderLightFillKey}}" BorderThickness="1,1,1,1" CornerRadius="0,0,0,0" Margin="1,1,1,1" Width="Auto" Height="Auto"/>
                        </Grid>
                        <ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Center" Margin="0,0,0,0" VerticalAlignment="Center"/>
                        <Path SnapsToDevicePixels="True" VerticalAlignment="Center" Height="5" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarArrowFillKey}}" Stretch="None" Data="M0,0L9,0 4.5,5z" HorizontalAlignment="Center" x:Name="path"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarDisabledArrowFillKey}}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonNormalBorderDarkFillKey}}" TargetName="EnabledBorder"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Hover" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Pressed1" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DecreaseRepeatButton - This is used by ScrollBar -->
    <Style x:Key="GalleryToolDropDownPresenter_DecreaseRepeatButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="Border.CornerRadius" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Margin="1,0,0,0">
                        <Grid x:Name="Enabled">
                            <Border x:Name="EnabledBorder" SnapsToDevicePixels="True" Visibility="Visible" CornerRadius="0" Opacity="1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonNormalBorderDarkFillKey}}" BorderThickness="1,1,1,1" Width="Auto" Height="Auto"/>
                            <Border SnapsToDevicePixels="True" Visibility="Visible" x:Name="EnabledCenter" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonNormalBorderLightFillKey}}" BorderThickness="1,1,1,1" CornerRadius="0" Opacity="1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonNormalCenterFillKey}}" Margin="1,1,1,1" Width="Auto" Height="Auto"/>
                        </Grid>
                        <Grid x:Name="Hover" Visibility="Collapsed">
                            <Border x:Name="HoverBorder" SnapsToDevicePixels="True" Visibility="Visible" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonHoverBorderDarkFillKey}}" CornerRadius="0" Opacity="1" Width="Auto" Height="Auto"/>
                            <Border SnapsToDevicePixels="True" Visibility="Visible" x:Name="HoverCenter" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonHoverBorderLightFillKey}}" BorderThickness="1,1,1,1" CornerRadius="0" Opacity="1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonHoverCenterFillKey}}" Margin="1,1,1,1" Width="Auto" Height="Auto"/>
                        </Grid>
                        <Grid x:Name="Pressed1" Visibility="Collapsed">
                            <Border x:Name="PressedBorder" Opacity="1" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonPressedBorderDarkFillKey}}" CornerRadius="0" Width="Auto" Height="Auto"/>
                            <Border Opacity="1" SnapsToDevicePixels="True" x:Name="PressedCenter" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonPressedCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarRepeatButtonPressedBorderLightFillKey}}" BorderThickness="1,1,1,1" CornerRadius="0" Margin="1,1,1,1" Width="Auto" Height="Auto"/>
                        </Grid>
                        <ContentPresenter SnapsToDevicePixels="True" HorizontalAlignment="Center" Margin="0,0,0,0" VerticalAlignment="Center"/>
                        <Path SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarArrowFillKey}}" Stretch="None" Data="M0,5L9,5 4.5,0z" HorizontalAlignment="Center" x:Name="path" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarDisabledArrowFillKey}}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarBorderDarkFillKey}}" TargetName="EnabledBorder"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Hover" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Pressed1" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="GalleryToolDropDownPresenter_Scrollbar" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="GridRoot" Width="{StaticResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="18"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="18"/>
                        </Grid.RowDefinitions>

                        <Border SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarTrackCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarTrackBorderDarkFillKey}}" BorderThickness="1,0,0,0"  Grid.RowSpan="3" x:Name="rectangle"/>

                        <RepeatButton x:Name="DecreaseRepeat" Focusable="False" Style="{StaticResource GalleryToolDropDownPresenter_DecreaseRepeatButton}" Command="ScrollBar.LineUpCommand">
                            <Grid>
                                <Path SnapsToDevicePixels="True" VerticalAlignment="Top" Width="Auto" Height="Auto" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterScrollBarArrowFillKey}}" Stretch="None" Data="M0,5L9,5 4.5,0z"/>
                            </Grid>
                        </RepeatButton>

                        <!-- Track is a special layout container which sizes the thumb and the repeat button which do jump scrolling either side of it -->
                        <Track Grid.Row="1" x:Name="PART_Track" Orientation="Vertical" IsDirectionReversed="true">
                            <Track.Thumb>
                                <Thumb Style="{StaticResource GalleryToolDropDownPresenter_ScrollbarThumb}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton x:Name="PageUp" Focusable="False" Style="{StaticResource GalleryToolDropDownPresenter_ScrollRepeatButton}" Command="ScrollBar.PageDownCommand"/>
                            </Track.IncreaseRepeatButton>
                            <Track.DecreaseRepeatButton>
                                <RepeatButton x:Name="PageDown" Focusable="False" Style="{StaticResource GalleryToolDropDownPresenter_ScrollRepeatButton}" Command="ScrollBar.PageUpCommand"/>
                            </Track.DecreaseRepeatButton>
                        </Track>

                        <RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Focusable="False" Style="{StaticResource GalleryToolDropDownPresenter_IncreaseRepeatButton}" Command="ScrollBar.LineDownCommand"/>
                    </Grid>

                    <!-- This uses a single template for ScrollBar and rotate it to be Horizontal
It also changes the commands so that the it does Left and Right instead of Up and Down Commands -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter TargetName="GridRoot" Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter Property="LayoutTransform" TargetName="GridRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>

                            <!-- Track is bound to Orientation internally, so we need to rotate it back to Vertical -->
                            <Setter TargetName="PART_Track" Property="Orientation" Value="Vertical"/>

                            <!-- Change the commands to do Horizontal commands -->
                            <Setter Property="Command" Value="ScrollBar.LineLeftCommand" TargetName="DecreaseRepeat"/>
                            <Setter Property="Command" Value="ScrollBar.LineRightCommand" TargetName="IncreaseRepeat"/>
                            <Setter Property="Command" Value="ScrollBar.PageLeftCommand" TargetName="PageDown"/>
                            <Setter Property="Command" Value="ScrollBar.PageRightCommand" TargetName="PageUp"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== ScrollLeft Pager Button ========== -->
    <Style x:Key="{x:Static igRibbon:RibbonGroupCollection.PagerScrollLeftButtonStyleKey}" BasedOn="{StaticResource PagerScrollButtonBase}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Width="13" x:Name="grid">
                        <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonCenterGrayGradientFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonBorderDarkFillKey}}"  CornerRadius="0" x:Name="border" BorderThickness="1" SnapsToDevicePixels="True"/>
                        <Path Width="3" Height="5" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonGlyphFillKey}}" SnapsToDevicePixels="True" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Data="M 0,2 C0,2 0,3 0,3 0,3 1,3 1,3 1,3 1,4 1,4 1,4 2,4 2,4 2,4 2,5 2,5 2,5 3,5 3,5 3,5 3,0 3,0 3,0 2,0 2,0 2,0 2,1 2,1 2,1 1,1 1,1 1,1 1,2 1,2 1,2 0,2 0,2 z"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverBorderFillKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== ScrollRight Pager Button==========  -->
    <Style x:Key="{x:Static igRibbon:RibbonGroupCollection.PagerScrollRightButtonStyleKey}" BasedOn="{StaticResource PagerScrollButtonBase}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Width="13" x:Name="grid">
                        <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonCenterGrayGradientFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonBorderDarkFillKey}}"  CornerRadius="0" x:Name="border" BorderThickness="1" SnapsToDevicePixels="True"/>
                        <Path Width="3" Height="5" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonGlyphFillKey}}" SnapsToDevicePixels="True" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Data="M 3,2 C3,2 3,3 3,3 3,3 2,3 2,3 2,3 2,4 2,4 2,4 1,4 1,4 1,4 1,5 1,5 1,5 0,5 0,5 0,5 0,0 0,0 0,0 1,0 1,0 1,0 1,1 1,1 1,1 2,1 2,1 2,1 2,2 2,2 2,2 3,2 3,2 z"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverBorderFillKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== Data Templates ========== -->
    <DataTemplate DataType="{x:Type igRibbon:RibbonGroupCollection}">
        <Grid>
            <ItemsControl Focusable="False" ItemsSource="{Binding}" Padding="0" Margin="0">
                <ItemsControl.Template>
                    <ControlTemplate TargetType="{x:Type ItemsControl}">
                        <igWindows:XamPager
                    		Focusable="False"
                    		ScrollLeftButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollLeftButtonStyleKey}}"
                    		ScrollRightButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollRightButtonStyleKey}}"
                    		ScrollViewer.CanContentScroll="True"
                    		ScrollViewer.HorizontalScrollBarVisibility="Auto"
                    		ScrollViewer.VerticalScrollBarVisibility="Hidden">
                            <ItemsPresenter Margin="{TemplateBinding Padding}" DataContext="{Binding Path=(igRibbon:XamRibbon.Ribbon).DataContext, RelativeSource={x:Static RelativeSource.Self}}"/>
                        </igWindows:XamPager>
                    </ControlTemplate>
                </ItemsControl.Template>
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <igRibbon:RibbonGroupPanel/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
        </Grid>
    </DataTemplate>

    <!-- =================================================================== -->
    <!-- GalleryItemGroup Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:GalleryItemGroup}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:GalleryItemGroup}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Border
						x:Name="Caption"
						SnapsToDevicePixels="True"
						Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionFillKey}}"
						BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionStrokeFillKey}}"
						BorderThickness="0,0,0,1"
						CornerRadius="0"
						Padding="11,2,0,1">
                            <TextBlock Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}" Grid.Row="0" Text="{TemplateBinding Title}"/>
                        </Border>
                        <igRibbon:GalleryWrapPanel Grid.Row="1" 
							MinColumns="{Binding Path=GalleryTool.MinDropDownColumns, RelativeSource={RelativeSource TemplatedParent}}"
							MaxColumns="{Binding Path=GalleryTool.MaxDropDownColumns, RelativeSource={RelativeSource TemplatedParent}}"
							PreferredColumns="{Binding Path=GalleryTool.PreferredDropDownColumns, RelativeSource={RelativeSource TemplatedParent}}"
							IsItemsHost="True"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- XamRibbonScreenTip -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:XamRibbonScreenTip}">
        <Style.Resources>
            <DataTemplate DataType="{x:Type sys:String}">
                <TextBlock TextWrapping="Wrap" Text="{Binding}" />
            </DataTemplate>
        </Style.Resources>

        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GrayTextBrushKey}}"/>
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource Self}, Path=(igRibbon:XamRibbon.Ribbon).PreferredFont, FallbackValue='Segoe UI'}"/>
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamScreenTipBorderFillKey}}"/>
        <Setter Property="Width" Value="210"/>
        <Setter Property="MinHeight" Value="50"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamScreenTipFillKey}}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:XamRibbonScreenTip}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="0">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>

                            <!-- Header Content -->
                            <ContentControl Grid.Row="0" FontWeight="Bold"  Margin="5,7,5,5" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" SnapsToDevicePixels="True"/>

                            <!-- Header Separator -->
                            <StackPanel Grid.Row="1" Margin="4,0,3,5" Visibility="{TemplateBinding HeaderSeparatorVisibility}">
                                <Rectangle Height="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamScreenTipSeparatorDarkFillKey}}" HorizontalAlignment="Stretch" SnapsToDevicePixels="True"/>
                            </StackPanel>

                            <!-- Main Content -->
                            <Grid Grid.Row="2" Margin="0,3,13,0" >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>

                                <Image Grid.Column="0" Margin="12,0,0,0" Source="{TemplateBinding ContentImage}"/>
                                <ContentPresenter x:Name="mainContent"  Margin="0,0,0,0" Grid.Column="1" />
                            </Grid>

                            <!-- Footer Separator -->
                            <StackPanel Grid.Row="3" Margin="4,5,4,7" Visibility="{TemplateBinding FooterSeparatorVisibility}">
                                <Rectangle Height="1" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamScreenTipSeparatorDarkFillKey}}" HorizontalAlignment="Stretch" SnapsToDevicePixels="True"/>
                                </StackPanel>

                            <!-- Footer Content -->
                            <ContentControl Grid.Row="4" FontWeight="Bold" Margin="5,-1,5,6" Content="{TemplateBinding Footer}" ContentTemplate="{TemplateBinding FooterTemplate}" ContentTemplateSelector="{TemplateBinding FooterTemplateSelector}"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContentImage" Value="True">
                            <Setter Property="Width" Value="318"/>
                            <Setter Property="Margin" Value="13,0,0,0" TargetName="mainContent"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- LabelTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:LabelTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:LabelTool}">
                    <Grid>
                        <Border x:Name="NormalLabel" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}" >
                            <StackPanel Orientation="Horizontal">
                                <igWindows:AutoDisabledImage Source="{TemplateBinding ImageResolved}" x:Name="NormalLabel_image"
                                                             igWindows:Utilities.SnapElementToDevicePixels="True" />
                                <ContentPresenter x:Name="NormalLabelContent" Margin="3,0,0,0"  VerticalAlignment="Center"  
                                                  Content="{TemplateBinding Caption}" 
                                                  ContentTemplate="{TemplateBinding ContentTemplate}" 
                                                  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                            </StackPanel>
                        </Border>
                        <Border 
							x:Name="ApplicationMenuSubMenuLabel"
							Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionFillKey}}"
							BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionStrokeFillKey}}"
							BorderThickness="0,0,0,1"
							CornerRadius="0"   
							SnapsToDevicePixels="True" 
							Padding="7,3,4,3" 
							Visibility="Collapsed">
                            <StackPanel Orientation="Horizontal">
                                <igWindows:AutoDisabledImage Source="{TemplateBinding ImageResolved}" x:Name="ApplicationMenuSubMenuLabel_image" 
                                    igWindows:Utilities.SnapElementToDevicePixels="True" />
                                <ContentPresenter x:Name="ApplicationMenuSubMenuLabelContent" VerticalAlignment="Center"  Content="{TemplateBinding Caption}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                            </StackPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Location" Value="ApplicationMenuSubMenu">
                            <Setter TargetName="NormalLabel" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="ApplicationMenuSubMenuLabel" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Location" Value="Menu">
                            <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionFillKey}}" TargetName="NormalLabel"/>
                            <Setter Property="Margin" Value="7,3,14,4" TargetName="NormalLabelContent"/>
                            <Setter Property="CornerRadius" Value="0" TargetName="NormalLabel"/>
                            <Setter Property="BorderThickness" Value="0,0,0,1" TargetName="NormalLabel"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionStrokeFillKey}}" TargetName="NormalLabel"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}" />
                        </Trigger>

                        <Trigger Property="Location" Value="ApplicationMenu">
                            <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionFillKey}}" TargetName="NormalLabel"/>
                            <Setter Property="Margin" Value="7,3,14,4" TargetName="NormalLabelContent"/>
                            <Setter Property="Margin" Value="1,0,1,0" TargetName="NormalLabel"/>
                            <Setter Property="CornerRadius" Value="0" TargetName="NormalLabel"/>
                            <Setter Property="BorderThickness" Value="0,0,0,1" TargetName="NormalLabel"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemGroupCaptionStrokeFillKey}}" TargetName="NormalLabel"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}" />
                        </Trigger>

                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />

                            <!-- Default margin when in the footer toolbar -->
                            <Setter Property="Margin" Value="6,0,0,0"/>
                        </Trigger>

                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Location" Value="TabItemAreaToolbar">
                <Setter Property="Foreground" Value="{StaticResource TabitemAreaToolbarForeground}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- ========================================================================================= -->
    <!-- ToolTip Style - Used for Non ScreenTip ToolTips for RibbonTabItem and ContextualTabGroup  -->
    <!-- ========================================================================================= -->
    <Style TargetType="{x:Type ToolTip}" x:Key="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GrayTextBrushKey}}"/>
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource Self}, Path=(igRibbon:XamRibbon.Ribbon).PreferredFont, FallbackValue='Segoe UI'}"/>
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolTipNonScreenTipBorderFillKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolTipNonScreenTipCenterFillKey}}"/>
    </Style>

      <!-- =================================================================== -->
    <!-- KeyTip Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:KeyTip}">
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="3,2,3,2" />
        <Setter Property="Border.CornerRadius" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:KeyTip}">
                    <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.KeyTipCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.KeyTipBorderFillKey}}" BorderThickness="1,1,1,1" Padding="{TemplateBinding Padding}" CornerRadius="{TemplateBinding Border.CornerRadius}" SnapsToDevicePixels="True">
                        <TextBlock HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Text="{TemplateBinding Value}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.7" />
                <Setter Property="BorderBrush" Value="Gray" />
                <Setter Property="Foreground" Value="Gray" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- =================================================================== -->
    <!-- ApplicationMenuPresenter Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:ApplicationMenuPresenter}">
        <Setter Property="MinHeight" Value="17"/>
        <Setter Property="Margin" Value="0,1,0,0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuOuterBorderDarkFillKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:ApplicationMenuPresenter}">
                    <igWindows:CardPanel x:Name="ApplicationMenuButton" Background="Transparent" SnapsToDevicePixels="true">
                        <Rectangle x:Name="PopupPlacementRect" Margin="0,-1,0,0" VerticalAlignment="Top" Visibility="Hidden"/>
                        <!-- Office Orb -->
                        <Grid
                			x:Name="orbPanel"
                			Width="56"
                			HorizontalAlignment="Left"
                			VerticalAlignment="Stretch">
                            <Border
                				x:Name="AppMenuBtnNormal"
                				Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonNormalCenterFillKey}}"
                				BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonNormalOuterBorderFillKey}}"
                				BorderThickness="1,1,1,0"
                				CornerRadius="0">
                                <Border
                					BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonNormalInnerBorderFillKey}}"
                					BorderThickness="1,1,1,0"
                					CornerRadius="0"/>
                            </Border>
                            <Border
                				x:Name="AppMenuBtnHover"
                				Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonHoverCenterFillKey}}"
                				BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonHoverOuterBorderFillKey}}"
                				BorderThickness="1,1,1,0"
                				CornerRadius="0"
                				Opacity="0">
                                <Grid>
                                    <Border
                						BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonHoverInnerBorderFillKey}}"
                						BorderThickness="1,1,1,0"
                						CornerRadius="0"/>
                                    <Border x:Name="AppMenuBtnPressed" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonPressedCenterFillKey}}" Opacity="0" CornerRadius="0"/>
                                </Grid>
                            </Border>
                            <igWindows:CardPanel>
                                <Image x:Name="appMenuImage"
                					MaxHeight="16"
                					Stretch="Uniform"
                					StretchDirection="DownOnly"
                					HorizontalAlignment="Center"
                					VerticalAlignment="Center"
                					SnapsToDevicePixels="True"
                					Source="{Binding Tool.Image, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                                <Viewbox x:Name="appMenuCaption" Stretch="Uniform" StretchDirection="DownOnly" Visibility="Collapsed" Margin="3,4,3,3">
                                    <TextBlock Text="{Binding Tool.Caption, RelativeSource={RelativeSource TemplatedParent}}" Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonForegroundKey}}" />
                                </Viewbox>
                            </igWindows:CardPanel>
                        </Grid>
                        <Popup
                			x:Name="PART_Popup"
                			AllowsTransparency="true"
                			Focusable="false"
                			IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                			Placement="Bottom"
                			PlacementTarget="{Binding ElementName=PopupPlacementRect}">
                            <igWindows:CardPanel KeyboardNavigation.DirectionalNavigation="Cycle">
                                <Border
                					Grid.ColumnSpan="2"
                					Grid.RowSpan="2"
                					BorderBrush="{TemplateBinding BorderBrush}"
                					BorderThickness="{TemplateBinding BorderThickness}"
                					CornerRadius="0"
                					SnapsToDevicePixels="True">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition/>
                                            <RowDefinition Height="Auto" MinHeight="17"/>
                                        </Grid.RowDefinitions>
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="24"/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <!-- Menu Chrome -->
                                            <Border
                							Grid.ColumnSpan="2"
                							Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuChromeFillKey}}"
                							BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuInnerBorderDarkFillKey}}"
                							BorderThickness="0,0,0,1"
                							SnapsToDevicePixels="True"/>
                                            <!-- Menu Items Background -->
                                            <Border
                							Grid.Row="1"
                							Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuLeftAreaCenterFillKey}}"
                							BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuLeftAreaBorderFillKey}}"
                							BorderThickness="0,0,1,0"
                							SnapsToDevicePixels="True">
                                                <ScrollViewer
                								x:Name="MenuItemsArea"
                								Grid.Row="1"
                								CanContentScroll="true"
                								Focusable="False"
                								HorizontalScrollBarVisibility="Disabled"
                								Style="{StaticResource MenuScrollViewer}"
                                                >
                                                    <igRibbon:ApplicationMenuItemsPanel
                									x:Name="PART_ApplicationMenuItemsPanel"
                									Margin="0,2,0,2"
                									Grid.IsSharedSizeScope="true"
                									IsItemsHost="True"
                									KeyboardNavigation.ControlTabNavigation="Local"
                									KeyboardNavigation.DirectionalNavigation="Continue"
                									KeyboardNavigation.TabIndex="1"
                									KeyboardNavigation.TabNavigation="Local"
                									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                </ScrollViewer>
                                            </Border>
                                            <Border
                							x:Name="RecentItemsBackGround"
                							MinWidth="250"
                							MinHeight="64"
                							Grid.Column="1"
                							Grid.Row="1"
                							Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsCenterFillKey}}"
                							BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsBorderFillKey}}"
                							BorderThickness="0,0,0,0">
                                                <Grid>
                                                    <ScrollViewer Focusable="False" HorizontalScrollBarVisibility="Disabled" Style="{StaticResource MenuScrollViewer}">
                                                        <StackPanel>
                                                            <ContentControl
                											x:Name="RecentItemsHeader"
                											Margin="7,3,0,3"
                											Content="{Binding Tool.RecentItemsHeader, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                											ContentTemplate="{Binding Tool.RecentItemsHeaderTemplate, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                											ContentTemplateSelector="{Binding Tool.RecentItemsHeaderTemplateSelector, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                											Focusable="False"
                                                            Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
                                                            <Border
                											x:Name="RecentItemsHeaderSeparator"
                											Height="1"
                											Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsSeparatorDarkFillKey}}"
                											BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsSeparatorDarkFillKey}}"
                											BorderThickness="0,0,0,1"
                											SnapsToDevicePixels="True"/>
                                                            <igRibbon:ApplicationMenuRecentItemsPanel
                											x:Name="PART_RecentItemsPanel"
                											KeyboardNavigation.ControlTabNavigation="Local"
                											KeyboardNavigation.DirectionalNavigation="Continue"
                											KeyboardNavigation.TabIndex="2"
                											KeyboardNavigation.TabNavigation="Local"/>
                                                        </StackPanel>
                                                    </ScrollViewer>
                                                </Grid>
                                            </Border>
                                            <FrameworkElement
                							x:Name="PART_SubMenuArea"
                							Grid.Column="1"
                							Grid.Row="1"
                							HorizontalAlignment="Stretch"
                							Margin="0,6,5,-2"
                							VerticalAlignment="Stretch"/>
                                        </Grid>
                                        <Border
                							x:Name="Footer"
                							Grid.Row="1"
                							Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuFooterToolbarFillKey}}"
                							BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuFooterToolbarOuterBorderDarkFillKey}}"
                							BorderThickness="0,1,0,0"
                							SnapsToDevicePixels="True">
                                            <ContentPresenter
                								x:Name="PART_FooterToolbar"
                								Content="{Binding Tool.FooterToolbar, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                								Focusable="False"
                								KeyboardNavigation.ControlTabNavigation="Local"
                								KeyboardNavigation.DirectionalNavigation="Continue"
                								KeyboardNavigation.TabIndex="3"
                								KeyboardNavigation.TabNavigation="Local"/>
                                        </Border>
                                    </Grid>
                                </Border>
                                <!-- Overlay Button -->
                                <ToggleButton
                					x:Name="ButtonOverlay"
                					Width="{Binding ActualWidth, ElementName=orbPanel}"
                					Height="{Binding ActualHeight, ElementName=orbPanel}"
                					HorizontalAlignment="Left"
                					VerticalAlignment="Top"
                					ClickMode="Press"
                					Focusable="False"
                					IsChecked="{Binding IsOpen, ElementName=PART_Popup, Mode=TwoWay}"
                					IsTabStop="False">
                                    <ToggleButton.RenderTransform>
                                        <MultiBinding Mode="OneWay">
                                            <MultiBinding.Converter>
                                                <igRibbon:ApplicationMenuButtonTransformConverter/>
                                            </MultiBinding.Converter>
                                            <Binding ElementName="PART_Popup" Path="IsOpen"/>
                                            <Binding ElementName="orbPanel"/>
                                            <Binding ElementName="ButtonOverlay"/>
                                        </MultiBinding>
                                    </ToggleButton.RenderTransform>
                                    <ToggleButton.Template>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Rectangle>
                                                <Rectangle.Fill>
                                                    <VisualBrush x:Name="orbBrush" Stretch="None" Visual="{Binding ElementName=orbPanel, Mode=OneTime}"/>
                                                </Rectangle.Fill>
                                            </Rectangle>
                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                </ToggleButton>
                            </igWindows:CardPanel>
                        </Popup>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSubmenuOpen" Value="False">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=Tool.HasCaption, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter TargetName="appMenuCaption" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="appMenuImage" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Tool.HasRecentItemsHeader, RelativeSource={x:Static RelativeSource.Self}}" Value="False">
                            <Setter TargetName="RecentItemsHeaderSeparator" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="RecentItemsHeader" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSuspendingPopupAnimation" Value="True"/>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="AppMenuBtnPressed" Property="Opacity" Value="1"/>
                            <Setter TargetName="AppMenuBtnHover" Property="Opacity" Value="1"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="AppMenuBtnHover" Property="Opacity" Value="1"/>
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="AppMenuBtnHover" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter TargetName="AppMenuBtnPressed" Property="Opacity" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- SeparatorTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:SeparatorTool}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:SeparatorTool}">
                    <igWindows:CardPanel>
                        <igWindows:CardPanel x:Name="HorizontalSeparator" Margin="1,0,1,0" SnapsToDevicePixels="true" Grid.Column="1">
                            <Rectangle Height="1" Margin="0,0,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.HorizontalSeparatorNormalDarkFillKey}}" SnapsToDevicePixels="true" />
                         </igWindows:CardPanel >

                        <igWindows:CardPanel x:Name="VerticalSeparator" Width="3" Visibility="visible">
                            <Border BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VerticalSeparatorNormalLightFillKey}}" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VerticalSeparatorNormalDarkFillKey}}" BorderThickness="1,0" SnapsToDevicePixels="True"/>
                        </igWindows:CardPanel>
                    </igWindows:CardPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Location" Value="Ribbon">
                            <Setter Property="Visibility" Value="Visible" TargetName="VerticalSeparator"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="HorizontalSeparator"/>
                        </Trigger>
                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Visibility" Value="Visible" TargetName="VerticalSeparator"/>
                            <Setter Property="Margin" Value="0,2,0,4" TargetName="VerticalSeparator"/>
                            <Setter Property="Margin" Value="6,0,0,0"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="HorizontalSeparator"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- =================================================================== -->
    <!-- Ribbon's XamTabControl Style -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:XamRibbon.RibbonTabControlStyleKey}" TargetType="{x:Type igWindows:XamTabControl}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerFillKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}"/>
        <Setter Property="BorderThickness" Value="0,1"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="MaximumSizeToFitAdjustment" Value="18"/>
        <Setter Property="MinimumTabExtent" Value="28"/>
        <Setter Property="PreTabItemContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Rectangle Width="56" Height="19"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Continue"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igWindows:XamTabControl}">
                    <Grid ClipToBounds="True" KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="gridRow0" Height="Auto"/>
                            <RowDefinition x:Name="gridRow1" Height="*"/>
                        </Grid.RowDefinitions>
                        <Border
                			x:Name="ContentPanel"
                			Grid.Row="1"
                			Background="{TemplateBinding Background}"
                			BorderBrush="{TemplateBinding BorderBrush}"
                			BorderThickness="{TemplateBinding BorderThickness}"
                			KeyboardNavigation.DirectionalNavigation="Continue"
                			KeyboardNavigation.TabIndex="2"
                			KeyboardNavigation.TabNavigation="Local"
                			SnapsToDevicePixels="True"
                			Visibility="Visible">
                            <ContentPresenter
                				x:Name="PART_SelectedContentHost"
                				Height="{TemplateBinding TabItemContentHeight}"
                				Margin="{TemplateBinding Padding}"
                				Content="{TemplateBinding SelectedContent}"
                				ContentSource="SelectedContent"
                				ContentTemplate="{TemplateBinding SelectedContentTemplate}"
                				SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								/>
                        </Border>
                        <DockPanel
                			x:Name="PART_HeaderArea"
                			Panel.ZIndex="1"
                			Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelBackgroundKey}}"
                			SnapsToDevicePixels="True">
                            <ContentPresenter
                				x:Name="PreTabItemContent"
								KeyboardNavigation.DirectionalNavigation="Continue"
                                KeyboardNavigation.TabIndex="0" 
                				Content="{TemplateBinding PreTabItemContent}"
                				ContentTemplate="{TemplateBinding PreTabItemContentTemplate}"
                				ContentTemplateSelector="{TemplateBinding PreTabItemContentTemplateSelector}"
                				DockPanel.Dock="Left"/>
                            <ContentPresenter
                				x:Name="PostTabItemContent"
								KeyboardNavigation.DirectionalNavigation="Continue"
                                KeyboardNavigation.TabIndex="2" 
                				Content="{TemplateBinding PostTabItemContent}"
                				ContentTemplate="{TemplateBinding PostTabItemContentTemplate}"
                				ContentTemplateSelector="{TemplateBinding PostTabItemContentTemplateSelector}"
                				DockPanel.Dock="Right"/>
                            <igWindows:XamPager
                				x:Name="PART_TabItemScrollViewer"
                				CanContentScroll="True"
                				Focusable="False"
                				KeyboardNavigation.DirectionalNavigation="Continue"
                				KeyboardNavigation.TabIndex="1"
                				KeyboardNavigation.TabNavigation="Local"
                				ScrollLeftButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollLeftButtonStyleKey}}"
                				ScrollRightButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollRightButtonStyleKey}}"
                				ScrollViewer.HorizontalScrollBarVisibility="{TemplateBinding TabItemHorizontalScrollBarVisibility}"
                				ScrollViewer.VerticalScrollBarVisibility="{TemplateBinding TabItemVerticalScrollBarVisibility}">
                                <ItemsPresenter x:Name="PART_TabHeaderPanel" Margin="2,1,2,0" KeyboardNavigation.TabNavigation="Once"/>
                            </igWindows:XamPager>
                        </DockPanel>
                        <Popup
                			x:Name="PART_Popup"
                			Width="{TemplateBinding PreferredDropDownExtent}"
                			AllowsTransparency="True"
                			CustomPopupPlacementCallback="{TemplateBinding PreferredDropDownPlacementCallback}"
                			igWindows:PopupHelper.HandleMouseDownOnClose="True"
                			IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                			Placement="Custom"
                			SnapsToDevicePixels="True"
                			StaysOpen="False">
                            <AdornerDecorator>
                                <Border
                					Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelBackgroundKey}}"
                					KeyboardNavigation.DirectionalNavigation="Continue"
                					KeyboardNavigation.TabIndex="2"
                					KeyboardNavigation.TabNavigation="Local"
                					SnapsToDevicePixels="True">
                                    <Border
                						Background="{TemplateBinding Panel.Background}"
                						BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}"
                						BorderThickness="0,1"
                						SnapsToDevicePixels="True">
                                        <ContentPresenter
                							x:Name="PART_SelectedContentHostMinimized"
                							Height="{TemplateBinding TabItemContentHeight}"
                							HorizontalAlignment="{Binding HorizontalAlignment, ElementName=PART_SelectedContentHost}"
                							Margin="{TemplateBinding Padding}"
                							VerticalAlignment="{Binding VerticalAlignment, ElementName=PART_SelectedContentHost}"
                							Content="{x:Null}"
                							ContentSource="SelectedContent"
                							ContentTemplate="{TemplateBinding SelectedContentTemplate}"
                							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Border>
                                </Border>
                            </AdornerDecorator>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDropDownOpen" Value="False">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="Fade"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMinimized" Value="True">
                            <Setter TargetName="PART_SelectedContentHostMinimized" Property="Content" Value="{Binding SelectedContent, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="ContentPanel" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_SelectedContentHost" Property="Content" Value="{x:Null}"/>
                            <Setter Property="Grid.RowSpan" TargetName="PART_HeaderArea" Value="2" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.IsSelectedItemInContextualTabGroup" Value="True">
                            <Setter TargetName="ContentPanel" Property="BorderBrush" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Style.Triggers>
            <Trigger Property="IsMinimized" Value="True">
                <Setter Property="Height" Value="24"/>
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <!-- =================================================================== -->
    <!-- RibbonTabItem Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:RibbonTabItem}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalCenterFillKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"/>
        <Setter Property="BorderThickness" Value="1,1,1,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ControlTemplate" TargetType="{x:Type igRibbon:RibbonTabItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="TabMouseOverNotSelected">
                            <ObjectAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetName="TabMouseOverNotSelected" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="tabItemText" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="TabMouseOutNotSelected">
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="TabMouseOverNotSelected" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="tabItemText" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0.8"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="Tab">
                        <Line
							x:Name="ContextualTabInTabAreaSeparatorLeft"
							HorizontalAlignment="Left"
							Margin="0,-2,0,5"
							IsHitTestVisible="False"
							SnapsToDevicePixels="True"
							Stretch="Fill"
							Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabSeparatorFillKey}}"
							StrokeThickness="1"
							Visibility="{TemplateBinding Converter={StaticResource BoolToVisConverter}, Property=IsFirstTabInContextualTabGroup}"
							X1="0"
							X2="0"
							Y1="0"
							Y2="1"/>
                        <Grid x:Name="TabMouseOverNotSelected" Margin="3,0" Visibility="Collapsed">
                            <Border
								x:Name="Center"
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabInactiveHoverBackgroundFillKey}}"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabInactiveHoverBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="0"
								SnapsToDevicePixels="True"
								Visibility="Visible"/>
                        </Grid>
                        <Grid x:Name="TabSelected" Margin="3,0,3,-1" Visibility="Collapsed">
                            <Border
								x:Name="BdTabSelected"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="0"
								SnapsToDevicePixels="True"/>
                            <Border x:Name="topHighlight" VerticalAlignment="Top" Height="3" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalTopHighlightFillKey}}" CornerRadius="0"/>
                        </Grid>
                        <Border
							x:Name="ContextualTabBase"
							BorderThickness="1,1,1,0"
							CornerRadius="0"
							d:IsHidden="True"
							Visibility="Collapsed"/>
                        <Grid x:Name="ContextualTabSelected" Margin="3,0,3,-1" Visibility="Collapsed">
                            <Border
								x:Name="BdContextualTabSelected"
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalCenterFillKey}}"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="0"
								SnapsToDevicePixels="True"/>
                        </Grid>
                        <Border x:Name="contextualSelected" Visibility="Collapsed" CornerRadius="0" BorderThickness="1,1,1,0"
						BorderBrush="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Margin="3,0">
                            <Rectangle Fill="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
                                <Rectangle.OpacityMask>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Offset="0" Color="#59c90077"/>
                                                <GradientStop Offset="0.75" Color="#00c90077"/>
                                                <GradientStop Offset="1" Color="#00c90077"/>
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                        </Border>
                        <Border x:Name="contextualHottrack" BorderBrush="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}" BorderThickness="1,1,1,0" CornerRadius="0" Visibility="Collapsed" Margin="3,0">
                            <Rectangle Fill="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
                                <Rectangle.OpacityMask>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Offset="0" Color="#59c90077"/>
                                                <GradientStop Offset="0.75" Color="#00c90077"/>
                                                <GradientStop Offset="1" Color="#00c90077"/>
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                        </Border>
                        <ContentPresenter
							x:Name="tabItemText"
							Width="Auto"
							HorizontalAlignment="Stretch"
							Margin="6,4,6,3"
							VerticalAlignment="Center"
							Content="{TemplateBinding Header, Converter={StaticResource stringWithoutMnemonicsConverter}}"
							ContentTemplate="{TemplateBinding HeaderTemplate}"
							ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
							igRibbon:XamRibbon.KeyTipPlacementType="Caption"
							igWindows:ClippedTextToolTipService.AncestorTypeForToolTip="{x:Type igRibbon:RibbonTabItem}"
							igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True"
							igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}"
							TextBlock.TextAlignment="Center"
                			TextElement.Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabNotSelectedTextFillKey}}"
							Opacity="0.8"/>
                        <Line
							x:Name="TabSeparator"
							HorizontalAlignment="Right"
							Margin="0,0 0,5"
							IsHitTestVisible="False"
							Opacity="{TemplateBinding igWindows:TabItemPanel.TabSeparatorOpacity}"
							SnapsToDevicePixels="True"
							Stretch="Fill"
							Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabSeparatorFillKey}}"
							StrokeThickness="1"
							X1="0"
							X2="0"
							Y1="0"
							Y2="1"/>
                        <Line
							x:Name="ContextualTabInTabAreaSeparatorRight"
							HorizontalAlignment="Right"
							Margin="0,-2,0,5"
							IsHitTestVisible="False"
							SnapsToDevicePixels="True"
							Stretch="Fill"
							Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabSeparatorFillKey}}"
							StrokeThickness="1"
							Visibility="{TemplateBinding Converter={StaticResource BoolToVisConverter}, Property=IsLastTabInContextualTabGroup}"
							X1="0"
							X2="0"
							Y1="0"
							Y2="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- IsInContextualTabGroup -->
                        <Trigger Property="IsInContextualTabGroup" Value="True">
                            <Setter TargetName="Center" Property="BorderBrush" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                            <Setter TargetName="BdContextualTabSelected" Property="Background" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                            <Setter TargetName="BdContextualTabSelected" Property="BorderBrush" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                            <Setter TargetName="ContextualTabBase" Property="Background" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                            <Setter TargetName="topHighlight" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="ContextualTabInTabAreaSeparatorLeft" Property="Stroke" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                            <Setter TargetName="ContextualTabInTabAreaSeparatorRight" Property="Stroke" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                            <Setter TargetName="ContextualTabInTabAreaSeparatorRight" Property="OpacityMask">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Offset="0" Color="#ffc90077"/>
                                                <GradientStop Offset="1" Color="#00c90077"/>
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="ContextualTabInTabAreaSeparatorLeft" Property="OpacityMask">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Offset="0" Color="#ffc90077"/>
                                                <GradientStop Offset="1" Color="#00c90077"/>
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="BdContextualTabSelected" Property="OpacityMask">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Offset="0" Color="#66c90077"/>
                                                <GradientStop Offset="1" Color="#00c90077"/>
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <!-- IsSelected && !IsInContextualTabGroup -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsInContextualTabGroup" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="TabSelected" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
                        </MultiTrigger>
                        <!-- IsSelected && IsInContextualTabGroup && !XamRibbon.IsActive -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsInContextualTabGroup" Value="True"/>
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContextualTabSelected" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="contextualSelected" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="TabSelected" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
                        </MultiTrigger>
                        <!-- IsMouseOverTab && !IsSelected -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOverTab, RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsInContextualTabGroup, RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard x:Name="TabMouseOverNotSelected_BeginStoryboard" Storyboard="{StaticResource TabMouseOverNotSelected}"/>
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="TabMouseOverNotSelected_BeginStoryboard"/>
                                <BeginStoryboard Storyboard="{StaticResource TabMouseOutNotSelected}"/>
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOverTab, RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsInContextualTabGroup, RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contextualHottrack" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>
                        <!-- IsSelected && XamRibbon.IsActive -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
                        </MultiTrigger>
                        <!-- !IsSelected && XamRibbon.IsActive -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard x:Name="ActivatedNotSelected_BeginStoryboard" Storyboard="{StaticResource TabMouseOverNotSelected}"/>
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard x:Name="DeactivatedNotSelected_BeginStoryboard" Storyboard="{StaticResource TabMouseOutNotSelected}"/>
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                        <!-- IsSelected && IsInContextualTabGroup && !XamRibbon.IsActive -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="True"/>
                                <Condition Property="IsInContextualTabGroup" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContextualTabSelected" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsInContextualTabGroup" Value="True">
                <Setter Property="igWindows:XamTabControl.TabPriority" Value="10"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- RibbonGroup Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:RibbonGroup}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Border.CornerRadius" Value="0"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupNormalBorderLightFillKey}}"/>
        <Setter Property="BorderThickness" Value="0.5,0"/>
        <Setter Property="SmallImage">
            <Setter.Value>
                <DrawingImage>
                    <DrawingImage.Drawing>
                        <DrawingGroup>
                            <GeometryDrawing Brush="#00FFFFFF">
                                <GeometryDrawing.Geometry>
                                    <RectangleGeometry Rect="0,0,11,11"/>
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                            <DrawingGroup Opacity="0.670">
                                <GeometryDrawing Brush="#FF333333" Geometry="M1,1C1,1 10,1 10,1 10,1 10,10 10,10 10,10 1,10 1,10 1,10 1,1 1,1z M0,0C0,0 0,11 0,11 0,11 11,11 11,11 11,11 11,0 11,0 11,0 0,0 0,0z"/>
                            </DrawingGroup>
                            <DrawingGroup>
                                <DrawingGroup.Transform>
                                    <MatrixTransform Matrix="1,0,0,1,3,3"/>
                                </DrawingGroup.Transform>
                                <GeometryDrawing Brush="#FF333333" Geometry="M5,0 C5,0 4.285,0 4.285,0 4.285,0 0,5 0,5 0,5 0.714,5 0.714,5 0.714,5 5,0 5,0 z"/>
                            </DrawingGroup>
                        </DrawingGroup>
                    </DrawingImage.Drawing>
                </DrawingImage>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:RibbonGroup}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="groupFadeIn">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="bottomBdHover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="groupFadeOut">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="bottomBdHover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.3" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid><AdornerDecorator>
                    <igWindows:CardPanel Background="{TemplateBinding Background}">
                        <ContentControl x:Name="PART_RibbonGroupSite" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" Style="{StaticResource PlainContentControlStyle}">
                            <Grid x:Name="groupPanel" Background="{TemplateBinding Background}">
                                <DockPanel>
                                    <Grid DockPanel.Dock="Bottom" MinHeight="18">
                                        <Border x:Name="bottomBd" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupNormalBottomGradientFillKey}}" BorderThickness="1" VerticalAlignment="Bottom" SnapsToDevicePixels="True" CornerRadius="0">
                                            <Grid>
                                                <Border x:Name="bottomBdHover" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverBorderFillKey}}" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverBottomGradientFillKey}}" Margin="-1,-1,-1,-2 " BorderThickness="1" SnapsToDevicePixels="True" Opacity="0" CornerRadius="0"/>
                                                <DockPanel x:Name="groupCaption" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
                                                    <ContentControl
														x:Name="DialogBoxLauncher"
														Height="15"
														VerticalAlignment="Bottom"
														Content="{TemplateBinding DialogBoxLauncherTool}"
														DockPanel.Dock="Right"
														Focusable="False"
														Visibility="Hidden"
                                                        Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCaptionTextFillKey}}"/>
                                                    <TextBlock
														x:Name="PART_Caption"
														HorizontalAlignment="Stretch"
														Margin="5,0"
														VerticalAlignment="Bottom"
														Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCaptionTextFillKey}}"
														igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True"
														igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}"
														Padding="0"
														Text="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}"
														TextAlignment="Center"
														TextTrimming="CharacterEllipsis"/>
                                                </DockPanel>
                                            </Grid>
                                        </Border>
                                    </Grid>
                                    <ItemsPresenter
										x:Name="PART_Items"
										HorizontalAlignment="Center"
										DockPanel.Dock="Top"
										KeyboardNavigation.TabIndex="0"
										KeyboardNavigation.TabNavigation="Local"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										Margin="1,2,1,7"/>
                                </DockPanel>
                            </Grid>
                        </ContentControl>
                        <Border x:Name="collapsedGroupHover" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedHoverCenterFillKey}}" Visibility="Collapsed" SnapsToDevicePixels="True" CornerRadius="0"/>

                        <igRibbon:DropDownToggle
							x:Name="PART_RibbonGroupButton"
							igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}"
							IsDroppedDown="{Binding Path=IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							Style="{DynamicResource {x:Static igRibbon:RibbonGroup.CollapsedGroupButtonStyleKey}}"
							Visibility="Collapsed"/>
                        <Border x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" Margin="0" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True"/>
                        <Popup
							x:Name="PART_Popup"
							AllowsTransparency="True"
							igWindows:PopupHelper.HandleMouseDownOnClose="True"
							IsOpen="{Binding Path=IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
							Placement="Bottom"
							PlacementTarget="{Binding ElementName=PART_RibbonGroupButton}"
							StaysOpen="False">
                            <AdornerDecorator KeyboardNavigation.DirectionalNavigation="Cycle">
                                <Border
                    Margin="0,0,10,10"
                    Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerFillKey}}"
                    BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}"
                    BorderThickness="1"
                    CornerRadius="0">
                                    <Grid>
                                        <ContentControl x:Name="PART_PopupRibbonGroupSite" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" Style="{StaticResource PlainContentControlStyle}"/>
                                    </Grid>
                                </Border>
                            </AdornerDecorator>
                        </Popup>
                    </igWindows:CardPanel>
                    </AdornerDecorator></Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOpen" Value="False">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="compModel:DesignerProperties.IsInDesignMode" Value="False"/>
                                <Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="False"/>
                                <Condition Property="HighlightContent" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard x:Name="Hover_BeginStoryboard" Storyboard="{StaticResource groupFadeIn}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="Hover_BeginStoryboard"/>
                                <BeginStoryboard x:Name="Hover_FadeOut_BeginStoryboard" Storyboard="{StaticResource groupFadeOut}"/>
                            </MultiTrigger.ExitActions>
                            <Setter TargetName="PART_Caption" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverCenterFillKey}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="compModel:DesignerProperties.IsInDesignMode" Value="False"/>
                                <Condition Property="IsCollapsed" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="collapsedGroupHover" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsCollapsed" Value="True">
                            <Setter TargetName="PART_RibbonGroupButton" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_RibbonGroupButton" Property="igRibbon:RibbonGroup.Caption" Value="{Binding Path=Caption, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="PART_RibbonGroupButton" Property="igRibbon:RibbonGroup.SmallImage" Value="{Binding Path=SmallImage, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="PART_RibbonGroupSite" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsActive" Value="True">
                            <Setter TargetName="PART_RibbonGroupButton" Property="Background" Value="Yellow"/>
                        </Trigger>
                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter TargetName="PART_RibbonGroupButton" Property="Style" Value="{DynamicResource {x:Static igRibbon:RibbonGroup.QuickAccessToolbarGroupButtonStyleKey}}"/>
                            <Setter TargetName="PART_RibbonGroupButton" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_RibbonGroupButton" Property="igRibbon:RibbonGroup.Caption" Value="{Binding Path=Caption, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="PART_RibbonGroupButton" Property="igRibbon:RibbonGroup.SmallImage" Value="{Binding Path=SmallImage, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="PART_RibbonGroupSite" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_Caption" Property="Margin" Value="0"/>
                        </Trigger>
                        <Trigger Property="HasDialogBoxLauncherTool" Value="True">
                            <Setter TargetName="DialogBoxLauncher" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Location" Value="QuickAccessToolbar">
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Focusable" Value="True"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Border.CornerRadius" Value="0"/>
            </Trigger>
            <Trigger Property="IsCollapsed" Value="True">
                <Setter Property="Focusable" Value="True"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static igRibbon:RibbonWindowContentHost.StatusBarStyleKey}" TargetType="{x:Type StatusBar}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerFillKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBar}">
                    <Grid x:Name="StatusBar">
                        <Border x:Name="StatusBar_BackgroundLayer" SnapsToDevicePixels="True" CornerRadius="{TemplateBinding Border.CornerRadius}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Rectangle Height="1" Fill="#7FFFFFFF" VerticalAlignment="Top"/>
                        </Border>
                        <Border Padding="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).(StatusBarPadding), RelativeSource={RelativeSource Self}}">
                            <ItemsPresenter OpacityMask="{x:Null}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Margin="{TemplateBinding Padding}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" >
                            <Setter Property="CornerRadius" TargetName="StatusBar_BackgroundLayer" Value="0" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Maximized">
                            <Setter Property="CornerRadius" TargetName="StatusBar_BackgroundLayer" Value="0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- RadioButtonTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:RadioButtonTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template" Value="{StaticResource RibbonButtonToolTemplate}"/>

        <Style.Triggers>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VistaWindowMaximizedTextFillKey}}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}"/>
            </MultiDataTrigger>

                <Trigger Property="Location" Value="TabItemAreaToolbar">
                    <Setter Property="Foreground" Value="{StaticResource TabitemAreaToolbarForeground}" />
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="Location" Value="TabItemAreaToolbar"/>
                        <Condition Property="IsMouseOver" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                </MultiTrigger>

        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- ToggleButtonTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:ToggleButtonTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template" Value="{StaticResource RibbonButtonToolTemplate}"/>

        <Style.Triggers>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VistaWindowMaximizedTextFillKey}}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}"/>
            </MultiDataTrigger>

                <Trigger Property="Location" Value="TabItemAreaToolbar">
                    <Setter Property="Foreground" Value="{StaticResource TabitemAreaToolbarForeground}" />
                </Trigger>

        </Style.Triggers>    
    </Style>

    <!-- =================================================================== -->
    <!-- ButtonTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:ButtonTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}"/>
        <Setter Property="Template" Value="{StaticResource RibbonButtonToolTemplate}"/>
        <Style.Triggers>
            <Trigger Property="igRibbon:RibbonGroup.IsDialogBoxLauncherTool" Value="True">
                <Setter Property="Template" Value="{DynamicResource {x:Static igRibbon:RibbonGroup.DialogBoxLauncherToolTemplateKey}}"/>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}"/>
            </Trigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                    <Condition Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Normal" />
                </MultiDataTrigger.Conditions>

                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=IsBelowRibbon, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:QuickAccessToolbar}, 1}}" Value="False" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />

                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsGlassCaptionGlowVisible), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VistaWindowMaximizedTextFillKey}}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=Location, RelativeSource={x:Static RelativeSource.Self}}" Value="QuickAccessToolbar" />
                    <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}"/>
            </MultiDataTrigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}"/>
            </Trigger>
                <Trigger Property="Location" Value="TabItemAreaToolbar">
                    <Setter Property="Foreground" Value="{StaticResource TabitemAreaToolbarForeground}" />
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="Location" Value="TabItemAreaToolbar"/>
                        <Condition Property="IsMouseOver" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- RibbonGroup Collapsed Toggle Button Style -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:RibbonGroup.CollapsedGroupButtonStyleKey}" TargetType="{x:Type igRibbon:DropDownToggle}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Border.CornerRadius" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:DropDownToggle}">
                    <igWindows:CardPanel Background="Transparent">
                        <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True"/>
                        <Rectangle x:Name="hoverBd" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedHoverCenterFillKey}}" Visibility="Collapsed" SnapsToDevicePixels="True"/>
                        <Rectangle x:Name="BaseColorBorderLight" StrokeThickness="2"  SnapsToDevicePixels="True" Margin="1,1,1,1" Height="Auto" Width="Auto"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RadiusX="0" RadiusY="0" Visibility="Collapsed">
                            <Rectangle.OpacityMask>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="#00000000" Offset="0"/>
                                    <GradientStop Color="#26FFFFFF" Offset="0.4"/>
                                    <GradientStop Color="#7FFFFFFF" Offset="0.75"/>
                                    <GradientStop Color="#FFFFFFFF" Offset="1"/>
                                </LinearGradientBrush>
                            </Rectangle.OpacityMask>
                        </Rectangle>
                        <StackPanel Margin="2">
                            <igWindows:AutoDisabledImage x:Name="image" Margin="8,5,7,10" Width="16" Height="16" Source="{Binding Path=(igRibbon:RibbonGroup.SmallImage), RelativeSource={x:Static RelativeSource.TemplatedParent}}" igWindows:Utilities.SnapElementToDevicePixels="True" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" HorizontalAlignment="Center"/>
                            <igRibbon:LargeToolCaptionPresenter x:Name="Caption" HorizontalAlignment="Center" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" Text="{Binding Path=(igRibbon:RibbonGroup.Caption), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource stringWithoutMnemonicsConverter}}">
                                <igRibbon:LargeToolCaptionPresenter.Glyph>
                                    <Control x:Name="largeCaptionGlyph"  Margin="0,4,0,0" Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuToolDropDownArrowStyleKey}}"/>
                                </igRibbon:LargeToolCaptionPresenter.Glyph>
                            </igRibbon:LargeToolCaptionPresenter>
                        </StackPanel>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="igRibbon:XamRibbon.IsActive" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}"/>
                        </Trigger>
                        <Trigger Property="IsDroppedDown" Value="True">
                            <Setter Property="Visibility" TargetName="hoverBd" Value="Visible"/>
                            <Setter Property="Fill" TargetName="hoverBd" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedPressedCenterFillKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="hoverBd" Value="Visible"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}"/>
                        </Trigger>
                        <!-- Triggers for when IsInContextualTabGroup -->
                        <Trigger Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="True">
                            <Setter Property="Stroke" TargetName="BaseColorBorderLight" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolved, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:RibbonGroup}, 1}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="False"/>
                                <Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="hoverBd" Value="Visible"/>
                            <Setter TargetName="BaseColorBorderLight" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="True"/>
                                <Condition Property="IsDroppedDown" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="hoverBd" Value="Visible"/>
                            <Setter Property="Fill" TargetName="hoverBd" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCollapsedPressedCenterFillKey}}"/>
                            <Setter Property="Visibility" TargetName="hoverBd" Value="Visible"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
  
    <!-- ******************************************************************  NEWLY ADDED  ****************************************************************** -->
    
    <!-- *********************************  ComboBox Style  ********************************* -->
    <Style x:Key="ComboBoxItemStyle" TargetType="ComboBoxItem">
        <Setter Property="FontSize" Value="11" />
        <Setter Property="FontFamily" Value="{Binding RelativeSource={RelativeSource Self}, Path=(igRibbon:XamRibbon.Ribbon).PreferredFont, FallbackValue='Segoe UI'}" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="Padding" Value="6,0" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="ComboBoxItem">
                <Grid Background="{TemplateBinding Background}">
                <VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="fillColor" />
                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Foreground" Storyboard.TargetName="contentControl">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource LightForegroundBrush}" />
                        </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="DisabledVisualElement">
                            <DiscreteObjectKeyFrame KeyTime="0">
                            <DiscreteObjectKeyFrame.Value>
                                <Visibility>Visible</Visibility>
                            </DiscreteObjectKeyFrame.Value>
                            </DiscreteObjectKeyFrame>
                        </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    </VisualStateGroup>
                    <VisualStateGroup x:Name="SelectionStates">
                    <VisualState x:Name="Unselected" />
                    <VisualState x:Name="Selected">
                        <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="CheckedBd">
                            <DiscreteObjectKeyFrame KeyTime="0">
                            <DiscreteObjectKeyFrame.Value>
                                <Visibility>Visible</Visibility>
                            </DiscreteObjectKeyFrame.Value>
                            </DiscreteObjectKeyFrame>
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="contentControl">
                            <DiscreteObjectKeyFrame KeyTime="0">
                            <DiscreteObjectKeyFrame.Value>
                                <Visibility>Collapsed</Visibility>
                            </DiscreteObjectKeyFrame.Value>
                            </DiscreteObjectKeyFrame>
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="contentControl1">
                            <DiscreteObjectKeyFrame KeyTime="0">
                            <DiscreteObjectKeyFrame.Value>
                                <Visibility>Visible</Visibility>
                            </DiscreteObjectKeyFrame.Value>
                            </DiscreteObjectKeyFrame>
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Foreground" Storyboard.TargetName="contentControl1">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource LightForegroundBrush}" />
                        </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="SelectedUnfocused" />
                    </VisualStateGroup>
                    <VisualStateGroup x:Name="FocusStates">
                    <VisualState x:Name="Focused">
                        <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="FocusVisualElement">
                            <DiscreteObjectKeyFrame KeyTime="0">
                            <DiscreteObjectKeyFrame.Value>
                                <Visibility>Visible</Visibility>
                            </DiscreteObjectKeyFrame.Value>
                            </DiscreteObjectKeyFrame>
                        </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unfocused" />
                    </VisualStateGroup>
                    <VisualStateGroup x:Name="LayoutStates">
                    <VisualState x:Name="AfterLoaded" />
                    <VisualState x:Name="BeforeLoaded" />
                    <VisualState x:Name="BeforeUnloaded" />
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <Rectangle Fill="{StaticResource TransparentBrush}" />
                <Rectangle x:Name="fillColor" Fill="{StaticResource ComboBoxItemHoverBackgroundBrush}" IsHitTestVisible="False" Opacity="0" Stroke="{StaticResource ComboBoxItemHoverBorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
                <Rectangle x:Name="CheckedBd" Fill="{StaticResource ComboBoxItemPressedBackgroundBrush}" IsHitTestVisible="False" Visibility="Collapsed" Stroke="{StaticResource ComboBoxItemPressedBorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" />
                <ContentControl x:Name="contentControl" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}">
                    <ContentPresenter x:Name="contentPresenter" />
                </ContentControl>
                <ContentControl x:Name="contentControl1" Visibility="Collapsed" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Foreground="{StaticResource ForegroundBrush}">
                    <ContentPresenter x:Name="contentPresenter1" />
                </ContentControl>
                <Rectangle x:Name="FocusVisualElement" Stroke="{StaticResource ComboBoxItemPressedBackgroundBrush}" Visibility="Collapsed" StrokeThickness="2" />
                <Rectangle x:Name="DisabledVisualElement" Fill="{StaticResource DisabledVisualElement}" Visibility="Collapsed" />
                </Grid>
            </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
  
    <!-- *********************************  ComboEditorTool Style  ********************************* -->
    <Style TargetType="{x:Type igRibbon:ComboEditorTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2,2,2,2" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="DropDownButtonStyle" Value="{StaticResource ComboEditor_DropDownButtonStyle}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type igRibbon:ComboEditorTool}">
                <!-- JM 09-05-18 TFS254718 - Change the StackPanel to a grid and bind the Width of the column containing the ComboBox to the EditAreaWidth property. -->
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="{TemplateBinding Property=EditAreaWidth}"/>
                    </Grid.ColumnDefinitions>
                    <igWindows:AutoDisabledImage Grid.Column="0" Width="16" Height="16" x:Name="Image" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Visibility="Collapsed" Source="{TemplateBinding igRibbon:TextEditorTool.ImageResolved}" />
                    <ContentPresenter x:Name="Caption" Grid.Column="1" Margin="0,0,5,0" Visibility="{Binding Path=(igRibbon:ButtonTool.HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Content="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}" />
                    <Border x:Name="MainBorder" Grid.Column="2" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" BorderThickness="1,1,1,1" Width="{TemplateBinding EditAreaWidth}" CornerRadius="0,0,0,0">
                        <Grid>
                            <ComboBox Name="PART_FocusSite" 
                                        Background="Transparent" BorderBrush="Transparent" BorderThickness="0,0,0,0" 
                                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" 
                                        Padding="{TemplateBinding Padding}" IsReadOnly="{TemplateBinding ReadOnly}" IsEditable="{TemplateBinding IsEditable}" 
                                        MaxDropDownHeight="{TemplateBinding MaxDropDownHeight}" ContextMenu="{TemplateBinding ContextMenu}" 
                                        IsDropDownOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                        Style="{TemplateBinding ComboBoxStyle}"
                                        SelectedValuePath="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsProvider.ValuePath}" 
                                        DisplayMemberPath="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsProvider.DisplayMemberPath}" 
                                        igEditors:XamComboEditor.ComboEditor="{Binding RelativeSource={RelativeSource TemplatedParent}}" 
                                        InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}" InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}" InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}" 
                                        ItemContainerStyle="{StaticResource ComboBoxItemStyle}" Visibility="Collapsed" />
                            <Grid Name="TextBlockGrid">
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBlock x:Name="TextBlock" Grid.Column="0" Padding="{TemplateBinding Padding}" Margin="1,0,0,0" Text="{TemplateBinding DisplayText}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                <ToggleButton x:Name="DropDownButton" Grid.Column="1" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" ClickMode="Press" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{TemplateBinding DropDownButtonStyle}" Visibility="Visible" IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}" />
                            </Grid>
                        </Grid>
                    </Border>
                </Grid>
                <ControlTemplate.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=Location, RelativeSource={RelativeSource Self}, Converter={x:Static igRibbon:ToolLocationToIsInMenuConverter.Instance}}" Value="True" />
                        <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:ToolMenuItem}, 1}}" Value="True" />
                        <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Caption" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                </MultiDataTrigger>
                <Trigger Property="Location" Value="QuickAccessToolbar">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
                    <Setter TargetName="TextBlock" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                </Trigger>
                <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                    <Setter Property="Margin" Value="6,0,0,0" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledCenterFillKey}}" />
                    <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledBorderFillKey}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
                </Trigger>
                <Trigger SourceName="MainBorder" Property="IsMouseOver" Value="True">
                    <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                    <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True" SourceName="MainBorder">
                    <Setter TargetName="DropDownButton" Property="Tag" Value="MouseOverControlTrue" />
                </Trigger>
                <Trigger Property="IsInEditMode" Value="True">
                    <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                    <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                    <Setter TargetName="PART_FocusSite" Property="Visibility" Value="Visible" />
                    <Setter TargetName="TextBlock" Property="Visibility" Value="Collapsed" />
                    <Setter Property="IsTabStop" Value="False" />
                </Trigger>
                <Trigger Property="Location" Value="Ribbon">
                    <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                </Trigger>
                <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                    <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                </Trigger>
                <Trigger Property="Location" Value="QuickAccessToolbar">
                    <Setter TargetName="Caption" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger Property="igRibbon:XamRibbon.HideAccessKey" Value="False">
                    <Setter TargetName="Caption" Property="RecognizesAccessKey" Value="True" />
                    <Setter TargetName="Caption" Property="Content" Value="{Binding Path=Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                </Trigger>
                <Trigger Property="igRibbon:RibbonToolHelper.SizingMode" Value="ImageOnly">
                    <Setter TargetName="Caption" Property="Visibility" Value="Collapsed"/>
                </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
            </MultiTrigger>
            <Trigger Property="IsInEditMode" Value="True">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- ******************************************************************  NEWLY ADDED  ****************************************************************** -->

    <!-- =================================================================== -->
    <!-- PopupResizerBar Style -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:XamRibbon.PopupResizerBarStyleKey}" TargetType="{x:Type igWindows:PopupResizerBar}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igWindows:PopupResizerBar}">
                    <Grid
                		x:Name="BorderStrokeWhenTop"
                		Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarStrokeKey}}"
                		HorizontalAlignment="Stretch"
                		VerticalAlignment="Stretch"
                		Width="Auto"
                		Height="Auto">
                        <Border
                			x:Name="Footer"
                			SnapsToDevicePixels="True"
                			Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGradientKey}}"
                			BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarStrokeKey}}"
                			BorderThickness="0,1,0,0"
                			HorizontalAlignment="Stretch"
                			VerticalAlignment="Stretch"
                			Width="Auto"
                			Height="Auto"
                			Margin="0,0,0,0">
                            <igWindows:CardPanel Margin="{TemplateBinding Padding}">
                                <igWindows:CardPanel x:Name="GlyphArea">
                                    <!-- the thumb is transparent and needs to be placed after the glyphs so that it is on top with respect to z-order -->
                                    <Thumb x:Name="PART_Thumb" Background="Transparent" Foreground="Transparent" Opacity="0" Height="{TemplateBinding Height}" Width="{TemplateBinding Height}"/>

                                    <!-- the glyph that is used when the resizemode is Both and the location is Bottom-->
                                    <Grid
                						x:Name="BottomRightGlyph"
                						Visibility="Collapsed"
                						Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource Self}}"
                						VerticalAlignment="Bottom"
                						HorizontalAlignment="Right"
                						Margin="0,0,1,1"
                						Background="{x:Null}"
                						IsHitTestVisible="False">
                                        <Path
                							Margin="1,1,0,0"
                							VerticalAlignment="Top"
                							Height="6"
                							Stretch="Fill"
                							Opacity="1"
                							Data="M 1,6 C1,6.5522918701171875 1.4477081298828125,7 2,7 2.5522918701171875,7 3,6.5522918701171875 3,6 3,5.4477081298828125 2.5522918701171875,5 2,5 1.4477081298828125,5 1,5.4477081298828125 1,6 zM 5,2 C5,2.5522918701171875 5.4477081298828125,3 6,3 6.5522918701171875,3 7,2.5522918701171875 7,2 7,1.4477081298828125 6.5522918701171875,1 6,1 5.4477081298828125,1 5,1.4477081298828125 5,2 zM 5,6 C5,6.5522918701171875 5.4477081298828125,7 6,7 6.5522918701171875,7 7,6.5522918701171875 7,6 7,5.4477081298828125 6.5522918701171875,5 6,5 5.4477081298828125,5 5,5.4477081298828125 5,6 z"
                							Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphNormalBackgroundFillKey}}" SnapsToDevicePixels="True" HorizontalAlignment="Left" Width="6" />
                                        <Grid
                							Opacity="1"
                							Margin="0,0,0,0"
                							HorizontalAlignment="Left" Width="6">
                                            <Path
                								Margin="0,4,0,0"
                								HorizontalAlignment="Left"
                								VerticalAlignment="Top"
                								Height="2"
                								Width="2"
                								Stretch="Fill"
                								Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}"
                								Opacity="1"
                								Data="M 0,5 C0,4.4477081298828125 0.4477081298828125,4 1,4 1.5522918701171875,4 2,4.4477081298828125 2,5 2,5.5522918701171875 1.5522918701171875,6 1,6 0.4477081298828125,6 0,5.5522918701171875 0,5 z" SnapsToDevicePixels="True"/>
                                            <Path
                								Margin="4,4,0,0"
                								HorizontalAlignment="Left"
                								VerticalAlignment="Top"
                								Height="2"
                								Width="2"
                								Stretch="Fill"
                								Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}"
                								Opacity="1"
                								Data="M 4,5 C4,4.4477081298828125 4.4477081298828125,4 5,4 5.5522918701171875,4 6,4.4477081298828125 6,5 6,5.5522918701171875 5.5522918701171875,6 5,6 4.4477081298828125,6 4,5.5522918701171875 4,5 z" SnapsToDevicePixels="True"/>
                                            <Path
                								Margin="4,0,0,0"
                								HorizontalAlignment="Left"
                								VerticalAlignment="Top"
                								Height="2"
                								Width="2"
                								Stretch="Fill"
                								Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}"
                								Opacity="1"
                								Data="M 4,1 C4,0.4477081298828125 4.4477081298828125,0 5,0 5.5522918701171875,0 6,0.4477081298828125 6,1 6,1.5522918701171875 5.5522918701171875,2 5,2 4.4477081298828125,2 4,1.5522918701171875 4,1 z" SnapsToDevicePixels="True"/>
                                        </Grid>
                                    </Grid>

                                    <!-- the glyph that is used when the resizemode is Both and the location is Top-->
                                    <Grid
                						x:Name="TopRightGlyph"
                						Visibility="Collapsed"
                						d:LayoutOverrides="HorizontalAlignment"
                						Background="{x:Null}"
                						Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource Self}}"
                						IsHitTestVisible="False">
                                        <Path SnapsToDevicePixels="True" HorizontalAlignment="Right" Margin="0,1,2,0" VerticalAlignment="Top" Width="6" Height="6" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphNormalBackgroundFillKey}}" Stretch="Fill" Data="F1 M1,2.9802322E-08 C1.5522847,0 2,0.44771525 2,1 C2,1.5522847 1.5522847,2 1,2 0.44771525,2 0,1.5522847 -5.9604645E-08,1 0,0.44771525 0.44771525,0 1,2.9802322E-08 z M1,-4 C1.5522847,-4 2,-3.5522847 2,-3 C2,-2.4477153 1.5522847,-2 1,-2 0.44771525,-2 0,-2.4477153 -5.9604645E-08,-3 0,-3.5522847 0.44771525,-4 1,-4 z M-3,-4 C-2.4477153,-4 -2,-3.5522847 -2,-3 C-2,-2.4477153 -2.4477153,-2 -3,-2 -3.5522847,-2 -4,-2.4477153 -4,-3 -4,-3.5522847 -3.5522847,-4 -3,-4 z"/>
                                        <Grid
                							Opacity="1"
                							Margin="0,0,0,0"
                							HorizontalAlignment="Right" Width="Auto" VerticalAlignment="Top">
                                            <Path
                								Margin="0,2,7,0"
                								HorizontalAlignment="Right"
                								VerticalAlignment="Top"
                								Height="2"
                								Width="2"
                								Stretch="Fill"
                								Opacity="1"
                								Data="M 0,5 C0,4.4477081298828125 0.4477081298828125,4 1,4 1.5522918701171875,4 2,4.4477081298828125 2,5 2,5.5522918701171875 1.5522918701171875,6 1,6 0.4477081298828125,6 0,5.5522918701171875 0,5 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}"/>
                                            <Path
                								Margin="0,6,3,0"
                								HorizontalAlignment="Right"
                								VerticalAlignment="Top"
                								Height="2"
                								Width="2"
                								Stretch="Fill"
                								Opacity="1"
                								Data="M 4,5 C4,4.4477081298828125 4.4477081298828125,4 5,4 5.5522918701171875,4 6,4.4477081298828125 6,5 6,5.5522918701171875 5.5522918701171875,6 5,6 4.4477081298828125,6 4,5.5522918701171875 4,5 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}"/>
                                            <Path
                								Margin="0,2,3,0"
                								HorizontalAlignment="Right"
                								VerticalAlignment="Top"
                								Height="2"
                								Width="2"
                								Stretch="Fill"
                								Opacity="1"
                								Data="M 4,1 C4,0.4477081298828125 4.4477081298828125,0 5,0 5.5522918701171875,0 6,0.4477081298828125 6,1 6,1.5522918701171875 5.5522918701171875,2 5,2 4.4477081298828125,2 4,1.5522918701171875 4,1 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}"/>
                                        </Grid>
                                    </Grid>

                                    <!-- the glyph that is used when the resizemode is VerticalOnly-->

                                    <Grid
                						x:Name="VerticalOnlyGlyph"
                						IsHitTestVisible="False"
                						Visibility="Collapsed"
                						Margin="0,0,0,0"
                						HorizontalAlignment="Center"
                						Width="Auto"
                						VerticalAlignment="Center"
                						Height="Auto">
                                        <Path SnapsToDevicePixels="True" HorizontalAlignment="Left" Margin="1,1,0,0" x:Name="WhiteShadows" VerticalAlignment="Top" Width="17" Height="2" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GenericGlyphNormalBackgroundFillKey}}" Stretch="None" Data="F1 M16,5.9604645E-08 C16.552284,0 17,0.44771525 17,1 C17,1.5522847 16.552284,2 16,2 15.447715,2 15,1.5522847 15,1 15,0.44771525 15.447715,0 16,5.9604645E-08 z M11,5.9604645E-08 C11.552285,0 12,0.44771525 12,1 C12,1.5522847 11.552285,2 11,2 10.447715,2 10,1.5522847 10,1 10,0.44771525 10.447715,0 11,5.9604645E-08 z M6,5.9604645E-08 C6.5522847,0 7,0.44771525 7,1 C7,1.5522847 6.5522847,2 6,2 5.4477153,2 5,1.5522847 5,1 5,0.44771525 5.4477153,0 6,5.9604645E-08 z M0.99999994,5.9604645E-08 C1.5522847,0 2,0.44771525 1.9999999,1 C2,1.5522847 1.5522847,2 0.99999994,2 0.44771525,2 0,1.5522847 0,1 0,0.44771525 0.44771525,0 0.99999994,5.9604645E-08 z"/>
                                        <Path
                							Height="2"
                							Width="2"
                							Stretch="Fill"
                							Opacity="1"
                							Data="M 4,5 C4,4.4477081298828125 4.4477081298828125,4 5,4 5.5522918701171875,4 6,4.4477081298828125 6,5 6,5.5522918701171875 5.5522918701171875,6 5,6 4.4477081298828125,6 4,5.5522918701171875 4,5 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}" HorizontalAlignment="Left" Margin="0,0,6,0" x:Name="_1" VerticalAlignment="Top"/>
                                        <Path
                							Margin="5,0,0,0"
                							HorizontalAlignment="Left"
                							VerticalAlignment="Top"
                							Height="2"
                							Width="2"
                							Stretch="Fill"
                							Opacity="1"
                							Data="M 0,5 C0,4.4477081298828125 0.4477081298828125,4 1,4 1.5522918701171875,4 2,4.4477081298828125 2,5 2,5.5522918701171875 1.5522918701171875,6 1,6 0.4477081298828125,6 0,5.5522918701171875 0,5 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}" x:Name="_2"/>
                                        <Path
                							Margin="10,0,0,0"
                							HorizontalAlignment="Left"
                							VerticalAlignment="Top"
                							Height="2"
                							Width="2"
                							Stretch="Fill"
                							Opacity="1"
                							Data="M 4,5 C4,4.4477081298828125 4.4477081298828125,4 5,4 5.5522918701171875,4 6,4.4477081298828125 6,5 6,5.5522918701171875 5.5522918701171875,6 5,6 4.4477081298828125,6 4,5.5522918701171875 4,5 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}" x:Name="_3"/>
                                        <Path
                							Margin="15,0,0,0"
                							HorizontalAlignment="Left"
                							VerticalAlignment="Top"
                							Height="2"
                							Width="2"
                							Stretch="Fill"
                							Opacity="1"
                							Data="M 4,1 C4,0.4477081298828125 4.4477081298828125,0 5,0 5.5522918701171875,0 6,0.4477081298828125 6,1 6,1.5522918701171875 5.5522918701171875,2 5,2 4.4477081298828125,2 4,1.5522918701171875 4,1 z" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryToolDropDownPresenterFooterBarGlyphFillKey}}" x:Name="_4"/>
                                    </Grid>

                                </igWindows:CardPanel>
                            </igWindows:CardPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="Both"/>
                                <Condition Property="Location" Value="Bottom"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="BottomRightGlyph" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_Thumb" Property="Cursor" Value="SizeNWSE"/>
                            <Setter TargetName="GlyphArea" Property="HorizontalAlignment" Value="Right"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="Both"/>
                                <Condition Property="Location" Value="Bottom"/>
                                <Condition Property="FlowDirection" Value="RightToLeft"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Thumb" Property="Cursor" Value="SizeNESW"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="Both"/>
                                <Condition Property="Location" Value="Top"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="TopRightGlyph" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_Thumb" Property="Cursor" Value="SizeNESW"/>
                            <Setter TargetName="GlyphArea" Property="HorizontalAlignment" Value="Right"/>
                            <Setter TargetName="Footer" Property="BorderThickness" Value="0,0,0,0"/>
                            <Setter TargetName="Footer" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="Footer" Property="Margin" Value="0,0,0,1"/>
                            <Setter TargetName="BorderStrokeWhenTop" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="Both"/>
                                <Condition Property="Location" Value="Top"/>
                                <Condition Property="FlowDirection" Value="RightToLeft"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Thumb" Property="Cursor" Value="SizeNWSE"/>
                        </MultiTrigger>
                        <Trigger Property="ResizeMode" Value="VerticalOnly">
                            <Setter TargetName="VerticalOnlyGlyph" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_Thumb" Property="Cursor" Value="SizeNS"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Default ApplicationAccentColor Style -->
    <Style TargetType="{x:Type igRibbon:XamRibbon}" BasedOn="{StaticResource scenicRibbonStyle}">
        <Setter Property="ApplicationAccentColor" Value="{StaticResource Color_15}"/>
    </Style>

    <!-- =================================================================== -->
    <!--                         NA 13.1 Backstage                           -->
    <!-- =================================================================== -->

    <!-- =================================================================== -->
    <!-- ApplicationMenu2010FileTab Style -->
    <!-- =================================================================== -->
    <Style TargetType="igRibbon:ApplicationMenu2010FileTab">
        <Setter Property="MinHeight" Value="17" />
        <Setter Property="Margin" Value="0,1,0,0" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igRibbon:ApplicationMenu2010FileTab">
                    <ToggleButton
							x:Name="orbPanel"
							Width="56"
                            Focusable="false"
                            SnapsToDevicePixels="true"
							HorizontalAlignment="Left"
							VerticalAlignment="Stretch"
                            ClickMode="Press"
                            Foreground="{TemplateBinding Foreground}"
                            IsChecked="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationMenu2010.IsOpen, RelativeSource={x:Static RelativeSource.Self}, Mode=TwoWay}"
                        >
                        <ToggleButton.Template>
                            <ControlTemplate TargetType="ToggleButton">
                                <ContentPresenter />
                            </ControlTemplate>
                        </ToggleButton.Template>
                        <Grid>
                            <Border
								x:Name="OuterBorder"
								>
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF666666}" />
                                </Border.BorderBrush>
                                <Border.Background>
                                    <SolidColorBrush Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF666666}" />
                                </Border.Background>
                                <Border
                                    x:Name="InnerBorder"
									BorderBrush="White"
									BorderThickness="1"
									Margin="2"
									Visibility="Collapsed">
                                    <Border.Background>
                                        <SolidColorBrush Color="{StaticResource Color_131}" />
                                    </Border.Background>
                                </Border>
                            </Border>
                            <igWindows:CardPanel SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <Image x:Name="appMenuImage"
									    MaxHeight="16"
									    Stretch="Uniform"
									    StretchDirection="DownOnly"
									    HorizontalAlignment="Center"
									    VerticalAlignment="Center"
									    SnapsToDevicePixels="True"
									    Source="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationMenu2010.Image, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                                <Viewbox x:Name="appMenuCaption" 
                                         Stretch="Uniform" 
                                         StretchDirection="DownOnly" 
                                         Visibility="Collapsed" 
                                         Margin="3,4,3,3">
                                    <TextBlock Text="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationMenu2010.Caption, RelativeSource={RelativeSource TemplatedParent}}" />
                                </Viewbox>
                            </igWindows:CardPanel>
                        </Grid>
                    </ToggleButton>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationMenu2010.HasCaption, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter TargetName="appMenuCaption" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="appMenuImage" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationMenu2010.IsOpen, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <!-- Open - may or may not be hottracked -->
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!-- Hottracked - may or may not be open -->
                            <Setter TargetName="InnerBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- ApplicationMenu2010 Style -->
    <!-- =================================================================== -->
    <Style TargetType="igRibbon:ApplicationMenu2010">
        <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Cycle" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Cycle" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Background" Value="#FF181818" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igRibbon:ApplicationMenu2010">
                    <!-- the entire area scrolls as a unit -->
                    <ScrollViewer Focusable="False">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="1" />
                                <RowDefinition Height="1" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Border Grid.Row="0" Height="1" VerticalAlignment="Top" SnapsToDevicePixels="True">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0, 0.5" EndPoint="1, 0.5">
                                        <GradientStop Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF666666}" Offset="0"/>
                                        <GradientStop Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#00666666}" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                            <Border Grid.Row="1" Height="1" VerticalAlignment="Top" SnapsToDevicePixels="True">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0, 0.5" EndPoint="1, 0.5">
                                        <GradientStop Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF575757}" Offset="0"/>
                                        <GradientStop Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#00575757}" Offset="1"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                            </Border>
                            <Grid Grid.Row="2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenu2010ItemAreaCenterFillKey}}"
                                        BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenu2010ItemAreaBorderFillKey}}"
                                        BorderThickness="0,0,1,0">
                                    <igWindows:CardPanel>
                                    
                                        <ItemsPresenter
                                            Margin="0,0,-1,0"
                                            KeyboardNavigation.DirectionalNavigation="Cycle"
                                            KeyboardNavigation.TabNavigation="Once"
                                        />
                                    </igWindows:CardPanel>
                                </Border>
                                <ContentPresenter
                                    x:Name="PART_SelectedTabContentHost"
                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                    Content="{Binding SelectedTab.Content, RelativeSource={RelativeSource TemplatedParent}}"
                                    ContentTemplate="{Binding SelectedTab.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                    ContentTemplateSelector="{Binding SelectedTab.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                    ContentStringFormat="{Binding SelectedTab.ContentStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                    HorizontalAlignment="{Binding SelectedTab.HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                    VerticalAlignment="{Binding SelectedTab.VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                    Grid.Column="1"
                                />
                            </Grid>
                        </Grid>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- ApplicationMenu2010Item Style -->
    <!-- =================================================================== -->
    <ControlTemplate TargetType="igRibbon:ApplicationMenu2010Item" x:Key="{x:Static igRibbon:ApplicationMenu2010Item.ButtonTemplateKey}">
        <Border x:Name="outerBorder" 
                Margin="6,0"
                BorderThickness="1"
                Background="{TemplateBinding Background}"
                SnapsToDevicePixels="True"
				BorderBrush="Transparent">
            <Border 
                x:Name="innerBorder" 
                Padding="14,3"
                BorderThickness="0"
                Background="Transparent">
                <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <igWindows:AutoDisabledImage 
                        x:Name="image" 
                        Width="16" 
                        Height="16"
                        igRibbon:XamRibbon.KeyTipPlacementType="SmallImage"
                        igWindows:Utilities.SnapElementToDevicePixels="True"
                        Visibility="{Binding Path=HasImage, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}"
                        Source="{TemplateBinding Image}" 
                        />
                    <ContentPresenter 
                        RecognizesAccessKey="True" 
                        Grid.Column="1"
                        ContentSource="Header" 
                        igRibbon:XamRibbon.KeyTipPlacementType="Caption"
                        />
                </Grid>
            </Border>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonGroupHoverCenterFillKey}}" />
                <Setter Property="Foreground" Value="{Binding Path=Background.Color, RelativeSource={RelativeSource Self}, Converter={StaticResource calculatedForegroundConverter}}" />
                <Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonGroupHoverBorderFillKey}}" />
            </Trigger>
            <Trigger Property="IsMouseOverTab" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonGroupHoverCenterFillKey}}" />
                <Setter Property="Foreground" Value="{Binding Path=Background.Color, RelativeSource={RelativeSource Self}, Converter={StaticResource calculatedForegroundConverter}}" />
                <Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonGroupHoverBorderFillKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GrayTextBrushKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="igRibbon:ApplicationMenu2010Item" x:Key="{x:Static igRibbon:ApplicationMenu2010Item.TabTemplateKey}">
        <Grid Background="Transparent">
            <Border x:Name="outerBorder" 
                    BorderThickness="0,1"
                    Background="{TemplateBinding Background}"
					BorderBrush="Transparent"
					Margin="1">
                <Border x:Name="innerBorder"
                        Padding="21,10"
                        BorderBrush="Transparent"
                        BorderThickness="0"
                        SnapsToDevicePixels="True">
                    <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <igWindows:AutoDisabledImage 
                            x:Name="image" 
                            Width="16" 
                            Height="16"
                            igRibbon:XamRibbon.KeyTipPlacementType="SmallImage"
                            igWindows:Utilities.SnapElementToDevicePixels="True"
                            Visibility="{Binding Path=HasImage, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}"
                            Source="{TemplateBinding Image}" 
                            />
                        <ContentPresenter x:Name="header"
                            RecognizesAccessKey="True" 
                            Grid.Column="1"
                            TextElement.FontSize="{Binding Path=(TextElement.FontSize), ElementName=outerBorder, Converter={StaticResource applicationMenuTabFontConverter}}"
                            ContentSource="Header" 
                            igRibbon:XamRibbon.KeyTipPlacementType="Caption"
                            />
                    </Grid>
                </Border>
            </Border>
            <Path 
                Data="M 0,8 8,0 8,15 Z" 
                Fill="{Binding Path=Background, RelativeSource={RelativeSource AncestorType=igRibbon:ApplicationMenu2010}}" 
                Stretch="None" 
                HorizontalAlignment="Right" 
                VerticalAlignment="Center" 
                Visibility="{Binding Path=IsSelectedTab, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToVisConverter}}"
                />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSelectedTab" Value="True">
                <Setter Property="Background" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource Self}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF666666}" />
                <Setter Property="TextElement.Foreground" TargetName="header" Value="{Binding Path=Background.Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource calculatedForegroundConverter}}" />
                <Setter TargetName="outerBorder" Property="BorderBrush" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).ApplicationAccentColor, RelativeSource={RelativeSource Self}, Converter={StaticResource overlayBlendConverter}, ConverterParameter=#FF666666}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelectedTab" Value="False" />
                    <Condition Property="IsMouseOverTab" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonGroupHoverCenterFillKey}}"  />
                <Setter Property="TextElement.Foreground" TargetName="header" Value="{Binding Path=Background.Color, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource calculatedForegroundConverter}}" />
                <Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonGroupHoverBorderFillKey}}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" TargetName="header" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GrayTextBrushKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="igRibbon:ApplicationMenu2010Item">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GrayTextBrushKey}}" />
        <Setter Property="Template" Value="{DynamicResource {x:Static igRibbon:ApplicationMenu2010Item.ButtonTemplateKey}}" />
        <Style.Triggers>
            <Trigger Property="ItemType" Value="Tab">
                <Setter Property="Template" Value="{DynamicResource {x:Static igRibbon:ApplicationMenu2010Item.TabTemplateKey}}" />
            </Trigger>

            <!-- Do not show the default focus for buttons - only for the tabs -->
            <Trigger Property="ItemType" Value="Button">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- ApplicationMenu2010Separator Style -->
    <!-- =================================================================== -->
    <Style TargetType="igRibbon:ApplicationMenu2010Separator">
        <Setter Property="Padding" Value="0,2,0,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igRibbon:ApplicationMenu2010Separator">
                    <igWindows:CardPanel SnapsToDevicePixels="true" Margin="{TemplateBinding Padding}">
                        <Rectangle Height="1" Margin="0,0,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.HorizontalSeparatorNormalDarkFillKey}}" SnapsToDevicePixels="true" />
                         </igWindows:CardPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- =================================================================== -->
    <!-- SubmenuItem Template (used for NON-menu tools inside a menu)        -->
    <!-- =================================================================== -->
    <ControlTemplate x:Key="{x:Static igRibbon:MenuToolBase.SubmenuItemTemplateKey}"
		TargetType="{x:Type igRibbon:ToolMenuItem}">
        <Grid Margin="0,0,0,0">
            <Grid x:Name="ApplicationMenuItem_Hover" Height="Auto" Width="Auto" Visibility="Collapsed">
                <Rectangle SnapsToDevicePixels="True" x:Name="BorderDark" Width="Auto" Height="Auto" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderFillKey}}" RadiusX="0" RadiusY="0"/>
                <Border SnapsToDevicePixels="True" Margin="1,1,1,1" x:Name="BorderLight_CenterFill" Width="Auto" Height="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderLightFillKey}}" BorderThickness="1,1,1,1" CornerRadius="0"/>
            </Grid>
            <Grid x:Name="MenuItem_Hover" Height="Auto" Width="Auto" Visibility="Collapsed">
                <Border SnapsToDevicePixels="True" x:Name="BorderDark1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}" CornerRadius="0" BorderThickness="1" >
                    <Rectangle SnapsToDevicePixels="True" x:Name="BorderLight_CenterFill1" Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderLightFillKey}}" RadiusX="0" RadiusY="0" StrokeThickness="1"/>
                </Border>
            </Grid>
            <Border  x:Name="Bd"
				Background="{TemplateBinding Background}"
				BorderThickness="{TemplateBinding BorderThickness}"
				BorderBrush="{TemplateBinding BorderBrush}"
				SnapsToDevicePixels="true">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition MinWidth="17" Width="Auto" x:Name="iconColumn"  SharedSizeGroup="MenuItemIconColumnGroup" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                        <ColumnDefinition Width="14" />
                    </Grid.ColumnDefinitions>

                    <!-- icon area background element-->
                    <Border x:Name="IconAreaBackground" Style="{StaticResource MenuItem_IconAreaBackground}"/>

                    <!-- OrangeBox for IsChecked -->
                    <Border x:Name="OrangeCheckBox"
						SnapsToDevicePixels="True"
						BorderThickness="1" 
						CornerRadius="0"
						HorizontalAlignment="Center"
						VerticalAlignment="Center" 
						Margin="2,2,3,2">

                        <igWindows:CardPanel>
                            <!-- Small check mark -->
                            <Grid x:Name="GlyphPanel" Visibility="Collapsed" FlowDirection="LeftToRight" 
							  Background="{x:Null}" HorizontalAlignment="Center" 
								VerticalAlignment="Center" Width="16" Height="16" igRibbon:XamRibbon.KeyTipPlacementType="CheckIndicator">
                                <Path
									Margin="4.946,2.008,0,0"
									HorizontalAlignment="Left"
									VerticalAlignment="Top"
									Height="11.069"
									Width="7.026"
									Stretch="Fill"
									Opacity="1"
									Data="M 27.9883975982666,68.03516387939453 C27.9883975982666,68.03516387939453 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 35.01433563232422,61.019805908203125 35.01433563232422,61.019805908203125 "
									Stroke="#eae9d5"
									StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                <Path
									Margin="3.946,2.393,0,0"
									HorizontalAlignment="Left"
									VerticalAlignment="Top"
									Height="10.684"
									Width="8.459"
									Stretch="Fill"
									Opacity="1"
									Data="M 26.9883975982666,67.03516387939453 C26.9883975982666,67.03516387939453 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 35.44744110107422,61.404788970947266 35.44744110107422,61.404788970947266 "
									Stroke="#eae9d5"
									StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                <Path
									Margin="4.946,2.008,0,0"
									HorizontalAlignment="Left"
									VerticalAlignment="Top"
									Height="9.069"
									Width="6.026"
									Stretch="Fill"
									Opacity="1"
									Data="M 27.9883975982666,68.03516387939453 C27.9883975982666,68.03516387939453 30.490787506103516,70.08806610107422 30.490787506103516,70.08806610107422 30.490787506103516,70.08806610107422 34.01433563232422,61.019805908203125 34.01433563232422,61.019805908203125 "
									Stroke="#eae9d5"
									StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                <Path
									Margin="4.946,2.393,0,0"
									HorizontalAlignment="Left"
									VerticalAlignment="Top"
									Height="10.684"
									Width="7.459"
									Stretch="Fill"
									Opacity="1"
									Data="M 27.9883975982666,67.03516387939453 C27.9883975982666,67.03516387939453 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 35.44744110107422,61.404788970947266 35.44744110107422,61.404788970947266 "
									Stroke="#eae9d5"
									StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                <Path
									Margin="4.75,2.24,0,0"
									HorizontalAlignment="Left"
									VerticalAlignment="Top"
									Height="9.862"
									Width="6.785"
									Stretch="Fill"
									Opacity="1"
									Data="M27.561812,66.880152 C27.561812,66.880152 30.275803,71.118003 30.275803,71.118003 30.275803,71.118003 34.457825,61.276845 34.457825,61.276845"
									Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}"
									StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                <Path
									HorizontalAlignment="Left"
									VerticalAlignment="Top"
									Height="9.899"
									Width="6.908"
									Stretch="Fill"
									Opacity="1"
									Data="M27.616231,66.205115 C27.616231,66.205115 30.445511,71.297952 30.445511,71.297952 30.445511,71.297952 34.499006,61.29204 34.499006,61.29204"
									Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}"
									StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" Margin="4.627,2.363,0,0" />
                            </Grid>

                            <!-- Big check mark -->
                            <Grid
								FlowDirection="LeftToRight" 
								x:Name="GlyphPanel32"
								Height="32"
								Width="32"
								Background="{x:Null}"
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								Visibility="Collapsed"
								igRibbon:XamRibbon.KeyTipPlacementType="CheckIndicator">
                                <Path
									Margin="0,0,0,0"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Height="18"
									Width="13"
									Stretch="Fill"
									Opacity="1"
									Data="M 59,344 C59,344 63,353 63,353 63,353 72,335 72,335 "
									Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}"
									StrokeThickness="2" SnapsToDevicePixels="True" />
                                <Path
									Margin="0,0,0,0"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									Height="18"
									Width="13.272"
									Stretch="Fill"
									Opacity="1"
									Data="M59,344 C59,344 63.32169,353 63.32169,353 63.32169,353 72.32169,335 72.32169,335"
									Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}"
									StrokeThickness="2" SnapsToDevicePixels="True" />
                            </Grid>

                            <!-- icon -->
                            <ContentPresenter x:Name="Icon" Width="16" Height="16" 
								igRibbon:XamRibbon.KeyTipPlacementType="SmallImage"
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								ContentSource="Icon"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </igWindows:CardPanel>
                    </Border>

                    <!-- content -->
                    <Grid x:Name="ContentArea" Grid.Column="1" VerticalAlignment="Center" Margin="0,0,1,0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*" x:Name="descriptionRow"/>
                        </Grid.RowDefinitions>

                        <!-- content -->
                        <ContentPresenter
							x:Name="Content"
							ContentSource="Header"
							Margin="15,0,7,0"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Center"
							RecognizesAccessKey="true"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                        <ContentPresenter Style="{StaticResource ToolMenuItemDescription_ContentPresenter}" Grid.Row="1" MaxWidth="{Binding ElementName=Content, Path=ActualWidth}" Name="MenuItemDescription"  Margin="6,0,6,1" Content="{TemplateBinding igRibbon:MenuToolBase.MenuItemDescription}"/>
                    </Grid>

                    <!-- InputGestureText -->
                    <TextBlock
						x:Name="InputGestureText"
						VerticalAlignment="Center"
						Grid.Column="2"
						Text="{TemplateBinding InputGestureText}"
						Margin="0,0,0,0"
						DockPanel.Dock="Right" />


                </Grid>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </Trigger>

            <Trigger Property="UseLargeImage" Value="False">
                <Setter TargetName="Content" Property="Margin" Value="7,3,7,4"/>
                <Setter TargetName="Icon" Property="Margin" Value="2,0,0,0"/>
            </Trigger>

            <Trigger Property="UseLargeImage" Value="True">
                <Setter TargetName="Content" Property="Margin" Value="4,0,0,1"/>
                <Setter TargetName="Icon" Property="Width" Value="32" />
                <Setter TargetName="Icon" Property="Height" Value="32" />
                <Setter TargetName="Icon" Property="Margin" Value="1" />
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="igRibbon:XamRibbon.Location" Value="ApplicationMenuRecentItems">
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed"/>
            </Trigger>

            <Trigger Property="igRibbon:XamRibbon.Location" Value="ApplicationMenu">
                <Setter TargetName="OrangeCheckBox" Property="Margin" Value="4"/>
                <Setter TargetName="Icon" Property="Margin" Value="1,1,1,1"/>
            </Trigger>

            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="Bd" Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}"/>
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="UseLargeImage" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ApplicationMenuItem_Hover" Property="Visibility" Value="Visible"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="UseLargeImage" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="MenuItem_Hover" Property="Visibility" Value="Visible"/>
            </MultiTrigger>

            <!--========================== IsChecked Triggers ==========================-->
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="OrangeCheckBox" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.IsCheckedBoxCenterFillKey}}" />
                <Setter TargetName="OrangeCheckBox" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.IsCheckedBoxBorderFillKey}}" />
                <Setter TargetName="Bd" Property="Background" Value="Transparent" />
            </Trigger>

            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Hidden"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}"/>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="UseLargeImage" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}"/>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="UseLargeImage" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="GlyphPanel32" Value="Visible"/>
            </MultiTrigger>

            <!-- END  IsChecked Triggers ==========================-->

            <Trigger Property="igRibbon:MenuToolBase.HasMenuItemDescription" Value="False">
                <Setter TargetName="descriptionRow" Property="Height" Value="0"/>
            </Trigger>

            <Trigger Property="igRibbon:MenuToolBase.HasMenuItemDescription" Value="True">
                <Setter TargetName="Content" Property="TextBlock.FontWeight" Value="Bold"/>
                <Setter TargetName="Content" Property="Margin" Value="6,4,0,1"/>
                <Setter TargetName="Content" Property="MinWidth" Value="{Binding Path=MenuItemDescriptionMinWidth, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="MenuItemDescription" Property="Margin" Value="6,0,6,4"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}"/>
                    <Condition Property="IsCheckable" Value="False"/>
                    <Condition Property="Location" Value="ApplicationMenuRecentItems"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="OrangeCheckBox" Value="Collapsed"/>
                <Setter Property="SharedSizeGroup" TargetName="iconColumn" Value="{x:Null}"/>
                <Setter Property="MinWidth" TargetName="iconColumn" Value="0"/>
            </MultiTrigger>

            <Trigger Property="IsSeparator" Value="True">
                <Setter Property="Grid.ColumnSpan" TargetName="ContentArea" Value="3"/>
                <Setter Property="Visibility" TargetName="InputGestureText" Value="Collapsed"/>
                <Setter Property="Margin" TargetName="OrangeCheckBox" Value="2,0,3,0"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Hidden"/>
                <Setter Property="Height" TargetName="Icon" Value="1"/>
                <Setter Property="Margin" TargetName="Content" Value="5,0,0,0"/>
                <Setter Property="Margin" TargetName="ContentArea" Value="0"/>
                <Setter Property="IsHitTestVisible" Value="False"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSeparator" Value="True"/>
                    <Condition Property="UseLargeImage" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Margin" TargetName="Content" Value="2,0,0,0"/>
            </MultiTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- =================================================================== -->
    <!-- SubmenuHeader Template (used for menu tools inside another menu)    -->
    <!-- =================================================================== -->
    <ControlTemplate x:Key="{x:Static igRibbon:MenuToolBase.SubmenuHeaderTemplateKey}"
	   TargetType="{x:Type igRibbon:ToolMenuItem}">
        <ControlTemplate.Resources>
            <Storyboard x:Key="ApplicationMenu_SideSelect_SecondaryHover" x:Name="Timeline1">
                <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Storyboard.TargetProperty="(UIElement.Visibility)">
                    <DiscreteObjectKeyFrame KeyTime="00:00:00.4000000" Value="{x:Static Visibility.Visible}"/>
                </ObjectAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Width="Auto" Height="Auto" Margin="0">
            <Grid x:Name="MenuItem_Hover" Height="Auto" Width="Auto" Visibility="Collapsed">
                <Rectangle SnapsToDevicePixels="True" x:Name="BorderDark1" Width="Auto" Height="Auto" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}" RadiusX="0" RadiusY="0"/>
                <Border SnapsToDevicePixels="True" Margin="1,1,1,1" x:Name="BorderLight_CenterFill1" Width="Auto" Height="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderLightFillKey}}" BorderThickness="1,1,1,1" CornerRadius="0"/>
            </Grid>
            <Grid d:LayoutOverrides="HorizontalAlignment" x:Name="ApplicationMenu_SideSelect_SecondaryButton" Visibility="Collapsed"  VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Width="Auto"  Height="Auto" Background="#00000000">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="HottrackLeftPortion" Width="*"/>
                    <ColumnDefinition x:Name="HottrackRightPortion" Width="24"/>
                </Grid.ColumnDefinitions>

                <Rectangle 
			x:Name="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" 
			Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderFillKey}}" 
			RadiusX="0" RadiusY="0" 
			HorizontalAlignment="Stretch" 
			Margin="0,0,0,0" 
			VerticalAlignment="Stretch" 
			SnapsToDevicePixels="True" 
			Visibility="Collapsed" 
			Grid.ColumnSpan="2"/>

                <Rectangle 
			x:Name="ApplicationMenu_SideSelect_Secondary_BorderLightFill"
			SnapsToDevicePixels="True" 
			Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderLightFillKey}}" 
			RadiusX="0" RadiusY="0" Margin="1,1,1,1" 
			VerticalAlignment="Stretch" 
			Visibility="Collapsed" 
			Grid.ColumnSpan="2"/>

                <Rectangle
			x:Name="ApplicationMenu_SideSelect_CenterFillSecondary"
			SnapsToDevicePixels="True"
			Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectCenterSecondaryFillKey}}"
			RadiusX="0" RadiusY="0"
			Margin="2,2,2,2"
			Visibility="Collapsed"
			Grid.ColumnSpan="2"/>

                <Border
			x:Name="ApplicationMenu_SideSelect_CenterFill"
			SnapsToDevicePixels="True"
			HorizontalAlignment="Stretch"
			Margin="2,2,2,2"
			Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectCenterFillKey}}"
			CornerRadius="0"
			Visibility="Collapsed"
			Grid.ColumnSpan="1"/>

                <Border 
			x:Name="ApplicationMenu_SideSelect_SecondarySideHover"
			Visibility="Collapsed" 
			HorizontalAlignment="Stretch" 
			Margin="0,2,2,2"
			Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectCenterFillKey}}" 
			CornerRadius="0" 
			SnapsToDevicePixels="True" 
			Grid.Column="1"/>

                <Rectangle 
			x:Name="ApplicationMenu_SideSelect_Divider" 
			Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderFillKey}}" 
			SnapsToDevicePixels="True" 
			RadiusX="0" RadiusY="0" 
			HorizontalAlignment="Right" 
			Margin="0,1,0,1" 
			Width="1"
			 Visibility="Collapsed" />

                <Border Opacity="0" HorizontalAlignment="Stretch" Margin="3,3,3,3" x:Name="border" Width="Auto" Height="Auto" Grid.ColumnSpan="2"/>
            </Grid>
            <Border Name="Bd"
				    Background="Transparent"
				    BorderThickness="{TemplateBinding BorderThickness}"
				    BorderBrush="{TemplateBinding BorderBrush}"
				    SnapsToDevicePixels="true">
                <Grid>

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition x:Name="arrowColumn" Width="23" />
                    </Grid.ColumnDefinitions>

                    <Button x:Name="PART_SegmentedButton" Background="Transparent" 
						 Style="{StaticResource PlainContentControlStyle}">

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                            </Grid.ColumnDefinitions>

                            <Border x:Name="IconAreaBackground" Style="{StaticResource MenuItem_IconAreaBackground}"/>

                            <!-- OrangeBox for IsChecked -->
                            <Border x:Name="OrangeCheckBox"
								SnapsToDevicePixels="True"
								BorderThickness="1" CornerRadius="0"
								Margin="2,2,3,2"
								HorizontalAlignment="Center"
								VerticalAlignment="Center" >

                                <igWindows:CardPanel>
                                    <!-- Small check mark -->
                                    <Grid x:Name="GlyphPanel" Visibility="Collapsed" FlowDirection="LeftToRight" 
										Background="{x:Null}" HorizontalAlignment="Center"
										VerticalAlignment="Center" Width="16" Height="16" igRibbon:XamRibbon.KeyTipPlacementType="CheckIndicator">
                                        <Path
											Margin="4.946,2.008,0,0"
											HorizontalAlignment="Left"
											VerticalAlignment="Top"
											Height="11.069"
											Width="7.026"
											Stretch="Fill"
											Opacity="1"
											Data="M 27.9883975982666,68.03516387939453 C27.9883975982666,68.03516387939453 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 35.01433563232422,61.019805908203125 35.01433563232422,61.019805908203125 "
											Stroke="#eae9d5"
											StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                        <Path
											Margin="3.946,2.393,0,0"
											HorizontalAlignment="Left"
											VerticalAlignment="Top"
											Height="10.684"
											Width="8.459"
											Stretch="Fill"
											Opacity="1"
											Data="M 26.9883975982666,67.03516387939453 C26.9883975982666,67.03516387939453 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 35.44744110107422,61.404788970947266 35.44744110107422,61.404788970947266 "
											Stroke="#eae9d5"
											StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                        <Path
											Margin="4.946,2.008,0,0"
											HorizontalAlignment="Left"
											VerticalAlignment="Top"
											Height="9.069"
											Width="6.026"
											Stretch="Fill"
											Opacity="1"
											Data="M 27.9883975982666,68.03516387939453 C27.9883975982666,68.03516387939453 30.490787506103516,70.08806610107422 30.490787506103516,70.08806610107422 30.490787506103516,70.08806610107422 34.01433563232422,61.019805908203125 34.01433563232422,61.019805908203125 "
											Stroke="#eae9d5"
											StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                        <Path
											Margin="4.946,2.393,0,0"
											HorizontalAlignment="Left"
											VerticalAlignment="Top"
											Height="10.684"
											Width="7.459"
											Stretch="Fill"
											Opacity="1"
											Data="M 27.9883975982666,67.03516387939453 C27.9883975982666,67.03516387939453 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 30.490787506103516,72.08806610107422 35.44744110107422,61.404788970947266 35.44744110107422,61.404788970947266 "
											Stroke="#eae9d5"
											StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                        <Path
											Margin="4.75,2.24,0,0"
											HorizontalAlignment="Left"
											VerticalAlignment="Top"
											Height="9.862"
											Width="6.785"
											Stretch="Fill"
											Opacity="1"
											Data="M27.561812,66.880152 C27.561812,66.880152 30.275803,71.118003 30.275803,71.118003 30.275803,71.118003 34.457825,61.276845 34.457825,61.276845"
											Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}"
											StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" />
                                        <Path
											HorizontalAlignment="Left"
											VerticalAlignment="Top"
											Height="9.899"
											Width="6.908"
											Stretch="Fill"
											Opacity="1"
											Data="M27.616231,66.205115 C27.616231,66.205115 30.445511,71.297952 30.445511,71.297952 30.445511,71.297952 34.499006,61.29204 34.499006,61.29204"
											Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}"
											StrokeThickness="1" SnapsToDevicePixels="True" d:LayoutOverrides="HorizontalAlignment, VerticalAlignment" Margin="4.627,2.363,0,0" />
                                    </Grid>

                                    <!-- Big check mark -->
                                    <Grid
										FlowDirection="LeftToRight" 
										x:Name="GlyphPanel32"
										Height="32"
										Width="32"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Visibility="Collapsed">
                                        <Path
											Margin="0,0,0,0"
											HorizontalAlignment="Center"
											VerticalAlignment="Center"
											Height="18"
											Width="13"
											Stretch="Fill"
											Opacity="1"
											Data="M 59,344 C59,344 63,353 63,353 63,353 72,335 72,335 "
											Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}"
											StrokeThickness="2" SnapsToDevicePixels="True" />
                                        <Path
											Margin="0,0,0,0"
											HorizontalAlignment="Center"
											VerticalAlignment="Center"
											Height="18"
											Width="13.272"
											Stretch="Fill"
											Opacity="1"
											Data="M59,344 C59,344 63.32169,353 63.32169,353 63.32169,353 72.32169,335 72.32169,335"
											Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CheckMarkStrokeFillKey}}"
											StrokeThickness="2" SnapsToDevicePixels="True" />
                                    </Grid>

                                    <!-- icon -->
                                    <ContentPresenter x:Name="Icon" Width="16" Height="16"
										igRibbon:XamRibbon.KeyTipPlacementType="SmallImage"
										HorizontalAlignment="Left"
										VerticalAlignment="Center"
										ContentSource="Icon"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </igWindows:CardPanel>
                            </Border>

                            <!-- content -->
                            <Grid Grid.Column="1" VerticalAlignment="Center" Margin="0,0,1,0">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*" x:Name="descriptionRow"/>
                                </Grid.RowDefinitions>

                                <!-- content -->
                                <ContentPresenter Name="Content"
												 Grid.Column="1"
												 ContentSource="Header"
												 Margin="8,0,5,1"
												 RecognizesAccessKey="true"
												 SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
												 HorizontalAlignment="Stretch"
												 VerticalAlignment="Center"/>

                                <ContentPresenter Style="{StaticResource ToolMenuItemDescription_ContentPresenter}" Grid.Row="1" MaxWidth="{Binding ElementName=Content, Path=ActualWidth}" Name="MenuItemDescription"  Margin="6,0,6,1" Content="{TemplateBinding igRibbon:MenuToolBase.MenuItemDescription}"/>
                            </Grid>
                        </Grid>
                    </Button>

                    <!-- Glyph Arrow-->
                    <Control Style="{DynamicResource {x:Static igRibbon:MenuTool.MenuItemDropDownArrowStyleKey}}"
									x:Name="Menu_Arrow" Margin="3,0,0,0" DockPanel.Dock="Right"
									igRibbon:XamRibbon.KeyTipPlacementType="DropDownButton" Grid.Column="1"
									HorizontalAlignment="Center" VerticalAlignment="Center" Width="Auto" Height="Auto" />

                    <!-- popup -->
                    <Popup Name="PART_Popup"
								AllowsTransparency="true"
								Placement="Right"
								VerticalOffset="-3"
								Focusable="false"
								IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                        <AdornerDecorator>
                            <luna:SystemDropShadowChrome Name="Shdw" Color="Transparent">

                                <Grid HorizontalAlignment="Stretch" x:Name="SubMenuPopUp" VerticalAlignment="Stretch" Width="Auto" Height="Auto">
                                    <Rectangle Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderDarkFillKey}}" RadiusX="0" RadiusY="0" HorizontalAlignment="Stretch" Margin="0,0,0,0" x:Name="BorderDark" VerticalAlignment="Stretch" Width="Auto" Height="Auto" SnapsToDevicePixels="True"/>
                                    <Rectangle Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderLightFillKey}}" RadiusX="0" RadiusY="0" HorizontalAlignment="Stretch" Margin="1,1,1,1" x:Name="BorderLight" VerticalAlignment="Stretch" Width="Auto" Height="Auto" SnapsToDevicePixels="True"/>
                                    <Border SnapsToDevicePixels="True" Margin="2,2,2,2" x:Name="Center" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpCenterFillKey}}" CornerRadius="0">

                                        <igWindows:PopupResizerDecorator
												Grid.ColumnSpan="2"
										    ResizeMode="{TemplateBinding ResizeMode}"
										    ResizerBarStyle="{DynamicResource {x:Static igRibbon:XamRibbon.PopupResizerBarStyleKey}}">
                                            <ScrollViewer x:Name="Popup_ScrollViewer"
										        VerticalScrollBarVisibility="{TemplateBinding PopupVerticalScrollBarVisibility}"
										        HorizontalScrollBarVisibility="Disabled"
															Style ="{StaticResource MenuScrollViewer}">
                                                <ItemsPresenter  Grid.IsSharedSizeScope="true" Margin="0"  KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </ScrollViewer>
                                        </igWindows:PopupResizerDecorator>
                                        <!--</Grid>-->
                                    </Border>
                                </Grid>
                            </luna:SystemDropShadowChrome>
                        </AdornerDecorator>
                    </Popup>
                </Grid>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger Property="IsHighlighted" Value="True">
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsSubmenuOpen" Value="False">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"/>
            </Trigger>
            <Trigger Property="Location" Value="ApplicationMenu">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False" SourceName="PART_SegmentedButton">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </Trigger>
            <Trigger Property="UseLargeImage" Value="True">
                <Setter TargetName="Content" Property="Margin" Value="4,0,0,1"/>
                <Setter TargetName="Icon" Property="Width" Value="32" />
                <Setter TargetName="Icon" Property="Height" Value="32" />
                <Setter TargetName="arrowColumn" Property="Width" Value="25" />
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed"/>
            </Trigger>

            <!-- Initialize the elements when showing a small image -->
            <Trigger Property="UseLargeImage" Value="False">
                <Setter TargetName="Content" Property="Margin" Value="7,0,5,1"/>
                <Setter TargetName="HottrackRightPortion" Property="Width" Value="22"/>
                <Setter TargetName="Menu_Arrow" Property="Margin" Value="4,0,0,0"/>
                <Setter TargetName="Icon" Property="Margin" Value="2,0,0,0"/>
            </Trigger>

            <Trigger Property="igRibbon:XamRibbon.Location" Value="ApplicationMenu">
                <Setter TargetName="OrangeCheckBox" Property="Margin" Value="4"/>
                <Setter TargetName="Icon" Property="Margin" Value="1"/>
            </Trigger>

            <Trigger Property="igRibbon:XamRibbon.Location" Value="ApplicationMenuRecentItems">
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed"/>
            </Trigger>

            <Trigger Property="UseLargeImage" Value="False">
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderLightFillKey}}"/>
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Divider" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}"/>
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterSecondaryFillKey}}"/>
            </Trigger>

            <Trigger Property="IsSegmented" Value="True">
                <Setter Property="Command" TargetName="PART_SegmentedButton" Value="{x:Static igRibbon:MenuTool.SegmentedButtonCommand}" />
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Visibility" Value="Visible"/>
            </Trigger>

            <Trigger SourceName="PART_SegmentedButton" Property="IsEnabled" Value="False">
                <Setter Property="Foreground" TargetName="PART_SegmentedButton" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </Trigger>

            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsEnabled" Value="True"/>
                    <Condition Property="IsSegmented" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_SecondaryButton" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="Visible"/>
                <Setter Property="Opacity" TargetName="border" Value="1"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="UseLargeImage" Value="True"/>
                    <Condition Property="IsSegmented" Value="False" />
                </MultiTrigger.Conditions>
                <Setter TargetName="MenuItem_Hover" Property="Visibility" Value="Visible"/>
                <Setter Property="Fill" TargetName="BorderDark1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderFillKey}}"/>
                <Setter Property="Background" TargetName="BorderLight_CenterFill1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectCenterFillKey}}"/>
                <Setter Property="BorderBrush" TargetName="BorderLight_CenterFill1" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuSideSelectBorderLightFillKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="UseLargeImage" Value="False"/>
                    <Condition Property="IsSegmented" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="MenuItem_Hover" Property="Visibility" Value="Visible"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSegmented" Value="True"/>
                    <Condition Property="UseLargeImage" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ApplicationMenu_SideSelect_SecondaryButton" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Margin" Value="0,4,0,4"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Fill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.IsSegmentedNonHottrackDividerFillKey}}"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Visibility" Value="Visible"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSegmented" Value="true"/>
                    <Condition Property="IsMouseOver" Value="True" SourceName="PART_SegmentedButton"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ApplicationMenu_SideSelect_CenterFill" Property="Visibility" Value="Visible"/>
            </MultiTrigger>

            <!-- ================= Trigger for enabled segmented button ================= -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="UseLargeImage" Value="False"/>
                    <Condition Property="IsSegmented" Value="True"/>
                    <Condition Property="IsEnabled" Value="True" SourceName="PART_SegmentedButton" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_Divider" Value="0,1,0,1"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_SecondaryButton" Value="Visible"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderLightFillKey}}"/>
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Divider" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackBorderDarkFillKey}}"/>
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}"/>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Value="1,2,2,2"/>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="2,2,0,2"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="Visible"/>

            </MultiTrigger>
            <!-- ================= END Trigger for enabled segmented button in MENU ================= -->

            <!-- ================= Trigger for disabled segmented button ================= -->
            <!-- For when in menu -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="true"/>
                    <Condition Property="IsSegmented" Value="True"/>
                    <Condition Property="UseLargeImage" Value="False"/>
                    <Condition Property="IsEnabled" Value="False" SourceName="PART_SegmentedButton" />
                </MultiTrigger.Conditions>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_Divider" Value="0,1,0,1"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_SecondaryButton" Value="Visible"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuDisabledHottrackBorderDarkFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuDisabledHottrackBorderLightFillKey}}"/>
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuDisabledHottrackCenterFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Divider" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuDisabledHottrackBorderDarkFillKey}}"/>
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.MenuHottrackCenterFillKey}}"/>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Value="1,2,2,2"/>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="2,2,0,2"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="Visible"/>
                <Setter Property="Grid.ColumnSpan" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="1"/>
                <Setter Property="Grid.Column" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="1"/>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="0,2,2,2"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
            </MultiTrigger>

            <!-- For when in ApplicationMenu -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="true"/>
                    <Condition Property="IsSegmented" Value="True"/>
                    <Condition Property="UseLargeImage" Value="True"/>
                    <Condition Property="IsEnabled" Value="False" SourceName="PART_SegmentedButton" />
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_SecondaryButton" Value="Visible"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuDisabledSideSelectBorderDarkFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuDisabledSideSelectBorderLightFillKey}}"/>
                <Setter Property="Background" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuDisabledSideSelectCenterFillKey}}"/>
                <Setter Property="Fill" TargetName="ApplicationMenu_SideSelect_Divider" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuDisabledSideSelectBorderDarkFillKey}}"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Value="Visible"/>
                <Setter Property="Visibility" TargetName="ApplicationMenu_SideSelect_CenterFill" Value="Visible"/>
                <Setter Property="Grid.ColumnSpan" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="1"/>
                <Setter Property="Grid.Column" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="1"/>
                <Setter Property="Margin" TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Value="0,2,2,2"/>
            </MultiTrigger>
            <!-- ================= End Trigger for disabled segmented ================= -->

            <!-- ========== IsChecked Triggers for Default, Menu, ApplicationMenu ==========  -->
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="OrangeCheckBox" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.IsCheckedBoxCenterFillKey}}" />
                <Setter TargetName="OrangeCheckBox" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.IsCheckedBoxBorderFillKey}}" />
            </Trigger>

            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Hidden"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}"/>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="UseLargeImage" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}"/>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="UseLargeImage" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="GlyphPanel32" Value="Visible"/>
            </MultiTrigger>

            <!-- ==========  End IsChecked Triggers ==========  -->

            <Trigger Property="igRibbon:MenuToolBase.HasMenuItemDescription" Value="False">
                <Setter TargetName="descriptionRow" Property="Height" Value="0"/>
            </Trigger>

            <Trigger Property="igRibbon:MenuToolBase.HasMenuItemDescription" Value="True">
                <Setter TargetName="Content" Property="TextBlock.FontWeight" Value="Bold"/>
                <Setter TargetName="Content" Property="Margin" Value="6,4,5,1"/>
                <Setter TargetName="Content" Property="MinWidth" Value="{Binding Path=MenuItemDescriptionMinWidth, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter TargetName="MenuItemDescription" Property="Margin" Value="6,0,6,4"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsSegmented" Value="True"/>
                    <Condition Property="IsSubmenuOpen" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ApplicationMenu_SideSelect_SecondaryButton" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_CenterFill" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Visibility" Value="Visible"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True"/>
                    <Condition Property="IsSegmented" Value="True"/>
                    <Condition Property="IsSubmenuOpen" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="ApplicationMenu_SideSelect_SecondaryButton" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Secondary_BorderDarkFill" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Secondary_BorderLightFill" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_CenterFillSecondary" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_SecondarySideHover" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ApplicationMenu_SideSelect_Divider" Property="Visibility" Value="Visible"/>
            </MultiTrigger>



        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- =================================================================== -->
    <!-- ToolMenuItem Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:ToolMenuItem}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="TextBlock.TextAlignment" Value="Left" />
        <Setter Property="Background" Value="#00FFFFFF"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}"/>
        <Setter Property="Control.Template" Value ="{DynamicResource {x:Static igRibbon:MenuToolBase.SubmenuItemTemplateKey}}"/>
        <Style.Triggers>
            <Trigger Property="MenuItem.Role">
                <Setter Property="FrameworkElement.Margin">
                    <Setter.Value>
                        <Thickness>0,1,0,1</Thickness>
                    </Setter.Value>
                </Setter>
                <Setter Property="Control.Padding">
                    <Setter.Value>
                        <Thickness>6,3,6,3</Thickness>
                    </Setter.Value>
                </Setter>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <DynamicResource ResourceKey="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly=MenuItem}" />
                    </Setter.Value>
                </Setter>
                <Trigger.Value>
                    <x:Static Member="MenuItemRole.TopLevelHeader" />
                </Trigger.Value>
            </Trigger>
            <Trigger Property="MenuItem.Role">
                <Setter Property="DockPanel.Dock">
                    <Setter.Value>
                        <x:Static Member="Dock.Top" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Control.Padding">
                    <Setter.Value>
                        <Thickness>0,2,0,2</Thickness>
                    </Setter.Value>
                </Setter>
                <Setter Property="Control.Template" Value ="{DynamicResource {x:Static igRibbon:MenuToolBase.SubmenuHeaderTemplateKey}}"/>
                <Trigger.Value>
                    <x:Static Member="MenuItemRole.SubmenuHeader" />
                </Trigger.Value>
            </Trigger>
            <Trigger Property="MenuItem.Role">
                <Setter Property="DockPanel.Dock">
                    <Setter.Value>
                        <x:Static Member="Dock.Top" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Control.Padding">
                    <Setter.Value>
                        <Thickness>0,2,0,2</Thickness>
                    </Setter.Value>
                </Setter>
                <Trigger.Value>
                    <x:Static Member="MenuItemRole.SubmenuItem" />
                </Trigger.Value>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- MenuToolPresenter Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:MenuToolPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:MenuToolPresenter}">
                    <igWindows:CardPanel x:Name="ContentArea">
                        <igRibbon:MenuButtonArea x:Name="PART_MenuButtonArea" />
                        <ContentControl x:Name="PART_GalleryToolPreviewSite" Visibility="{TemplateBinding PreviewGalleryVisibility}"/>
                        <Popup Name="PART_Popup"
						AllowsTransparency="true"
						Placement="Bottom"
						PlacementTarget="{Binding ElementName=ContentArea}"
						Focusable="false"
						IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                            <AdornerDecorator>
                                <luna:SystemDropShadowChrome Name="Shdw" Color="Transparent">
                                    <Border Name="SubMenuBorder" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderLightFillKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpBorderDarkFillKey}}" CornerRadius="0">
                                        <Grid Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.SubMenuHeaderPopUpCenterFillKey}}" Width="Auto" Height="Auto" Margin="1,1,1,1" >

                                            <igWindows:PopupResizerDecorator
												Grid.ColumnSpan="2" 
										    ResizeMode="{TemplateBinding ResizeMode}"
										    ResizerBarStyle="{DynamicResource {x:Static igRibbon:XamRibbon.PopupResizerBarStyleKey}}">
                                                <ScrollViewer x:Name="Popup_ScrollViewer"
										        VerticalScrollBarVisibility="{TemplateBinding PopupVerticalScrollBarVisibility}"
										        HorizontalScrollBarVisibility="Disabled"
															Style ="{StaticResource MenuScrollViewer}">
                                                    <ItemsPresenter Grid.IsSharedSizeScope="True"  Margin="0"  KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                </ScrollViewer>
                                            </igWindows:PopupResizerDecorator>
                                        </Grid>
                                    </Border>
                                </luna:SystemDropShadowChrome>
                            </AdornerDecorator>
                        </Popup>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSubmenuOpen" Value="False">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"/>
                        </Trigger>
                        <Trigger Property="PreviewGalleryVisibility" Value="Visible">
                            <Setter TargetName="PART_MenuButtonArea" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_Popup" Property="Placement" Value="RelativePoint"/>
                            <Setter TargetName="PART_Popup" Property="MinWidth" Value="{Binding Path=ActualWidth, ElementName=PART_GalleryToolPreviewSite}"/>
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                            <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                            <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Button_QATOverflow" BasedOn="{x:Null}" TargetType="{x:Type igRibbon:DropDownToggle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:DropDownToggle}">
                    <igWindows:CardPanel Background="Transparent">
                        <Grid x:Name="QATOverflow" Background="#00000000" Margin="0,2,0,0">
                            <Border SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolHoverBorderDarkFillKey}}" BorderThickness="0,0,0,0" CornerRadius="0" Visibility="Collapsed" x:Name="BorderDark"/>
                            <Border SnapsToDevicePixels="True" Margin="1,1,1,1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolHoverCenterFillKey}}" CornerRadius="0" Visibility="Collapsed" x:Name="BorderLight_Center" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolHoverBorderLightFillKey}}" BorderThickness="1,1,1,1"/>
                            <Grid
								Height="5"
								Width="3"
								Background="{x:Null}" HorizontalAlignment="Left" Margin="3,0,0,0" VerticalAlignment="Center">
                                <Path
									Margin="0,0,0,0"
									HorizontalAlignment="Left"
									VerticalAlignment="Top"
									Height="5"
									Width="3"
									Stretch="Fill"
									Opacity="1"
									Data="M 0,0 C0,0 0,5 0,5 0,5 1,5 1,5 1,5 1,4 1,4 1,4 2,4 2,4 2,4 2,3 2,3 2,3 3,3 3,3 3,3 3,2 3,2 3,2 2,2 2,2 2,2 2,1 2,1 2,1 1,1 1,1 1,1 1,0 1,0 1,0 0,0 0,0 z"
									Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphNormalBackgroundFillKey}}" SnapsToDevicePixels="True" x:Name="LeftGlyphBackground" />
                                <Path
									Margin="0,1,0,0"
									HorizontalAlignment="Left"
									VerticalAlignment="Top"
									Height="3"
									Width="2"
									Stretch="Fill"
									Opacity="1"
									Data="M 0,1 C0,1 0,4 0,4 0,4 1,4 1,4 1,4 1,3 1,3 1,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z"
									Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphNormalForegroundFillKey}}" SnapsToDevicePixels="True" x:Name="LeftGlyphForeground" />
                            </Grid>

                            <Grid
								Height="5"
								Width="3"
								Background="{x:Null}" d:LayoutOverrides="Width, Height" HorizontalAlignment="Right" Margin="0,0,3,0" VerticalAlignment="Center">
                                <Path
									Margin="0,0,0,0"
									HorizontalAlignment="Left"
									VerticalAlignment="Top"
									Height="5"
									Width="3"
									Stretch="Fill"
									Opacity="1"
									Data="M 0,0 C0,0 0,5 0,5 0,5 1,5 1,5 1,5 1,4 1,4 1,4 2,4 2,4 2,4 2,3 2,3 2,3 3,3 3,3 3,3 3,2 3,2 3,2 2,2 2,2 2,2 2,1 2,1 2,1 1,1 1,1 1,1 1,0 1,0 1,0 0,0 0,0 z"
									Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphNormalBackgroundFillKey}}" SnapsToDevicePixels="True" x:Name="RightGlyphBackground" />
                                <Path
									Margin="0,1,0,0"
									HorizontalAlignment="Left"
									VerticalAlignment="Top"
									Height="3"
									Width="2"
									Stretch="Fill"
									Opacity="1"
									Data="M 0,1 C0,1 0,4 0,4 0,4 1,4 1,4 1,4 1,3 1,3 1,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z"
									Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphNormalForegroundFillKey}}" SnapsToDevicePixels="True" x:Name="RightGlyphForeground" />
                            </Grid>

                        </Grid>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="BorderLight_Center" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.IsActive" Value="True">
                            <Setter Property="Visibility" TargetName="BorderLight_Center" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsDroppedDown" Value="True">
                            <Setter Property="Visibility" TargetName="BorderLight_Center" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible"/>
                            <Setter Property="Margin" TargetName="BorderLight_Center" Value="1,1,1,0"/>
                            <Setter Property="Margin" TargetName="BorderDark" Value="0,0,0,1"/>
                            <Setter Property="Background" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolPressedBorderDarkFillKey}}"/>
                            <Setter Property="Background" TargetName="BorderLight_Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolPressedCenterFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="BorderLight_Center" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ButtonToolPressedInnerBorderFillKey}}"/>
                            <Setter Property="Fill" TargetName="LeftGlyphForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphHoverForegroundFillKey}}"/>
                            <Setter Property="Fill" TargetName="RightGlyphForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphHoverForegroundFillKey}}"/>
                            <Setter Property="Fill" TargetName="LeftGlyphBackground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphHoverBackgroundFillKey}}"/>
                            <Setter Property="Fill" TargetName="RightGlyphBackground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.QATOverflowGlyphHoverBackgroundFillKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- GalleryItemPresenter Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:GalleryItemPresenter}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:GalleryItemPresenter}">
                    <Grid x:Name="borderEntireItem" Background="#00ffffff">
                        <Rectangle
						Opacity="1"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Stretch"
						Margin="0,0,0,0"
						RadiusX="0"
						RadiusY="0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterHoverBorderDarkFillKey}}" SnapsToDevicePixels="True" Visibility="Hidden" x:Name="BorderDark"/>
                        <Rectangle
						Opacity="1"
						HorizontalAlignment="Stretch"
						VerticalAlignment="Stretch"
						Margin="1,1,1,1"
						RadiusX="0"
						RadiusY="0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterHoverBorderLightFillKey}}" SnapsToDevicePixels="True" Visibility="Hidden" x:Name="BorderLight"/>
                        <Rectangle SnapsToDevicePixels="True" Visibility="Hidden" Margin="1,1,1,1" x:Name="BottomOverlay" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterHoverBottomOverlayGradientKey}}"/>
                        <Rectangle SnapsToDevicePixels="True" Visibility="Hidden" Margin="2,2,2,2" x:Name="CenterBorder" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterHoverCenterFillKey}}" RadiusX="0" RadiusY="0"/>
                        <Border SnapsToDevicePixels="True" Visibility="Hidden" Margin="3,3,3,3" x:Name="Center" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterSelectedCenterFillKey}}" CornerRadius="0"/>
                        <Grid Margin="2,2,2,2" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Border x:Name="borderImage" Grid.Row="0" Grid.Column="0" BorderBrush="Transparent" BorderThickness="2" CornerRadius="0">
                                <igWindows:AutoDisabledImage x:Name="image" Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Item.Image}" 
                                    igWindows:Utilities.SnapElementToDevicePixels="True" />
                            </Border>
                            <TextBlock x:Name="text" Grid.Row="1" Grid.Column="0"
							Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" 
							Visibility="{TemplateBinding TextVisibility}"
							TextAlignment="{TemplateBinding HorizontalTextAlignmentResolved}"
							VerticalAlignment="{TemplateBinding VerticalTextAlignmentResolved}"
							Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Item.Text}"/>
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!-- Text visible and above Image-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TextPlacementResolved" Value="AboveImage"/>
                                <Condition Property="TextVisibility" Value="Visible"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="borderImage" Property="Grid.Row" Value="1" />
                            <Setter TargetName="text" Property="Grid.Row" Value="0" />
                        </MultiTrigger>

                        <!-- Text visible and left of Image-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TextPlacementResolved" Value="LeftOfImage"/>
                                <Condition Property="TextVisibility" Value="Visible"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="borderImage" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="text" Property="Grid.Row" Value="0" />
                        </MultiTrigger>

                        <!-- Text visible and right of Image-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="TextPlacementResolved" Value="RightOfImage"/>
                                <Condition Property="TextVisibility" Value="Visible"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="text" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="text" Property="Grid.Row" Value="0" />
                        </MultiTrigger>
                        <!-- Set highlight on the appropriate part of the Item when selected (i.e., IsSelected = true).  Check SelectionDisplayModeResolved 
to determine what part of the item to highlight -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="SelectionDisplayModeResolved" Value="HighlightImageOnly"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="borderImage" Property="BorderBrush">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0,0" StartPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0" Color="Gold" />
                                            <GradientStop Offset="1" Color="Orange" />
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>

                        <!-- Selected State-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="SelectionDisplayModeResolved" Value="HighlightEntireItem"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible"/>
                            <Setter Property="Fill" TargetName="BorderDark" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterSelectedBorderDarkFillKey}}"/>
                            <Setter Property="Fill" TargetName="BorderLight" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterSelectedBorderLightFillKey}}"/>
                            <Setter Property="Visibility" TargetName="BorderLight" Value="Visible"/>
                            <Setter Property="Margin" TargetName="BorderLight" Value="1,1,1,0"/>
                            <Setter Property="Margin" TargetName="BorderDark" Value="0,0,0,1"/>
                            <Setter Property="Fill" TargetName="BottomOverlay" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterSelectedBottomOverlayGradientKey}}"/>
                            <Setter Property="Visibility" TargetName="BottomOverlay" Value="Visible"/>
                            <Setter Property="Margin" TargetName="BottomOverlay" Value="1,1,1,0"/>
                            <Setter Property="Visibility" TargetName="CenterBorder" Value="Visible"/>
                            <Setter Property="Fill" TargetName="CenterBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GalleryItemPresenterSelectedBorderLightFillInnerKey}}"/>
                            <Setter Property="Visibility" TargetName="Center" Value="Visible"/>
                            <Setter Property="Margin" TargetName="Center" Value="3,3,3,2"/>
                        </MultiTrigger>

                        <!-- Mouseover state-->
                        <!-- Set highlight when active (i.e., IsSelected = false and IsMouseOver = true) -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsHighlighted" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="BorderDark" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="BorderLight" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="BottomOverlay" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="CenterBorder" Value="Visible"/>
                            <Setter TargetName="text" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsInPreviewArea" Value="True">
                <Setter Property="Focusable" Value="False" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>