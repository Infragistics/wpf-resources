<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:d="http://schemas.microsoft.com/expression/interactivedesigner/2006"
	mc:Ignorable="d"
	  xmlns:igWindows="http://infragistics.com/Windows"
	  xmlns:igEditors="http://infragistics.com/Editors"	
	  xmlns:igThemes="http://infragistics.com/Themes"	
	  xmlns:compModel="clr-namespace:System.ComponentModel;assembly=PresentationFramework"
	  xmlns:igRibbon="http://infragistics.com/Ribbon"
	  xmlns:themes="http://infragistics.com/Themes"
  >
	<ResourceDictionary.MergedDictionaries>
        <!-- AS 8/21/08 BR35771 -->
        <ResourceDictionary Source="RibbonGeneric.xaml" />
        <!--<ResourceDictionary Source="RibbonOffice2k7Brushes_Silver.xaml"/>-->
        <ResourceDictionary Source="RibbonOffice2k7Brushes_Silver.xaml" />
    </ResourceDictionary.MergedDictionaries>

	<!-- Converters-->
	<BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
	<igRibbon:ContextualTabBaseColorToHoverBrushConverter x:Key="contextualTabBaseColorToHoverBrushConverter" />
	<igWindows:StringWithoutMnemonicsConverter x:Key="stringWithoutMnemonicsConverter" />

    <!-- =================================================================== -->
	<!-- Ribbon's XamTabControl Style -->
	<!-- =================================================================== -->
	<Style x:Key="{x:Static igRibbon:XamRibbon.RibbonTabControlStyleKey}" TargetType="{x:Type igWindows:XamTabControl}">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Continue" />
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igWindows:XamTabControl}">
					<Grid Margin="0" ClipToBounds="True" SnapsToDevicePixels="True" KeyboardNavigation.TabNavigation="Local">
						<Grid.ColumnDefinitions>
							<ColumnDefinition x:Name="gridCol0" />
							<ColumnDefinition Width="0" x:Name="gridCol1" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" x:Name="gridRow0" />
							<RowDefinition Height="*" x:Name="gridRow1" />
						</Grid.RowDefinitions>
						<Border
							SnapsToDevicePixels="True"
							BorderBrush="{x:Null}"
							Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelBackgroundKey}}"
							x:Name="ContentPanel"
							KeyboardNavigation.TabIndex="2"
							KeyboardNavigation.TabNavigation="Local"
							KeyboardNavigation.DirectionalNavigation="Continue"
							Grid.Row="1"
							Visibility="Visible" Margin="0,-1,0,0"
>
							<Grid Margin="0,1,0,1">
								<Border
									x:Name="innerContentBorder"
									SnapsToDevicePixels="True"
									Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerFillKey}}"
									BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}"
									BorderThickness="1,1,1,1"
									CornerRadius="3"
									Margin="1,1,1,1"
									Padding="2,0,2,0">
									<Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Height="Auto" Width="Auto" Margin="0,-1,0,-2">
										<Border
											x:Name="ContextualFill"
											CornerRadius="5,5,5,5"
											Visibility="Visible"
											SnapsToDevicePixels="True">
											<!--JJD 12/11/07 moved setting to Trigger if IsInContextualTabGroup == true -->
											<!--<Border.Background>
												<SolidColorBrush Color="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolved, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
											</Border.Background>-->
											<Border.OpacityMask>
												<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
													<GradientStop Color="#1E000000" Offset="0"/>
													<GradientStop Color="#00FFFFFF" Offset="0.51"/>
												</LinearGradientBrush>
											</Border.OpacityMask>
										</Border>
										<ContentPresenter ContentSource="SelectedContent"
											Margin="{TemplateBinding Padding}"
											Height="{TemplateBinding TabItemContentHeight}"
											x:Name="PART_SelectedContentHost"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											ContentTemplate="{TemplateBinding SelectedContentTemplate}"
											Content="{TemplateBinding SelectedContent}" />
									</Grid>
								</Border>

							</Grid>
						</Border>
						<DockPanel x:Name="PART_HeaderArea" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelBackgroundKey}}" SnapsToDevicePixels="True">
							<ContentPresenter x:Name="PreTabItemContent"
								DockPanel.Dock="Left"
								KeyboardNavigation.DirectionalNavigation="Continue"
                                KeyboardNavigation.TabIndex="0" 
								Content="{TemplateBinding PreTabItemContent}"
								ContentTemplate="{TemplateBinding PreTabItemContentTemplate}"
								ContentTemplateSelector="{TemplateBinding PreTabItemContentTemplateSelector}" />
							<ContentPresenter x:Name="PostTabItemContent"
								DockPanel.Dock="Right"
								KeyboardNavigation.DirectionalNavigation="Continue"
                                KeyboardNavigation.TabIndex="2" 
								Content="{TemplateBinding PostTabItemContent}"
								ContentTemplate="{TemplateBinding PostTabItemContentTemplate}"
								ContentTemplateSelector="{TemplateBinding PostTabItemContentTemplateSelector}" />
							<igWindows:XamPager x:Name="PART_TabItemScrollViewer" Focusable="False"
                                CanContentScroll="True"
								KeyboardNavigation.TabIndex="1"
								KeyboardNavigation.TabNavigation="Local"
								KeyboardNavigation.DirectionalNavigation="Continue"
								ScrollLeftButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollLeftButtonStyleKey}}"
								ScrollRightButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollRightButtonStyleKey}}"
								ScrollViewer.VerticalScrollBarVisibility="{TemplateBinding TabItemVerticalScrollBarVisibility}"
								ScrollViewer.HorizontalScrollBarVisibility="{TemplateBinding TabItemHorizontalScrollBarVisibility}">
								<ItemsPresenter x:Name="PART_TabHeaderPanel"
									Margin="2,1,2,-1"
									KeyboardNavigation.TabNavigation="Once"/>
							</igWindows:XamPager>
						</DockPanel>
                        <!-- AS 9/23/09 TFS2236 - Added HandleMouseDownOnClose -->
						<Popup x:Name="PART_Popup"
						  AllowsTransparency="True"
                            igWindows:PopupHelper.HandleMouseDownOnClose="True"
							StaysOpen="False"
							Width="{TemplateBinding PreferredDropDownExtent}"
							IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
							PlacementTarget="{Binding ElementName=PART_HeaderArea}"
							CustomPopupPlacementCallback="{TemplateBinding PreferredDropDownPlacementCallback}" 
						  Placement="Custom"
							SnapsToDevicePixels="True">
							<AdornerDecorator>
								<Border
									SnapsToDevicePixels="True"
									BorderThickness="0,0,0,0"
									KeyboardNavigation.TabIndex="2"
									KeyboardNavigation.TabNavigation="Local"
									KeyboardNavigation.DirectionalNavigation="Cycle"
									Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelBackgroundKey}}">
									<Border
										SnapsToDevicePixels="True"
										BorderBrush="{TemplateBinding Border.BorderBrush}"
										BorderThickness="{TemplateBinding Border.BorderThickness}"
										Margin="1,0,1,4">
										<Border
											SnapsToDevicePixels="True"
											Background="{TemplateBinding Panel.Background}"
											BorderThickness="1,1,1,1"
											BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}"
											CornerRadius="3,3,3,3"
                                            Padding="2,0,2,0">
											<ContentPresenter
												ContentSource="SelectedContent"
												Margin="{TemplateBinding Padding}"
												Height="{TemplateBinding TabItemContentHeight}"
												x:Name="PART_SelectedContentHostMinimized"
												HorizontalAlignment="{Binding Path=HorizontalAlignment, ElementName=PART_SelectedContentHost}"
												VerticalAlignment="{Binding Path=VerticalAlignment, ElementName=PART_SelectedContentHost}"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
												ContentTemplate="{TemplateBinding SelectedContentTemplate}"
												Content="{x:Null}"/>
										</Border>
									</Border>
								</Border>
							</AdornerDecorator>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsDropDownOpen" Value="False">
							<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"/>
						</Trigger>
						<Trigger Property="UIElement.IsEnabled" Value="False">
							<Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GrayTextBrushKey}}"/>
						</Trigger>
						<Trigger Property="IsMinimized" Value="True">
							<Setter Property="Visibility" TargetName="ContentPanel" Value="Collapsed" />
							<!-- AS 7/20/11 TFS80142 -->
							<Setter Property="Grid.RowSpan" TargetName="PART_HeaderArea" Value="2" />
						</Trigger>
						<Trigger Property="igRibbon:XamRibbon.IsSelectedItemInContextualTabGroup" Value="True">
							<Setter Property="Background" TargetName="innerContentBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerInContextualBaseFillKey}}"/>
							<Setter Property="BorderBrush" TargetName="innerContentBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerInContextualBorderFillKey}}"/>
							<Setter Property="Background" TargetName="ContextualFill"
                  Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
							<Setter Property="Visibility" TargetName="ContextualFill" Value="Visible"/>
						</Trigger>
                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).IsUsingApplicationMenu2010, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="innerContentBorder" Property="CornerRadius" Value="0 3 3 3" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="PreTabItemContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<Rectangle Width="{x:Static igRibbon:XamRibbon.ApplicationMenuButtonWidth}" Height="18"/>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerFillKey}}"/>
		<Setter Property="MaximumSizeToFitAdjustment" Value="18" />
		<Setter Property="MinimumTabExtent" Value="28" />
        
        <Style.Triggers>
            <!-- NA 13.1 Backstage -->
            <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).IsUsingApplicationMenu2010, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="PreTabItemContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <Rectangle Width="56" Height="19"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>


    </Style>

	<!-- =================================================================== -->
	<!-- Styles for buttons in MenuButtonArea -->
	<!-- =================================================================== -->
	<!-- AS 11/8/07 BR27990  Moved up and adjusted the template to have a root level panel that could be used to provide the background -->
	<Style TargetType="{x:Type ContentControl}" x:Key="PlainContentControlStyle">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Margin" Value="0" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContentControl}">
					<igWindows:CardPanel Background="{TemplateBinding Background}">
						<ContentPresenter Margin="{TemplateBinding Padding}"
								igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" />
					</igWindows:CardPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =================================================================== -->
	<!-- RibbonGroup Style -->
	<!-- =================================================================== -->
	<Style TargetType="{x:Type igRibbon:RibbonGroup}">
		<!--<Setter Property="Background" Value="{StaticResource RibbonGroupBackground}"/>
<Setter Property="BorderBrush" Value="{StaticResource RibbonGroupBorder}"/>
<Setter Property="BorderThickness" Value="1"/>
<Setter Property="Margin" Value="0,0,4,0"/>-->
		<Setter Property="SmallImage">
			<Setter.Value>
				<DrawingImage>
					<DrawingImage.Drawing>
						<DrawingGroup>
							<GeometryDrawing Brush="#00FFFFFF">
								<GeometryDrawing.Geometry>
									<RectangleGeometry Rect="0,0,11,11"/>
								</GeometryDrawing.Geometry>
							</GeometryDrawing>
							<DrawingGroup Opacity="0.67058823529411771">
								<GeometryDrawing Brush="#FFFFFFFF" Geometry="M1,1C1,1 10,1 10,1 10,1 10,10 10,10 10,10 1,10 1,10 1,10 1,1 1,1z M0,0C0,0 0,11 0,11 0,11 11,11 11,11 11,11 11,0 11,0 11,0 0,0 0,0z"/>
							</DrawingGroup>
							<DrawingGroup>
								<DrawingGroup.Transform>
									<MatrixTransform Matrix="1,0,0,1,3,3"/>
								</DrawingGroup.Transform>
								<GeometryDrawing Brush="#FFFFFFFF" Geometry="M5,0 C5,0 4.2857132,0 4.2857132,0 4.2857132,0 0,5 0,5 0,5 0.7142868,5 0.7142868,5 0.7142868,5 5,0 5,0 z"/>
							</DrawingGroup>
						</DrawingGroup>
					</DrawingImage.Drawing>
				</DrawingImage>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igRibbon:RibbonGroup}">
					<ControlTemplate.Resources>
						<!-- Fade-In Animations -->
						<Storyboard x:Key="RibbonGroup_FadeIn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Center" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BorderHover" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="RibbonGroup_IsInContextual_FadeIn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IsInContextualCenter" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BorderHover" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="PART_Header_FadeIn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Header_Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<!-- Fade-Out Animations -->
						<Storyboard x:Key="RibbonGroup_FadeOut">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Center" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BorderHover" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="RibbonGroup_IsInContextual_FadeOut">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="IsInContextualCenter" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="BorderHover" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="PART_Header_FadeOut">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Header_Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
                    <Grid><AdornerDecorator>
					<igWindows:CardPanel>
						<ContentControl x:Name="PART_RibbonGroupSite" Style="{StaticResource PlainContentControlStyle}" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" >
							<igWindows:CardPanel x:Name="groupPanel" Background="{TemplateBinding Background}">
								<Grid Opacity="0" x:Name="Center">
									<Border HorizontalAlignment="Stretch" Margin="1,1,2,2" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverCenterFillKey}}" CornerRadius="2,2,2,2"/>
								</Grid>
								<Grid Opacity="0" x:Name="IsInContextualCenter">
									<Border HorizontalAlignment="Stretch" Margin="1,1,2,2" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupIsInContextualHoverCenterFillKey}}" CornerRadius="2,2,2,2"/>
								</Grid>
								<Border x:Name="borderLight" HorizontalAlignment="Stretch" Margin="1,1,0,0" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupNormalBorderLightFillKey}}" BorderThickness="1" CornerRadius="3" SnapsToDevicePixels="True">
									<DockPanel LastChildFill="True" KeyboardNavigation.TabNavigation="Local">
										<Grid Width="Auto" Height="Auto" DockPanel.Dock="Bottom" KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">
											<Border x:Name="Header_Background"  Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupNormalBottomGradientFillKey}}" Margin="-1,0,0,0" HorizontalAlignment="Stretch" CornerRadius="0,0,2,2" SnapsToDevicePixels="True" />
											<Border x:Name="Header_Hover"  Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverBottomGradientFillKey}}" Margin="-1,0,0,0" HorizontalAlignment="Stretch" CornerRadius="0,0,2,2" SnapsToDevicePixels="True" Opacity="0" />
											<DockPanel LastChildFill="True" d:IsHidden="True">
												<ContentControl x:Name="DialogBoxLauncher" Height="15" DockPanel.Dock="Right" Content="{TemplateBinding DialogBoxLauncherTool}" Visibility="Hidden" Focusable="False"/>
												<TextBlock x:Name="PART_Caption"
													Text="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}"
													Grid.Row="1"
													Margin="5,0,5,2"
													VerticalAlignment="Bottom"
													HorizontalAlignment="Stretch"
													TextTrimming="CharacterEllipsis"
                                                    igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True"
                                                    igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}"
													TextAlignment="Center" Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCaptionTextFillKey}}"/>
											</DockPanel>
										</Grid>
										<ItemsPresenter x:Name="PART_Items" Margin="2,0,4,1" HorizontalAlignment="Center"
													KeyboardNavigation.TabIndex="0"
													KeyboardNavigation.TabNavigation="Local"
													SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
									</DockPanel>
								</Border>
								<Border x:Name="borderDarkNormal" Margin="0,0,1,1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupNormalBorderDarkFillKey}}" BorderThickness="1" CornerRadius="3" SnapsToDevicePixels="True" />
								<Grid x:Name="BorderHover" Opacity="0" SnapsToDevicePixels="True" >
									<Border x:Name="borderDarkHover" Margin="0,0,1,1" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverBorderFillKey}}" BorderThickness="1" CornerRadius="3" SnapsToDevicePixels="True" />
								</Grid>
							</igWindows:CardPanel>
						</ContentControl>
						<igRibbon:DropDownToggle x:Name="PART_RibbonGroupButton"
										   igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}"
										   IsDroppedDown="{Binding Path=IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
										   Style="{DynamicResource {x:Static igRibbon:RibbonGroup.CollapsedGroupButtonStyleKey}}"
										   Visibility="Collapsed" />
                        <!-- AS 9/23/09 TFS2236 - Added HandleMouseDownOnClose -->
						<Popup x:Name="PART_Popup"
                                igWindows:PopupHelper.HandleMouseDownOnClose="True"
								 AllowsTransparency="True"
							   StaysOpen="False"
							   PlacementTarget="{Binding ElementName=PART_RibbonGroupButton}"
								 Placement="Bottom"
							   IsOpen="{Binding Path=IsOpen, RelativeSource={RelativeSource TemplatedParent}}">
							<AdornerDecorator KeyboardNavigation.DirectionalNavigation="Cycle">
								<Border
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerFillKey}}"
								CornerRadius="3,3,3,3">
									<ContentControl x:Name="PART_PopupRibbonGroupSite" Style="{StaticResource PlainContentControlStyle}" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" />
								</Border>
							</AdornerDecorator>
						</Popup>
					</igWindows:CardPanel>
                    </AdornerDecorator></Grid>
					<ControlTemplate.Triggers>
						<!-- AS 11/30/07 BR28788 -->
						<Trigger Property="IsOpen" Value="False">
							<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"/>
						</Trigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<!-- JM BR28878 12-04-07 - Do not execute the trigger actions if we are at designtime -->
								<Condition Property="compModel:DesignerProperties.IsInDesignMode" Value="False"/>
								<Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="True"/>
                                <!-- AS BR33990 6/18/08 -->
                                <!--<Condition Property="IsMouseOver" SourceName="groupPanel" Value="True"/>-->
                                <!-- AS BR28885 12/5/07 - Added sourcename to only prevent highlight when something within the group has capture -->
                                <!--<Condition Property="IsMouseCaptureWithin" SourceName="groupPanel" Value="False"/>-->
                                <Condition Property="HighlightContent" Value="True"/>
                            </MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard x:Name="RibbonGroup_IsInContextual_FadeIn_BeginStoryboard" Storyboard="{StaticResource RibbonGroup_IsInContextual_FadeIn}"/>
								<BeginStoryboard x:Name="PART_Header_IsInContextual_FadeIn_BeginStoryboard" Storyboard="{StaticResource PART_Header_FadeIn}"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<StopStoryboard BeginStoryboardName="RibbonGroup_IsInContextual_FadeIn_BeginStoryboard"/>
								<StopStoryboard BeginStoryboardName="PART_Header_IsInContextual_FadeIn_BeginStoryboard"/>
								<BeginStoryboard x:Name="RibbonGroup_IsInContextual_FadeOut_BeginStoryboard" Storyboard="{StaticResource RibbonGroup_IsInContextual_FadeOut}"/>
								<BeginStoryboard x:Name="PART_Header_IsInContextual_FadeOut_BeginStoryboard" Storyboard="{StaticResource PART_Header_FadeOut}"/>
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<!-- JM BR28878 12-04-07 - Do not execute the trigger actions if we are at designtime -->
								<Condition Property="compModel:DesignerProperties.IsInDesignMode" Value="False"/>
								<Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="False"/>
                                <!-- AS BR33990 6/18/08 -->
                                <!--<Condition Property="IsMouseOver" SourceName="groupPanel" Value="True"/>-->
                                <!-- AS BR28885 12/5/07 - Added sourcename to only prevent highlight when something within the group has capture -->
                                <!--<Condition Property="IsMouseCaptureWithin" SourceName="groupPanel" Value="False"/>-->
                                <Condition Property="HighlightContent" Value="True"/>
                            </MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard x:Name="RibbonGroup_FadeIn_BeginStoryboard" Storyboard="{StaticResource RibbonGroup_FadeIn}"/>
								<BeginStoryboard x:Name="PART_Header_FadeIn_BeginStoryboard" Storyboard="{StaticResource PART_Header_FadeIn}"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<StopStoryboard BeginStoryboardName="RibbonGroup_FadeIn_BeginStoryboard"/>
								<StopStoryboard BeginStoryboardName="PART_Header_FadeIn_BeginStoryboard"/>
								<BeginStoryboard x:Name="RibbonGroup_FadeOut_BeginStoryboard" Storyboard="{StaticResource RibbonGroup_FadeOut}"/>
								<BeginStoryboard x:Name="PART_Header_FadeOut_BeginStoryboard" Storyboard="{StaticResource PART_Header_FadeOut}"/>
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<Trigger Property="IsCollapsed" Value="True">
							<Setter Property="Visibility" TargetName="PART_RibbonGroupButton" Value="Visible"/>
							<Setter Property="igRibbon:RibbonGroup.Caption" TargetName="PART_RibbonGroupButton" Value="{Binding Path=Caption, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="igRibbon:RibbonGroup.SmallImage" TargetName="PART_RibbonGroupButton" Value="{Binding Path=SmallImage, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="Visibility" TargetName="PART_RibbonGroupSite" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="IsActive" Value="True">
							<Setter Property="Background" TargetName="PART_RibbonGroupButton" Value="Yellow"/>
						</Trigger>
						<Trigger Property="Location" Value="QuickAccessToolbar">
							<Setter Property="Style" TargetName="PART_RibbonGroupButton" Value="{DynamicResource {x:Static igRibbon:RibbonGroup.QuickAccessToolbarGroupButtonStyleKey}}"/>
							<Setter Property="Visibility" TargetName="PART_RibbonGroupButton" Value="Visible"/>
							<Setter Property="igRibbon:RibbonGroup.Caption" TargetName="PART_RibbonGroupButton" Value="{Binding Path=Caption, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="igRibbon:RibbonGroup.SmallImage" TargetName="PART_RibbonGroupButton" Value="{Binding Path=SmallImage, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="Visibility" TargetName="PART_RibbonGroupSite" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="HasDialogBoxLauncherTool" Value="True">
							<Setter Property="Visibility" TargetName="DialogBoxLauncher" Value="Visible"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Margin" Value="2,0,0,0"/>
		<Style.Triggers>
			<Trigger Property="Location" Value="QuickAccessToolbar">
				<Setter Property="Margin" Value="0" />
				<Setter Property="Focusable" Value="True" />
			</Trigger>
			<Trigger Property="IsCollapsed" Value="True">
				<Setter Property="Focusable" Value="True" />
			</Trigger>
		</Style.Triggers>
	</Style>

    <Style TargetType="igRibbon:ApplicationMenu2010FileTab" BasedOn="{StaticResource {x:Type igRibbon:ApplicationMenu2010FileTab}}">
        <Setter Property="Margin" Value="0,1,0,-1" />
    </Style>

    <!-- ********************************** ComboBoxItem Style **********************************-->
    <Style x:Key="ComboBoxItemStyle" TargetType="ComboBoxItem">
        <Setter Property="Padding" Value="5,3,5,3"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{StaticResource TransparentBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Grid Background="{TemplateBinding Background}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="hoverBorder">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible
                                                    </Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Unselected"/>
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="SelectedBorder">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible
                                                    </Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="SelectedUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="SelectedBorder">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible
                                                    </Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="FocusVisualElement">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="LayoutStates">
                                <VisualState x:Name="AfterLoaded"/>
                                <VisualState x:Name="BeforeLoaded"/>
                                <VisualState x:Name="BeforeUnloaded"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="hoverBorder" Background="{StaticResource ComboBoxItemHoverBackgroundBrush}" BorderBrush="{StaticResource ComboBoxItemHoverBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Visibility="Collapsed" CornerRadius="2">
                            <Rectangle Stroke="{StaticResource ComboBoxItemHoverHighlightBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1"/>
                        </Border>
                        <Border x:Name="SelectedBorder" Background="{StaticResource ComboBoxItemSelectedBackgroundBrush}" BorderBrush="{StaticResource ComboBoxItemSelectedBorderBrush}" CornerRadius="2" BorderThickness="{TemplateBinding BorderThickness}" Visibility="Collapsed" IsHitTestVisible="False"/>
                        <Rectangle x:Name="FocusVisualElement" Stroke="{StaticResource ComboBoxItemFocusedBorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" Visibility="Collapsed" RadiusX="2" RadiusY="2"/>
                        <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- *********************************  ComboEditorTool Style  ********************************* -->
    <Style TargetType="{x:Type igRibbon:ComboEditorTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2,2,2,2" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="DropDownButtonStyle" Value="{StaticResource ComboEditor_DropDownButtonStyle}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:ComboEditorTool}">
                    <!-- JM 09-05-18 TFS254718 - Change the StackPanel to a grid and bind the Width of the column containing the ComboBox to the EditAreaWidth property. -->
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="{TemplateBinding Property=EditAreaWidth}"/>
                        </Grid.ColumnDefinitions>
                        <igWindows:AutoDisabledImage Grid.Column="0" Width="16" Height="16" x:Name="Image" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Visibility="Collapsed" Source="{TemplateBinding igRibbon:TextEditorTool.ImageResolved}" />
                        <ContentPresenter x:Name="Caption" Grid.Column="1" Margin="0,0,5,0" Visibility="{Binding Path=(igRibbon:ButtonTool.HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Content="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}" />
                        <Border x:Name="MainBorder" Grid.Column="2" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" BorderThickness="1,1,1,1" Width="{TemplateBinding EditAreaWidth}" CornerRadius="0,0,0,0">
                            <Grid>
                                <ComboBox Name="PART_FocusSite" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{TemplateBinding ReadOnly}" Background="Transparent" BorderBrush="Transparent" BorderThickness="0,0,0,0" ContextMenu="{TemplateBinding ContextMenu}" IsDropDownOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{TemplateBinding ComboBoxStyle}" IsEditable="{TemplateBinding IsEditable}" SelectedValuePath="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsProvider.ValuePath}" DisplayMemberPath="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsProvider.DisplayMemberPath}" MaxDropDownHeight="{TemplateBinding MaxDropDownHeight}" igEditors:XamComboEditor.ComboEditor="{Binding RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}" InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}" InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}" ItemContainerStyle="{StaticResource ComboBoxItemStyle}"/>

                                <Grid Name="TextBlockGrid">
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <TextBlock x:Name="TextBlock" Grid.Column="0" Padding="{TemplateBinding Padding}" Margin="1,0,0,0" Text="{TemplateBinding DisplayText}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                    <ToggleButton x:Name="DropDownButton" Grid.Column="1" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" ClickMode="Press" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{TemplateBinding DropDownButtonStyle}" Visibility="Visible" IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}" />
                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Location, RelativeSource={RelativeSource Self}, Converter={x:Static igRibbon:ToolLocationToIsInMenuConverter.Instance}}" Value="True" />
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:ToolMenuItem}, 1}}" Value="True" />
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Caption" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </MultiDataTrigger>

                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
                            <Setter TargetName="TextBlock" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                        </Trigger>

                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter Property="Margin" Value="6,0,0,0" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledCenterFillKey}}" />
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledBorderFillKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
                        </Trigger>

                        <Trigger SourceName="MainBorder" Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="MainBorder">
                            <Setter TargetName="DropDownButton" Property="Tag" Value="MouseOverControlTrue" />
                        </Trigger>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                            <Setter TargetName="PART_FocusSite" Property="Visibility" Value="Visible" />
                            <Setter TargetName="TextBlock" Property="Visibility" Value="Collapsed" />
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                        <Trigger Property="Location" Value="Ribbon">
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter TargetName="MainBorder" Property="CornerRadius" Value="1" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.HideAccessKey" Value="False">
                            <Setter TargetName="Caption" Property="RecognizesAccessKey" Value="True" />
                            <Setter TargetName="Caption" Property="Content" Value="{Binding Path=Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="igRibbon:RibbonToolHelper.SizingMode" Value="ImageOnly">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
            </MultiTrigger>
            <Trigger Property="IsInEditMode" Value="True">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    
</ResourceDictionary>