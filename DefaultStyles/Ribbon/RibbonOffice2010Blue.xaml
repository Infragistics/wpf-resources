<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:compModel="clr-namespace:System.ComponentModel;assembly=PresentationFramework"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:igEditors="http://infragistics.com/Editors"
	xmlns:igRibbon="http://infragistics.com/Ribbon"
	xmlns:igThemes="http://infragistics.com/Themes"
	xmlns:igWindows="http://infragistics.com/Windows"
	xmlns:interop="clr-namespace:System.Windows.Interop;assembly=PresentationFramework"
	xmlns:luna="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Luna"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:sys="clr-namespace:System;assembly=mscorlib"
	xmlns:themes="http://infragistics.com/Themes"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <!--<ResourceDictionary Source="RibbonGeneric.xaml" />-->
        <ResourceDictionary Source="RibbonGeneric.xaml"/>
        <ResourceDictionary Source="RibbonScenic.xaml"/>
        <ResourceDictionary Source="RibbonOffice2010Brushes_Blue.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!-- AS 6/21/12 TFS114953 -->
    <sys:Boolean x:Key="{x:Static igRibbon:RibbonWindowContentHost.IsScenicThemeKey}">False</sys:Boolean>

    <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
    <igRibbon:ContextualTabBaseColorToHoverBrushConverter x:Key="contextualTabBaseColorToHoverBrushConverter" />
    <igWindows:StringWithoutMnemonicsConverter x:Key="stringWithoutMnemonicsConverter" />

    <DataTemplate DataType="{x:Type igRibbon:ContextualTabGroup}">
        <Border BorderThickness="1,0" BorderBrush="#AFFFFFFF" SnapsToDevicePixels="True" Margin="0 2 0 0" >
            <igWindows:CardPanel>
                <Border BorderBrush="{Binding Path=BaseBackColorResolvedBrush}" BorderThickness="1,4,1,0" SnapsToDevicePixels="True">
                    <Border SnapsToDevicePixels="True" x:Name="baseColorInCaption" Background="{Binding Path=BaseBackColorResolvedBrush}">
                        <Border.OpacityMask>
                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Offset="0" Color="#ddc90077"/>
                                        <GradientStop Offset="0.5" Color="#66c90077"/>
                                        <GradientStop Offset="1" Color="#33c90077"/>
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.OpacityMask>
                    </Border>
                </Border>
                <TextBlock
				x:Name="CaptionGroupLabel"
				Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualCaptionTextFillKey}}"
				Text="{Binding Path=Caption}"
				VerticalAlignment="Center"
				TextAlignment="Left"
				Margin="8,0,8,0"
				TextTrimming="CharacterEllipsis"
				igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True"
				igWindows:ClippedTextToolTipService.AncestorTypeForToolTip="{x:Type ContentControl}"
				igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}"/>
            </igWindows:CardPanel>
        </Border>
    </DataTemplate>

    <!-- ========== ScrollLeft Pager Button ========== -->
    <Style x:Key="{x:Static igRibbon:RibbonGroupCollection.PagerScrollLeftButtonStyleKey}" BasedOn="{StaticResource PagerScrollButtonBase}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Width="13" x:Name="grid">
                        <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonCenterGrayGradientFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonBorderDarkFillKey}}"  CornerRadius="1" x:Name="border" BorderThickness="1" SnapsToDevicePixels="True">
                            <Rectangle x:Name="highlight" StrokeThickness="1" Stroke="#AFFFFFFF" Visibility="Collapsed"/>
                        </Border>
                        <Path Width="3" Height="5" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonGlyphFillKey}}" SnapsToDevicePixels="True" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Data="M 0,2 C0,2 0,3 0,3 0,3 1,3 1,3 1,3 1,4 1,4 1,4 2,4 2,4 2,4 2,5 2,5 2,5 3,5 3,5 3,5 3,0 3,0 3,0 2,0 2,0 2,0 2,1 2,1 2,1 1,1 1,1 1,1 1,2 1,2 1,2 0,2 0,2 z"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverBorderFillKey}}"/>
                            <Setter Property="Visibility" TargetName="highlight" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== ScrollRight Pager Button==========  -->
    <Style x:Key="{x:Static igRibbon:RibbonGroupCollection.PagerScrollRightButtonStyleKey}" BasedOn="{StaticResource PagerScrollButtonBase}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Width="13" x:Name="grid">
                        <Border Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonCenterGrayGradientFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonBorderDarkFillKey}}"  CornerRadius="1" x:Name="border" BorderThickness="1" SnapsToDevicePixels="True">
                            <Rectangle x:Name="highlight" StrokeThickness="1" Stroke="#AFFFFFFF" Visibility="Collapsed"/>
                        </Border>
                        <Path Width="3" Height="5" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonGlyphFillKey}}" SnapsToDevicePixels="True" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" Data="M 3,2 C3,2 3,3 3,3 3,3 2,3 2,3 2,3 2,4 2,4 2,4 1,4 1,4 1,4 1,5 1,5 1,5 0,5 0,5 0,5 0,0 0,0 0,0 1,0 1,0 1,0 1,1 1,1 1,1 2,1 2,1 2,1 2,2 2,2 2,2 3,2 3,2 z"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamPagerButtonHoverBorderFillKey}}"/>
                            <Setter Property="Visibility" TargetName="highlight" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== Data Templates ========== -->
    <DataTemplate DataType="{x:Type igRibbon:RibbonGroupCollection}">
        <Grid>
            <ItemsControl Focusable="False" ItemsSource="{Binding}" Padding="0">
                <ItemsControl.Template>
                    <ControlTemplate TargetType="{x:Type ItemsControl}">
                        <igWindows:XamPager
							Focusable="False"
							ScrollLeftButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollLeftButtonStyleKey}}"
							ScrollRightButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollRightButtonStyleKey}}"
							ScrollViewer.CanContentScroll="True"
							ScrollViewer.HorizontalScrollBarVisibility="Auto"
							ScrollViewer.VerticalScrollBarVisibility="Hidden">
                            <ItemsPresenter Margin="{TemplateBinding Padding}" DataContext="{Binding Path=(igRibbon:XamRibbon.Ribbon).DataContext, RelativeSource={x:Static RelativeSource.Self}}"/>
                        </igWindows:XamPager>
                    </ControlTemplate>
                </ItemsControl.Template>
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <igRibbon:RibbonGroupPanel/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
        </Grid>
    </DataTemplate>

    <!-- =================================================================== -->
    <!-- ApplicationMenuPresenter Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:ApplicationMenuPresenter}">
        <Setter Property="MinHeight" Value="17"/>
        <Setter Property="Margin" Value="0,1,0,-1"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuOuterBorderDarkFillKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:ApplicationMenuPresenter}">
                    <igWindows:CardPanel x:Name="ApplicationMenuButton" Background="Transparent" SnapsToDevicePixels="true">
                        <Rectangle x:Name="PopupPlacementRect" Margin="0,-1,0,0" VerticalAlignment="Top" Visibility="Hidden"/>
                        <!-- Office Orb -->
                        <Grid
							x:Name="orbPanel"
							Width="56"
							HorizontalAlignment="Left"
							VerticalAlignment="Stretch">
                            <!-- Orb Image -->
                            <Border
								x:Name="AppMenuBtnNormal"
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonNormalCenterFillKey}}"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonNormalOuterBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="3,3,0,0">
                                <Border
									BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonNormalInnerBorderFillKey}}"
									BorderThickness="1,1,1,0"
									CornerRadius="2,2,0,0"/>
                            </Border>
                            <Border
								x:Name="AppMenuBtnHover"
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonHoverCenterFillKey}}"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonHoverOuterBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="3,3,0,0"
								Opacity="0">
                                <Grid>
                                    <Border
									BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonHoverInnerBorderFillKey}}"
									BorderThickness="1,1,1,0"
									CornerRadius="2,2,0,0"/>
                                    <Border x:Name="AppMenuBtnPressed" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonPressedCenterFillKey}}" Opacity="0" CornerRadius="2,2,0,0"/>
                                </Grid>
                            </Border>
                            <!-- AS 10/19/10 TFS57563 Added ability to display text if the caption has been set. -->
                            <igWindows:CardPanel>
                                <!-- AS 6/4/08 BR32242 Changed source binding to bind to explicit property rather than rely on datacontext. -->
                                <!-- AS 10/19/10 TFS57563 Removed maxwidth so the image may be non-square. Also set the stretch and
									stretchdirection so the image only scales down. -->
                                <Image x:Name="appMenuImage"
									MaxHeight="16"
									Stretch="Uniform"
									StretchDirection="DownOnly"
									HorizontalAlignment="Center"
									VerticalAlignment="Center"
									SnapsToDevicePixels="True"
									Source="{Binding Path=Tool.Image, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                                <Viewbox x:Name="appMenuCaption" Stretch="Uniform" StretchDirection="DownOnly" Visibility="Collapsed" Margin="3,4,3,3">
                                    <TextBlock Text="{Binding Path=Tool.Caption, RelativeSource={RelativeSource TemplatedParent}}" Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuButtonForegroundKey}}" />
                                </Viewbox>
                            </igWindows:CardPanel>
                        </Grid>
                        <Popup
							Name="PART_Popup"
							AllowsTransparency="true"
							Focusable="false"
							IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
							Placement="Bottom"
							PlacementTarget="{Binding ElementName=PopupPlacementRect}">
                            <luna:SystemDropShadowChrome Name="Shdw" Color="Transparent">
                                <igWindows:CardPanel KeyboardNavigation.DirectionalNavigation="Cycle">
                                    <Border
										Grid.ColumnSpan="2"
										Grid.RowSpan="2"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="{TemplateBinding BorderThickness}"
										CornerRadius="1"
										SnapsToDevicePixels="True">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition/>
                                            <!-- JJD 10/28/10 - TFS34544
													specify a grid row height for application menu popup footer (row 2) as 'Auto' which allows all of the avaialble space to go to row 1 which contains the menu area	-->
                                            <RowDefinition Height="Auto" MinHeight="17"/>
                                        </Grid.RowDefinitions>
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="24"/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <!-- Menu Chrome -->
                                            <Border
												Grid.ColumnSpan="2"
												Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuChromeFillKey}}"
												BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuInnerBorderDarkFillKey}}"
												BorderThickness="0,0,0,1"
												SnapsToDevicePixels="True"/>
                                            <!-- Menu Items Background -->
                                            <Border
												Grid.Row="1"
												Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuLeftAreaCenterFillKey}}"
												BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuLeftAreaBorderFillKey}}"
												BorderThickness="0,0,1,0"
												SnapsToDevicePixels="True">
                                                <ScrollViewer
													x:Name="MenuItemsArea"
													Grid.Row="1"
													CanContentScroll="true"
													Focusable="False"
													HorizontalScrollBarVisibility="Disabled"
													Style="{StaticResource MenuScrollViewer}">
                                                    <igRibbon:ApplicationMenuItemsPanel
														x:Name="PART_ApplicationMenuItemsPanel"
														Margin="0,2,0,2"
														Grid.IsSharedSizeScope="true"
														IsItemsHost="True"
														KeyboardNavigation.ControlTabNavigation="Local"
														KeyboardNavigation.DirectionalNavigation="Continue"
														KeyboardNavigation.TabIndex="1"
														KeyboardNavigation.TabNavigation="Local"
														SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                </ScrollViewer>
                                            </Border>
                                            <Border
												x:Name="RecentItemsBackGround"
                        MinWidth="250"
												MinHeight="64"
												Grid.Column="1"
												Grid.Row="1"
												Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsCenterFillKey}}"
												BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsBorderFillKey}}"
												BorderThickness="1,0,0,0">
                                                <Grid>
                                                    <ScrollViewer Focusable="False" HorizontalScrollBarVisibility="Disabled" Style="{StaticResource MenuScrollViewer}">
                                                        <StackPanel>
                                                            <ContentControl
																x:Name="RecentItemsHeader"
																Margin="7,3,0,3"
																Content="{Binding Path=Tool.RecentItemsHeader, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
																ContentTemplate="{Binding Path=Tool.RecentItemsHeaderTemplate, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
																ContentTemplateSelector="{Binding Path=Tool.RecentItemsHeaderTemplateSelector, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
																Focusable="False"
																TextBlock.FontWeight="Bold"/>
                                                            <Border
																x:Name="RecentItemsHeaderSeparator"
																Height="2"
																Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsSeparatorDarkFillKey}}"
																BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuRecentItemsSeparatorLightFillKey}}"
																BorderThickness="0,0,0,1"
																SnapsToDevicePixels="True"/>
                                                            <igRibbon:ApplicationMenuRecentItemsPanel
																x:Name="PART_RecentItemsPanel"
																KeyboardNavigation.ControlTabNavigation="Local"
																KeyboardNavigation.DirectionalNavigation="Continue"
																KeyboardNavigation.TabIndex="2"
																KeyboardNavigation.TabNavigation="Local"/>
                                                        </StackPanel>
                                                    </ScrollViewer>
                                                </Grid>
                                            </Border>
                                            <FrameworkElement
												x:Name="PART_SubMenuArea"
												Grid.Column="1"
												Grid.Row="1"
												HorizontalAlignment="Stretch"
												Margin="0,6,5,-2"
												VerticalAlignment="Stretch"/>
                                        </Grid>
                                            <Border
												x:Name="Footer"
												Grid.Row="1"
												Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuFooterToolbarFillKey}}"
												BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ApplicationMenuFooterToolbarOuterBorderDarkFillKey}}"
												BorderThickness="0,1,0,0"
												SnapsToDevicePixels="True">
                                                <ContentPresenter
													x:Name="PART_FooterToolbar"
													Content="{Binding Path=Tool.FooterToolbar, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
													Focusable="False"
													KeyboardNavigation.ControlTabNavigation="Local"
													KeyboardNavigation.DirectionalNavigation="Continue"
													KeyboardNavigation.TabIndex="3"
													KeyboardNavigation.TabNavigation="Local"/>
                                            </Border>
                                        </Grid>
                                    </Border>
                                    <!-- Overlay Button -->
                                    <ToggleButton
										x:Name="ButtonOverlay"
										Width="{Binding ElementName=orbPanel, Path=ActualWidth}"
										Height="{Binding ElementName=orbPanel, Path=ActualHeight}"
										HorizontalAlignment="Left"
										VerticalAlignment="Top"
										ClickMode="Press"
										Focusable="False"
										IsChecked="{Binding ElementName=PART_Popup, Path=IsOpen, Mode=TwoWay}"
										IsTabStop="False">
                                        <ToggleButton.RenderTransform>
                                            <MultiBinding Mode="OneWay">
                                                <MultiBinding.Converter>
                                                    <igRibbon:ApplicationMenuButtonTransformConverter/>
                                                </MultiBinding.Converter>
                                                <Binding ElementName="PART_Popup" Path="IsOpen"/>
                                                <Binding ElementName="orbPanel"/>
                                                <Binding ElementName="ButtonOverlay"/>
                                            </MultiBinding>
                                        </ToggleButton.RenderTransform>
                                        <ToggleButton.Template>
                                            <ControlTemplate TargetType="ToggleButton">
                                                <Rectangle>
                                                    <Rectangle.Fill>
                                                        <VisualBrush x:Name="orbBrush" Stretch="None" Visual="{Binding ElementName=orbPanel, Mode=OneTime}"/>
                                                    </Rectangle.Fill>
                                                </Rectangle>
                                            </ControlTemplate>
                                        </ToggleButton.Template>
                                    </ToggleButton>
                                </igWindows:CardPanel>
                            </luna:SystemDropShadowChrome>
                        </Popup>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSubmenuOpen" Value="False">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"/>
                        </Trigger>
                        <!-- AS 10/19/10 TFS57563 Added ability to display text if the caption has been set. -->
                        <DataTrigger Binding="{Binding Path=Tool.HasCaption, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter TargetName="appMenuCaption" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="appMenuImage" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Tool.HasRecentItemsHeader, RelativeSource={x:Static RelativeSource.Self}}" Value="False">
                            <Setter TargetName="RecentItemsHeaderSeparator" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="RecentItemsHeader" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <!--<DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                            <Setter TargetName="orbPanel" Property="Margin" Value="2,6,0,0"/>
                        </DataTrigger>-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSuspendingPopupAnimation" Value="True"/>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="AppMenuBtnPressed" Property="Opacity" Value="1"/>
                            <Setter TargetName="AppMenuBtnHover" Property="Opacity" Value="1"/>
                            <!--<Setter TargetName="orbPanel" Property="Height" Value="23"/>-->
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="AppMenuBtnHover" Property="Opacity" Value="1"/>
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="AppMenuBtnHover" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                            <Setter TargetName="AppMenuBtnPressed" Property="Opacity" Value="1"/>
                            <!--<Setter TargetName="orbPanel" Property="Height" Value="23"/>-->
                        </Trigger>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                            <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5"/>
                            <Setter TargetName="Shdw" Property="Color" Value="#71000000"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- SeparatorTool Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:SeparatorTool}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:SeparatorTool}">
                    <igWindows:CardPanel>
                        <igWindows:CardPanel x:Name="HorizontalSeparator" Margin="1,0,1,0" SnapsToDevicePixels="true" Grid.Column="1">
                            <Rectangle Height="1" Margin="0,0,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.HorizontalSeparatorNormalDarkFillKey}}" SnapsToDevicePixels="true" />
                            <Rectangle Height="1" Margin="0,1,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.HorizontalSeparatorNormalLightFillKey}}" SnapsToDevicePixels="true" />
                        </igWindows:CardPanel >

                        <!-- Vertical Separator used in RibbonGroups and ApplicationMenuFooterToolbar. -->
                        <igWindows:CardPanel x:Name="VerticalSeparator" Width="3" Visibility="Collapsed">
                            <Border BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VerticalSeparatorNormalLightFillKey}}" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VerticalSeparatorNormalDarkFillKey}}" BorderThickness="1,0" SnapsToDevicePixels="True"/>
                        </igWindows:CardPanel>
                    </igWindows:CardPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Location" Value="Ribbon">
                            <Setter Property="Visibility" Value="Visible" TargetName="VerticalSeparator"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="HorizontalSeparator"/>
                        </Trigger>
                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Visibility" Value="Visible" TargetName="VerticalSeparator"/>
                            <Setter Property="Margin" Value="0,2,0,4" TargetName="VerticalSeparator"/>
                            <Setter Property="Margin" Value="6,0,0,0"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="HorizontalSeparator"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =================================================================== -->
    <!-- Ribbon's XamTabControl Style -->
    <!-- =================================================================== -->
    <Style x:Key="{x:Static igRibbon:XamRibbon.RibbonTabControlStyleKey}" TargetType="{x:Type igWindows:XamTabControl}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerFillKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}"/>
        <!-- AS 6/29/12 Don't put a border on top when using glass
        <Setter Property="BorderThickness" Value="0,1"/>-->
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="MaximumSizeToFitAdjustment" Value="18"/>
        <Setter Property="MinimumTabExtent" Value="28"/>
        <Setter Property="PreTabItemContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Rectangle Width="56" Height="19"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Continue"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igWindows:XamTabControl}">
                    <Grid ClipToBounds="True" KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="gridRow0" Height="Auto"/>
                            <RowDefinition x:Name="gridRow1" Height="*"/>
                        </Grid.RowDefinitions>
                        <Border
							x:Name="ContentPanel"
							Grid.Row="1"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							KeyboardNavigation.DirectionalNavigation="Continue"
							KeyboardNavigation.TabIndex="2"
							KeyboardNavigation.TabNavigation="Local"
							SnapsToDevicePixels="True"
							Visibility="Visible">
                            <ContentPresenter
								x:Name="PART_SelectedContentHost"
								Height="{TemplateBinding TabItemContentHeight}"
								Margin="{TemplateBinding Padding}"
								Content="{TemplateBinding SelectedContent}"
								ContentSource="SelectedContent"
								ContentTemplate="{TemplateBinding SelectedContentTemplate}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
								/>
                        </Border>
                        <DockPanel
							x:Name="PART_HeaderArea"
							Panel.ZIndex="1"
							Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelBackgroundKey}}"
							SnapsToDevicePixels="True">
                            <ContentPresenter
								x:Name="PreTabItemContent"
								KeyboardNavigation.DirectionalNavigation="Continue"
                                KeyboardNavigation.TabIndex="0" 
								Content="{TemplateBinding PreTabItemContent}"
								ContentTemplate="{TemplateBinding PreTabItemContentTemplate}"
								ContentTemplateSelector="{TemplateBinding PreTabItemContentTemplateSelector}"
								DockPanel.Dock="Left"/>
                            <ContentPresenter
								x:Name="PostTabItemContent"
								KeyboardNavigation.DirectionalNavigation="Continue"
                                KeyboardNavigation.TabIndex="2" 
								Content="{TemplateBinding PostTabItemContent}"
								ContentTemplate="{TemplateBinding PostTabItemContentTemplate}"
								ContentTemplateSelector="{TemplateBinding PostTabItemContentTemplateSelector}"
								DockPanel.Dock="Right"/>
                            <igWindows:XamPager
								x:Name="PART_TabItemScrollViewer"
								CanContentScroll="True"
								Focusable="False"
								KeyboardNavigation.DirectionalNavigation="Continue"
								KeyboardNavigation.TabIndex="1"
								KeyboardNavigation.TabNavigation="Local"
								ScrollLeftButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollLeftButtonStyleKey}}"
								ScrollRightButtonStyle="{DynamicResource {x:Static igRibbon:RibbonGroupCollection.PagerScrollRightButtonStyleKey}}"
								ScrollViewer.HorizontalScrollBarVisibility="{TemplateBinding TabItemHorizontalScrollBarVisibility}"
								ScrollViewer.VerticalScrollBarVisibility="{TemplateBinding TabItemVerticalScrollBarVisibility}">
                                <ItemsPresenter x:Name="PART_TabHeaderPanel" Margin="2,1,2,0" KeyboardNavigation.TabNavigation="Once"/>
                            </igWindows:XamPager>
                        </DockPanel>
                        <Popup
							x:Name="PART_Popup"
							Width="{TemplateBinding PreferredDropDownExtent}"
							AllowsTransparency="True"
							CustomPopupPlacementCallback="{TemplateBinding PreferredDropDownPlacementCallback}"
							igWindows:PopupHelper.HandleMouseDownOnClose="True"
							IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
							Placement="Custom"
							SnapsToDevicePixels="True"
							StaysOpen="False">
                            <AdornerDecorator>
                                <Border
									Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelBackgroundKey}}"
									KeyboardNavigation.DirectionalNavigation="Continue"
									KeyboardNavigation.TabIndex="2"
									KeyboardNavigation.TabNavigation="Local"
									SnapsToDevicePixels="True">
                                    <Border
                                        x:Name="PopupContentBorder"
										Background="{TemplateBinding Panel.Background}"
										BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}"
										BorderThickness="0,1"
										SnapsToDevicePixels="True">
                                        <ContentPresenter
											x:Name="PART_SelectedContentHostMinimized"
											Height="{TemplateBinding TabItemContentHeight}"
											HorizontalAlignment="{Binding HorizontalAlignment, ElementName=PART_SelectedContentHost}"
											Margin="{TemplateBinding Padding}"
											VerticalAlignment="{Binding VerticalAlignment, ElementName=PART_SelectedContentHost}"
											Content="{x:Null}"
											ContentSource="SelectedContent"
											ContentTemplate="{TemplateBinding SelectedContentTemplate}"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Border>
                                </Border>
                            </AdornerDecorator>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDropDownOpen" Value="False">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="Fade"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMinimized" Value="True">
                            <Setter TargetName="PART_SelectedContentHostMinimized" Property="Content" Value="{Binding SelectedContent, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="ContentPanel" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_SelectedContentHost" Property="Content" Value="{x:Null}"/>
                            <!-- AS 7/20/11 TFS80142 -->
                            <Setter Property="Grid.RowSpan" TargetName="PART_HeaderArea" Value="2" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.IsSelectedItemInContextualTabGroup" Value="True">
                            <Setter TargetName="ContentPanel" Property="BorderBrush" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                        </Trigger>
                        <!-- AndieS 6/22/12 Toggle the RibbonTabControlHeader Styling when Inactive -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.Ribbon).(igRibbon:XamRibbon.IsWithinRibbonWindow), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                                <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="PART_HeaderArea" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelInactiveFillKey}}" />
                        </MultiDataTrigger>
                        <!-- AS 6/29/12 Provide side border when not using glass -->
                        <Trigger Property="igRibbon:XamRibbon.IsGlassActive" Value="False">
                            <Setter Property="BorderThickness" Value="1" />
                            <Setter Property="BorderThickness" TargetName="PopupContentBorder" Value="1" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.IsGlassActive" Value="True">
            			 <Setter Property="Background" TargetName="PART_HeaderArea" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonTabControlHeaderPanelGlassBackgroundKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Style.Triggers>
            <Trigger Property="IsMinimized" Value="True">
                <Setter Property="Height" Value="24"/>
            </Trigger>
        </Style.Triggers>-->
    </Style>

    <!-- =================================================================== -->
    <!-- RibbonTabItem Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:RibbonTabItem}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="ControlTemplate" TargetType="{x:Type igRibbon:RibbonTabItem}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="ContextualTabMouseOver"/>
                        <Storyboard x:Key="ContextualTabMouseOut"/>
                        <Storyboard x:Key="TabMouseOverNotSelected">
                            <ObjectAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetName="TabMouseOverNotSelected" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="TabMouseOutNotSelected">
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="TabMouseOverNotSelected" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="Tab">
                        <Line
							x:Name="ContextualTabInTabAreaSeparatorLeft"
							HorizontalAlignment="Left"
							Margin="1, -2, 0, 5"
							IsHitTestVisible="False"
							SnapsToDevicePixels="True"
							Stretch="Fill"
							Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabSeparatorFillKey}}"
							StrokeThickness="1"
							Visibility="{TemplateBinding Converter={StaticResource BoolToVisConverter}, Property=IsFirstTabInContextualTabGroup}"
							X1="0"
							X2="0"
							Y1="0"
							Y2="1"/>
                        <Line
							x:Name="ContextualTabInTabAreaSeparatorLeftHighlight"
							HorizontalAlignment="Left"
							Margin="0, -2, 0, 5"
							IsHitTestVisible="False"
							SnapsToDevicePixels="True"
							Stretch="Fill"
							Stroke="#7FFFFFFF"
							StrokeThickness="1"
							Visibility="{TemplateBinding Converter={StaticResource BoolToVisConverter}, Property=IsFirstTabInContextualTabGroup}"
							X1="0"
							X2="0"
							Y1="0"
							Y2="1">
                            <Line.OpacityMask>
                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Offset="0" Color="#66c90077"/>
                                            <GradientStop Offset="1" Color="#00c90077"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Line.OpacityMask>
                        </Line>
                        <Grid
							x:Name="TabMouseOverNotSelected"
							Margin="3,0"
							Visibility="Collapsed">
                            <Border
								x:Name="Center"
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabInactiveHoverBackgroundFillKey}}"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabInactiveHoverBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="2,2,0,0"
								SnapsToDevicePixels="True"
								Visibility="Visible">
                                <Border
									x:Name="Bd2"
									BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabInactiveHoverCenterFillKey}}"
									BorderThickness="1,1,1,0"
									CornerRadius="1,1,0,0"
									SnapsToDevicePixels="True"/>
                            </Border>
                        </Grid>
                        <Grid x:Name="TabSelected" Margin="0,0,0,-1" Visibility="Collapsed">
                            <Path
								x:Name="BottomLeftFilet1"
								Width="3"
								Height="2"
								HorizontalAlignment="Left"
								VerticalAlignment="Bottom"
								Data="M 24,71 C24,71 24,72 24,72 24,73 23,74 22,74 22,74 21,74 21,74 21,74 21,75 21,75 21,75 22,75 22,75 22,75 23,75 23,75 24,75 25,74 25,73 25,73 25,71 25,71 25,71 24,71 24,71 z"
								Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								SnapsToDevicePixels="True"
								Stretch="Fill"/>
                            <Path
								x:Name="BottomRightFilet1"
								Width="3"
								Height="2"
								HorizontalAlignment="Right"
								VerticalAlignment="Bottom"
								Data="M 28,75 C28,75 29,75 29,75 29,75 30,75 30,75 30,75 30,74 30,74 30,74 29,74 29,74 28,74 27,73 27,72 27,72 27,71 27,71 27,71 26,71 26,71 26,71 26,72 26,72 26,72 26,73 26,73 26,74 27,75 28,75 z"
								Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								SnapsToDevicePixels="True"
								Stretch="Fill"/>
                            <Border
								x:Name="BdTabSelectedShdw"
								Margin="0,0,0,2"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="3,3,0,0"
								Opacity="0.15"/>
                            <Border
								x:Name="BdTabSelectedShdw1"
								Margin="1,0,1,2"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="2,2,0,0"
								Opacity="0.25"/>
                            <Border
								x:Name="BdTabSelected"
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalCenterFillKey}}"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="2,2,0,0"
								SnapsToDevicePixels="True"/>
                        </Grid>
                        <Border
							x:Name="ContextualTabBase"
							BorderThickness="1,1,1,0"
							CornerRadius="3,3,0,0"
							d:IsHidden="True"
							Visibility="Collapsed"/>
                        <Grid x:Name="ContextualTabSelected" Margin="0,0,0,-1" Visibility="Collapsed">
                            <Path
								x:Name="ContextualTabBottomLeftFilet"
								Width="3"
								Height="2"
								HorizontalAlignment="Left"
								VerticalAlignment="Bottom"
								Data="M 24,71 C24,71 24,72 24,72 24,73 23,74 22,74 22,74 21,74 21,74 21,74 21,75 21,75 21,75 22,75 22,75 22,75 23,75 23,75 24,75 25,74 25,73 25,73 25,71 25,71 25,71 24,71 24,71 z"
								Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								SnapsToDevicePixels="True"
								Stretch="Fill"/>
                            <Path
								x:Name="ContextualTabBottomRightFilet"
								Width="3"
								Height="2"
								HorizontalAlignment="Right"
								VerticalAlignment="Bottom"
								Data="M 28,75 C28,75 29,75 29,75 29,75 30,75 30,75 30,75 30,74 30,74 30,74 29,74 29,74 28,74 27,73 27,72 27,72 27,71 27,71 27,71 26,71 26,71 26,71 26,72 26,72 26,72 26,73 26,73 26,74 27,75 28,75 z"
								Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								SnapsToDevicePixels="True"
								Stretch="Fill"/>
                            <Border
								x:Name="BdContextualTabSelectedShdw"
								Margin="1,0,1,2"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="3,3,0,0"
								Opacity="0.15"/>
                            <Border
								x:Name="BdContextualTabSelectedShdw1"
								Margin="0,0,0,2"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="2,2,0,0"
								Opacity="0.25"/>
                            <Border
								x:Name="BdContextualTabSelected"
								Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalCenterFillKey}}"
								BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabActiveNormalBorderFillKey}}"
								BorderThickness="1,1,1,0"
								CornerRadius="2,2,0,0"
								SnapsToDevicePixels="True"/>
                        </Grid>
                        <Border x:Name="contextualSelected" Visibility="Collapsed" CornerRadius="2,2,0,0" BorderThickness="1,1,1,0"
						BorderBrush="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
                            <Rectangle Fill="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
                                <Rectangle.OpacityMask>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Offset="0" Color="#33c90077"/>
                                                <GradientStop Offset="0.75" Color="#00c90077"/>
                                                <GradientStop Offset="1" Color="#00c90077"/>
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Rectangle.OpacityMask>
                            </Rectangle>
                        </Border>
                        <Border x:Name="contextualHottrack" BorderBrush="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}" BorderThickness="1,1,1,0" CornerRadius="2,2,0,0" Visibility="Collapsed">
                            <Border BorderThickness="1,1,1,0" BorderBrush="#7FFFFFFF" CornerRadius="1,1,0,0">
                                <Rectangle Fill="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
                                    <Rectangle.OpacityMask>
                                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                            <LinearGradientBrush.GradientStops>
                                                <GradientStopCollection>
                                                    <GradientStop Offset="0" Color="#33c90077"/>
                                                    <GradientStop Offset="0.75" Color="#00c90077"/>
                                                    <GradientStop Offset="1" Color="#00c90077"/>
                                                </GradientStopCollection>
                                            </LinearGradientBrush.GradientStops>
                                        </LinearGradientBrush>
                                    </Rectangle.OpacityMask>
                                </Rectangle>
                            </Border>
                        </Border>
                        <ContentPresenter
							x:Name="tabItemText"
							Width="Auto"
							HorizontalAlignment="Stretch"
							Margin="6,4,6,3"
							VerticalAlignment="Center"
							Content="{TemplateBinding Header, Converter={StaticResource stringWithoutMnemonicsConverter}}"
							ContentTemplate="{TemplateBinding HeaderTemplate}"
							ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
							igRibbon:XamRibbon.KeyTipPlacementType="Caption"
							igWindows:ClippedTextToolTipService.AncestorTypeForToolTip="{x:Type igRibbon:RibbonTabItem}"
							igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True"
							igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}"
							TextBlock.TextAlignment="Center"
							TextElement.Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabNotSelectedTextFillKey}}"/>
                        <Line
							x:Name="TabSeparator"
							HorizontalAlignment="Right"
							Margin="0, -2, 0, 5"
							IsHitTestVisible="False"
							Opacity="{TemplateBinding igWindows:TabItemPanel.TabSeparatorOpacity}"
							SnapsToDevicePixels="True"
							Stretch="Fill"
							Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabSeparatorFillKey}}"
							StrokeThickness="1"
							X1="0"
							X2="0"
							Y1="0"
							Y2="1"/>
                        <Line
							x:Name="ContextualTabInTabAreaSeparatorRight"
							HorizontalAlignment="Right"
							Margin="0, -2, 1, 5"
							IsHitTestVisible="False"
							SnapsToDevicePixels="True"
							Stretch="Fill"
							Stroke="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContextualTabSeparatorFillKey}}"
							StrokeThickness="1"
							Visibility="{TemplateBinding Converter={StaticResource BoolToVisConverter}, Property=IsLastTabInContextualTabGroup}"
							X1="0"
							X2="0"
							Y1="0"
							Y2="1"/>
                        <Line
							x:Name="ContextualTabInTabAreaSeparatorRightHighlight"
							HorizontalAlignment="Right"
							Margin="0, -2, 0, 5"
							IsHitTestVisible="False"
							SnapsToDevicePixels="True"
							Stretch="Fill"
							Stroke="#FFFFFFFF"
							StrokeThickness="1"
							Visibility="{TemplateBinding Converter={StaticResource BoolToVisConverter}, Property=IsLastTabInContextualTabGroup}"
							X1="0"
							X2="0"
							Y1="0"
							Y2="1">
                            <Line.OpacityMask>
                                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                    <LinearGradientBrush.GradientStops>
                                        <GradientStopCollection>
                                            <GradientStop Offset="0" Color="#66c90077"/>
                                            <GradientStop Offset="1" Color="#00c90077"/>
                                        </GradientStopCollection>
                                    </LinearGradientBrush.GradientStops>
                                </LinearGradientBrush>
                            </Line.OpacityMask>
                        </Line>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- IsInContextualTabGroup -->
                        <Trigger Property="IsInContextualTabGroup" Value="True">
                            <Setter TargetName="Center" Property="BorderBrush" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                            <Setter TargetName="BdContextualTabSelected" Property="Background" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                            <Setter TargetName="BdContextualTabSelected" Property="BorderBrush" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                            <Setter TargetName="ContextualTabBottomLeftFilet" Property="Fill" Value="{x:Null}"/>
                            <Setter TargetName="ContextualTabBottomRightFilet" Property="Fill" Value="{x:Null}"/>
                            <Setter TargetName="ContextualTabBase" Property="Background" Value="{Binding Path=(igRibbon:XamRibbon.Ribbon).SelectedTab.ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                            <Setter TargetName="Bd2" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="ContextualTabInTabAreaSeparatorLeft" Property="Stroke" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                            <Setter TargetName="ContextualTabInTabAreaSeparatorRight" Property="Stroke" Value="{Binding Path=ContextualTabGroup.BaseBackColorResolvedBrush, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                            <Setter TargetName="ContextualTabInTabAreaSeparatorRight" Property="OpacityMask">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Offset="0" Color="#66c90077"/>
                                                <GradientStop Offset="1" Color="#00c90077"/>
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="ContextualTabInTabAreaSeparatorLeft" Property="OpacityMask">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Offset="0" Color="#66c90077"/>
                                                <GradientStop Offset="1" Color="#00c90077"/>
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="BdContextualTabSelected" Property="OpacityMask">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Offset="0" Color="#66c90077"/>
                                                <GradientStop Offset="1" Color="#00c90077"/>
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <!-- IsSelected && !IsInContextualTabGroup -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsInContextualTabGroup" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="TabSelected" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
                        </MultiTrigger>
                        <!-- IsSelected && IsInContextualTabGroup && !XamRibbon.IsActive -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsInContextualTabGroup" Value="True"/>
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContextualTabSelected" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="contextualSelected" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="TabSelected" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
                        </MultiTrigger>
                        <!-- IsMouseOverTab && !IsSelected -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOverTab, RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsInContextualTabGroup, RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard x:Name="TabMouseOverNotSelected_BeginStoryboard" Storyboard="{StaticResource TabMouseOverNotSelected}"/>
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="TabMouseOverNotSelected_BeginStoryboard"/>
                                <BeginStoryboard Storyboard="{StaticResource TabMouseOutNotSelected}"/>
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOverTab, RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsInContextualTabGroup, RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="contextualHottrack" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>
                        <!-- IsSelected && XamRibbon.IsActive -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
                        </MultiTrigger>
                        <!-- !IsSelected && XamRibbon.IsActive -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard x:Name="ActivatedNotSelected_BeginStoryboard" Storyboard="{StaticResource TabMouseOverNotSelected}"/>
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard x:Name="DeactivatedNotSelected_BeginStoryboard" Storyboard="{StaticResource TabMouseOutNotSelected}"/>
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                        <!-- IsSelected && IsInContextualTabGroup && !XamRibbon.IsActive -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="igRibbon:XamRibbon.IsActive" Value="True"/>
                                <Condition Property="IsInContextualTabGroup" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ContextualTabSelected" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="tabItemText" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TabIsSelectedTextFillKey}}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsInContextualTabGroup" Value="True">
                <Setter Property="igWindows:XamTabControl.TabPriority" Value="10"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- RibbonGroup Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:RibbonGroup}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="SmallImage">
            <Setter.Value>
                <DrawingImage>
                    <DrawingImage.Drawing>
                        <DrawingGroup>
                            <GeometryDrawing Brush="#00FFFFFF">
                                <GeometryDrawing.Geometry>
                                    <RectangleGeometry Rect="0,0,11,11"/>
                                </GeometryDrawing.Geometry>
                            </GeometryDrawing>
                            <DrawingGroup Opacity="0.670">
                                <GeometryDrawing Brush="#FFFFFFFF" Geometry="M1,1C1,1 10,1 10,1 10,1 10,10 10,10 10,10 1,10 1,10 1,10 1,1 1,1z M0,0C0,0 0,11 0,11 0,11 11,11 11,11 11,11 11,0 11,0 11,0 0,0 0,0z"/>
                            </DrawingGroup>
                            <DrawingGroup>
                                <DrawingGroup.Transform>
                                    <MatrixTransform Matrix="1,0,0,1,3,3"/>
                                </DrawingGroup.Transform>
                                <GeometryDrawing Brush="#FFFFFFFF" Geometry="M5,0 C5,0 4.285,0 4.285,0 4.285,0 0,5 0,5 0,5 0.714,5 0.714,5 0.714,5 5,0 5,0 z"/>
                            </DrawingGroup>
                        </DrawingGroup>
                    </DrawingImage.Drawing>
                </DrawingImage>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:RibbonGroup}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="RibbonGroupFadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetName="RibbonGroupGlowHover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetName="hoverHighlightBottom" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="RibbonGroupFadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetName="RibbonGroupGlowHover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="0" Storyboard.TargetName="hoverHighlightBottom" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.5" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid><AdornerDecorator>
                    <igWindows:CardPanel Background="Transparent">
                        <Grid x:Name="RibbonGroupGlowHover" Opacity="0">
                            <Grid.OpacityMask>
                                <RadialGradientBrush Center="0.5,1" GradientOrigin="0.5,1" RadiusX="0.5" RadiusY="0.5">
                                    <GradientStop Offset="0" Color="#3F000000"/>
                                    <GradientStop Color="#EAFFFFFF" Offset="0.1"/>
                                    <GradientStop Color="#AFFFFFFF" Offset="0.55"/>
                                    <GradientStop Color="#3FFFFFFF" Offset="1"/>
                                </RadialGradientBrush>
                            </Grid.OpacityMask>
                            <Rectangle Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverBottomGradientFillKey}}"/>
                        </Grid>
                        <Border x:Name="groupSeparator" Width="3"  BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VerticalSeparatorNormalLightFillKey}}" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.VerticalSeparatorNormalDarkFillKey}}" BorderThickness="1,0" SnapsToDevicePixels="True" HorizontalAlignment="Right"/>
                        <ContentControl x:Name="PART_RibbonGroupSite" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" Style="{StaticResource PlainContentControlStyle}" Margin="0,0,4,0">
                            <Grid x:Name="groupPanel" Background="{TemplateBinding Background}">
                                <DockPanel Margin="0,2,0,0">
                                    <DockPanel
										Margin="0,1"
										DockPanel.Dock="Bottom"
										KeyboardNavigation.TabIndex="1"
										KeyboardNavigation.TabNavigation="Local">
                                        <ContentControl
											x:Name="DialogBoxLauncher"
											Height="15"
											VerticalAlignment="Bottom"
											Content="{TemplateBinding DialogBoxLauncherTool}"
											DockPanel.Dock="Right"
											Focusable="False"
											Visibility="Hidden"/>
                                        <TextBlock
											x:Name="PART_Caption"
											HorizontalAlignment="Stretch"
											Margin="0"
											VerticalAlignment="Bottom"
											Foreground="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupCaptionTextFillKey}}"
											igWindows:ClippedTextToolTipService.ShowToolTipWhenClipped="True"
											igWindows:ClippedTextToolTipService.ToolTipStyleKey="{x:Static igRibbon:XamRibbon.ToolTipStyleKey}"
											Padding="0"
											Text="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}"
											TextAlignment="Center"
											TextTrimming="CharacterEllipsis"/>
                                    </DockPanel>
                                    <ItemsPresenter
										x:Name="PART_Items"
										HorizontalAlignment="Center"
										DockPanel.Dock="Top"
										KeyboardNavigation.TabIndex="0"
										KeyboardNavigation.TabNavigation="Local"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </DockPanel>
                            </Grid>
                        </ContentControl>
                        <Rectangle x:Name="hoverHighlightBottom" Height="1" VerticalAlignment="Bottom" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverBorderFillKey}}" SnapsToDevicePixels="True" Margin="-2,0,3,0" Opacity="0"/>
                        <Border x:Name="collapsedGroupHover" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupIsInContextualHoverCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.RibbonGroupHoverBorderFillKey}}" BorderThickness="0,0,0,1" Margin="-2,0,3,0" Visibility="Collapsed" SnapsToDevicePixels="True"/>
                        <igRibbon:DropDownToggle
							x:Name="PART_RibbonGroupButton"
							igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}"
							IsDroppedDown="{Binding Path=IsOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							Style="{DynamicResource {x:Static igRibbon:RibbonGroup.CollapsedGroupButtonStyleKey}}"
							Margin="0,0,3,0"
							Visibility="Collapsed"/>
                        <Popup
							x:Name="PART_Popup"
							AllowsTransparency="True"
							igWindows:PopupHelper.HandleMouseDownOnClose="True"
							IsOpen="{Binding Path=IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
							Placement="Bottom"
							PlacementTarget="{Binding ElementName=PART_RibbonGroupButton}"
							StaysOpen="False">
                            <luna:SystemDropShadowChrome x:Name="Shdw" Color="#3F000000" Margin="0,0,5,5">
                                <AdornerDecorator KeyboardNavigation.DirectionalNavigation="Cycle">
                                    <Border
									Margin="0,0,10,10"
									Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerFillKey}}"
									BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}"
									BorderThickness="1"
									CornerRadius="1">
                                        <!-- AS 4/1/11 TFS70779
											 <Border.BitmapEffect>
                                                  <DropShadowBitmapEffect Opacity=".3" ShadowDepth="4" Softness="0.1"/>
                                             </Border.BitmapEffect>-->
                                        <Grid>
                                            <Rectangle
											Height="1"
											Margin="0,0,0,1"
											VerticalAlignment="Bottom"
											Fill="#59FFFFFF"
											SnapsToDevicePixels="True"/>
                                            <ContentControl x:Name="PART_PopupRibbonGroupSite" igRibbon:RibbonGroupPanel.SizingModeVersion="{TemplateBinding igRibbon:RibbonGroupPanel.SizingModeVersion}" Style="{StaticResource PlainContentControlStyle}"/>
                                        </Grid>
                                    </Border>
                                </AdornerDecorator>
                            </luna:SystemDropShadowChrome>
                        </Popup>
                    </igWindows:CardPanel>
                    </AdornerDecorator></Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOpen" Value="False">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="compModel:DesignerProperties.IsInDesignMode" Value="False"/>
                                <Condition Property="igRibbon:RibbonGroup.IsInContextualTabGroup" Value="False"/>
                                <Condition Property="IsCollapsed" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource RibbonGroupFadeIn}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource RibbonGroupFadeOut}"/>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="compModel:DesignerProperties.IsInDesignMode" Value="False"/>
                                <Condition Property="IsCollapsed" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="collapsedGroupHover" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsCollapsed" Value="True">
                            <Setter TargetName="PART_RibbonGroupButton" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_RibbonGroupButton" Property="igRibbon:RibbonGroup.Caption" Value="{Binding Path=Caption, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="PART_RibbonGroupButton" Property="igRibbon:RibbonGroup.SmallImage" Value="{Binding Path=SmallImage, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="PART_RibbonGroupSite" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsActive" Value="True">
                            <Setter TargetName="PART_RibbonGroupButton" Property="Background" Value="Yellow"/>
                        </Trigger>
                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter TargetName="PART_RibbonGroupButton" Property="Style" Value="{DynamicResource {x:Static igRibbon:RibbonGroup.QuickAccessToolbarGroupButtonStyleKey}}"/>
                            <Setter TargetName="PART_RibbonGroupButton" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_RibbonGroupButton" Property="igRibbon:RibbonGroup.Caption" Value="{Binding Path=Caption, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="PART_RibbonGroupButton" Property="igRibbon:RibbonGroup.SmallImage" Value="{Binding Path=SmallImage, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="PART_RibbonGroupSite" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="groupSeparator" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_Caption" Property="Margin" Value="0"/>
                            <Setter TargetName="hoverHighlightBottom" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasDialogBoxLauncherTool" Value="True">
                            <Setter TargetName="DialogBoxLauncher" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Location" Value="QuickAccessToolbar">
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Focusable" Value="True"/>
            </Trigger>
            <Trigger Property="IsCollapsed" Value="True">
                <Setter Property="Focusable" Value="True"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static igRibbon:RibbonWindowContentHost.StatusBarStyleKey}" TargetType="{x:Type StatusBar}">
        <!-- AS 6/29/12 Just a top border when using glass -->
        <Setter Property="BorderThickness" Value="0,1,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBar}">
                    <Grid x:Name="StatusBar">
                        <Border x:Name="StatusBar_BackgroundLayer" SnapsToDevicePixels="True" CornerRadius="{TemplateBinding Border.CornerRadius}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Rectangle Height="1" Fill="#7FFFFFFF" VerticalAlignment="Top"/>
                        </Border>
                        <Border Padding="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).(StatusBarPadding), RelativeSource={RelativeSource Self}}">
                            <ItemsPresenter OpacityMask="{x:Null}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" Margin="{TemplateBinding Padding}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" >
                            <Setter Property="CornerRadius" TargetName="StatusBar_BackgroundLayer" Value="0,0,0,0" />
                        </DataTrigger>

                        <DataTrigger Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Maximized">
                            <Setter Property="CornerRadius" TargetName="StatusBar_BackgroundLayer" Value="0,0,0,0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!-- AS 6/29/12 Provide borders when not using glass -->
            <Trigger Property="igRibbon:XamRibbon.IsGlassActive" Value="False">
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- AS 6/21/12 TFS114953 -->
    <!-- =================================================================== -->
    <!-- XamRibbon Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:XamRibbon}">
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Template" Value="{StaticResource office2010RibbonTemplate}" />
		<Setter Property="ApplicationAccentColor" Value="{StaticResource Color_321}"/>
    </Style>

    <!-- AS 6/21/12 TFS114953 -->
    <!-- =================================================================== -->
    <!-- RibbonWindowContentHost Style -->
    <!-- =================================================================== -->
    <Style TargetType="{x:Type igRibbon:RibbonWindowContentHost}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.WindowBackgroundBrushKey}}"/>
        <Setter Property="BorderThickness" Value="0,0,0,0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:RibbonWindowContentHost}">
                    <Grid>
                        <AdornerDecorator>
                            <!-- AS 7/13/09 TFS18489
                Removed SharedSizeGroup as this leads to extra unnecessary measure/arrange. Instead a custom
                placeholder element will be used to act as a proxy and provide the extent of the element in
                the other grid. I also moved the panel containing the ribbon/statusbar up so the element name
                binding will find the DesiredSizeDecorator element right away. Changed the RowDefinitions in
                the other grid to bind to the exposed extent properties.
              -->
                            <igWindows:CardPanel Grid.IsSharedSizeScope="True" SnapsToDevicePixels="True">
                                <DockPanel Panel.ZIndex="1" LastChildFill="False">
                                    <!-- Ribbon Area -->
                                    <igWindows:DesiredSizeDecorator DockPanel.Dock="Top" x:Name="ribbonSize">
                                        <igWindows:CardPanel>
                                            <ContentPresenter x:Name="RibbonArea"  Margin="{TemplateBinding RibbonAreaMargin}"  Content="{TemplateBinding Ribbon}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                            <!-- Caption Area - When No Ribbon is Present -->
                                            <Grid x:Name="CaptionArea" Margin="{TemplateBinding CaptionAreaMargin}"  Visibility="{TemplateBinding CaptionVisibility}">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto" />
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="Auto" />
                                                </Grid.ColumnDefinitions>
                                                <Border Grid.ColumnSpan="3" CornerRadius="3,3,0,0" x:Name="PART_XamRibbonCaption"
                                                                        Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelFillKey}}" />
                                                <Rectangle HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Height="1" Grid.ColumnSpan="3"
                                                                        Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelBottomSeparatorStrokeKey}}" Stroke="{x:Null}"/>
                                                <!-- JJD 01/28/14 wrap image in border to expand hit test area  -->
                                                <Border x:Name="PART_WindowIcon" Background="Transparent" Grid.Column="0" >
                                                    <Image x:Name="WindowIconIamge" Stretch="None" HorizontalAlignment="Left" VerticalAlignment="Center"
											        Margin="6,0,3,0" Source="{TemplateBinding IconResolved}" Grid.Column="0" />
                                                </Border>
                                                <ContentControl TextBlock.TextAlignment="Left" Grid.Column="1" Content="{Binding Path=Title, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Style="{DynamicResource {x:Static igRibbon:RibbonCaptionPanel.CaptionStyleKey}}" />
                                                <Control x:Name="captionButtonArea" Grid.Column="2" Focusable="False"
                                                    igRibbon:RibbonWindowContentHost.CaptionButtonVersion="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonVersion, RelativeSource={RelativeSource Self}}"
											        Template="{DynamicResource {ComponentResourceKey {x:Type igRibbon:XamRibbon}, CaptionButtonAreaTemplate}}"/>
                                            </Grid>
                                        </igWindows:CardPanel>
                                    </igWindows:DesiredSizeDecorator>

                                    <!--StatusBar Area-->
                                    <igWindows:DesiredSizeDecorator DockPanel.Dock="Bottom" x:Name="statusSize">
                                        <ContentPresenter x:Name="StatusBarArea" Margin="{TemplateBinding StatusBarAreaMargin}"  Content="{TemplateBinding StatusBar}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </igWindows:DesiredSizeDecorator>

                                </DockPanel>
                                <igRibbon:RibbonWindowBorder
                 BorderThickness = "{TemplateBinding BorderThickness}"
                 BorderBrush = "{TemplateBinding BorderBrush}"
                 Name = "WindowBorder"
			/>
                                <!--<igWindows:CardPanel>-->
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="{Binding Path=ChildDesiredHeight, ElementName=ribbonSize}"/>
                                        <RowDefinition Height="*"/>
                                        <RowDefinition Height="{Binding Path=ChildDesiredHeight, ElementName=statusSize}"/>
                                    </Grid.RowDefinitions>

                                    <!-- Background (covers both content and statusbar areas -->
                                    <!--<Rectangle Grid.Row="1" Grid.RowSpan="2" Fill="{TemplateBinding Background}" Margin="{TemplateBinding BackgroundAreaMargin}"/>-->
                                    <Border x:Name="backgroundBorder" Grid.Row="1" Grid.RowSpan="2" Background="{TemplateBinding Background}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ContainerBorderFillKey}}" Margin="{TemplateBinding BackgroundAreaMargin}"/>

                                    <!-- Ribbon Area -->
                                    <!--<ContentPresenter Content ="{TemplateBinding Ribbon}" />-->

                                    <!-- Content Area-->
                                    <ContentPresenter x:Name="PART_Content" Grid.Row="1" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding ContentAreaMargin}"/>

                                    <!-- StatusBar Area -->
                                    <!--<ContentPresenter Grid.Row="2" Content ="{TemplateBinding StatusBar}" />-->

                                </Grid>

                                <!--</igWindows:CardPanel>-->
                                <!--</igRibbon:RibbonWindowBorder>-->
                            </igWindows:CardPanel>
                        </AdornerDecorator>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- JJD 05/27/10 - NA 2010 volume 2 - Scenic Ribbon supportt
                        added margin properties for all 3 areas so we don't need to use triggers -->
                        <!--<Trigger Property="BorderThickness" Value="0">
                            <Setter Property="Margin" TargetName="RibbonArea" Value="0" />
                            <Setter Property="Margin" TargetName="StatusBarArea" Value="0" />
                        </Trigger>-->

                        <!-- Glass is active - Make caption transparent -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                                <!-- AS 8/21/08 BR35778
                <Condition Binding="{Binding Path=CaptionVisibility, RelativeSource={RelativeSource TemplatedParent}}" Value="Visible" />-->
                                <Condition Binding="{Binding Path=CaptionVisibility, RelativeSource={x:Static RelativeSource.Self}}" Value="Visible" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="PART_XamRibbonCaption" Value="Transparent"/>
                            <Setter Property="Visibility" TargetName="captionButtonArea" Value="Hidden"/>
                        </MultiDataTrigger>

                        <!-- Toggle the Caption Styling when Inactive -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                                <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False" />
                                <!-- AS 8/21/08 BR35778
                <Condition Binding="{Binding Path=CaptionVisibility, RelativeSource={RelativeSource TemplatedParent}}" Value="Visible" />-->
                                <Condition Binding="{Binding Path=CaptionVisibility, RelativeSource={x:Static RelativeSource.Self}}" Value="Visible" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="PART_XamRibbonCaption" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.CaptionPanelInactiveFillKey}}" />
                        </MultiDataTrigger>

                        <!-- AS 6/29/12 Conditionally provide borders around the content -->
                        <Trigger Property="igRibbon:XamRibbon.IsGlassActive" Value="False">
                            <Setter Property="BorderThickness" TargetName="backgroundBorder" Value="1,0,1,1" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Ribbon.IsMinimized, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="backgroundBorder" Value="0,1,0,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Ribbon.AutoHideState, RelativeSource={RelativeSource Self}}" Value="Hidden" />
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="backgroundBorder" Value="0,1,0,0" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Ribbon.IsMinimized, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="backgroundBorder" Value="1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Ribbon.AutoHideState, RelativeSource={RelativeSource Self}}" Value="Hidden" />
                                <Condition Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="backgroundBorder" Value="1" />
                        </MultiDataTrigger>                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ========== Caption Button Styles ========== -->
    <!--LeftCaptionButton-->
    <Style x:Key="XamRibbonCaptionButton_Left" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="XamRibbonCaptionButton_Left" Background="#00000000">
                        <Border x:Name="BorderDark" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverBorderDarkFillKey}}" CornerRadius="3,3,3,3" SnapsToDevicePixels="True" Visibility="Hidden"/>
                        <Border x:Name="BorderLight" Margin="1,1,1,1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverBorderLightFillKey}}" CornerRadius="2,2,2,2" SnapsToDevicePixels="True" Visibility="Hidden"/>
                        <Border x:Name="Center" Margin="2,2,2,2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverCenterFillKey}}" CornerRadius="1,1,1,1" SnapsToDevicePixels="True" Visibility="Hidden"/>
                        <Border x:Name="Overlay1" Margin="2,2,2,2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverOverlayFillKey}}" SnapsToDevicePixels="True" Visibility="Hidden"/>
                        <Border x:Name="Overlay2" Margin="2,2,2,2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedTopOverlayFillKey}}" SnapsToDevicePixels="True" Visibility="Hidden"/>
                        <Grid x:Name="MinimizeGlyph" Width="11" Height="9" MinWidth="11" MinHeight="9" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Grid VerticalAlignment="Bottom" Width="11" Height="5">
                                <Path SnapsToDevicePixels="True" Margin="0" Data="M10.000002,4.0000005 L11.000002,4.0000005 L11.000002,5.0000005 L10.000002,5.0000005 z M1.1473896E-06,4.0000005 L1.0000012,4.0000005 L1.0000012,5.0000005 L1.1473896E-06,5.0000005 z M10.000002,1.639128E-07 L11.000002,1.639128E-07 L11.000002,1 L10.000002,1 z M0,0 L1,0 L1,1 L0,1 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMinimizeNormalBackgroundFillKey}}" Opacity="0.5" Stretch="Fill" Height="5" Width="11"/>
                                <Path SnapsToDevicePixels="True" Data="M0.99999994,0 L10,0 L10,0.55555564 L10,0.99999976 L11,0.99999976 L11,4 L10.000002,4 L10.000002,4.4444447 L10,5 L1.0000013,5 L1.0000013,4 L1.1473895E-06,4 L1.1473895E-06,4.4444447 L0,0.55555564 L1.1473895E-06,1.0000004 L1.0000013,1.0000004 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMinimizeNormalBackgroundFillKey}}" Stretch="Fill" Height="5" Width="11"/>
                                <Path SnapsToDevicePixels="True" Margin="1" Data="M0,0 L9,0 L9,7 L0,7 z" Fill="White" Stretch="Fill" Height="3" Width="9"/>
                            </Grid>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- AS 11/4/11 TFS91009 -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="MinimizeGlyph" Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BorderDark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BorderLight" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Center" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Overlay1" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BorderDark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BorderLight" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Center" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Overlay1" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Overlay2" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BorderDark" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedBorderDarkFillKey}}"/>
                            <Setter TargetName="BorderLight" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedBorderLightFillKey}}"/>
                            <Setter TargetName="Center" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedCenterFillKey}}"/>
                            <Setter TargetName="Overlay1" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedBottomOverlayFillKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- MiddleCaptionButton-->
    <Style x:Key="XamRibbonCaptionButton_Middle" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="XamRibbonCaptionButton_MiddleContainer" Background="#00000000">
                        <Border x:Name="BorderDark" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverBorderDarkFillKey}}" CornerRadius="3,3,3,3" SnapsToDevicePixels="True" Visibility="Hidden"/>
                        <Border x:Name="BorderLight" Margin="1,1,1,1" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverBorderLightFillKey}}" CornerRadius="2,2,2,2" SnapsToDevicePixels="True" Visibility="Hidden"/>
                        <Border x:Name="Center" Margin="2,2,2,2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverCenterFillKey}}" CornerRadius="1,1,1,1" SnapsToDevicePixels="True" Visibility="Hidden"/>
                        <Border x:Name="Overlay1" Margin="2,2,2,2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonHoverOverlayFillKey}}" SnapsToDevicePixels="True" Visibility="Hidden"/>
                        <Border x:Name="Overlay2" Margin="2,2,2,2" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedTopOverlayFillKey}}" SnapsToDevicePixels="True" Visibility="Hidden"/>
                        <Grid x:Name="Maximize" HorizontalAlignment="Center" VerticalAlignment="Center" IsHitTestVisible="False" Width="11" Height="9" MinWidth="11" MinHeight="9">
                            <Path SnapsToDevicePixels="True" Data="M4.000001,4 L4.000001,5 L7.000001,5 L7.000001,4 z M1,0 L10,0 L10,1 L11,1 L11,8 L10,8 L10,9 L1,9 L1,8 L0,8 L0,1 L1,1 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalBackgroundFillKey}}" Stretch="Fill" Width="11" Height="9"/>
                            <Path SnapsToDevicePixels="True" Margin="1" Data="M2,2 L2,5 7,5 7,2 z M0,0 L9,0 9,7 0,7 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalForegroundFillKey}}" Stretch="Fill" Width="9" Height="7"/>
                            <Path SnapsToDevicePixels="True" Margin="0" Data="M10,8 L11,8 L11,9 L10,9 z M0,8 L1,8 L1,9 L0,9 z M10,0 L11,0 L11,1.0000001 L10,1.0000001 z M0,0 L1,0 L1,1.0000001 L0,1.0000001 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalBackgroundFillKey}}" Opacity="0.5" Stretch="Fill" Width="11" Height="9"/>
                        </Grid>
                        <Grid x:Name="MaximizeRestore" Width="12" Height="11" MinWidth="12" MinHeight="11" HorizontalAlignment="Center" VerticalAlignment="Center" IsHitTestVisible="False" Visibility="Collapsed">
                            <Grid.Resources/>
                            <Path SnapsToDevicePixels="True" Margin="4,0,0,3" Data="M3.0000012,4 L3.0000012,5 L5.0000014,5 L5.0000014,4 z M1,0 L7,0 L7,1 L8,1 L8,7 L7,7 L7,8 L1,8 L1,7 L0,7 L0,1 L1,1 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalBackgroundFillKey}}" Stretch="Fill" Width="8" Height="8"/>
                            <Path SnapsToDevicePixels="True" Margin="5,1,1,4" Data="M1,2 L1,5 5,5 5,2 z M0,0 L6,0 6,6 0,6 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalForegroundFillKey}}" Stretch="Fill" Width="6" Height="6"/>
                            <Path SnapsToDevicePixels="True" Margin="4,0,0,3" Data="M7,7 L8,7 L8,8 L7,8 z M7,0 L8,0 L8,1 L7,1 z M0,0 L1,0 L1,1 L0,1 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalBackgroundFillKey}}" Opacity="0.5" Stretch="Fill" Width="8" Height="8"/>
                            <Path SnapsToDevicePixels="True" Margin="0,3,4,0" Data="M3.0000012,4 L3.0000012,5 L5.0000014,5 L5.0000014,4 z M1,0 L7,0 L7,1 L8,1 L8,7 L7,7 L7,8 L1,8 L1,7 L0,7 L0,1 L1,1 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalBackgroundFillKey}}" Stretch="Fill" Width="8" Height="8"/>
                            <Path SnapsToDevicePixels="True" Margin="1,4,5,1" Data="M1,2 L1,5 5,5 5,2 z M0,0 L6,0 6,6 0,6 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalForegroundFillKey}}" Stretch="Fill" Width="6" Height="6" />
                            <Path SnapsToDevicePixels="True" Margin="0,3,4,0" Data="M7,7 L8,7 L8,8 L7,8 z M0,7 L1,7 L1,8 L0,8 z M7,0 L8,0 L8,1 L7,1 z M0,0 L1,0 L1,1 L0,1 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalBackgroundFillKey}}" Opacity="0.5" Stretch="Fill" Width="8" Height="8"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                        </MultiDataTrigger>
                        <!-- Trigger that will hide the left two caption buttons when the ResizeMode of the window is NoResize-->
                        <DataTrigger Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Maximized">
                            <Setter TargetName="Maximize" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="MaximizeRestore" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Maximize" Property="Opacity" Value="0.5"/>
                            <Setter TargetName="MaximizeRestore" Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsActive, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsEnabled, ElementName=XamRibbonCaptionButton_Middle}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BorderDark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BorderLight" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Center" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Overlay1" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BorderDark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BorderLight" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Center" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Overlay1" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Overlay2" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BorderDark" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedBorderDarkFillKey}}"/>
                            <Setter TargetName="BorderLight" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedBorderLightFillKey}}"/>
                            <Setter TargetName="Center" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedCenterFillKey}}"/>
                            <Setter TargetName="Overlay1" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonPressedBottomOverlayFillKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- RightCaptionButton -->
    <Style x:Key="XamRibbonCaptionButton_Right" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="0,2,2,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="XamRibbonCaptionButton_Right" Background="#00000000">
                        <Border x:Name="BorderDark" Background="{DynamicResource {ComponentResourceKey {x:Type igRibbon:XamRibbon}, XamRibbonCaptionCloseButtonHoverBorderFillKey}}" CornerRadius="3,3,3,3" SnapsToDevicePixels="True" Visibility="Hidden"/>
                        <!-- -->
                        <Border x:Name="BorderLight" Margin="1,1,1,1" Background="{DynamicResource {ComponentResourceKey {x:Type igRibbon:XamRibbon}, XamRibbonCaptionCloseButtonHoverBorderLightFillKey}}" CornerRadius="2,2,2,2" SnapsToDevicePixels="True" Visibility="Hidden"/>
                        <Border x:Name="Center" Margin="2,2,2,2" Background="{DynamicResource {ComponentResourceKey {x:Type igRibbon:XamRibbon}, XamRibbonCaptionCloseButtonHoverCenterFillKey}}" CornerRadius="1,1,1,1" SnapsToDevicePixels="True" Visibility="Hidden"/>
                        <Grid x:Name="CloseGlyph" Width="11" Height="9" MinWidth="11" MinHeight="9">
                            <Path x:Name="CloseGlyphOuter" Data="M10.000001,7 L11,7 L11,8 L10.000001,8 z M4.000001,7 L5,7 L5,8 L4.000001,8 z M9.000001,6 L10,6 L10,7 L9.000001,7 z M5.000001,6 L6.000001,6 L6.000001,7 L7.000001,7 L7.000001,8 L8.000001,8 L9.000001,8 L10,8 L10,9 L7,9 L7,8 L6,8 L6,7 L5.000001,7 z M8.000001,5 L9,5 L9,6 L8.000001,6 z M7.000001,4 L8,4 L8,5 L7.000001,5 z M8.000001,3.0000002 L9,3.0000002 L9,4 L8.000001,4 z M9.000001,1.9999999 L10,1.9999999 L10,3 L9.000001,3 z M10.000001,1 L11,1 L11,1.9999999 L10.000001,1.9999999 z M4.000001,1 L5,1 L5,1.9999999 L4.000001,1.9999999 z M7,0 L10,0 L10,0.99999988 L7.000001,1 L7.000001,1.9999999 L6.000001,1.9999999 L6.000001,3.0000002 L5.000001,3.0000002 L5.000001,1.9999999 L6,1.9999999 L6,1 L7,1 z M1.0000002,0 L4,0 L4,0.99999988 L1.0000007,0.99999988 L1.0000007,1.9999999 L2.0000007,1.9999999 L2.0000007,3.0000002 L3.0000007,3.0000002 L3.0000007,4 L4.000001,4 L4.000001,5 L3.0000007,5 L3.0000007,6 L2.0000007,6 L2.0000007,7 L1.0000007,7 L1.0000007,8 L2.0000007,8 L3.0000007,8 L4,8 L4,9 L1.0000002,9 L1.0000002,8 L0,8 L0,7 L1.0000002,7 L1.0000002,6 L1.9999999,6 L1.9999999,5 L3,5 L3,4 L1.9999999,4 L1.9999999,3 L1.0000002,3 L1.0000002,1.9999999 L0,1.9999999 L0,1 L1.0000002,1 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalBackgroundFillKey}}" Stretch="Fill" SnapsToDevicePixels="True" Width="11" Height="9"/>
                            <Path x:Name="CloseGlyphOuter2" Data="M10.000005,8 L11.000005,8 L11.000005,9 L10.000005,9 z M6.0000048,8 L7.0000048,8 L7.0000048,9 L6.0000048,9 z M4.0000048,8 L5.0000048,8 L5.0000048,9 L4.0000048,9 z M0,7.999999 L1,7.999999 L1,8.999999 L0,8.999999 z M5.0000048,7 L6.0000048,7 L6.0000048,8 L5.0000048,8 z M10.000005,6 L11.000005,6 L11.000005,7 L10.000005,7 z M4.5895595E-06,6 L1.0000045,6 L1.0000045,7 L4.5895595E-06,7 z M9.0000048,5 L10.000005,5 L10.000005,6 L9.0000048,6 z M8.0000048,4 L9.0000048,4 L9.0000048,5 L8.0000048,5 z M2.0000045,4 L3.0000045,4 L3.0000045,5 L2.0000048,5 L2.0000048,6 L1.0000048,6 L1.0000048,5 L2.0000045,5 z M9.0000048,3 L10.000005,3 L10.000005,4 L9.0000048,4 z M1.0000048,3 L2.0000048,3 L2.0000048,4 L1.0000048,4 z M10.000005,2 L11.000005,2 L11.000005,3 L10.000005,3 z M4.5895595E-06,2 L1.0000045,2 L1.0000045,3 L4.5895595E-06,3 z M5.0000048,1 L6.0000048,1 L6.0000048,2 L5.0000048,2 z M10.000005,0 L11.000005,0 L11.000005,1 L10.000005,1 z M6.0000048,0 L7.0000048,0 L7.0000048,1 L6.0000048,1 z M4.0000048,0 L5.0000048,0 L5.0000048,1 L4.0000048,1 z M4.5895595E-06,0 L1.0000045,0 L1.0000045,1 L4.5895595E-06,1 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalBackgroundFillKey}}" Opacity="0.5" RenderTransformOrigin="0.426181651816953,0.93755542403975" Stretch="Fill" SnapsToDevicePixels="True" Width="11" Height="9"/>
                            <Path x:Name="CloseGlyphInner" Margin="1" Data="M0,0 L3,0 L3,1.0000001 L4,1.0000001 L4,2.0000002 L5,2.0000002 L5,1.0000001 L6,1.0000001 L6,1.3411045E-07 L9,0 L9,1.0000001 L8,1.0000001 L8,2.0000002 L7,2.0000002 L7,3.0000002 L6,3.0000002 L6,4 L7,4 L7,5 L8,5 L8,6 L9,6 L9,7 L8,7 L7,7 L6,7 L6,6 L5,6 L5,5 L4,5 L4,6 L3,6 L3,7 L2,7 L1,7 L0,7 L0,6 L1,6 L1,5 L2,5 L2,4 L3,4 L3,3.0000002 L2,3.0000002 L2,2.0000002 L1,2.0000002 L0.99999994,1.0000001 L0,1.0000001 z" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalForegroundFillKey}}" Stretch="Fill" SnapsToDevicePixels="True" Width="9" Height="7"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="CloseGlyph" Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BorderDark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BorderLight" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Center" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="CloseGlyphOuter" Property="Fill" Value="{DynamicResource {ComponentResourceKey {x:Type igRibbon:XamRibbon}, XamRibbonCaptionCloseButtonHoverBorderFillKey}}"/>
                            <Setter TargetName="CloseGlyphOuter2" Property="Fill" Value="{DynamicResource {ComponentResourceKey {x:Type igRibbon:XamRibbon}, XamRibbonCaptionCloseButtonHoverBorderFillKey}}"/>
                            <Setter TargetName="CloseGlyphOuter2" Property="Opacity" Value="0.6"/>
                            <Setter TargetName="CloseGlyphInner" Property="Opacity" Value="0.6"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BorderDark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BorderLight" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Center" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="CloseGlyphOuter" Property="Fill" Value="{DynamicResource {ComponentResourceKey {x:Type igRibbon:XamRibbon}, XamRibbonCaptionCloseButtonPressedBorderFillKey}}"/>
                            <Setter TargetName="CloseGlyphOuter2" Property="Fill" Value="{DynamicResource {ComponentResourceKey {x:Type igRibbon:XamRibbon}, XamRibbonCaptionCloseButtonPressedBorderFillKey}}"/>
                            <Setter TargetName="CloseGlyphOuter2" Property="Opacity" Value="0.6"/>
                            <Setter TargetName="CloseGlyphInner" Property="Opacity" Value="0.6"/>
                            <Setter TargetName="BorderDark" Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igRibbon:XamRibbon}, XamRibbonCaptionCloseButtonPressedBorderFillKey}}"/>
                            <Setter TargetName="BorderLight" Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igRibbon:XamRibbon}, XamRibbonCaptionCloseButtonPressedBorderLightFillKey}}"/>
                            <Setter TargetName="Center" Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igRibbon:XamRibbon}, XamRibbonCaptionCloseButtonPressedCenterFillKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="{ComponentResourceKey {x:Type igRibbon:XamRibbon}, CaptionButtonAreaTemplate}" TargetType="{x:Type Control}">
        <StackPanel x:Name="captionButtonPanel" MinHeight="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).MinCaptionHeight, RelativeSource={RelativeSource TemplatedParent}}" Margin="1,1,1,0" Orientation="Horizontal">
            <Button x:Name="XamRibbonCaptionButton_Left" Focusable="False" Style="{StaticResource XamRibbonCaptionButton_Left}"
				    Width="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonWidth, RelativeSource={RelativeSource TemplatedParent}}"
                    Height="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonHeight, RelativeSource={RelativeSource TemplatedParent}}"
				    Command="igRibbon:RibbonWindowCommands.MinimizeCommand"
                    CommandTarget="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}}}" MinWidth="11" MinHeight="15"/>

            <Button x:Name="XamRibbonCaptionButton_Middle" Focusable="False" Style="{StaticResource XamRibbonCaptionButton_Middle}"
                    Width="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonWidth, RelativeSource={RelativeSource TemplatedParent}}"
                    Height="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonHeight, RelativeSource={RelativeSource TemplatedParent}}"
                    Command="igRibbon:RibbonWindowCommands.MaximizeCommand"
                    CommandTarget="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}}}" MinWidth="11" MinHeight="15"/>

            <Button x:Name="XamRibbonCaptionButton_Right" Focusable="False" Style="{StaticResource XamRibbonCaptionButton_Right}"
                    Width="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonWidth, RelativeSource={RelativeSource TemplatedParent}}"
                    Height="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonHeight, RelativeSource={RelativeSource TemplatedParent}}"
                    Command="igRibbon:RibbonWindowCommands.CloseCommand"
                    CommandTarget="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type Window}}}" MinWidth="11" MinHeight="15"/>
        </StackPanel>
        <ControlTemplate.Triggers>
            <!-- Trigger that will hide the left two caption buttons when the ResizeMode of the window is NoResize-->
            <DataTrigger Binding="{Binding Path=ResizeMode, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="NoResize">
                <Setter TargetName="XamRibbonCaptionButton_Left" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="XamRibbonCaptionButton_Middle" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <!-- The CaptionButtonAreaWidth is really only used when glass is active. for all other cases we can
					 let the panel determine the width based on the buttons within. Otherwise this property must
					 also make the same check as above for when the caption buttons would be hidden-->
            <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsGlassActive), RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                <!-- JJD 8/25/11 - TFS84336
						 Instead of binding to the Width of the captionButtonPanel bind to the Width of the templated parent so that when
						 IsGlassActive reverts to false the templated parent's measure will get invalidated -->
                <!--<Setter TargetName="captionButtonPanel" Property="Width" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonAreaWidth, RelativeSource={RelativeSource TemplatedParent}}" />-->
                <Setter Property="Width" Value="{Binding Path=(igRibbon:RibbonWindowContentHost.ContentHost).CaptionButtonAreaWidth, RelativeSource={RelativeSource TemplatedParent}}"/>
            </DataTrigger>
            <!-- Trigger that will change the command of the middle button to restore a maximized window -->
            <DataTrigger Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, {x:Type Window}, 1}}" Value="Maximized">
                <Setter TargetName="XamRibbonCaptionButton_Middle" Property="Command" Value="igRibbon:RibbonWindowCommands.RestoreCommand"/>
            </DataTrigger>
            <!-- JJD 05/17/10 - NA 2010 Volume 2 - Scenic Ribbon support-->
            <DataTrigger Binding="{Binding Path=(igRibbon:XamRibbon.IsScenicTheme), RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                <Setter TargetName="XamRibbonCaptionButton_Left" Property="Style" Value="{DynamicResource {x:Static igRibbon:RibbonWindowContentHost.ScenicMinimizeButtonStyleKey}}"/>
                <Setter TargetName="XamRibbonCaptionButton_Middle" Property="Style" Value="{DynamicResource {x:Static igRibbon:RibbonWindowContentHost.ScenicMaximizeRestoreButtonStyleKey}}"/>
                <Setter TargetName="XamRibbonCaptionButton_Right" Property="Style" Value="{DynamicResource {x:Static igRibbon:RibbonWindowContentHost.ScenicCloseWindowButtonStyleKey}}"/>
                <Setter TargetName="captionButtonPanel" Property="Margin" Value="1,4,5,0"/>
            </DataTrigger>
            <!--<Trigger SourceName="MiddleCaptionButton" Property="IsPressed" Value="True">
							<Setter Property="Fill" TargetName="MaximizeBackground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalBackgroundFillKey}}"/>
							<Setter Property="Fill" TargetName="MaximizeForeground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.XamRibbonCaptionButtonIconMaxCloseNormalForegroundFillKey}}"/>
						</Trigger>-->
            <!-- AS 11/4/11 TFS91009 -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" SourceName="XamRibbonCaptionButton_Left" Value="False"/>
                    <Condition Property="IsEnabled" SourceName="XamRibbonCaptionButton_Middle" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="XamRibbonCaptionButton_Left" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="XamRibbonCaptionButton_Middle" Property="Visibility" Value="Collapsed"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
	

	  <!-- =================================================================== -->
    <!-- ApplicationMenu2010Separator Style -->
    <!-- =================================================================== -->
    <Style TargetType="igRibbon:ApplicationMenu2010Separator">
        <Setter Property="Padding" Value="0,2,6,3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igRibbon:ApplicationMenu2010Separator">
                    <igWindows:CardPanel SnapsToDevicePixels="true" Margin="{TemplateBinding Padding}">
                    	<Grid RenderTransformOrigin="0.46,0.46">
                    		<Grid.RenderTransform>
                    			<RotateTransform CenterX="0.5"  CenterY="0.5" Angle="180" />         		
							</Grid.RenderTransform>
							<Rectangle Height="1" Margin="0,2,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.HorizontalSeparatorNormalLightFillKey}}" SnapsToDevicePixels="true" />
                       		<Rectangle Height="1" Margin="0,0,0,0" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.HorizontalSeparatorNormalDarkFillKey}}" SnapsToDevicePixels="true" />
                        	<Rectangle Height="1" Margin="0,0,0,2" Fill="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.HorizontalSeparatorNormalLightFillKey}}" SnapsToDevicePixels="true" />
                   </Grid>
				    </igWindows:CardPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="igRibbon:ApplicationMenu2010FileTab" BasedOn="{StaticResource {x:Type igRibbon:ApplicationMenu2010FileTab}}">
        <Setter Property="Margin" Value="0,1,0,-1" />
    </Style>
    
    <!-- ********************************** ComboBoxItem Style **********************************-->
    <Style x:Key="ComboBoxItemStyle" TargetType="ComboBoxItem">
        <Setter Property="Padding" Value="5,3,5,3"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{StaticResource TransparentBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Grid Background="{TemplateBinding Background}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="hoverBorder">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible
                                                    </Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.5" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter" d:IsOptimized="True"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="SelectionStates">
                                <VisualState x:Name="Unselected"/>
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="SelectedBorder">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible
                                                    </Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="SelectedUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="SelectedBorder">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible
                                                    </Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="FocusVisualElement">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused"/>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="LayoutStates">
                                <VisualState x:Name="AfterLoaded"/>
                                <VisualState x:Name="BeforeLoaded"/>
                                <VisualState x:Name="BeforeUnloaded"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="hoverBorder" Background="{StaticResource ComboBoxItemHoverBackgroundBrush}" BorderBrush="{StaticResource ComboBoxItemHoverBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Visibility="Collapsed" CornerRadius="2">
                            <Rectangle Stroke="{StaticResource ComboBoxItemHoverHighlightBorderBrush}" StrokeThickness="1" RadiusX="1" RadiusY="1"/>
                        </Border>
                        <Border x:Name="SelectedBorder" Background="{StaticResource ComboBoxItemSelectedBackgroundBrush}" BorderBrush="{StaticResource ComboBoxItemSelectedBorderBrush}" CornerRadius="2" BorderThickness="{TemplateBinding BorderThickness}" Visibility="Collapsed" IsHitTestVisible="False"/>
                        <Rectangle x:Name="FocusVisualElement" Stroke="{StaticResource ComboBoxItemFocusedBorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" Visibility="Collapsed" RadiusX="2" RadiusY="2"/>
                        <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- *********************************  ComboEditorTool Style  ********************************* -->
    <Style TargetType="{x:Type igRibbon:ComboEditorTool}">
        <Setter Property="ToolTipService.ShowDuration" Value="20000" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2,2,2,2" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="DropDownButtonStyle" Value="{StaticResource ComboEditor_DropDownButtonStyle}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igRibbon:ComboEditorTool}">
                    <!-- JM 09-05-18 TFS254718 - Change the StackPanel to a grid and bind the Width of the column containing the ComboBox to the EditAreaWidth property. -->
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="{TemplateBinding Property=EditAreaWidth}"/>
                        </Grid.ColumnDefinitions>
                        <igWindows:AutoDisabledImage Grid.Column="0" Width="16" Height="16" x:Name="Image" igRibbon:XamRibbon.KeyTipPlacementType="SmallImage" igWindows:Utilities.SnapElementToDevicePixels="True" Visibility="Collapsed" Source="{TemplateBinding igRibbon:TextEditorTool.ImageResolved}" />
                        <ContentPresenter x:Name="Caption" Grid.Column="1" Margin="0,0,5,0" Visibility="{Binding Path=(igRibbon:ButtonTool.HasCaption), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" VerticalAlignment="{TemplateBinding VerticalAlignment}" Content="{TemplateBinding Caption, Converter={StaticResource stringWithoutMnemonicsConverter}}" />
                        <Border x:Name="MainBorder" Grid.Column="2" SnapsToDevicePixels="True" Background="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalCenterFillKey}}" BorderBrush="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsNormalBorderFillKey}}" BorderThickness="1,1,1,1" Width="{TemplateBinding EditAreaWidth}" CornerRadius="0,0,0,0">
                            <Grid>
                                <ComboBox Name="PART_FocusSite" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{TemplateBinding ReadOnly}" Background="Transparent" BorderBrush="Transparent" BorderThickness="0,0,0,0" ContextMenu="{TemplateBinding ContextMenu}" IsDropDownOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{TemplateBinding ComboBoxStyle}" IsEditable="{TemplateBinding IsEditable}" SelectedValuePath="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsProvider.ValuePath}" DisplayMemberPath="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsProvider.DisplayMemberPath}" MaxDropDownHeight="{TemplateBinding MaxDropDownHeight}" igEditors:XamComboEditor.ComboEditor="{Binding RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}" InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}" InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}" ItemContainerStyle="{StaticResource ComboBoxItemStyle}"/>

                                <Grid Name="TextBlockGrid">
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <TextBlock x:Name="TextBlock" Grid.Column="0" Padding="{TemplateBinding Padding}" Margin="1,0,0,0" Text="{TemplateBinding DisplayText}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                    <ToggleButton x:Name="DropDownButton" Grid.Column="1" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" ClickMode="Press" IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{TemplateBinding DropDownButtonStyle}" Visibility="Visible" IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}" />
                                </Grid>
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Location, RelativeSource={RelativeSource Self}, Converter={x:Static igRibbon:ToolLocationToIsInMenuConverter.Instance}}" Value="True" />
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, {x:Type igRibbon:ToolMenuItem}, 1}}" Value="True" />
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Caption" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.TextHottrackFillKey}}" />
                        </MultiDataTrigger>

                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolInQATForegroundTextFillKey}}" />
                            <Setter TargetName="TextBlock" Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                        </Trigger>

                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter Property="Margin" Value="6,0,0,0" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="MainBorder" Property="Background" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledCenterFillKey}}" />
                            <Setter TargetName="MainBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsDisabledBorderFillKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolDisabledForegroundTextFillKey}}" />
                        </Trigger>

                        <Trigger SourceName="MainBorder" Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="MainBorder">
                            <Setter TargetName="DropDownButton" Property="Tag" Value="MouseOverControlTrue" />
                        </Trigger>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="Background" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverCenterFillKey}}" />
                            <Setter Property="BorderBrush" TargetName="MainBorder" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.EditorsHoverBorderFillKey}}" />
                            <Setter TargetName="PART_FocusSite" Property="Visibility" Value="Visible" />
                            <Setter TargetName="TextBlock" Property="Visibility" Value="Collapsed" />
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                        <Trigger Property="Location" Value="Ribbon">
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="ApplicationMenuFooterToolbar">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igRibbon:RibbonBrushKeys.ToolEnabledForegroundTextFillKey}}" />
                            <Setter TargetName="Image" Property="Visibility" Value="{Binding Path=(igRibbon:ButtonTool.HasImage), RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource BoolToVisConverter}}" />
                        </Trigger>
                        <Trigger Property="Location" Value="QuickAccessToolbar">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter TargetName="MainBorder" Property="CornerRadius" Value="1" />
                        </Trigger>
                        <Trigger Property="igRibbon:XamRibbon.HideAccessKey" Value="False">
                            <Setter TargetName="Caption" Property="RecognizesAccessKey" Value="True" />
                            <Setter TargetName="Caption" Property="Content" Value="{Binding Path=Caption, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="igRibbon:RibbonToolHelper.SizingMode" Value="ImageOnly">
                            <Setter TargetName="Caption" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
            </MultiTrigger>
            <Trigger Property="IsInEditMode" Value="True">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    
</ResourceDictionary>