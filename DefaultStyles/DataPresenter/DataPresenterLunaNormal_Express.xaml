<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:igWindows="http://infragistics.com/Windows"
	xmlns:editors="http://infragistics.com/Editors"
	xmlns:igDP="http://infragistics.com/DataPresenter"
	xmlns:themes="http://infragistics.com/Themes"
	xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
	xmlns:d="http://schemas.microsoft.com/expression/interactivedesigner/2006"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d">

  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="DataPresenterGeneric_Express.xaml"/>
    <ResourceDictionary Source="DataPresenterLunaNormal_Brushes.xaml"/>
  </ResourceDictionary.MergedDictionaries>

  <!-- ____________________________________________________________________________ -->
  <!--                                                                              -->
  <!--                             Converters                                       -->
  <!-- ____________________________________________________________________________ -->
  <igDP:TextAlignmentToHorizontalAlignmentConverter x:Key="textAlignmentToHorizontalAlignmentConverter"/>
  <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>

  <!--SSP 10/16/09 TFS19525 - Added StringFormatConverter-->
  <igWindows:StringFormatConverter x:Key="stringFormatConverter" />

  <!-- ____________________________________________________________________________ -->
  <!--                                                                              -->
  <!--                             Storyboards                                      -->
  <!-- ____________________________________________________________________________ -->
  <Storyboard PresentationOptions:Freeze="true" x:Key="ExpandLabel">
    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleX)" BeginTime="0:0:0">
      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1"/>
    </DoubleAnimationUsingKeyFrames>
  </Storyboard>
  <Storyboard PresentationOptions:Freeze="true" x:Key="CollapseLabel">
    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleX)" BeginTime="0:0:00">
      <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
    </DoubleAnimationUsingKeyFrames>
  </Storyboard>
  <!-- ____________________________________________________________________________ -->
  <!--                                                                              -->
  <!--                             End of Storyboards                               -->
  <!-- ____________________________________________________________________________ -->

  <!-- *********************************  ScrollBars  ********************************* -->
  <Style x:Key="VerticalScrollBarButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="Focusable" Value="false"/>
    <Setter Property="IsTabStop" Value="false"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid Background="Transparent">
            <Border Visibility="Collapsed" x:Name="ButtonBackground" Background="{StaticResource RepeatBtnHoverBackgroundBrush}" BorderBrush="{StaticResource RepeatBtnHoverBorderBrush}" BorderThickness="1" CornerRadius="1"/>
            <ContentPresenter/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Visibility" TargetName="ButtonBackground" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter Property="Visibility" TargetName="ButtonBackground" Value="Visible"/>
              <Setter Property="Background" TargetName="ButtonBackground" Value="{StaticResource RepeatBtnPressedBackgroundBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="HorizScrollBarButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="Focusable" Value="false"/>
    <Setter Property="IsTabStop" Value="false"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid Background="Transparent">
            <Border Visibility="Collapsed" x:Name="ButtonBackground" Background="{StaticResource HorizRepeatBtnHoverBackgroundBrush}" BorderBrush="{StaticResource HorizRepeatBtnHoverBorderBrush}" BorderThickness="1" CornerRadius="1"/>
            <ContentPresenter/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Visibility" TargetName="ButtonBackground" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter Property="Visibility" TargetName="ButtonBackground" Value="Visible"/>
              <Setter Property="Background" TargetName="ButtonBackground" Value="{StaticResource HorizRepeatBtnPressedBackgroundBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="VerticalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Focusable" Value="false"/>
    <Setter Property="IsTabStop" Value="false"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="HorizontalScrollBarThumb" TargetType="{x:Type Thumb}">
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="IsTabStop" Value="false"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid Width="Auto" Height="Auto">
            <Rectangle x:Name="ThumbBackground" Stroke="{StaticResource RepeatBtnBorderBrush}" Fill="{StaticResource HorizRepeatBtnNormalBackgroundBrush}" RadiusX="1" RadiusY="1" Margin="0"/>
            <Path Width="7" Height="8" Data="M 0,6 C0,6 0,7 0,7 0,7 8,7 8,7 8,7 8,6 8,6 8,6 0,6 0,6 zM 0,4 C0,4 0,5 0,5 0,5 8,5 8,5 8,5 8,4 8,4 8,4 0,4 0,4 zM 0,2 C0,2 0,3 0,3 0,3 8,3 8,3 8,3 8,2 8,2 8,2 0,2 0,2 zM 0,0 C0,0 0,1 0,1 0,1 8,1 8,1 8,1 8,0 8,0 8,0 0,0 0,0 z" Fill="{StaticResource ScrollBarThumbGlyphDarkBrush}" RenderTransformOrigin="0.5,0.5" Stretch="Uniform">
              <Path.RenderTransform>
                <TransformGroup>
                  <ScaleTransform/>
                  <SkewTransform/>
                  <RotateTransform Angle="90"/>
                  <TranslateTransform/>
                </TransformGroup>
              </Path.RenderTransform>
            </Path>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Fill" TargetName="ThumbBackground" Value="{StaticResource HorizRepeatBtnHoverBackgroundBrush}"/>
              <Setter Property="Stroke" TargetName="ThumbBackground" Value="{StaticResource HorizRepeatBtnHoverBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
              <Setter Property="Fill" TargetName="ThumbBackground" Value="{StaticResource HorizRepeatBtnPressedBackgroundBrush}"/>
              <Setter Property="Stroke" TargetName="ThumbBackground" Value="{StaticResource HorizRepeatBtnHoverBorderBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="VerticalScrollBarThumb" TargetType="{x:Type Thumb}">
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="IsTabStop" Value="false"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid Width="Auto" Height="Auto">
            <Rectangle x:Name="ThumbBackground" Stroke="{StaticResource RepeatBtnBorderBrush}" Fill="{StaticResource RepeatBtnNormalBackgroundBrush}" RadiusX="1" RadiusY="1" Margin="0"/>
            <Path Width="7" Height="8" Data="M 0,6 C0,6 0,7 0,7 0,7 8,7 8,7 8,7 8,6 8,6 8,6 0,6 0,6 zM 0,4 C0,4 0,5 0,5 0,5 8,5 8,5 8,5 8,4 8,4 8,4 0,4 0,4 zM 0,2 C0,2 0,3 0,3 0,3 8,3 8,3 8,3 8,2 8,2 8,2 0,2 0,2 zM 0,0 C0,0 0,1 0,1 0,1 8,1 8,1 8,1 8,0 8,0 8,0 0,0 0,0 z" Fill="{StaticResource ScrollBarThumbGlyphDarkBrush}" RenderTransformOrigin="0.5,0.5" Stretch="Uniform">
            </Path>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Fill" TargetName="ThumbBackground" Value="{StaticResource RepeatBtnHoverBackgroundBrush}"/>
              <Setter Property="Stroke" TargetName="ThumbBackground" Value="{StaticResource RepeatBtnHoverBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
              <Setter Property="Fill" TargetName="ThumbBackground" Value="{StaticResource RepeatBtnPressedBackgroundBrush}"/>
              <Setter Property="Stroke" TargetName="ThumbBackground" Value="{StaticResource RepeatBtnHoverBorderBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="HorizontalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Focusable" Value="false"/>
    <Setter Property="IsTabStop" Value="false"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="LunaNormalScrollbar" TargetType="{x:Type ScrollBar}">
    <Setter Property="Background" Value="{StaticResource ScrollBarTrackBrush}"/>
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
    <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid x:Name="Bg" SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
              <RowDefinition Height="0.00001*"/>
              <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
            </Grid.RowDefinitions>
            <Rectangle Grid.RowSpan="3" StrokeThickness="1" Fill="{StaticResource ScrollBarTrackBrush}" Stroke="{StaticResource ScrollBarTrackBorderBrush}" Margin="0"/>
            <RepeatButton Style="{StaticResource VerticalScrollBarButton}" IsEnabled="{TemplateBinding IsMouseOver}" Command="{x:Static ScrollBar.LineUpCommand}">
              <Path Width="8" Height="4" Data="M 0,3 C0,3 0,4 0,4 0,4 8,4 8,4 8,4 8,3 8,3 8,3 7,3 7,3 7,3 7,2 7,2 7,2 6,2 6,2 6,2 6,1 6,1 6,1 5,1 5,1 5,1 5,0 5,0 5,0 3,0 3,0 3,0 3,1 3,1 3,1 2,1 2,1 2,1 2,2 2,2 2,2 1,2 1,2 1,2 1,3 1,3 1,3 0,3 0,3 z" Fill="{StaticResource ScrollBarGlyphFillBrush}"/>
            </RepeatButton>
            <Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1" IsDirectionReversed="true">
              <Track.DecreaseRepeatButton>
                <RepeatButton Style="{StaticResource VerticalScrollBarPageButton}" Command="{x:Static ScrollBar.PageUpCommand}"/>
              </Track.DecreaseRepeatButton>
              <Track.IncreaseRepeatButton>
                <RepeatButton Style="{StaticResource VerticalScrollBarPageButton}" Command="{x:Static ScrollBar.PageDownCommand}"/>
              </Track.IncreaseRepeatButton>
              <Track.Thumb>
                <Thumb Style="{StaticResource VerticalScrollBarThumb}"/>
              </Track.Thumb>
            </Track>
            <RepeatButton Style="{StaticResource VerticalScrollBarButton}" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2" Command="{x:Static ScrollBar.LineDownCommand}">
              <Path Width="8" Height="4" Data="M 0,0 C0,0 0,1 0,1 0,1 1,1 1,1 1,1 1,2 1,2 1,2 2,2 2,2 2,2 2,3 2,3 2,3 3,3 3,3 3,3 3,4 3,4 3,4 5,4 5,4 5,4 5,3 5,3 5,3 6,3 6,3 6,3 6,2 6,2 6,2 7,2 7,2 7,2 7,1 7,1 7,1 8,1 8,1 8,1 8,0 8,0 8,0 0,0 0,0 z" Fill="{StaticResource ScrollBarGlyphFillBrush}"/>
            </RepeatButton>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
        <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
        <Setter Property="Background" Value="{StaticResource HorizontalScrollBarTrackBrush}"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollBar}">
              <Grid x:Name="Bg" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                  <ColumnDefinition Width="0.00001*"/>
                  <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                </Grid.ColumnDefinitions>
                <Rectangle StrokeThickness="1" Fill="{StaticResource ScrollBarTrackBrush}" Stroke="{StaticResource ScrollBarTrackBorderBrush}" Margin="0" Grid.ColumnSpan="3"/>
                <RepeatButton Style="{StaticResource HorizScrollBarButton}" IsEnabled="{TemplateBinding IsMouseOver}" Command="{x:Static ScrollBar.LineLeftCommand}">
                  <Path Width="4" Height="8" Data="M 4,0 C4,0 3,0 3,0 3,0 3,1 3,1 3,1 2,1 2,1 2,1 2,2 2,2 2,2 1,2 1,2 1,2 1,3 1,3 1,3 0,3 0,3 0,3 0,5 0,5 0,5 1,5 1,5 1,5 1,6 1,6 1,6 2,6 2,6 2,6 2,7 2,7 2,7 3,7 3,7 3,7 3,8 3,8 3,8 4,8 4,8 4,8 4,0 4,0 z" Fill="{StaticResource ScrollBarGlyphFillBrush}" Stretch="Fill"/>
                </RepeatButton>
                <Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Column="1">
                  <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource HorizontalScrollBarPageButton}" Command="{x:Static ScrollBar.PageLeftCommand}"/>
                  </Track.DecreaseRepeatButton>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource HorizontalScrollBarPageButton}" Command="{x:Static ScrollBar.PageRightCommand}"/>
                  </Track.IncreaseRepeatButton>
                  <Track.Thumb>
                    <Thumb Style="{StaticResource HorizontalScrollBarThumb}"/>
                  </Track.Thumb>
                </Track>
                <RepeatButton Style="{StaticResource HorizScrollBarButton}" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}">
                  <Path Width="4" Height="8" Fill="{StaticResource ScrollBarGlyphFillBrush}" Stretch="Fill" Data="M 0,0 C0,0 1,0 1,0 1,0 1,1 1,1 1,1 2,1 2,1 2,1 2,2 2,2 2,2 3,2 3,2 3,2 3,3 3,3 3,3 4,3 4,3 4,3 4,5 4,5 4,5 3,5 3,5 3,5 3,6 3,6 3,6 2,6 2,6 2,6 2,7 2,7 2,7 1,7 1,7 1,7 1,8 1,8 1,8 0,8 0,8 0,8 0,0 0,0 z"/>
                </RepeatButton>
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="false">
                  <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource LunaNormalScrollbar}"/>

  <Style x:Key="LunaNormalScrollViewer" TargetType="{x:Type ScrollViewer}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid x:Name="Grid" Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Rectangle x:Name="Corner" Grid.Column="1" Fill="{StaticResource HorizontalScrollBarTrackBrush}" Grid.Row="1"/>
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
            <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Style="{StaticResource LunaNormalScrollbar}"/>
            <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Style="{StaticResource LunaNormalScrollbar}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource LunaNormalScrollViewer}"/>

  <!-- _________________________ LabelContent Style______________________________________ -->
  <Style x:Key="LabelContentStyle" TargetType="{x:Type ContentControl}">
    <Setter Property="Padding" Value="0,3,0,3"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContentControl}">
          <ContentPresenter
  Margin="{TemplateBinding Padding}"
  Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
  ContentTemplate="{TemplateBinding ContentTemplate}"
  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- _________________________ BlackForegroundStyle ______________________________________ -->
  <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, BlackForegroundStyle}">
    <Setter Property="TextBlock.Foreground" Value="#FF000000" />
  </Style>

  <!-- RecordSeparatorStyle-->
  <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, RecordSeparatorStyle}" TargetType="{x:Type Border}">
    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GroupByNavBackground}}"/>
    <Setter Property="HorizontalAlignment" Value="Stretch"/>
    <Setter Property="VerticalAlignment" Value="Stretch"/>
    <Setter Property="Height" Value="6"/>
    <Setter Property="BorderThickness" Value="0,1,0,1"/>
    <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupBorder}}"/>
  </Style>

  <!-- _________________________ CellValuePresenter __________________________________________ -->
  <Style TargetType="{x:Type igDP:CellValuePresenter}" BasedOn="{x:Static themes:DataPresenterGeneric.CellValuePresenter}">
    <Setter Property="BorderBrush" Value="#FFEDEDED"/>
    <Setter Property="BackgroundHover" Value="#00EDEDED"/>
    <Setter Property="BorderHoverBrush" Value="#00EDEDED"/>
    <Setter Property="BackgroundActive">
      <Setter.Value>
        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
          <GradientStop Color="#59FFFFFF" Offset="0"/>
          <GradientStop Color="#00FFFFFF" Offset="1"/>
        </LinearGradientBrush>
      </Setter.Value>
    </Setter>
    <Setter Property="BorderActiveBrush" Value="#00EDEDED"/>
    <Setter Property="BackgroundSelected" Value="#BF316AC5"/>
    <Setter Property="BorderSelectedBrush" Value="#FFEDEDED"/>
    <Setter Property="BackgroundFieldSelected" Value="#FFF7F7F7"/>
    <Setter Property="BorderFieldSelectedBrush" Value="#FFF7F7F7"/>
    <Setter Property="BackgroundPrimary" Value="#7FF7F7F7"/>
    <Setter Property="BorderPrimaryBrush" Value="#FFF7F7F7"/>
    <Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=BlackForegroundStyle}}" />
    <Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=BlackForegroundStyle}}" />
    <Setter Property="Padding" Value="0,0,0,0"/>
    <Style.Triggers>
      <!-- DRCA Foreground Hover Trigger-->
      <!-- JJD 4/30/09 - TFS17157 use new IsRecordSelected property -->
      <Trigger Property="IsRecordSelected" Value="True">
        <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=BlackForegroundStyle}}" />
      </Trigger>
      <!-- DRCA Foreground Selected Trigger-->
      <!-- JJD 4/30/09 - TFS17157 use new IsMouseOverRecord property -->
      <Trigger Property="IsMouseOverRecord" Value="True">
        <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=BlackForegroundStyle}}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!-- _________________________ TreeCellValuePresenter __________________________________________ -->
  <Style TargetType="{x:Type igDP:TreeCellValuePresenter}" BasedOn="{x:Static themes:DataPresenterGeneric.TreeCellValuePresenter}">
    <Setter Property="BorderBrush" Value="#FFEDEDED"/>
    <Setter Property="BackgroundHover" Value="#00EDEDED"/>
    <Setter Property="BorderHoverBrush" Value="#00EDEDED"/>
    <Setter Property="BackgroundActive">
      <Setter.Value>
        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
          <GradientStop Color="#59FFFFFF" Offset="0"/>
          <GradientStop Color="#00FFFFFF" Offset="1"/>
        </LinearGradientBrush>
      </Setter.Value>
    </Setter>
    <Setter Property="BorderActiveBrush" Value="#00EDEDED"/>
    <Setter Property="BackgroundSelected" Value="#BF316AC5"/>
    <Setter Property="BorderSelectedBrush" Value="#FFEDEDED"/>
    <Setter Property="BackgroundFieldSelected" Value="#FFF7F7F7"/>
    <Setter Property="BorderFieldSelectedBrush" Value="#FFF7F7F7"/>
    <Setter Property="BackgroundPrimary" Value="#7FF7F7F7"/>
    <Setter Property="BorderPrimaryBrush" Value="#FFF7F7F7"/>
    <Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=BlackForegroundStyle}}" />
    <Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=BlackForegroundStyle}}" />
    <Setter Property="Padding" Value="0,0,0,0"/>
    <Style.Triggers>
      <!-- DRCA Foreground Hover Trigger-->
      <!-- JJD 4/30/09 - TFS17157 use new IsRecordSelected property -->
      <Trigger Property="IsRecordSelected" Value="True">
        <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=BlackForegroundStyle}}" />
      </Trigger>
      <!-- DRCA Foreground Selected Trigger-->
      <!-- JJD 4/30/09 - TFS17157 use new IsMouseOverRecord property -->
      <Trigger Property="IsMouseOverRecord" Value="True">
        <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=BlackForegroundStyle}}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!-- _________________________ DataRecordPresenter __________________________________________ -->
  <Style TargetType="{x:Type igDP:DataRecordPresenter}">
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="HeaderAreaBackground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}"/>
    <Setter Property="NestedContentBackground" Value="Transparent"/>
    <Setter Property="Background" Value="#00FFFFFF"/>
    <Setter Property="BorderBrush" Value="#FFCCCCCC"/>
    <Setter Property="Margin" Value="0"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:DataRecordPresenter}">
          <igWindows:CardPanel x:Name="baseGrid" RenderTransform="{TemplateBinding FixedNearElementTransform}" Background="{TemplateBinding Background}">
            <Border
  Visibility="Collapsed"
  Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=AddRowBackground}}"
  BorderBrush="{TemplateBinding BorderBrush}"
  HorizontalAlignment="Stretch"
  x:Name="addRowFooter"
  VerticalAlignment="Stretch"
  Width="Auto"
  Height="Auto"
  BorderThickness="{TemplateBinding BorderThickness}"
  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            <Grid Margin="0" RenderTransform="{TemplateBinding ScrollableElementTransform}">
              <Grid.ColumnDefinitions>
                <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - added 1 column definition-->
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <!-- SSP 5/6/08 - Record Separators - Added two col defs-->
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - added 1 row definition-->
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <!-- SSP 5/6/08 - Record Separators - Added two row defs-->
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <!-- Expansion Checkbox -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.row to 2 from 1-->
              <!-- AS 1/27/09 NA 2009 Vol 1 - Set ZIndex and RenderTransform for fixed fields -->
              <!-- AS 6/3/09 NA 2009 Vol 2 - Added Command(Parameter) & ToggleMode to support undo/redo -->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <Border x:Name="OrientationHorizontalSep" BorderThickness="0,0,1,0" Grid.ColumnSpan="6" Background="#FFFAFAFA" BorderBrush="#FFE7E7E7"  Visibility="Collapsed"/>
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <igWindows:ExpansionIndicator
  x:Name="ExpansionIndicator"
                  Panel.ZIndex="1"
                  RenderTransform="{TemplateBinding FixedNearElementTransform}"
  Grid.Row="3"
  Grid.Column="1"
  Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
  Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}"
  CommandParameter="{TemplateBinding Record}"
  ToggleMode="Manual"
  IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
              <!-- Header Background -->
              <!-- Added 8/2/2006 GH -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.colspan to 5 from 3-->
              <!-- AS 2/10/09 TFS13798 - Set RenderTransform for fixed fields -->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <igWindows:CardPanel
  x:Name="SpacerFill"
                  RenderTransform="{TemplateBinding FixedNearElementTransform}"
  Grid.Row="1"
  Grid.Column="1"
  Grid.ColumnSpan="6"
  Visibility="Visible">
                <Rectangle x:Name="fill" Margin="0,0,0,0" Fill="{TemplateBinding HeaderAreaBackground}"/>
                <Rectangle
  x:Name="lightLine"
  Fill="#3FFFFFFF"
  VerticalAlignment="Top"
  Margin="0,1,0,0"
  Width="Auto"
  Height="1"/>
                <Rectangle
  x:Name="darkLine"
  Fill="#66000000"
  VerticalAlignment="Top"
  Margin="0,0,0,0"
  Width="Auto"
  Height="1"/>
              </igWindows:CardPanel>
              <!-- End Added 8/2/2006 GH -->
              <!-- Header Content -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.col to 2 from 1-->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <ContentPresenter
  x:Name="PART_HeaderContentSite"
  Grid.Row="1"
  Grid.Column="3"
  Content="{TemplateBinding HeaderContent}"
  Visibility="Visible"
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
  d:IsHidden="True"/>
              <!-- SSP 5/6/08 - Record Separators - Added separator rectangle -->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <Border
  x:Name="RecordSeparator"
  Grid.Row="2"
  Grid.Column="1"
  Visibility="Collapsed"
  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=RecordSeparatorStyle}}"
  Grid.ColumnSpan="6"/>
              <!-- Record Content -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.row to 2 from 1 and grid.col to 2 from 1-->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <ContentPresenter
  x:Name="PART_RecordContentSite"
  Grid.Row="3"
  Grid.Column="3"
  Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"
  ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
              <!-- Nested Content -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.row to 4 from 2 and grid.col to 2 from 1-->
              <!-- AS 3/25/09 TFS15801 - Set RenderTransform for fixed fields -->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <Border
  x:Name="PART_NestedContentSite"
  Grid.Row="5"
  Grid.Column="3"
  Visibility="Visible"
  HorizontalAlignment="Left"
  VerticalAlignment="Top"
                  RenderTransform="{TemplateBinding FixedNearElementTransform}"
  Background="{TemplateBinding NestedContentBackground}">
                <!-- AS 11/14/07 BR26035
								The namescope was broken because the recordlistcontrol was not in the logical tree. We
								need to use a ContentControl instead so the content	is made a logical child. -->
                <ContentControl
                    RenderTransform="{TemplateBinding ScrollableElementTransform}"
                    Content="{TemplateBinding NestedContent}"
                    Margin="2,0,0,0"
                    x:Name="contentControl"/>
                <!--Margin="10,10,0,0" />-->
              </Border>
            </Grid>
          </igWindows:CardPanel>
          <ControlTemplate.Triggers>
            <!-- AS 11/8/11 TFS88111 -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=FieldLayout.AutoFitToWidth, RelativeSource={RelativeSource Self}}" Value="True" />
                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_HeaderContentSite" Property="Grid.ColumnSpan" Value="3"/>
              <Setter TargetName="PART_RecordContentSite" Property="Grid.ColumnSpan" Value="3"/>
              <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            </MultiDataTrigger>
            <Trigger Property="Orientation" Value="Horizontal">
              <!-- START SSP 5/6/08 - Record Separators
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Column" Value="0" />
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="2" />
                            <Setter TargetName="PART_RecordContentSite" Property="VerticalAlignment" Value="Top" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="1" />
                            <Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="3" />
														-->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="3"/>
              <Setter TargetName="PART_HeaderContentSite" Property="Grid.Column" Value="1"/>
              <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="3"/>
              <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="5"/>
              <Setter TargetName="PART_RecordContentSite" Property="VerticalAlignment" Value="Top"/>
              <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1"/>
              <Setter TargetName="ExpansionIndicator" Property="Margin" Value="0,2"/>
              <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="3"/>
              <Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1"/>
              <Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="6"/>
              <!--<Setter TargetName="RecordSeparator" Property="Grid.Row" Value="2"/>
							<Setter TargetName="RecordSeparator" Property="Grid.Column" Value="1"/>-->
              <Setter TargetName="RecordSeparator" Property="Width" Value="10"/>
              <Setter TargetName="RecordSeparator" Property="Height" Value="Auto"/>
              <Setter TargetName="RecordSeparator" Property="BorderThickness" Value="1,0"/>
              <Setter TargetName="OrientationHorizontalSep" Property="Visibility" Value="Visible"/>
              <!-- END SSP 5/6/08 - Record Separators -->
            </Trigger>
            <Trigger Property="ShouldDisplayRecordContent" Value="False">
              <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Collapsed"/>
              <!--JJD 9/4/07 - BR26153 -->
              <!--Only set ExpansionIndicator Visibility to Hidden if is was Visible (see new MultiTrigger below) -->
              <!--<Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />-->
            </Trigger>
            <!--JJD 9/4/07 - BR26153 -->
            <!--Only set ExpansionIndicator Visibility to Hidden if is was Visible -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
                <Condition Property="IsHeaderRecord" Value="False"/>
                <Condition Property="ExpansionIndicatorVisibility" Value="Visible"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Orientation" Value="Horizontal"/>
                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
              </MultiTrigger.Conditions>
              <!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <!-- JJD 1/24/11 TFS63831 the value should be 5 to match up with the nested content-->
              <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="5"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Orientation" Value="Vertical"/>
                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
              </MultiTrigger.Conditions>
              <!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <!-- JJD 1/24/11 TFS63831 the value should be 5 to match up with the nested content-->
              <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="5"/>
            </MultiTrigger>
            <Trigger Property="IsHeaderRecord" Value="True">
              <!--JJD 9/4/07 - BR26153 -->
              <!--Only set ExpansionIndicator Visibility to Hidden if is was Visible (see new MultiTrigger below) -->
              <!--<Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />-->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1"/>
              <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="1"/>
            </Trigger>
            <!--JJD 9/4/07 - BR26153 -->
            <!--Only set ExpansionIndicator Visibility to Hidden if is was Visible -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsHeaderRecord" Value="True"/>
                <Condition Property="ExpansionIndicatorVisibility" Value="Visible"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden"/>
            </MultiTrigger>
            <Trigger Property="HasHeaderContent" Value="False">
              <Setter Property="Visibility" TargetName="SpacerFill" Value="Collapsed"/>
              <Setter Property="Visibility" TargetName="PART_HeaderContentSite" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasNestedContent" Value="true">
              <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
              <Setter TargetName="baseGrid" Property="Background" Value="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <Trigger Property="HasNestedContent" Value="False">
              <Setter Property="Visibility" TargetName="PART_NestedContentSite" Value="Collapsed"/>
            </Trigger>
            <!--SSP 8/5/09 - NAS9.2 Enhanced grid view
							Changed the IsFixedOnTop trigger to MultiDataTrigger since we needed to add IsSpecialRecord
							condition. This was done because previously we were showing separator after each fixed record
							however we should not display the separator between each fixed data record if there are multiple
							fixed data records. The same change was applied to IsFixedOnBottom.
						-->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsSpecialRecord}" Value="true" />
                <Condition Binding="{Binding Path=IsFixedOnTop, RelativeSource={RelativeSource Self}}" Value="true" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Visibility" TargetName="addRowFooter" Value="Visible"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsSpecialRecord}" Value="true" />
                <Condition Binding="{Binding Path=IsFixedOnBottom, RelativeSource={RelativeSource Self}}" Value="true" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Visibility" TargetName="addRowFooter" Value="Visible"/>
              <Setter Property="BorderThickness" TargetName="addRowFooter" Value="0,1,0,0"/>
            </MultiDataTrigger>
            <!-- START SSP 5/6/08 - Record Separators -->
            <!-- For HasSeparatorBefore, default grid.row and grid.column settings are fine as setup
							when declaring the record separator (and for horizontal orientation as setup in the
							orientation=horizontal trigger above).
						-->
            <Trigger Property="HasSeparatorBefore" Value="true">
              <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
            </Trigger>
            <!-- For HasSeparatorAfter, we have to set grid.row and grid.col based on the orientation-->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasSeparatorAfter" Value="true"/>
                <Condition Property="Orientation" Value="Vertical"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="4"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasSeparatorAfter" Value="true"/>
                <Condition Property="Orientation" Value="Horizontal"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="4"/>
              <Setter TargetName="RecordSeparator" Property="Grid.ColumnSpan" Value="1"/>
              <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="1"/>
              <Setter TargetName="RecordSeparator" Property="Grid.RowSpan" Value="6"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasSeparatorBefore" Value="true"/>
                <Condition Property="Orientation" Value="Horizontal"/>
              </MultiTrigger.Conditions>
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="2"/>
              <Setter TargetName="RecordSeparator" Property="Grid.ColumnSpan" Value="1"/>
              <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="1"/>
              <Setter TargetName="RecordSeparator" Property="Grid.RowSpan" Value="6"/>
            </MultiTrigger>
            <!-- END SSP 5/6/08 - Record Separators -->
            <!-- Changing opacity of Content to differentiate between filtered records with IsFilteredOut trigger property -->
			<!-- JJD 1/10/13 - TFS130325 
				Use new IsOpacityReduced property instead
			<Trigger Property="IsFilteredOut" Value="True">-->
			<Trigger Property="IsOpacityReduced" Value="True">
				<Setter TargetName="PART_RecordContentSite" Property="Opacity" Value="0.35"/>
			</Trigger>
            <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent"/>
                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent"/>
                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="0"/>
            </MultiDataTrigger>
            <!-- MD 8/3/10 - TFS35609 -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached"/>
                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached"/>
                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="0"/>
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="TemplateCardView">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:DataRecordPresenter}">
          <igWindows:CardPanel x:Name="baseGrid" Background="{TemplateBinding Background}">
            <!-- Record Content -->
            <Rectangle Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CardBackground}}"/>
            <ContentPresenter
  x:Name="PART_RecordContentSite"
  Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"
  ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </igWindows:CardPanel>
          <ControlTemplate.Triggers>
            <!-- JM NA 10.1 CardView -->
            <Trigger Property="IsInCard" Value="True">
              <Setter Property="VerticalContentAlignment" Value="Top"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- _________________________ DataRecordCellArea __________________________________________ -->
  <Style TargetType="{x:Type igDP:DataRecordCellArea}" BasedOn="{x:Static themes:DataPresenterGeneric.DataRecordCellArea}">
    <Setter Property="BackgroundHover" Value="#E5316AC5"/>
    <Setter Property="BorderHoverBrush" Value="#FF316AC5"/>
    <Setter Property="BackgroundActive" Value="#60316AC5"/>
    <Setter Property="BorderActiveBrush" Value="#FF316AC5"/>
    <Setter Property="BackgroundAlternate" Value="#FFEFEFEF"/>
    <Setter Property="BackgroundSelected" Value="#7F316AC5"/>
    <Setter Property="BorderSelectedBrush" Value="#FF316AC5"/>
    <Setter Property="CornerRadius" Value="0"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=BlackForegroundStyle}}" />
    <Setter Property="Foreground" Value="#000000"/>
    <Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=BlackForegroundStyle}}" />
    <Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=BlackForegroundStyle}}" />
  </Style>

  <!-- _________________________ GroupByArea __________________________________________ -->
  <Style TargetType="{x:Type igDP:GroupByArea}" BasedOn="{x:Static themes:DataPresenterGeneric.GroupByArea}">
    <Setter Property="Foreground" Value="#FF333333"/>
    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GroupByAreaBackground}}"/>
    <!-- Should there be a background set? There was one in the brushes but it wasnt referenced -->
    <Setter Property="Template">
      <Setter.Value>
        <!-- JM 04-09 9.2 CrossBandGrouping Feature -->
        <!-- I have made a number of changes to this template to integrate the new ExpanderDecorator element and
					 refactor the element layout to remove all hard-coded dimensions.  Note: I have left the hard-coded
					 font sizes - we may want to provide a way for the developer to override these in the future. I also removed
					 the animations for expanding/collapsing since this is now handled by the ExpanderDecorator. To reduce
					 clutter I have not retained the code I commented out - refer to previous TFS versions if you need to see the
					 old code. -->
        <ControlTemplate TargetType="{x:Type igDP:GroupByArea}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="TurnOnInsertionPoint">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PART_InsertionPoint" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="TurnOffInsertionPoint">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PART_InsertionPoint" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="ShowPrompts">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.5"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.8"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="HidePrompts">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.2"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <!-- ExpanderBarArea -->
            <!-- AS 2/25/11 TFS67071 - Since there are performance implications, we'll hook the Click instead of setting the Command. -->
            <igWindows:ExpanderBar
  x:Name="ExpanderBarButton"
  Grid.Row="0"
  Height="10"/>
            <!-- End ExpanderBarArea-->
            <!-- Collapsible Area -->
            <igWindows:ExpanderDecorator Grid.Row="1"
                 HorizontalAlignment="Stretch"
                 IsExpanded="{Binding Path=IsExpanded, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                 Orientation="Vertical">
              <Grid x:Name="outerGrid" SnapsToDevicePixels="True">
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto"/>
                  <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <!-- Background Area -->
                <Grid VerticalAlignment="Stretch" Background="{TemplateBinding Background}">
                  <Path
  Fill="{x:Null}"
  Stretch="Fill"
  Stroke="#FFDFDFDF"
  Width="Auto"
  Height="1"
  Data="M5,46.333333 L49.333333,45.666667"
  VerticalAlignment="Bottom"/>
                </Grid>
                <!-- End Background Area -->
                <!-- Grouping Prompts -->
                <StackPanel Orientation="Horizontal" Margin="6,13,0,1">
                  <!-- JM 05-06-09 Honor the new Prompt1Template and Prompt2Template properties-->
                  <!--<TextBlock
										x:Name="prompt1"
										FontSize="24"
										Text="{TemplateBinding Prompt1}"
										Opacity="0.5"
										Foreground="#FF909A9B"/>
									<TextBlock
										x:Name="prompt2"
										Opacity="0.7"
										Margin="5,11,0,0"
										Text="{TemplateBinding Prompt2}"
										Foreground="#FF909A9B"/>-->
                  <ContentControl
  x:Name="prompt1"
  FontSize="24"
  Content="{TemplateBinding Prompt1}"
  ContentTemplate="{TemplateBinding Prompt1Template}"
  Opacity="0.5"
  Foreground="#FF909A9B"/>
                  <ContentControl
  x:Name="prompt2"
  Opacity="0.7"
  Margin="5,11,0,0"
  Content="{TemplateBinding Prompt2}"
  ContentTemplate="{TemplateBinding Prompt2Template}"
  Foreground="#FF909A9B"/>
                </StackPanel>
                <!-- GroupedFieldLabelsArea-->
                <Grid x:Name="PART_GroupedFieldLabelsArea" Margin="0,12,0,0" VerticalAlignment="Top">
                    <!-- GroupedFields List -->
                    <!-- JM 02-13-18 TFS248336 - Remove the binding on the Height property. -->
                    <!--<igDP:GroupByAreaFieldListBox x:Name="GroupedFieldList" ItemsSource="{TemplateBinding GroupedFieldLabels}" Height="{Binding Path=ActualHeight, ElementName=AvailableFieldList}" AutomationProperties.Name="GroupedFieldsList"/>-->
                    <igDP:GroupByAreaFieldListBox x:Name="GroupedFieldList" ItemsSource="{TemplateBinding GroupedFieldLabels}" AutomationProperties.Name="GroupedFieldsList"/>
                </Grid>
                <!-- End GroupedFieldLabels Area -->
                <Border
    Grid.Row="1"
    BorderBrush="#FFBFBFBF"
    BorderThickness="0,1,0,1">
                  <Border.Background>
                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                      <GradientStop Color="#FFF4F3EE" Offset="0"/>
                      <GradientStop Color="#FFECE9D8" Offset="1"/>
                    </LinearGradientBrush>
                  </Border.Background>
                  <!-- AvailableFieldLabels Area -->
                  <Grid x:Name="PART_AvailableFieldLabelsArea" Margin="0,4,0,3" Visibility="Visible">
                    <!-- AvailableField List -->
                    <igDP:GroupByAreaFieldListBox x:Name="AvailableFieldList" ItemsSource="{TemplateBinding AvailableFieldLabels}" VerticalAlignment="Stretch" AutomationProperties.Name="AvailableFieldsList"/>
                  </Grid>
                  <!-- End AvailableFieldLabels Area -->
                </Border>
                <!-- Insertion Point -->
                <Polygon
  x:Name="PART_InsertionPoint"
  Opacity="0"
  Fill="#FF151C55"
  Points="0,0 10,0 5,5"
  StrokeEndLineCap="Round"
  StrokeStartLineCap="Round"
  StrokeLineJoin="Round"
  HorizontalAlignment="Left"
  Margin="0,12,0,0"
  VerticalAlignment="Top"/>
              </Grid>
            </igWindows:ExpanderDecorator>
            <!-- End Collapsible Area -->
          </Grid>
          <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="igDP:GroupByArea.ShowInsertionPoint">
              <BeginStoryboard x:Name="TurnOnInsertionPoint_BeginStoryboard" Storyboard="{StaticResource TurnOnInsertionPoint}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="igDP:GroupByArea.HideInsertionPoint">
              <BeginStoryboard x:Name="TurnOffInsertionPoint_BeginStoryboard" Storyboard="{StaticResource TurnOffInsertionPoint}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="igDP:GroupByArea.ShowPrompts">
              <BeginStoryboard x:Name="ShowPrompts_BeginStoryboard" Storyboard="{StaticResource ShowPrompts}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="igDP:GroupByArea.HidePrompts">
              <BeginStoryboard x:Name="HidePrompts_BeginStoryboard" Storyboard="{StaticResource HidePrompts}"/>
            </EventTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- _________________________ GroupByAreaFieldLabel __________________________________________ -->
  <Style TargetType="{x:Type igDP:GroupByAreaFieldLabel}" BasedOn="{x:Static themes:DataPresenterGeneric.GroupByAreaFieldLabel}">
    <Setter Property="Foreground" Value="#FF000000"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:GroupByAreaFieldLabel}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="sbHighlightOn">
              <DoubleAnimation
  Storyboard.TargetName="labelHighlight"
  Storyboard.TargetProperty="Opacity"
  BeginTime="00:00:00"
  Duration="00:00:00.15"
  To="1"
  FillBehavior="HoldEnd"/>
            </Storyboard>
            <Storyboard x:Key="sbHighlightOff">
              <DoubleAnimation
  Storyboard.TargetName="labelHighlight"
  Storyboard.TargetProperty="Opacity"
  BeginTime="00:00:00"
  Duration="00:00:01.25"
  To="0"
  FillBehavior="HoldEnd"/>
            </Storyboard>
          </ControlTemplate.Resources>
          <Grid x:Name="blueButton">
            <Rectangle
  Stroke="#FF003C74"
  RadiusX="3"
  RadiusY="3"
  Margin="0,0,0,0"
  x:Name="_base">
              <Rectangle.Fill>
                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                  <GradientStop Color="#FFFFFFFF" Offset="0"/>
                  <GradientStop Color="#FFF0F0EA" Offset="0.85"/>
                  <GradientStop Color="#FFECEBE6" Offset="0.85"/>
                  <GradientStop Color="#FFD6D0C5" Offset="1"/>
                </LinearGradientBrush>
              </Rectangle.Fill>
            </Rectangle>
            <Grid Margin="1,1,1,1" x:Name="highlight" Visibility="Collapsed">
              <Rectangle
  RadiusX="2"
  RadiusY="2"
  x:Name="outter1"
  Fill="{x:Null}"
  StrokeThickness="1"
  Margin="0,0,0,0">
                <Rectangle.Stroke>
                  <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#FFFFF0CF" Offset="0"/>
                    <GradientStop Color="#FFE59700" Offset="1"/>
                  </LinearGradientBrush>
                </Rectangle.Stroke>
              </Rectangle>
              <Rectangle
  RadiusX="1"
  RadiusY="1"
  x:Name="inner1"
  Fill="{x:Null}"
  StrokeThickness="1"
  Margin="1,1,1,1">
                <Rectangle.Stroke>
                  <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#FFFDD889" Offset="0"/>
                    <GradientStop Color="#FFF8B330" Offset="1"/>
                  </LinearGradientBrush>
                </Rectangle.Stroke>
              </Rectangle>
            </Grid>
            <ContentPresenter
  Margin="{TemplateBinding Padding}"
  Content="{Binding Path=(igDP:GroupByAreaFieldLabel.Field).Label, RelativeSource={RelativeSource TemplatedParent}}"
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Visibility" TargetName="highlight" Value="Visible"/>
            </Trigger>
            <EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.RemovedFromAvailableList">
              <BeginStoryboard x:Name="CollapseLabel_BeginStoryboard" Storyboard="{StaticResource CollapseLabel}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.AddedToAvailableList">
              <BeginStoryboard x:Name="AddLabelToList_BeginStoryboard" Storyboard="{StaticResource ExpandLabel}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.AddedToGroupedList">
              <BeginStoryboard x:Name="AddLabelToGroup_BeginStoryboard" Storyboard="{StaticResource ExpandLabel}"/>
            </EventTrigger>
            <!--<EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.RemovedFromAvailableList">
							<EventTrigger.Actions>
								<BeginStoryboard Name="Shrink">
									<Storyboard Duration="0:0:1.5">
										<DoubleAnimation
										  Storyboard.TargetProperty="(igDP:GroupByAreaFieldLabel.Opacity)"
										  From="1" To="0"
										  BeginTime="0:0:0" Duration="0:0:1"
										  FillBehavior="HoldEnd" />
										<DoubleAnimation
										  Storyboard.TargetProperty="(igDP:GroupByAreaFieldLabel.LayoutTransform).(ScaleTransform.ScaleX)"
										  From="1" To="0"
										  BeginTime="0:0:1" Duration="0:0:0.5"
										  FillBehavior="HoldEnd" />
									</Storyboard>
								</BeginStoryboard>
							</EventTrigger.Actions>
						</EventTrigger>

						<EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.AddedToAvailableList">
							<EventTrigger.Actions>
								<BeginStoryboard Name="Expand1" Storyboard="{StaticResource ExpandGroupByArea}"/>
							</EventTrigger.Actions>
						</EventTrigger>

						<EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.AddedToGroupedList">
							<EventTrigger.Actions>
								<BeginStoryboard Name="Expand2" Storyboard="{StaticResource ExpandGroupByArea}"/>
							</EventTrigger.Actions>
						</EventTrigger>-->
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- _________________________ LabelPresenter __________________________________________ -->
  <Style TargetType="{x:Type igDP:LabelPresenter}" BasedOn="{x:Static themes:DataPresenterGeneric.LabelPresenter}">
    <Setter Property="Padding" Value="4,0,4,0"/>
    <Setter Property="Margin" Value="0,1,0,0"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.GroupByMultiLPBackgroundBrushKey}}"/>
    <Setter Property="OuterBorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.GroupByMultiLPBorderBrushKey}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:LabelPresenter}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="sbHighlightOn"/>
            <Storyboard x:Key="sbHighlightOff"/>
            <Storyboard x:Key="SigmaFadeIn">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SigmaFadeOut">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.6"/>
              </DoubleAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.6"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SigmaFadeInFilterButton">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="SigmaFadeOutFilterButton">
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.6"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <igWindows:CardPanel x:Name="labelCntr">
            <Grid x:Name="backgroundParent">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition x:Name="fishColumn" Width="0"/>
              </Grid.ColumnDefinitions>
              <Border x:Name="outerBackground" Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.GroupByMultiLPOuterBackgroundBrushKey}}" Visibility="Collapsed" SnapsToDevicePixels="True"/>
              <Border x:Name="background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding OuterBorderBrush}" RenderTransformOrigin="0.5,0.5" SnapsToDevicePixels="True"/>
              <Border
  RenderTransformOrigin="0.5,0.5"
  HorizontalAlignment="Left"
  Margin="1.5,0,0,-3"
  x:Name="footerLeft"
  VerticalAlignment="Bottom"
  Width="3"
  Height="3"
  Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.LabelPresenterFooterEndBrushKey}}"
  BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.LabelPresenterFooterBorderBrushKey}}"
  BorderThickness="1,0,0,0"
  SnapsToDevicePixels="True"
  Visibility="Collapsed"
  Grid.ColumnSpan="2">
                <Border.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                    <SkewTransform AngleX="45" AngleY="0"/>
                    <RotateTransform Angle="0"/>
                    <TranslateTransform X="0" Y="0"/>
                  </TransformGroup>
                </Border.RenderTransform>
              </Border>
              <Border
  RenderTransformOrigin="0.5,0.5"
  HorizontalAlignment="Right"
  Margin="0,0,1.5,-3"
  x:Name="footerRight"
  VerticalAlignment="Bottom"
  Width="3"
  Height="3"
  Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.LabelPresenterFooterEndBrushKey}}"
  BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.LabelPresenterFooterBorderBrushKey}}"
  BorderThickness="0,0,1,0"
  SnapsToDevicePixels="True"
  Visibility="Collapsed"
  Grid.ColumnSpan="2">
                <Border.RenderTransform>
                  <TransformGroup>
                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                    <SkewTransform AngleX="-45" AngleY="0"/>
                    <RotateTransform Angle="0"/>
                    <TranslateTransform X="0" Y="0"/>
                  </TransformGroup>
                </Border.RenderTransform>
              </Border>
              <Border
  RenderTransformOrigin="0.5,0.5"
  x:Name="footerMid"
  VerticalAlignment="Bottom"
  Width="Auto"
  Height="3"
  SnapsToDevicePixels="True"
  Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.LabelPresenterFooterMid}}"
  Grid.ColumnSpan="2"/>
              <Path
  x:Name="fishHeadOuterBevel"
  Visibility="Collapsed"
  Stretch="Fill"
  Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,1 0,1 0,1 7,8 7,8 8,9 8,11 7,12 7,12 0,19 0,19 0,19 0,20 0,20 z"
  Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.GroupByMultiLPOuterBevelBrushKey}}"
  Grid.Column="1"
  Margin="2,2,0,1"
  SnapsToDevicePixels="True"/>
              <Path x:Name="fishHeadOuterStroke" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.GroupByMultiLPOuterBackgroundBrushKey}}" Grid.Column="1" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z" />
              <Path x:Name="fishHead" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.GroupByMultiLPBorderBrushKey}}" Grid.Column="1" Margin="0,1,1,1" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z" />
              <Path x:Name="fishHeadHighlight" SnapsToDevicePixels="True" Fill="{TemplateBinding Background}" Visibility="Collapsed" Grid.Column="1" Margin="0,2,2,2" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z"/>
              <Path
  x:Name="fishHeadInnerStroke"
  Visibility="Collapsed"
  Stretch="Fill"
  Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,1 0,1 0,1 7,8 7,8 8,9 8,11 7,12 7,12 0,19 0,19 0,19 0,20 0,20 z"
  Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.GroupByMultiLPInnerBorderBrushKey}}"
  Grid.Column="1"
  Margin="0,3,3,2"
  SnapsToDevicePixels="True"/>
            </Grid>
            <Path
  Height="Auto"
  Width="Auto"
  Stretch="Fill"
  Opacity="1"
  Data="M 1,0 C1,0 34,0 34,0 34,0 34,19 34,19 34,19 1,19 1,19 1,19 1,0 1,0 z"
  Fill="#FFC1C2B8"
  HorizontalAlignment="Stretch"
  Margin="1,1,1,1"
  x:Name="pressed_border1"
  Visibility="Collapsed"/>
            <Path
  Height="Auto"
  Width="Auto"
  Stretch="Fill"
  Opacity="1"
  Data="M 2,1 C2,1 34,1 34,1 34,1 34,19 34,19 34,19 2,19 2,19 2,19 2,1 2,1 z"
  Fill="#FFD0D1C9"
  HorizontalAlignment="Stretch"
  Margin="2,1,1,1"
  x:Name="pressed_border2"
  Visibility="Collapsed"/>
            <Path
  Height="Auto"
  Width="Auto"
  Stretch="Fill"
  Opacity="1"
  Data="M 3,2 C3,2 34,2 34,2 34,2 34,19 34,19 34,19 3,19 3,19 3,19 3,2 3,2 z"
  Fill="#FFDEDFD8"
  HorizontalAlignment="Stretch"
  Margin="3,1,1,1"
  x:Name="pressed_border3"
  Visibility="Collapsed"/>
            <!-- JM 09-08-09 TFS21356  -->
            <!--<Grid
							x:Name="sortIndicatorAndLabel"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Margin="{TemplateBinding Padding}"
							d:LayoutOverrides="Height">-->
            <!--
								HC 09-22-09 TFS21961 & TFS21356 are duplicate bugs.
								Binding the VerticalAlignment to the VerticalContentAlignment
								property and setting the value to Center does not work. So
								had to hard-code VerticalAlignment=Center.
							-->
            <Grid
  x:Name="sortIndicatorAndLabel"
  VerticalAlignment="Center"
  HorizontalAlignment="Stretch"
  Margin="{TemplateBinding Padding}"
  d:LayoutOverrides="Height">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <!-- Label Text -->
              <ContentControl
    x:Name="LabelContent"
    Focusable="False"
    Style="{StaticResource LabelContentStyle}"
    Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
    ContentTemplate="{TemplateBinding ContentTemplate}"
    ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
    d:LayoutOverrides="Width, Height"/>
              <!-- End Label Text -->
              <igWindows:SortIndicator
    x:Name="SortIndicator"
    Grid.Column="1"
    SortStatus="{TemplateBinding SortStatus}"
    Visibility="Collapsed"
    Width="10"
    Height="5"
    HorizontalAlignment="Right"
    Margin="2,0,2,0"/>
              <igDP:SummaryButton
    x:Name="SummaryButton"
    Grid.Column="2"
    Field="{TemplateBinding Field}"
    Visibility="{Binding Path=Field.AllowSummariesResolved, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource TemplatedParent}}"
    HorizontalAlignment="Right"
    VerticalAlignment="Stretch"
    Width="Auto"
    Margin="2,0,2,0"
    d:LayoutOverrides="Height"
    Opacity="0.6"/>
              <!-- JJD 1/06/09 - Filtering Functionality -->
              <igDP:FilterButton
    x:Name="FilterButton"
    Field="{TemplateBinding Field}"
    Visibility="{TemplateBinding FilterButtonVisibility}"
    HorizontalAlignment="Left"
    VerticalAlignment="Center"
    Width="Auto"
    Grid.Column="3"
    Opacity="0.6"
    Margin="2,0,2,0"/>
              <!-- JM 1/14/09 - Fixed Fields Functionality -->
              <igDP:FixedFieldButton
    x:Name="FixedButton"
    Field="{TemplateBinding Field}"
    Visibility="{TemplateBinding FixedButtonVisibility}"
    HorizontalAlignment="Left"
    VerticalAlignment="Center"
    Width="Auto"
    Grid.Column="4"
    Margin="2,0,2,0"
    Opacity="0.8"/>
            </Grid>
            <Rectangle
  Stroke="{x:Null}"
  Width="2"
  Height="Auto"
  x:Name="rightBorder"
  HorizontalAlignment="Right"
  Margin="0,3,0,6">
              <Rectangle.Fill>
                <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                  <GradientStop Color="#FFC7C5B2" Offset="0"/>
                  <GradientStop Color="#FFFFFFFF" Offset="1"/>
                  <GradientStop Color="#FFC7C5B2" Offset="0.5"/>
                  <GradientStop Color="#FFFFFFFF" Offset="0.5"/>
                </LinearGradientBrush>
              </Rectangle.Fill>
            </Rectangle>
            <!-- End Highlight -->
          </igWindows:CardPanel>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsDragSource, RelativeSource={RelativeSource Self}}" Value="True"/>
                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="False"/>
              </MultiDataTrigger.Conditions>
              <Setter Property="Background" TargetName="background" Value="#FFA5A597"/>
              <Setter Property="Visibility" TargetName="pressed_border1" Value="Visible"/>
              <Setter Property="Visibility" TargetName="pressed_border2" Value="Visible"/>
              <Setter Property="Visibility" TargetName="pressed_border3" Value="Visible"/>
              <Setter Property="Margin" TargetName="pressed_border1" Value="1,0,1,1"/>
              <Setter Property="Margin" TargetName="pressed_border2" Value="2,1,1,1"/>
              <Setter Property="Margin" TargetName="pressed_border3" Value="3,2,1,1"/>
              <Setter Property="Visibility" TargetName="rightBorder" Value="Collapsed"/>
              <Setter Property="Visibility" TargetName="footerMid" Value="Collapsed"/>
              <Setter Property="Opacity" TargetName="footerLeft" Value="0"/>
              <Setter Property="Opacity" TargetName="footerRight" Value="0"/>
            </MultiDataTrigger>
            <Trigger Property="HorizontalAlignment" Value="Right" SourceName="sortIndicatorAndLabel">
              <Setter Property="Margin" TargetName="sortIndicatorAndLabel" Value="4,0,6,0"/>
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="False"/>
              </MultiDataTrigger.Conditions>
              <Setter Property="Background" TargetName="background" Value="#FFA5A597"/>
              <Setter Property="Visibility" TargetName="pressed_border1" Value="Visible"/>
              <Setter Property="Visibility" TargetName="pressed_border2" Value="Visible"/>
              <Setter Property="Visibility" TargetName="pressed_border3" Value="Visible"/>
              <Setter Property="Margin" TargetName="pressed_border1" Value="1,0,1,1"/>
              <Setter Property="Margin" TargetName="pressed_border2" Value="2,1,1,1"/>
              <Setter Property="Margin" TargetName="pressed_border3" Value="3,2,1,1"/>
              <Setter Property="Visibility" TargetName="rightBorder" Value="Collapsed"/>
              <Setter Property="Visibility" TargetName="footerMid" Value="Collapsed"/>
              <Setter Property="Opacity" TargetName="footerLeft" Value="0"/>
              <Setter Property="Opacity" TargetName="footerRight" Value="0"/>
            </MultiDataTrigger>
            <!-- IsMouseOver -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="False"/>
                <!--SSP 6/24/09 - NAS9.2 Field Chooser - We don't want to loose the selected highlight when mouse
								is hovered over a field in the field chooser. Especially this causes the field label to not
								appear selected when mouse is clicked over it while the mouse is still over the field label.-->
                <Condition Binding="{Binding Path=IsSelectedInFieldChooser, RelativeSource={RelativeSource Self}}" Value="False"/>
              </MultiDataTrigger.Conditions>
              <MultiDataTrigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource SigmaFadeOut}" x:Name="SigmaFadeOut_BeginStoryboard"/>
              </MultiDataTrigger.ExitActions>
              <MultiDataTrigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource SigmaFadeIn}" x:Name="SigmaFadeIn_BeginStoryboard"/>
              </MultiDataTrigger.EnterActions>
              <Setter Property="Background" TargetName="background" Value="{Binding Path=LabelHighlight, RelativeSource={RelativeSource TemplatedParent}}"/>
              <Setter Property="BorderThickness" TargetName="footerMid" Value="0,0,0,1"/>
              <Setter Property="Margin" TargetName="footerMid" Value="3,0,3,-3"/>
              <Setter Property="Visibility" TargetName="footerLeft" Value="Visible"/>
              <Setter Property="Visibility" TargetName="footerRight" Value="Visible"/>
              <Setter Property="BorderBrush" TargetName="footerMid" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.LabelPresenterFooterMidBorderHover}}"/>
              <Setter Property="Background" TargetName="footerMid" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.LabelPresenterFooterMidHover}}"/>
              <Setter Property="Margin" TargetName="backgroundParent" Value="0,0,0,3"/>
              <Setter Property="Visibility" TargetName="rightBorder" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="FilterButton" Property="HasActiveFilters" Value="False"/>
                <Condition Property="IsMouseOver" Value="True"/>
              </MultiTrigger.Conditions>
              <!-- JM 04-09-09 Comment these animations out for now to address TFS 16564.  This bug was discovered as we were getting ready to release
											 the April 2009 9.1 Hotfix and is caused by a bug in the WPF framework that we will need to work around by
											 replacing this MultiTrigger with a MultiDataTrigger. -->
              <!--<MultiTrigger.EnterActions>
                                <BeginStoryboard x:Name="SigmaFadeIn_FB_BeginStoryboard" Storyboard="{StaticResource SigmaFadeInFilterButton}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource SigmaFadeOutFilterButton}" x:Name="SigmaFadeOut_FB_BeginStoryboard"/>
                                <RemoveStoryboard BeginStoryboardName="SigmaFadeIn_FB_BeginStoryboard"/>
                            </MultiTrigger.ExitActions>-->
              <Setter TargetName="FilterButton" Property="Opacity" Value="1"/>
            </MultiTrigger>
            <Trigger SourceName="FilterButton" Property="HasActiveFilters" Value="True">
              <Setter TargetName="FilterButton" Property="Opacity" Value="1"/>
            </Trigger>
            <!-- HighlightPrimary -->
            <Trigger Property="HighlightAsPrimary" Value="true">
              <Setter Property="Background" TargetName="background" Value="{Binding Path=LabelHighlight, RelativeSource={RelativeSource TemplatedParent}}"/>
              <Setter Property="BorderThickness" TargetName="footerMid" Value="0,0,0,1"/>
              <Setter Property="Margin" TargetName="footerMid" Value="3,0,3,-3"/>
              <Setter Property="Visibility" TargetName="footerLeft" Value="Visible"/>
              <Setter Property="Visibility" TargetName="footerRight" Value="Visible"/>
              <Setter Property="BorderBrush" TargetName="footerMid" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.LabelPresenterFooterMidBorderHover}}"/>
              <Setter Property="Background" TargetName="footerMid" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.LabelPresenterFooterMidHover}}"/>
              <Setter Property="Margin" TargetName="backgroundParent" Value="0,0,0,3"/>
              <Setter Property="Visibility" TargetName="rightBorder" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="SortStatus" Value="Ascending">
              <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="SortStatus" Value="Descending">
              <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>
            </Trigger>

            <DataTrigger Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed"/>
              <Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="outerBackground" Property="Visibility" Value="Visible"/>
              <Setter TargetName="background" Property="Margin" Value="1,1,0,1"/>
              <Setter TargetName="background" Property="CornerRadius" Value="2,0,0,2"/>
              <Setter TargetName="outerBackground" Property="CornerRadius" Value="2,0,0,2"/>
              <Setter TargetName="background" Property="BorderThickness" Value="1,1,0,1"/>
              <Setter TargetName="fishHeadOuterStroke" Property="Visibility" Value="Visible"/>
              <Setter TargetName="fishHead" Property="Visibility" Value="Visible"/>
              <Setter TargetName="fishHeadHighlight" Property="Visibility" Value="Visible"/>
              <Setter TargetName="fishHeadInnerStroke" Property="Visibility" Value="Visible"/>
              <Setter TargetName="fishHeadOuterBevel" Property="Visibility" Value="Visible"/>
              <Setter TargetName="fishColumn" Property="Width" Value="14"/>
              <Setter TargetName="footerRight" Property="Visibility" Value="Collapsed"/>
              <Setter TargetName="footerLeft" Property="Visibility" Value="Collapsed"/>
              <Setter TargetName="footerMid" Property="Visibility" Value="Collapsed"/>
              <Setter TargetName="rightBorder" Property="Visibility" Value="Collapsed"/>
              <Setter Property="Padding" Value="4,0,14,0"/>
            </DataTrigger>

            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.HasOffsetY), RelativeSource={RelativeSource Self}}" Value="False"/>
                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True"/>
                <Condition Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.IsFirstInList), RelativeSource={RelativeSource Self}}" Value="False"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="labelCntr" Property="Margin" Value="-23,0,0,0"/>
              <Setter Property="Padding" Value="23,0,14,0"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.IsFirstInList), RelativeSource={RelativeSource Self}}" Value="True">
              <Setter TargetName="labelCntr" Property="Margin" Value="0,0,0,0"/>
            </DataTrigger>

            <!--SSP 6/23/09 - NAS9.2 Field Chooser
							If the label is in a field chooser then hide the sort indicator, filter button and
							summary button. Note that the fixed button is collapsed in code in label presenter
							by coercing the FixedButtonVisibility property to be Collapsed.-->
            <Trigger Property="IsInFieldChooser" Value="true">
              <Setter TargetName="SortIndicator" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="FilterButton" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed"/>
              <Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed" />
            </Trigger>

            <Trigger Property="IsDragIndicator" Value="True">
              <Setter Property="Padding" Value="5,0,14,0"/>
              <Setter TargetName="labelCntr" Property="Margin" Value="0"/>
            </Trigger>

          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

    <!--// JJD 12/21/15 - TFS208975 - Field grouping feature-->
    <!-- _________________________ FieldGroupLabelPresenter __________________________________________ -->
    <Style TargetType="{x:Type igDP:FieldGroupLabelPresenter}">
        <Setter Property="Padding" Value="7,4"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelBackgroundKey}}"/>
        <Setter Property="InnerBorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelInnerBorderKey}}"/>
        <Setter Property="OuterBorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelOuterBorderKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelForegroundKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=FieldGroup.LabelTextAlignmentResolved, Converter={StaticResource textAlignmentToHorizontalAlignmentConverter}, RelativeSource={x:Static RelativeSource.Self}}"/>
        <Setter Property="ToolTip" Value="{Binding Path=FieldGroup.ToolTip, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:FieldGroupLabelPresenter}">
                    <Grid x:Name="labelCntr" Background="#00000000">
                        <!-- Background Bar -->
                        <Border
							Width="Auto"
							Height="Auto"
							RenderTransformOrigin="0.5,0.5"
							CornerRadius="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelCornerRadiusKey}}"
							SnapsToDevicePixels="True"
							Background="{TemplateBinding Background}"
							x:Name="background"/>
                        <Border
							BorderBrush="{TemplateBinding OuterBorderBrush}"
							BorderThickness="1"
							CornerRadius="1.55015910897703"
							Background="Transparent"
							Margin="0,0,0,0"
							x:Name="lineOuter"
							Width="Auto"
							Height="Auto"
							SnapsToDevicePixels="True"/>
                        <Border
							BorderBrush="{TemplateBinding InnerBorderBrush}"
							BorderThickness="1"
							CornerRadius="0.550159108977027"
							Background="Transparent"
							Margin="1,1,1,1"
							x:Name="lineInner"
							Width="Auto"
							Height="Auto"
							SnapsToDevicePixels="True"/>
                        <Grid
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							x:Name="labelAndFixedButton">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <igWindows:ExpansionIndicator
								x:Name="ExpansionIndicator"
								Grid.Column="0"
								Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
                                Command="{x:Static igDP:DataPresenterCommands.ToggleFieldGroupIsCollapsed}"
                                CommandParameter="{TemplateBinding FieldGroup}"
                                ToggleMode="Manual"
								IsChecked="{Binding Path=FieldGroup.IsCollapsed, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}"/>
                            <ContentPresenter
								x:Name="LabelContent"
								Focusable="False"
								Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
								ContentTemplate="{TemplateBinding ContentTemplate}"
								ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
								Grid.Column="1"
								d:LayoutOverrides="Width, Height"
								VerticalAlignment="Center"/>
                            <!-- JM 1/14/09 - Fixed Fields Functionality -->
                            <igDP:FixedFieldButton
								x:Name="FixedButton"
								Field="{TemplateBinding FieldGroup}"
								Visibility="{TemplateBinding FixedButtonVisibility}"
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								Width="Auto"
								Grid.Column="2"
								Margin="2,0,2,0"
								Opacity="1"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!--SSP 6/23/09 - NAS9.2 Field Chooser
							If the label is in a field chooser then hide the sort indicator, filter button and
							summary button. Note that the fixed button is collapsed in code in label presenter
							by coercing the FixedButtonVisibility property to be Collapsed.-->
                        <Trigger Property="IsInFieldChooser" Value="true">
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="labelCntr" Property="Margin" Value="0,0,0,0"/>
                        </Trigger>

                        <Trigger Property="IsDragIndicator" Value="True">
                            <Setter Property="Padding" Value="7,4"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ SummaryRecordPresenter ______________________________________ -->
  <Style TargetType="{x:Type igDP:SummaryRecordPresenter}">
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="HeaderAreaBackground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}"/>
    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryRecordPresenterBackground}}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryRecordPresenterBorder}}"/>
    <Setter Property="Margin" Value="0,0,0,2"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:SummaryRecordPresenter}">
          <igWindows:CardPanel x:Name="baseGrid">
            <Border
  BorderBrush="{TemplateBinding BorderBrush}"
  BorderThickness="0,1,0,1"
  Background="{TemplateBinding Background}"
                RenderTransform="{TemplateBinding FixedNearElementTransform}"
  x:Name="Background"/>
            <Grid Margin="0">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <!-- SSP 5/6/08 - Record Separators - Added two col defs-->
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <!-- SSP 5/6/08 - Record Separators - Added two row defs-->
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <Border x:Name="OrientationHorizontalSep" BorderThickness="0,0,1,0" Grid.ColumnSpan="5" Background="#FFFAFAFA" BorderBrush="#FFE7E7E7"  Visibility="Collapsed"/>
              <!-- Expansion Checkbox -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.row to 2 from 1-->
              <!-- AS 6/3/09 NA 2009 Vol 2 - Added Command(Parameter) & ToggleMode to support undo/redo -->
              <igWindows:ExpansionIndicator
  x:Name="ExpansionIndicator"
  Grid.Row="2"
  Grid.Column="0"
  Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
                  Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}"
                  CommandParameter="{TemplateBinding Record}"
                  ToggleMode="Manual"
  IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
              <!-- Header Background -->
              <!-- Added 8/2/2006 GH -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.colspan to 5 from 3-->
              <!-- AS 2/10/09 TFS13798 - Set RenderTransform for fixed fields -->
              <igWindows:CardPanel
  x:Name="SpacerFill"
                  RenderTransform="{TemplateBinding FixedNearElementTransform}"
  Grid.Row="0"
  Grid.Column="0"
  Grid.ColumnSpan="5"
  Visibility="Visible">
                <Rectangle x:Name="fill" Margin="0,0,0,0" Fill="{TemplateBinding HeaderAreaBackground}"/>
                <Rectangle
  x:Name="lightLine"
  Fill="#3FFFFFFF"
  VerticalAlignment="Top"
  Margin="0,1,0,0"
  Width="Auto"
  Height="1"/>
                <Rectangle
  x:Name="darkLine"
  Fill="#66000000"
  VerticalAlignment="Top"
  Margin="0,0,0,0"
  Width="Auto"
  Height="1"/>
              </igWindows:CardPanel>
              <!-- End Added 8/2/2006 GH -->
              <!-- Header Content -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.col to 2 from 1-->
              <ContentPresenter
  x:Name="PART_HeaderContentSite"
  Grid.Row="0"
  Grid.Column="2"
  Content="{TemplateBinding HeaderContent}"
  Visibility="Visible"
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
  d:IsHidden="True"/>
              <!-- SSP 5/6/08 - Record Separators - Added separator rectangle -->
              <Border
  x:Name="RecordSeparator"
  Grid.Row="1"
  Grid.Column="0"
  Grid.ColumnSpan="5"
  Visibility="Collapsed"
                  RenderTransform="{TemplateBinding FixedNearElementTransform}"
  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=RecordSeparatorStyle}}"/>
              <!-- Record Content -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.row to 2 from 1 and grid.col to 2 from 1-->
              <ContentPresenter
  x:Name="PART_RecordContentSite"
  Grid.Row="2"
  Grid.Column="2"
  Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"
  ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
  Margin="{TemplateBinding ContentAreaMargins}"/>
            </Grid>
          </igWindows:CardPanel>
          <ControlTemplate.Triggers>
            <!-- AS 11/8/11 TFS88111 -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=FieldLayout.AutoFitToWidth, RelativeSource={RelativeSource Self}}" Value="True" />
                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_HeaderContentSite" Property="Grid.ColumnSpan" Value="3"/>
              <Setter TargetName="PART_RecordContentSite" Property="Grid.ColumnSpan" Value="3"/>
              <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            </MultiDataTrigger>

            <Trigger Property="Orientation" Value="Horizontal">
              <!-- START SSP 5/6/08 - Record Separators
                             <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="1" />
                            <Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="3" />
														-->
              <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="2"/>
              <Setter TargetName="PART_HeaderContentSite" Property="Grid.Column" Value="0"/>
              <Setter TargetName="PART_RecordContentSite" Property="VerticalAlignment" Value="Top"/>
              <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0"/>
              <Setter TargetName="ExpansionIndicator" Property="Margin" Value="0,2"/>
              <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="2"/>
              <Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1"/>
              <Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="5"/>
              <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="2"/>
              <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="1"/>
              <Setter TargetName="RecordSeparator" Property="Width" Value="10"/>
              <Setter TargetName="RecordSeparator" Property="Height" Value="Auto"/>
              <Setter TargetName="OrientationHorizontalSep" Property="Visibility" Value="Visible"/>
              <!-- END SSP 5/6/08 - Record Separators -->
            </Trigger>
            <Trigger Property="ShouldDisplayRecordContent" Value="False">
              <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Collapsed"/>
              <!--JJD 9/4/07 - BR26153 -->
              <!--Only set ExpansionIndicator Visibility to Hidden if is was Visible (see new MultiTrigger below) -->
              <!--<Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />-->
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Orientation" Value="Horizontal"/>
                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
              </MultiTrigger.Conditions>
              <!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
              <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="3"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Orientation" Value="Vertical"/>
                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
              </MultiTrigger.Conditions>
              <!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
              <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="3"/>
            </MultiTrigger>
            <Trigger Property="IsHeaderRecord" Value="True">
              <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0"/>
              <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="0"/>
            </Trigger>
            <Trigger Property="HasHeaderContent" Value="False">
              <Setter Property="Visibility" TargetName="SpacerFill" Value="Collapsed"/>
              <Setter Property="Visibility" TargetName="PART_HeaderContentSite" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsFixedOnBottom" Value="true">
              <Setter Property="Margin" Value="0,2,0,0"/>
              <!-- JJD 2/3/09 - shouldn't step on Margin property of PART_RecordContentSite since
                                 it is bound to the ContentAreaMargins property -->
              <!--<Setter Property="Margin" TargetName="PART_RecordContentSite" Value="0,2,0,2"/>-->
              <Setter Property="BorderThickness" TargetName="Background" Value="0,1,0,0"/>
            </Trigger>
            <!-- START SSP 5/6/08 - Record Separators -->
            <!-- For HasSeparatorBefore, default grid.row and grid.column settings are fine as setup
												when declaring the record separator (and for horizontal orientation as setup in the
												orientation=horizontal trigger above).
											-->
            <Trigger Property="HasSeparatorBefore" Value="true">
              <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
            </Trigger>
            <!-- For HasSeparatorAfter, we have to set grid.row and grid.col based on the orientation-->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasSeparatorAfter" Value="true"/>
                <Condition Property="Orientation" Value="Vertical"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
              <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="3"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasSeparatorAfter" Value="true"/>
                <Condition Property="Orientation" Value="Horizontal"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
              <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="3"/>
            </MultiTrigger>
            <!-- END SSP 5/6/08 - Record Separators -->
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="TemplateCardView">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:SummaryRecordPresenter}">
          <igWindows:CardPanel x:Name="baseGrid" Background="{TemplateBinding Background}">
            <!-- Record Content -->
            <Rectangle Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CardBackground}}"/>
            <ContentPresenter
  x:Name="PART_RecordContentSite"
  Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"
  ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </igWindows:CardPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- _________________________ SummaryRecordPrefixArea __________________________________________ -->
  <Style TargetType="{x:Type igDP:SummaryRecordPrefixArea}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:SummaryRecordPrefixArea}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter
  Content="{TemplateBinding Content}"
  ContentTemplate="{TemplateBinding ContentTemplate}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- _________________________ SummaryRecordCellArea __________________________________________ -->
  <Style TargetType="{x:Type igDP:SummaryRecordCellArea}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:SummaryRecordCellArea}">
          <igWindows:CardPanel>
            <Border BorderThickness="0,1,0,1">
              <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
            </Border>
          </igWindows:CardPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <!-- AS 2/19/09 TFS14155
            This margin causes a horizontal view to be out of alignment with the other records.
        <Setter Property="Margin" Value="3,0,0,0"/>-->
  </Style>

  <!-- _________________________ SummaryResultsPresenter ______________________________________ -->
  <!-- _________________________ SummaryResultPresenter ______________________________________ -->
  <Style TargetType="{x:Type igDP:SummaryResultPresenter}">
    <Setter Property="Padding" Value="1,1"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:SummaryResultPresenter}">
          <Border
  Background="{TemplateBinding Background}"
  BorderBrush="{TemplateBinding BorderBrush}"
  BorderThickness="1"
  Padding="{TemplateBinding Padding}"
  ToolTip="{Binding Path=SummaryResult.ToolTipResolved, RelativeSource={RelativeSource TemplatedParent}}">
            <!-- SSP 3/19/10 - Optimizations
                            Changed the binding to bind to the new DisplayTextAsync instead of the DisplayText so we
                            don't force synchronous calculation of the summary if it's dirty.
                        -->
            <TextBlock Text="{Binding Path=SummaryResult.DisplayTextAsync, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- _________________________ SummaryCellPresenter ______________________________________ -->
  <Style TargetType="{x:Type igDP:SummaryCellPresenter}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:SummaryCellPresenter}">
          <igDP:SummaryCellPresenterLayoutElement/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- _________________________ SummaryButton ______________________________________ -->
  <Style TargetType="{x:Type igDP:SummaryButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:SummaryButton}">
          <Grid Visibility="Visible" x:Name="grid">
            <StackPanel
  HorizontalAlignment="Center"
  VerticalAlignment="Stretch"
  Orientation="Horizontal"
  Margin="0,0,3,0"
  Background="#00FFFFFF"
  x:Name="stackPanel"
  Visibility="Visible">
              <Path
  Stretch="Fill"
  Data="M 0,0 C0,0 5,0 5,0 5,0 5,1 5,1 5,1 2,1 2,1 2,1 4,3.5 4,3.5 4,3.5 2,6 2,6 2,6 5,6 5,6 5,6 5,7 5,7 5,7 0,7 0,7 0,7 0,6 0,6 0,6 2,3.5625 2,3.5625 2,3.5625 0,1 0,1 0,1 0,0 0,0 z"
  Fill="{TemplateBinding Foreground}"
  Width="5"
  Height="7"
  d:LayoutOverrides="Width, Height"
  x:Name="path"
  Stroke="{x:Null}"
  HorizontalAlignment="Stretch"
  StrokeThickness="0"
  Margin="3,0,0,0"/>
            </StackPanel>
            <Popup
  x:Name="PART_Popup"
  AllowsTransparency="True"
  Placement="Bottom"
  VerticalOffset="1"
  HorizontalOffset="0"
  IsOpen="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
  StaysOpen="False"
  PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
  SnapsToDevicePixels="True">
              <!-- JJD 3/5/09 - TFS5971/BR32606 - set focus scope to true and navigation settings-->
              <Border
  BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupBorder}}"
  x:Name="border"
  Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupBackground}}"
                  KeyboardNavigation.DirectionalNavigation="Contained"
                  KeyboardNavigation.TabNavigation="Contained"
                  FocusManager.IsFocusScope="True"
  BorderThickness="1,1,1,1"
  CornerRadius="0,0,0,0">
                <Grid Width="Auto" Height="Auto">
                  <Border
  Width="28"
  HorizontalAlignment="Left"
  BorderThickness="0,0,1,0"
  Background="#FFF7F7F7"
  BorderBrush="#FFE0E0E0"
  CornerRadius="3,0,0,0"/>
                  <Rectangle
  HorizontalAlignment="Left"
  Margin="28,0,0,0"
  Width="1"
  Fill="#FFFFFFFF"
  Stroke="{x:Null}"
  StrokeThickness="0"/>
                  <StackPanel Margin="5,5,5,5">
                    <igDP:SummaryCalculatorSelectionControl x:Name="CalculatorSelectionControl" Field="{TemplateBinding Field}"/>
                    <Grid Width="Auto" Height="Auto">
                      <Border Margin="-5,0,-5,-5" Background="#FFFFFFFF" CornerRadius="0,0,3,3"/>
                      <Rectangle
  Fill="#FFE0E0E0"
  Stroke="{x:Null}"
  Width="Auto"
  Height="1"
  x:Name="rectangle1"
  Margin="-5,0,-5,0"
  VerticalAlignment="Top"/>
                      <StackPanel
  Orientation="Horizontal"
  HorizontalAlignment="Right"
  Margin="0,5,0,0"
  d:LayoutOverrides="Width">
                        <Button
  x:Name="RowSummaryOkButton"
  Content="Ok"
  IsDefault="True"
  Height="12"
  Margin="0,0,5,0"
  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=RowSummaryOkButton}}"
  Width="13"/>
                        <!-- JJD 3/5/09 - TFS5971/BR32606 - set IsCancel to True-->
                        <Button
  x:Name="RowSummaryCancelButton"
  Content="Cancel"
                            IsCancel="True"
  Height="12"
  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=RowSummaryCancelButton}}"
  Width="13"/>
                      </StackPanel>
                    </Grid>
                  </StackPanel>
                </Grid>
              </Border>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Background" Value="{x:Null}"/>
    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonForeground}}"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
  </Style>

  <!-- _________________________ SummaryCalculatorSelectionControl ______________________________________ -->
  <Style TargetType="{x:Type igDP:SummaryCalculatorSelectionControl}">
    <Style.Resources>
      <!-- SSP 9/21/09 TFS15959 - Instead of setting ItemTemplate on the ItemsControl, add the
							data template to the style resources.-->
      <DataTemplate DataType="{x:Type igDP:SummaryCalculatorHolder}">
        <igWindows:CardPanel x:Name="mainPanel">
          <Grid Margin="0,0,0,5">
            <!-- JJD 3/5/09 - TFS5971/BR32606 - set FocusVisualStyle to null-->
            <!-- SSP 10/16/09 TFS19525 - Added line that sets AutomationProperties.AutomationId -->
            <CheckBox
  x:Name="checkBox"
  AutomationProperties.AutomationId="{Binding Path=Calculator.Name, Converter={StaticResource stringFormatConverter}, ConverterParameter=\{0\}_CheckBox}"
  Style="{DynamicResource OfficeCheckBox}"
  Visibility="Visible"
  Grid.Column="0"
                        FocusVisualStyle="{x:Null}"
  IsChecked="{Binding Path=IsChecked, Mode=TwoWay}">
              <StackPanel Margin="5,0,0,0">
                <Image Source="{Binding Path=Calculator.Image}" Margin="5,0,0,0"/>
                <TextBlock Text="{Binding Path=Calculator.DisplayName}" Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCSCItemForeground}}" Margin="5,0"/>
              </StackPanel>
            </CheckBox>
          </Grid>
          <Grid Margin="0,0,0,5">
            <!-- JJD 3/5/09 - TFS5971/BR32606 - set FocusVisualStyle to null-->
            <!-- SSP 10/16/09 TFS19525 - Added line that sets AutomationProperties.AutomationId -->
            <RadioButton
  x:Name="radioButton"
  AutomationProperties.AutomationId="{Binding Path=Calculator.Name, Converter={StaticResource stringFormatConverter}, ConverterParameter=\{0\}_RadioButton}"
  Visibility="Collapsed"
  Grid.Column="0"
                        FocusVisualStyle="{x:Null}"
  IsChecked="{Binding Path=IsChecked, Mode=TwoWay}">
              <StackPanel Margin="5,0,0,0">
                <Image Source="{Binding Path=Calculator.Image}" Margin="5,0,0,0"/>
                <TextBlock Text="{Binding Path=Calculator.DisplayName}" Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCSCItemForeground}}" Margin="5,0"/>
              </StackPanel>
            </RadioButton>
          </Grid>
          <!-- JJD 3/5/09 - TFS5971/BR32606 - added focus rect-->
          <Rectangle Visibility="{Binding Path=IsKeyboardFocusWithin, ElementName=mainPanel, Converter={StaticResource BoolToVisConverter}}" Margin="17,0,0,3" Stroke="#D0000000" StrokeThickness="1" StrokeDashArray="1 2"/>
        </igWindows:CardPanel>
        <DataTemplate.Triggers>
          <DataTrigger Binding="{Binding Path=SelectionControl.AllowMultipleSummaries}" Value="False">
            <Setter TargetName="checkBox" Property="Visibility" Value="Collapsed"/>
            <Setter TargetName="radioButton" Property="Visibility" Value="Visible"/>
          </DataTrigger>
        </DataTemplate.Triggers>
      </DataTemplate>
    </Style.Resources>
    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:SummaryCalculatorSelectionControl}">
          <!-- JJD 3/5/09 - TFS5971/BR32606 - set focusable to false-->
          <ItemsControl
  ItemsSource="{TemplateBinding SummaryCalculatorHolders}"
  KeyboardNavigation.DirectionalNavigation="Contained"
              Focusable="False"
  Margin="{TemplateBinding Padding}"
  Foreground="{TemplateBinding Foreground}"
					/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="BorderThickness" Value="1,1,1,1"/>
    <Setter Property="Padding" Value="3,3,3,5"/>
  </Style>

  <!-- _________________________ GroupBySummariesPresenter ______________________________________ -->
  <Style TargetType="{x:Type igDP:GroupBySummariesPresenter}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:GroupBySummariesPresenter}">
          <Border Margin="{TemplateBinding ContentAreaMargins}" Background="{TemplateBinding Background}">
            <igDP:SummaryRecordContentArea/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, RowSummaryOkButton}" BasedOn="{x:Null}" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Path
  Opacity="1"
  Stretch="Fill"
  Stroke="{TemplateBinding BorderBrush}"
  StrokeThickness="0.5"
  Data="M 11.44970703125,-0.32843017578125 C11.44970703125,-0.32843017578125 5.0858154296875,6.0355224609375 5.0858154296875,6.0355224609375 5.0858154296875,6.0355224609375 2.55023193359375,3.5 2.55023193359375,3.5 2.55023193359375,3.5 0.13604736328125,5.914215087890625 0.13604736328125,5.914215087890625 0.13604736328125,5.914215087890625 5.0858154296875,10.86395263671875 5.0858154296875,10.86395263671875 5.0858154296875,10.86395263671875 13.86395263671875,2.085784912109375 13.86395263671875,2.085784912109375 13.86395263671875,2.085784912109375 11.44970703125,-0.32843017578125 11.44970703125,-0.32843017578125 z"
  x:Name="path"
  Fill="{TemplateBinding Background}"/>
            <ContentPresenter
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
  RecognizesAccessKey="True"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True"/>
            <Trigger Property="IsDefaulted" Value="True"/>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Fill" TargetName="path">
                <Setter.Value>
                  <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FF99FF00" Offset="0"/>
                    <GradientStop Color="#FF0A9F00" Offset="1"/>
                  </LinearGradientBrush>
                </Setter.Value>
              </Setter>
              <Setter Property="Stroke" TargetName="path" Value="#FF336C03"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True"/>
            <Trigger Property="IsEnabled" Value="False"/>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Foreground" Value="{x:Null}"/>
    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCommandButtonsBackground}}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCommandButtonsBorder}}"/>
  </Style>

  <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, RowSummaryCancelButton}" BasedOn="{x:Null}" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Path
  HorizontalAlignment="Stretch"
  VerticalAlignment="Stretch"
  Height="Auto"
  Width="Auto"
  Stretch="Fill"
  Opacity="1"
  Data="M 561.3890991210938,474.9895935058594 C561.3890991210938,474.9895935058594 557.5,478.8799743652344 557.5,478.8799743652344 557.5,478.8799743652344 553.6109008789062,474.9895935058594 553.6109008789062,474.9895935058594 553.6109008789062,474.9895935058594 551.4895629882812,477.11090087890625 551.4895629882812,477.11090087890625 551.4895629882812,477.11090087890625 555.3800048828125,481 555.3800048828125,481 555.3800048828125,481 551.4895629882812,484.88909912109375 551.4895629882812,484.88909912109375 551.4895629882812,484.88909912109375 553.6109008789062,487.0104064941406 553.6109008789062,487.0104064941406 553.6109008789062,487.0104064941406 557.5,483.1199951171875 557.5,483.1199951171875 557.5,483.1199951171875 561.3890991210938,487.0104064941406 561.3890991210938,487.0104064941406 561.3890991210938,487.0104064941406 563.5104370117188,484.88909912109375 563.5104370117188,484.88909912109375 563.5104370117188,484.88909912109375 559.6199951171875,481 559.6199951171875,481 559.6199951171875,481 563.5104370117188,477.11090087890625 563.5104370117188,477.11090087890625 563.5104370117188,477.11090087890625 561.3890991210938,474.9895935058594 561.3890991210938,474.9895935058594 z"
  Stroke="{TemplateBinding BorderBrush}"
  StrokeThickness=".5"
  Fill="{TemplateBinding Background}"
  x:Name="path"/>
            <ContentPresenter
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
  RecognizesAccessKey="True"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True"/>
            <Trigger Property="IsDefaulted" Value="True"/>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Stroke" TargetName="path" Value="#FFA41818"/>
              <Setter Property="Fill" TargetName="path" Value="#FFF83737"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True"/>
            <Trigger Property="IsEnabled" Value="False"/>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Foreground" Value="{x:Null}"/>
    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCommandButtonsBackground}}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCommandButtonsBorder}}"/>
  </Style>

  <!-- HC 2/3/2009 Custom Luna -->
  <!-- AS 1/7/09 NA 2009 Vol 1 - Fixed Fields -->
  <Style TargetType="{x:Type igDP:FixedFieldSplitter}" BasedOn="{StaticResource FixedFieldSplitterBaseStyle}">
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterStrokeBrush}}"/>
    <Setter Property="Template" Value="{StaticResource LunaFixedFieldSplitterTemplate}" />
    <Style.Triggers>
      <Trigger Property="IsHighlighted" Value="True">
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterHottrackStrokeBrush}}"/>
      </Trigger>
    </Style.Triggers>
  </Style>

</ResourceDictionary>