<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:igWindows="http://infragistics.com/Windows"
	xmlns:igThemes="http://infragistics.com/Themes"
	xmlns:editors="http://infragistics.com/Editors"
	xmlns:igDP="http://infragistics.com/DataPresenter"
	xmlns:themes="http://infragistics.com/Themes"
	xmlns:System="clr-namespace:System;assembly=mscorlib"
	xmlns:interop="clr-namespace:System.Windows.Interop;assembly=PresentationFramework"
	xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
	xmlns:luna="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Luna"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	mc:Ignorable="d"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:igPrim="http://schemas.infragistics.com/xaml/primitives">

	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="DataPresenterGeneric_Brushes.xaml"/>
	</ResourceDictionary.MergedDictionaries>

	<!-- ____________________________________________________________________________ -->
	<!--                                                                              -->
	<!--                             Converters                                       -->
	<!-- ____________________________________________________________________________ -->
	<igDP:TextAlignmentToHorizontalAlignmentConverter x:Key="textAlignmentToHorizontalAlignmentConverter"/>

	<!--SSP 7/20/09 - NAS9.2 Field Chooser - Added NotBoolToVisibilityConverter-->
	<igWindows:NotBoolToVisibilityConverter x:Key="NotBoolToVisConverter" />

    <!--// JJD 12/21/15 - TFS208975 - Field grouping feature-->
    <igWindows:BoolToValueConverter x:Key="complementConverter" >
        <igWindows:BoolToValueConverter.TrueConvertValue>
            <System:Boolean>False</System:Boolean>
        </igWindows:BoolToValueConverter.TrueConvertValue>
        <igWindows:BoolToValueConverter.FalseConvertValue>
            <System:Boolean>True</System:Boolean>
        </igWindows:BoolToValueConverter.FalseConvertValue>
    </igWindows:BoolToValueConverter>

    <!--SSP 10/16/09 TFS19525 - Added StringFormatConverter-->
	<igWindows:StringFormatConverter x:Key="stringFormatConverter" />

	<!-- AS 3/10/11 NA 2011.1 - Async Exporting -->
	<igWindows:NullToFalseConverter x:Key="nullToFalseConverter" />

    <!-- MRS 10/28/2020 - TFS245741 -->
    <igPrim:EmptyToCollapsedConverter x:Key="emptyToCollapsed" />

    <!-- ____________________________________________________________________________ -->
	<!--                                                                              -->
	<!--                             Storyboards                                      -->
	<!-- ____________________________________________________________________________ -->
	<Storyboard PresentationOptions:Freeze="true" x:Key="ExpandLabel">
		<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleX)" BeginTime="0:0:0">
			<DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1"/>
		</DoubleAnimationUsingKeyFrames>
	</Storyboard>
	<Storyboard PresentationOptions:Freeze="true" x:Key="CollapseLabel">
		<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleX)" BeginTime="0:0:00">
			<DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
		</DoubleAnimationUsingKeyFrames>
	</Storyboard>
	<!-- ____________________________________________________________________________ -->
	<!--                                                                              -->
	<!--                             End of Storyboards                               -->
	<!-- ____________________________________________________________________________ -->

	<!-- _________________________ LabelContent Style______________________________________ -->
	<Style x:Key="LabelContentStyle" TargetType="{x:Type ContentControl}">
		<Setter Property="Padding" Value="10,3,10,3"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContentControl}">
					<ContentPresenter
						Margin="{TemplateBinding Padding}"
						Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
						ContentTemplate="{TemplateBinding ContentTemplate}"
						ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ BlackForegroundStyle ______________________________________ -->
	<Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}">
		<Setter Property="TextBlock.Foreground" Value="#FF333333" />
	</Style>

	<Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, BlackForegroundStyle}">
		<Setter Property="TextBlock.Foreground" Value="Black" />
	</Style>

	<!-- AS 5/31/07 BR22875 -->
	<!-- _________________________ Converters ______________________________________ -->
	<BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>
	<!-- RecordSeparatorStyle-->
	<Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, RecordSeparatorStyle}" TargetType="{x:Type Border}">
		<Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCommandButtonsBackgroundHover}}"/>
		<Setter Property="HorizontalAlignment" Value="Stretch"/>
		<Setter Property="VerticalAlignment" Value="Stretch"/>
		<Setter Property="Height" Value="6"/>
		<Setter Property="BorderThickness" Value="0,1,0,1"/>
		<Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCommandButtonsBorder}}"/>
	</Style>

	<!-- _________________________ XamDataGrid __________________________________________ -->
	<Style TargetType="{x:Type igDP:XamDataGrid}">
		<Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.BaseBackgroundKey}}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:XamDataGrid}">
					<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
						<Grid x:Name="PART_ContentSiteGrid"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ XamTreeGrid __________________________________________ -->
    <Style TargetType="{x:Type igDP:XamTreeGrid}">
		<Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.BaseBackgroundKey}}"/>
		<Setter Property="Template">
			<Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:XamTreeGrid}">
					<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
						<Grid x:Name="PART_ContentSiteGrid"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ CellPresenter __________________________________________ -->
	<Style TargetType="{x:Type igDP:CellPresenter}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:CellPresenter}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}"
						SnapsToDevicePixels="True">
						<igDP:CellPresenterLayoutElement SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--SSP 4/17/09 NAS9.2 IDataErrorInfo Support-->
	<!-- _________________________ DataErrorContentTemplate __________________________________________ -->
	<DataTemplate x:Key="{x:Static igDP:DataPresenterBase.DataErrorContentTemplateKey}" >
		<Border x:Name="Bd">
			<DockPanel x:Name="panel">
				<igWindows:AutomationControl x:Name="errorIcon"
								 DockPanel.Dock="Left"
								 Visibility="Collapsed"
								 Margin="2,0"
								 Style="{DynamicResource {x:Static igDP:DataPresenterBase.DataErrorIconStyleKey}}" />
				<!-- SSP 9/11/09 TFS22093 - Set the DataContext to be the associated Record-->
        <!-- SSP 6/19/12 TFS110839
          Instead of setting the ContentTemplate to null, bind it to the CellValuePresenter's ContentTemplate
          so that way it picks up any ContentTemplate that a custom CellValuePresenter style may be setting.
          Commented out the following code and instead added the binding to ContentTemplate.
          ContentTemplate="{x:Null}"
        -->
        <ContentPresenter
          ContentTemplate="{Binding Path=Content.Host.ContentTemplate, RelativeSource={x:Static RelativeSource.Self}}"
					DataContext="{Binding Path=Content.Host.DataContext, RelativeSource={x:Static RelativeSource.Self}}"
				/>
			</DockPanel>
		</Border>
		<DataTemplate.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Path=Host.HasDataError}" Value="true" />
					<Condition Binding="{Binding Path=Host.IsDataErrorDisplayModeIcon}" Value="true" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="errorIcon" Property="Visibility" Value="Visible" />
				<Setter TargetName="errorIcon" Property="ToolTip" Value="{Binding Path=Host.DataError}" />
			</MultiDataTrigger>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding Path=Host.HasDataError}" Value="true" />
					<Condition Binding="{Binding Path=Host.IsDataErrorDisplayModeHighlight}" Value="true" />
				</MultiDataTrigger.Conditions>
				<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.DataErrorHighlightBackgroundBrushKey}}" />
				<Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.DataErrorHighlightBorderBrushKey}}" />
				<Setter TargetName="Bd" Property="BorderThickness" Value="1"/>
				<Setter TargetName="Bd" Property="CornerRadius" Value="1"/>
				<Setter TargetName="panel" Property="ToolTip" Value="{Binding Path=Host.DataError}" />
			</MultiDataTrigger>
		</DataTemplate.Triggers>
	</DataTemplate>

	<!--SSP 4/23/09 NAS9.2 IDataErrorInfo Support-->
	<!-- _________________________ DataErrorIconStyle __________________________________________ -->
	<Style x:Key="{x:Static igDP:DataPresenterBase.DataErrorIconStyleKey}" TargetType="{x:Type Control}" >
		<Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.DataErrorIconForegroundBrushKey}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Control}">
					<Border Background="{TemplateBinding Background}">
						<Path
							Width="8"
							Height="8"
							Data="M 8,4.457 C8,4.457 5,4.457 5,4.457 5,4.457 7.5,6.987 7.5,6.987 7.5,6.987 5.5,8 5.5,8 5.5,8 4,5.469 4,5.469 4,5.469 2.5,8 2.5,8 2.5,8 0.5,6.987 0.5,6.987 0.5,6.987 3,4.457 3,4.457 3,4.457 0,4.457 0,4.457 0,4.457 0.5,1.927 0.5,1.927 0.5,1.927 3,2.433 3,2.433 3,2.433 2.759,0 2.759,0 2.759,0 5.273,0 5.273,0 5.273,0 5,2.433 5,2.433 5,2.433 7.5,1.927 7.5,1.927 7.5,1.927 8,4.457 8,4.457 z"
							Fill="{TemplateBinding Foreground}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ CellValuePresenter __________________________________________ -->
	<Style TargetType="{x:Type igDP:CellValuePresenter}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BackgroundHover" Value="Transparent"/>
		<Setter Property="BorderHoverBrush" Value="Transparent"/>
		<Setter Property="BackgroundActive">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Offset="0" Color="#FF85A2B2"/>
					<GradientStop Offset="1.1" Color="#00FFFFFF"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderActiveBrush" Value="#00151C55"/>
		<Setter Property="BackgroundSelected">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Offset="0" Color="#FFCAEBFF"/>
					<GradientStop Offset="1.1" Color="#00FFFFFF"/>
					<GradientStop Color="#83CAEBFF" Offset="1"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderSelectedBrush" Value="#FF666666"/>
		<Setter Property="BackgroundFieldSelected">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Offset="0" Color="#FFDDDDDD"/>
					<GradientStop Offset="1.1" Color="#00FFFFFF"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderFieldSelectedBrush" Value="#FF666666"/>
		<Setter Property="BackgroundPrimary" Value="#7FE9E9E9"/>
		<Setter Property="BorderPrimaryBrush" Value="#FFE9E9E9"/>
		<Setter Property="ForegroundStyle">
			<Setter.Value>
				<Style/>
			</Setter.Value>
		</Setter>
		<Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
		<Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
		<Setter Property="ForegroundPrimaryStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
		<Setter Property="ForegroundSelectedStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
		<Setter Property="ForegroundFieldSelectedStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
		<Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
		<Setter Property="CornerRadius" Value="0"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Padding" Value="2,0,0,0"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<!-- AS 5/23/07 BR23120 -->
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:CellValuePresenter}">
					<igWindows:CardPanel>
						<!-- [JM 06-06-07] This element is not being used so I am commenting it out.  Its Visibility property is initialized to Collapsed and the IsSelected
                               trigger below has commented out the line that sets the Visibility to Visible. Checked with Grant on this and he feels it is left over
                               from early styling efforts and can be removed. -->
						<!--<Rectangle x:Name="LeftBorder"
							Fill="#FFBBBBBB"
							Width="1"
							Margin="0,1,0,0"
							HorizontalAlignment="Left"
							VerticalAlignment="Stretch"
							Visibility="Collapsed" />-->
						<Border
							x:Name="MainBorder"
							CornerRadius="{TemplateBinding CornerRadius}"
							BorderThickness="{TemplateBinding BorderThickness}"
							BorderBrush="{TemplateBinding BorderBrush}"
							Background="{TemplateBinding Background}"/>
						<Rectangle
							x:Name="Active"
							Fill="{TemplateBinding BackgroundActive}"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							Width="Auto"
							Height="Auto"
							SnapsToDevicePixels="True"
							Opacity="1"
							Visibility="Collapsed"
							StrokeThickness="1"
							Stroke="{TemplateBinding BorderActiveBrush}"/>
						<ContentPresenter
							x:Name="PART_EditorSite"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Margin="{TemplateBinding Padding}"
							Style="{TemplateBinding ForegroundStyle}"
						/>
					</igWindows:CardPanel>
					<ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsAlternate, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=Record.RecordType, RelativeSource={RelativeSource Self}}" Value="DataRecord"/>
                                <Condition Binding="{Binding Path=Record.IsAddRecord, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundAlternateStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiDataTrigger>

                        <!-- HighlightAsPrimary -->
						<Trigger Property="HighlightAsPrimary" Value="true">
							<Setter Property="Background" Value="{Binding Path=BackgroundPrimary, RelativeSource={RelativeSource Self}}"/>
							<Setter Property="BorderBrush" Value="{Binding Path=BorderPrimaryBrush, RelativeSource={RelativeSource Self}}"/>
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundPrimaryStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
						</Trigger>
						<!-- IsFieldSelected -->
						<Trigger Property="IsFieldSelected" Value="true">
							<Setter Property="Background" Value="{Binding Path=BackgroundFieldSelected, RelativeSource={RelativeSource Self}}"/>
							<Setter Property="BorderBrush" Value="{Binding Path=BorderFieldSelectedBrush, RelativeSource={RelativeSource Self}}"/>
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundFieldSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
						</Trigger>
						<!-- IsSelected -->
						<Trigger Property="IsSelected" Value="true">
							<Setter Property="Background" Value="{Binding Path=BackgroundSelected, RelativeSource={RelativeSource Self}}"/>
							<Setter Property="BorderBrush" Value="{Binding Path=BorderSelectedBrush, RelativeSource={RelativeSource Self}}"/>
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
							<!--<Setter Property="Visibility" Value="Visible" TargetName="LeftBorder" />-->
						</Trigger>
						<!-- IsActive -->
						<Trigger Property="IsActive" Value="true">
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="Visibility" TargetName="Active" Value="Visible"/>
                            <!-- SS 10/23/15 TFS208100 Set the Background to Transparent, so only the ActiveBackground color could be applied when the cell is active-->
                            <Setter Property="Background" Value="Transparent"/>
						</Trigger>
						<!-- IsMouseOver -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="IsSelected" Value="False"/>
								<Condition Property="IsFieldSelected" Value="False"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}"/>
							<Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}"/>
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
						</MultiTrigger>
						<!-- Field.IsFixedStateChanging    JM 01-22-09 NA 9.1 FixedFields   -->
						<DataTrigger Binding="{Binding Path=Field.IsFixedStateChanging, RelativeSource={RelativeSource Self}}" Value="True">
							<Setter Property="Background" Value="#AA8DBAEB"/>
							<Setter Property="BorderBrush" Value="#AA8DBAEB"/>
						</DataTrigger>
						<!--SSP 5/27/09 NAS9.2 IDataErrorInfo Support-->
						<Trigger Property="IsDataErrorTemplateActive" Value="true">
							<Setter TargetName="PART_EditorSite" Property="ContentTemplate" Value="{DynamicResource {x:Static igDP:DataPresenterBase.DataErrorContentTemplateKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<!-- DRCA Foreground Hover Trigger-->

			<!-- JJD 4/30/09 - TFS17157 use new IsRecordSelected property -->
			<Trigger Property="IsRecordSelected" Value="True">
				<Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
			</Trigger>

			<!-- DRCA Foreground Selected Trigger-->
			<!-- JJD 4/30/09 - TFS17157 use new IsMouseOverRecord property -->
			<Trigger Property="IsMouseOverRecord" Value="True">
				<Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
			</Trigger>

		</Style.Triggers>
	</Style>

    <!-- _________________________ TreeCellValuePresenter __________________________________________ -->
    <Style TargetType="{x:Type igDP:TreeCellValuePresenter}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BackgroundHover" Value="Transparent"/>
		<Setter Property="BorderHoverBrush" Value="Transparent"/>
		<Setter Property="BackgroundActive">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Offset="0" Color="#FF85A2B2"/>
					<GradientStop Offset="1.1" Color="#00FFFFFF"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderActiveBrush" Value="#00151C55"/>
		<Setter Property="BackgroundSelected">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Offset="0" Color="#FFCAEBFF"/>
					<GradientStop Offset="1.1" Color="#00FFFFFF"/>
					<GradientStop Color="#83CAEBFF" Offset="1"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderSelectedBrush" Value="#FF666666"/>
		<Setter Property="BackgroundFieldSelected">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Offset="0" Color="#FFDDDDDD"/>
					<GradientStop Offset="1.1" Color="#00FFFFFF"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderFieldSelectedBrush" Value="#FF666666"/>
		<Setter Property="BackgroundPrimary" Value="#7FE9E9E9"/>
		<Setter Property="BorderPrimaryBrush" Value="#FFE9E9E9"/>
		<Setter Property="ForegroundStyle">
			<Setter.Value>
				<Style/>
			</Setter.Value>
		</Setter>
		<Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
		<Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
		<Setter Property="ForegroundPrimaryStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
		<Setter Property="ForegroundSelectedStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
		<Setter Property="ForegroundFieldSelectedStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
		<Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
		<Setter Property="CornerRadius" Value="0"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Padding" Value="2,0,0,0"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="Template">
			<Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:TreeCellValuePresenter}">
					<Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{Binding Path=Indent, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
						<Border
							x:Name="MainBorder"
                            Grid.ColumnSpan="3"
							CornerRadius="{TemplateBinding CornerRadius}"
							BorderThickness="{TemplateBinding BorderThickness}"
							BorderBrush="{TemplateBinding BorderBrush}"
							Background="{TemplateBinding Background}"/>
						<Rectangle
							x:Name="Active"
							Fill="{TemplateBinding BackgroundActive}"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
                            Grid.ColumnSpan="3"
							Height="Auto"
							Opacity="1"
							SnapsToDevicePixels="True"
							Visibility="Collapsed"
							StrokeThickness="1"
							Stroke="{TemplateBinding BorderActiveBrush}"/>
                        <igWindows:ExpansionIndicator
								x:Name="PART_Expander"
                                Panel.ZIndex="1"
								Grid.Column="1"
								Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
							    Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}"
							    CommandParameter="{TemplateBinding Record}"
                                VerticalAlignment="Center"
							    ToggleMode="Manual"
								IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ContentPresenter
							x:Name="PART_EditorSite"
                            Grid.Column="2"
                            IsEnabled="{TemplateBinding IsContentEnabled}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Margin="{TemplateBinding Padding}"
							Style="{TemplateBinding ForegroundStyle}"
						/>
					</Grid>
					<ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsAlternate, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=Record.RecordType, RelativeSource={RelativeSource Self}}" Value="DataRecord"/>
                                <Condition Binding="{Binding Path=Record.IsAddRecord, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundAlternateStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiDataTrigger>

                        <!-- HighlightAsPrimary -->
						<Trigger Property="HighlightAsPrimary" Value="true">
							<Setter Property="Background" Value="{Binding Path=BackgroundPrimary, RelativeSource={RelativeSource Self}}"/>
							<Setter Property="BorderBrush" Value="{Binding Path=BorderPrimaryBrush, RelativeSource={RelativeSource Self}}"/>
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundPrimaryStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
						</Trigger>
						<!-- IsFieldSelected -->
						<Trigger Property="IsFieldSelected" Value="true">
							<Setter Property="Background" Value="{Binding Path=BackgroundFieldSelected, RelativeSource={RelativeSource Self}}"/>
							<Setter Property="BorderBrush" Value="{Binding Path=BorderFieldSelectedBrush, RelativeSource={RelativeSource Self}}"/>
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundFieldSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
						</Trigger>
						<!-- IsSelected -->
						<Trigger Property="IsSelected" Value="true">
							<Setter Property="Background" Value="{Binding Path=BackgroundSelected, RelativeSource={RelativeSource Self}}"/>
							<Setter Property="BorderBrush" Value="{Binding Path=BorderSelectedBrush, RelativeSource={RelativeSource Self}}"/>
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
						</Trigger>
						<!-- IsActive -->
						<Trigger Property="IsActive" Value="true">
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="Visibility" TargetName="Active" Value="Visible"/>
						</Trigger>
						<!-- IsMouseOver -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="IsSelected" Value="False"/>
								<Condition Property="IsFieldSelected" Value="False"/>
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}"/>
							<Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}"/>
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
						</MultiTrigger>
						<DataTrigger Binding="{Binding Path=Field.IsFixedStateChanging, RelativeSource={RelativeSource Self}}" Value="True">
							<Setter Property="Background" Value="#AA8DBAEB"/>
							<Setter Property="BorderBrush" Value="#AA8DBAEB"/>
						</DataTrigger>
						<Trigger Property="IsDataErrorTemplateActive" Value="true">
							<Setter TargetName="PART_EditorSite" Property="ContentTemplate" Value="{DynamicResource {x:Static igDP:DataPresenterBase.DataErrorContentTemplateKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsRecordSelected" Value="True">
				<Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
			</Trigger>
			<Trigger Property="IsMouseOverRecord" Value="True">
				<Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
			</Trigger>

		</Style.Triggers>
	</Style>

	<!-- _________________________ DataRecordPresenter __________________________________________ -->
	<Style TargetType="{x:Type igDP:DataRecordPresenter}">
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="HeaderAreaBackground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}"/>
		<Setter Property="NestedContentBackground" Value="Transparent"/>
		<Setter Property="Background" Value="#00FFFFFF"/>
		<Setter Property="BorderBrush" Value="#FFCCCCCC"/>
		<Setter Property="Margin" Value="0"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:DataRecordPresenter}">
					<igWindows:CardPanel x:Name="baseGrid" RenderTransform="{TemplateBinding FixedNearElementTransform}" Background="{TemplateBinding Background}">
						<Border
							Visibility="Collapsed"
							Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=AddRowBackground}}"
							BorderBrush="{TemplateBinding BorderBrush}"
							HorizontalAlignment="Stretch"
							x:Name="addRowFooter"
							VerticalAlignment="Stretch"
							Width="Auto"
							Height="Auto"
							BorderThickness="{TemplateBinding BorderThickness}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						<Grid Margin="0" RenderTransform="{TemplateBinding ScrollableElementTransform}">
							<Grid.ColumnDefinitions>
                <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - added 1 column definition-->
                <ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
								<!-- SSP 5/6/08 - Record Separators - Added two col defs-->
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
                <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - added 1 row definition-->
                <RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
								<!-- SSP 5/6/08 - Record Separators - Added two row defs-->
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
							</Grid.RowDefinitions>
							<!-- Expansion Checkbox -->
							<!-- SSP 5/6/08 - Record Separators - changed grid.row to 2 from 1-->
							<!-- AS 1/27/09 NA 2009 Vol 1 - Set ZIndex and RenderTransform for fixed fields -->
                            <!-- AS 6/3/09 NA 2009 Vol 2 - Added Command(Parameter) & ToggleMode to support undo/redo -->
                            <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
							<Border x:Name="OrientationHorizontalSep" BorderThickness="0,0,1,0" Grid.ColumnSpan="6" Background="#FFFAFAFA" BorderBrush="#FFE7E7E7"  Visibility="Collapsed"/>
                            <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
							<igWindows:ExpansionIndicator
								x:Name="ExpansionIndicator"
                                Panel.ZIndex="1"
                                RenderTransform="{TemplateBinding FixedNearElementTransform}"
								Grid.Row="3"
								Grid.Column="1"
								Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
							  Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}"
							  CommandParameter="{TemplateBinding Record}"
							  ToggleMode="Manual"
								IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
							<!-- Header Background -->
							<!-- Added 8/2/2006 GH -->
							<!-- SSP 5/6/08 - Record Separators - changed grid.colspan to 5 from 3-->
							<!-- AS 2/10/09 TFS13798 - Set RenderTransform for fixed fields -->
                            <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
							<igWindows:CardPanel
								x:Name="SpacerFill"
                                RenderTransform="{TemplateBinding FixedNearElementTransform}"
								Grid.Row="1"
								Grid.Column="1"
								Grid.ColumnSpan="6"
								Visibility="Visible">
								<Rectangle x:Name="fill" Margin="0,0,0,0" Fill="{TemplateBinding HeaderAreaBackground}"/>
								<Rectangle
									x:Name="lightLine"
									Fill="#3FFFFFFF"
									VerticalAlignment="Top"
									Margin="0,1,0,0"
									Width="Auto"
									Height="1"/>
								<Rectangle
									x:Name="darkLine"
									Fill="#66000000"
									VerticalAlignment="Top"
									Margin="0,0,0,0"
									Width="Auto"
									Height="1"/>
							</igWindows:CardPanel>
							<!-- End Added 8/2/2006 GH -->
							<!-- Header Content -->
							<!-- SSP 5/6/08 - Record Separators - changed grid.col to 2 from 1-->
                            <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
							<ContentPresenter
								x:Name="PART_HeaderContentSite"
								Grid.Row="1"
								Grid.Column="3"
								Content="{TemplateBinding HeaderContent}"
								Visibility="Visible"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								d:IsHidden="True"/>
							<!-- SSP 5/6/08 - Record Separators - Added separator rectangle -->
                            <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
							<Border
								x:Name="RecordSeparator"
								Grid.Row="2"
								Grid.Column="1"
								Visibility="Collapsed"
                                RenderTransform="{TemplateBinding FixedNearElementTransform}"
								Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=RecordSeparatorStyle}}"
								Grid.ColumnSpan="6"/>
							<!-- Record Content -->
							<!-- SSP 5/6/08 - Record Separators - changed grid.row to 2 from 1 and grid.col to 2 from 1-->
                            <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
							<ContentPresenter
								x:Name="PART_RecordContentSite"
								Grid.Row="3"
								Grid.Column="3"
								Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"
								ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							<!-- Nested Content -->
							<!-- SSP 5/6/08 - Record Separators - changed grid.row to 4 from 2 and grid.col to 2 from 1-->
							<!-- AS 3/25/09 TFS15801 - Set RenderTransform for fixed fields -->
                            <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
							<Border
								x:Name="PART_NestedContentSite"
								Grid.Row="5"
								Grid.Column="3"
								Visibility="Visible"
								HorizontalAlignment="Left"
								VerticalAlignment="Top"
                                RenderTransform="{TemplateBinding FixedNearElementTransform}"
								Background="{TemplateBinding NestedContentBackground}">
								<!-- AS 11/14/07 BR26035
								The namescope was broken because the recordlistcontrol was not in the logical tree. We
								need to use a ContentControl instead so the content	is made a logical child. -->
								<ContentControl
                                    RenderTransform="{TemplateBinding ScrollableElementTransform}"
                                    Content="{TemplateBinding NestedContent}"
                                    Margin="2,0,0,0"
                                    x:Name="contentControl"/>
								<!--Margin="10,10,0,0" />-->
							</Border>
						</Grid>
					</igWindows:CardPanel>
					<ControlTemplate.Triggers>
						<!-- AS 11/8/11 TFS88111 -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.AutoFitToWidth, RelativeSource={RelativeSource Self}}" Value="True" />
								<Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="PART_HeaderContentSite" Property="Grid.ColumnSpan" Value="3"/>
							<Setter TargetName="PART_RecordContentSite" Property="Grid.ColumnSpan" Value="3"/>
							<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
						</MultiDataTrigger>

						<Trigger Property="Orientation" Value="Horizontal">
							<!-- START SSP 5/6/08 - Record Separators
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Column" Value="0" />
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="2" />
                            <Setter TargetName="PART_RecordContentSite" Property="VerticalAlignment" Value="Top" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="1" />
                            <Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="3" />
														-->
                            <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
							<Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="3"/>
							<Setter TargetName="PART_HeaderContentSite" Property="Grid.Column" Value="1"/>
							<Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="3"/>
							<Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="5"/>
							<Setter TargetName="PART_RecordContentSite" Property="VerticalAlignment" Value="Top"/>
							<Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1"/>
							<Setter TargetName="ExpansionIndicator" Property="Margin" Value="0,2"/>
							<Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="3"/>
							<Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1"/>
							<Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="6"/>
							<!--<Setter TargetName="RecordSeparator" Property="Grid.Row" Value="2"/>
							<Setter TargetName="RecordSeparator" Property="Grid.Column" Value="1"/>-->
							<Setter TargetName="RecordSeparator" Property="Width" Value="10"/>
							<Setter TargetName="RecordSeparator" Property="Height" Value="Auto"/>
							<Setter TargetName="RecordSeparator" Property="BorderThickness" Value="1,0"/>
							<Setter TargetName="OrientationHorizontalSep" Property="Visibility" Value="Visible"/>
							<!-- END SSP 5/6/08 - Record Separators -->
						</Trigger>
						<Trigger Property="ShouldDisplayRecordContent" Value="False">
							<Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Collapsed"/>
							<!--JJD 9/4/07 - BR26153 -->
							<!--Only set ExpansionIndicator Visibility to Hidden if is was Visible (see new MultiTrigger below) -->
							<!--<Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />-->
						</Trigger>
						<!--JJD 9/4/07 - BR26153 -->
						<!--Only set ExpansionIndicator Visibility to Hidden if is was Visible -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="ShouldDisplayRecordContent" Value="False"/>
								<Condition Property="IsHeaderRecord" Value="False"/>
								<Condition Property="ExpansionIndicatorVisibility" Value="Visible"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Orientation" Value="Horizontal"/>
								<Condition Property="ShouldDisplayRecordContent" Value="False"/>
							</MultiTrigger.Conditions>
							<!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
                            <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <!-- JJD 1/24/11 TFS63831 the value should be 5 to match up with the nested content-->
              <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="5"/>
            </MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Orientation" Value="Vertical"/>
								<Condition Property="ShouldDisplayRecordContent" Value="False"/>
							</MultiTrigger.Conditions>
							<!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
                            <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <!-- JJD 1/24/11 TFS63831 the value should be 5 to match up with the nested content-->
              <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="5"/>
            </MultiTrigger>
						<Trigger Property="IsHeaderRecord" Value="True">
							<!--JJD 9/4/07 - BR26153 -->
							<!--Only set ExpansionIndicator Visibility to Hidden if is was Visible (see new MultiTrigger below) -->
							<!--<Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />-->
                            <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
							<Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1"/>
							<Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="1"/>
						</Trigger>
						<!--JJD 9/4/07 - BR26153 -->
						<!--Only set ExpansionIndicator Visibility to Hidden if is was Visible -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsHeaderRecord" Value="True"/>
								<Condition Property="ExpansionIndicatorVisibility" Value="Visible"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden"/>
						</MultiTrigger>
						<Trigger Property="HasHeaderContent" Value="False">
							<Setter Property="Visibility" TargetName="SpacerFill" Value="Collapsed"/>
							<Setter Property="Visibility" TargetName="PART_HeaderContentSite" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="HasNestedContent" Value="true">
							<Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
							<Setter TargetName="baseGrid" Property="Background" Value="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}"/>
						</Trigger>
						<Trigger Property="HasNestedContent" Value="False">
							<Setter Property="Visibility" TargetName="PART_NestedContentSite" Value="Collapsed"/>
						</Trigger>
						<!--SSP 8/5/09 - NAS9.2 Enhanced grid view
							Changed the IsFixedOnTop trigger to MultiDataTrigger since we needed to add IsSpecialRecord
							condition. This was done because previously we were showing separator after each fixed record
							however we should not display the separator between each fixed data record if there are multiple
							fixed data records. The same change was applied to IsFixedOnBottom.
						-->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsSpecialRecord}" Value="true" />
								<Condition Binding="{Binding Path=IsFixedOnTop, RelativeSource={RelativeSource Self}}" Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Visibility" TargetName="addRowFooter" Value="Visible"/>
							<Setter Property="Background" TargetName="addRowFooter" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=FixedRecord}}"/>
							<Setter Property="BorderThickness" TargetName="addRowFooter" Value="0,0,0,1"/>
							<Setter Property="Margin" Value="0,0,0,0"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsSpecialRecord}" Value="true" />
								<Condition Binding="{Binding Path=IsFixedOnBottom, RelativeSource={RelativeSource Self}}" Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Visibility" TargetName="addRowFooter" Value="Visible"/>
							<Setter Property="BorderThickness" TargetName="addRowFooter" Value="0,1,0,0"/>
							<Setter Property="Background" TargetName="addRowFooter" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=FixedRecord}}"/>
							<Setter Property="Margin" Value="0,1,0,0"/>
						</MultiDataTrigger>
						<!-- START SSP 5/6/08 - Record Separators -->
						<!-- For HasSeparatorBefore, default grid.row and grid.column settings are fine as setup
							when declaring the record separator (and for horizontal orientation as setup in the
							orientation=horizontal trigger above).
						-->
						<Trigger Property="HasSeparatorBefore" Value="true">
							<Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
						</Trigger>
						<!-- For HasSeparatorAfter, we have to set grid.row and grid.col based on the orientation-->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasSeparatorAfter" Value="true"/>
								<Condition Property="Orientation" Value="Vertical"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
                            <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
							<Setter TargetName="RecordSeparator" Property="Grid.Row" Value="4"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasSeparatorAfter" Value="true"/>
								<Condition Property="Orientation" Value="Horizontal"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
                            <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
							<Setter TargetName="RecordSeparator" Property="Grid.Column" Value="4"/>
							<Setter TargetName="RecordSeparator" Property="Grid.ColumnSpan" Value="1"/>
							<Setter TargetName="RecordSeparator" Property="Grid.Row" Value="1"/>
							<Setter TargetName="RecordSeparator" Property="Grid.RowSpan" Value="6"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasSeparatorBefore" Value="true"/>
								<Condition Property="Orientation" Value="Horizontal"/>
							</MultiTrigger.Conditions>
                            <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
							<Setter TargetName="RecordSeparator" Property="Grid.Column" Value="2"/>
							<Setter TargetName="RecordSeparator" Property="Grid.ColumnSpan" Value="1"/>
							<Setter TargetName="RecordSeparator" Property="Grid.Row" Value="1"/>
							<Setter TargetName="RecordSeparator" Property="Grid.RowSpan" Value="6"/>
						</MultiTrigger>
						<!-- END SSP 5/6/08 - Record Separators -->
						<!-- Changing opacity of Content to differentiate between filtered records with IsFilteredOut trigger property -->
						<!-- JJD 1/10/13 - TFS130325 
							Use new IsOpacityReduced property instead
						<Trigger Property="IsFilteredOut" Value="True">-->
						<Trigger Property="IsOpacityReduced" Value="True">
							<Setter TargetName="PART_RecordContentSite" Property="Opacity" Value="0.35"/>
						</Trigger>
						<!--<DataTrigger Binding="{Binding Path=IsAddRecord, RelativeSource={RelativeSource Self}}" Value="Center">
							<Setter Property="BorderThickness" Value="0,0,0,1"/>
						</DataTrigger>-->

                        <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="0"/>
                        </MultiDataTrigger>

                        <!-- MD 8/3/10 - TFS35609 -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="0"/>
                        </MultiDataTrigger>

                    </ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="TemplateCardView">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:DataRecordPresenter}">
					<igWindows:CardPanel x:Name="baseGrid" Background="{TemplateBinding Background}">
						<!-- Record Content -->
						<Rectangle Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CardBackground}}"/>
						<ContentPresenter
							x:Name="PART_RecordContentSite"
							Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"
							ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</igWindows:CardPanel>
					<ControlTemplate.Triggers>
						<!-- JM NA 10.1 CardView -->
						<Trigger Property="IsInCard" Value="True">
							<Setter Property="VerticalContentAlignment" Value="Top"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

    <!-- _________________________ MergedCellPresenter __________________________________________ -->
    <Style TargetType="{x:Type igDP:MergedCellPresenter}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MergedCellBackgroundKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MergedCellBorderBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:MergedCellPresenter}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            >
                        <igDP:CellValuePresenter x:Name="PART_CellValuePresenter"
                            Field="{TemplateBinding Field}"
                            Value="{TemplateBinding Value}"                     
                            BorderThickness="0"
                            IsMergedCell="True"/>
                     </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOpacityReduced" Value="True">
                            <Setter TargetName="PART_CellValuePresenter" Property="Opacity" Value="0.35"/>
                        </Trigger>
                         <Trigger Property="IsFieldSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MergedCellFieldSelectedBackgroundKey}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MergedCellFieldSelectedBorderBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFixed" Value="True"/>
                                <Condition Property="IsRecordSelected" Value="False"/>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsFieldSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MergedCellFieldFixedBackgroundKey}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MergedCellFieldFixedBorderBrushKey}}"/>
                        </MultiTrigger>
                         <Trigger Property="IsRecordSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MergedCellRecordSelectedBackgroundKey}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MergedCellRecordSelectedBorderBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MergedCellSelectedBackgroundKey}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MergedCellSelectedBorderBrushKey}}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ DataRecordCellArea __________________________________________ -->
	<Style TargetType="{x:Type igDP:DataRecordCellArea}">
		<!--<Setter Property="OverridesDefaultStyle" Value="True"/>-->
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Color="#00FFFFFF" Offset="0"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderBrush" Value="#00000000"/>
		<Setter Property="BackgroundHover">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Offset="0" Color="#FFD3F5FF"/>
					<GradientStop Offset="1" Color="#FFB9D8FF"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderHoverBrush" Value="#FFAECDF9"/>
		<Setter Property="BackgroundActive">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Offset="0" Color="#BFE8E8E8"/>
					<GradientStop Offset="1" Color="#00EEEEEE"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderActiveBrush" Value="#00000000"/>
        <Setter Property="BackgroundAlternate" Value="#FFF7F7F7"/>
        <Setter Property="BorderAlternateBrush" Value="#00000000"/>
		<Setter Property="BackgroundSelected">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Offset="0" Color="#7FD3F5FF"/>
					<GradientStop Offset="1" Color="#7FB9D8FF"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderSelectedBrush" Value="#00000000"/>
		<Setter Property="CornerRadius" Value="4"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Foreground" Value="#FF333333"/>
		<Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}"/>
		<Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}"/>
		<Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}"/>
		<!--<Setter Property="ForegroundSelectedStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=TealForegroundStyle}}" />-->
		<!--<Setter Property="ForegroundHoverStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="TextBlock.Foreground" Value="#FF151C55" />
                </Style>
            </Setter.Value>
        </Setter>-->
        <Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:DataRecordCellArea}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="timelineIsActive">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Active" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="timelineIsActive_off">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Active" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.4000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="timelineIsSelected">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Selected" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="timelineIsSelected_off">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Selected" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="timelineHover">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="timelineHover_off">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
                    </ControlTemplate.Resources>
					<igWindows:CardPanel>
						<!-- Background -->
						<Border
							x:Name="Background"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
                                   CornerRadius="{TemplateBinding CornerRadius}"/>
						<!-- Background Alternate -->
						<Border
							x:Name="Alternate"
							Visibility="Collapsed"
							Background="{TemplateBinding BackgroundAlternate}"
							BorderBrush="{TemplateBinding BorderAlternateBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="{TemplateBinding CornerRadius}"
							Opacity="1"/>
						<!-- Background Selected -->
						<Border
							x:Name="Selected"
							Visibility="Visible"
							Background="{TemplateBinding BackgroundSelected}"
							BorderBrush="{TemplateBinding BorderSelectedBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="{TemplateBinding CornerRadius}"
							Opacity="0"/>
						<!-- Background Hover -->
						<Border
							x:Name="Hover"
							Visibility="Visible"
							Background="{TemplateBinding BackgroundHover}"
							CornerRadius="{TemplateBinding CornerRadius}"
							BorderBrush="{TemplateBinding BorderHoverBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Opacity="0"/>
						<!-- Background Active -->
						<Border
							x:Name="Active"
							Visibility="Collapsed"
							Background="{TemplateBinding BackgroundActive}"
							BorderBrush="{TemplateBinding BorderActiveBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="{TemplateBinding CornerRadius}"/>
						<!--
						JJD 1/2/13 - TFS129145
						Remove the explicit Content property binding so it will pick up the default Content, ContentTemplate, 
						ContenttemplateSelector and ContentStringFormat bindings.
						<ContentPresenter x:Name="CellContent" Style="{TemplateBinding ForegroundStyle}" Content="{TemplateBinding Content}"/>-->
						<ContentPresenter x:Name="CellContent" Style="{TemplateBinding ForegroundStyle}" />
                        
                        <!-- JM 12-28-15 TFS211627 - Added. -->
                        <Rectangle
							x:Name="DynamicDataPendingOverlay"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							SnapsToDevicePixels="True"
							Opacity="1"
                            Margin="5,2"
							Visibility="Collapsed"/>
                    </igWindows:CardPanel>
					<ControlTemplate.Triggers>
						<!--<Trigger Property="IsActive" Value="True">
                            <Setter TargetName="CellContent" Property="Style"
								Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Visibility" TargetName="Active" Value="Visible"/>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="timelineIsSelected_BeginStoryboard" Storyboard="{StaticResource timelineIsSelected}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="timelineIsSelected_off_BeginStoryboard" Storyboard="{StaticResource timelineIsSelected_off}"/>
                            </Trigger.ExitActions>
                            <Setter TargetName="CellContent" Property="Style"
								Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>-->
						<!--<Trigger Property="IsAlternate" Value="True">
								<Setter TargetName="Alternate" Property="Visibility" Value="Visible"/>
								<Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundAlternateStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
							</Trigger>-->

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsAlternate" Value="True"/>
								<Condition Property="IsFilterRecord" Value="False"/>
								<Condition Property="IsAddRecord" Value="False"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="Alternate" Property="Visibility" Value="Visible"/>
							<Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundAlternateStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
						</MultiTrigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsActive" Value="True"/>
								<Condition Property="IsFilterRecord" Value="False"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Setter Property="Visibility" TargetName="Active" Value="Visible"/>
						</MultiTrigger>
						<!-- JJD 12-07-18 TFS247439 - Replace cell content style related triggers
                            that were commemnted out below by the fix for TFS27879 -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsFilterRecord" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger> 
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsFilterRecord" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger> 

						<!-- JM 03-11-10 TFS27879 - Use EventTriggers instead of Proeprty Triggers to avoid memory leak.  -->
						<!--<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True"/>
								<Condition Property="IsFilterRecord" Value="False"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard x:Name="timelineIsSelected_BeginStoryboard" Storyboard="{StaticResource timelineIsSelected}"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard x:Name="timelineIsSelected_off_BeginStoryboard" Storyboard="{StaticResource timelineIsSelected_off}"/>
							</MultiTrigger.ExitActions>
							<Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="IsFilterRecord" Value="False"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard x:Name="timelineHover_BeginStoryboard" Storyboard="{StaticResource timelineHover}"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard x:Name="timelineHover_off_BeginStoryboard" Storyboard="{StaticResource timelineHover_off}"/>
							</MultiTrigger.ExitActions>
							<Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
						</MultiTrigger>-->
						<!--<Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="timelineHover_BeginStoryboard" Storyboard="{StaticResource timelineHover}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard x:Name="timelineHover_off_BeginStoryboard" Storyboard="{StaticResource timelineHover_off}"/>
                            </Trigger.ExitActions>
                            <Setter TargetName="CellContent" Property="Style"
								Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>-->
						<!-- JM 10-27-10 TFS49130/32061 -->
						<!--<EventTrigger RoutedEvent="UIElement.MouseEnter">-->
						<EventTrigger RoutedEvent="igDP:DataRecordCellArea.HoverBegin">
							<EventTrigger.Actions>
								<BeginStoryboard Storyboard="{StaticResource timelineHover}"/>
							</EventTrigger.Actions>
						</EventTrigger>
						<!-- JM 10-27-10 TFS49130/32061 -->
						<!--<EventTrigger RoutedEvent="UIElement.MouseLeave">-->
						<EventTrigger RoutedEvent="igDP:DataRecordCellArea.HoverEnd">
							<EventTrigger.Actions>
								<BeginStoryboard Storyboard="{StaticResource timelineHover_off}"/>
							</EventTrigger.Actions>
						</EventTrigger>
						<EventTrigger RoutedEvent="igDP:DataRecordCellArea.Selected">
							<EventTrigger.Actions>
								<BeginStoryboard Storyboard="{StaticResource timelineIsSelected}"/>
							</EventTrigger.Actions>
						</EventTrigger>
						<EventTrigger RoutedEvent="igDP:DataRecordCellArea.Deselected">
							<EventTrigger.Actions>
								<BeginStoryboard Storyboard="{StaticResource timelineIsSelected_off}"/>
							</EventTrigger.Actions>
						</EventTrigger>
						<Trigger Property="IsFilterRecord" Value="True">
							<Setter Property="Visibility" TargetName="Hover" Value="Collapsed"/>
							<Setter Property="Visibility" TargetName="Selected" Value="Collapsed"/>
						</Trigger>
                        <!-- JM 12-28-15 TFS211627 - Added. -->
                        <Trigger Property="IsDynamicDataPending" Value="true">
                            <Setter Property="Visibility" TargetName="DynamicDataPendingOverlay" Value="Visible"/>
                            <Setter Property="Fill" TargetName="DynamicDataPendingOverlay" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.DataPendingOverlayBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsDynamicDataPending" Value="false">
                            <Setter Property="Visibility" TargetName="DynamicDataPendingOverlay" Value="Collapsed"/>
                            <Setter Property="Fill" TargetName="DynamicDataPendingOverlay" Value="{x:Null}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ ExpandableFieldRecordPresenter ______________________________________ -->
	<Style TargetType="{x:Type igDP:ExpandableFieldRecordPresenter}">
		<Setter Property="Foreground" Value="#FFFFFFFF"/>
		<Setter Property="Margin" Value="0,0,0,0"/>
		<Setter Property="Padding" Value="0,0,0,0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:ExpandableFieldRecordPresenter}">
					<ControlTemplate.Resources>
						<!-- JM 06-04-09 TFS14198 - Changed FillBehavior to Stop now that we are initializing the Opacity to 1 in the element. -->
						<Storyboard x:Key="sbDisplayNested">
							<DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="ncpVisual"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="Stop">
								<DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
								<DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
								<SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:0.75"/>
							</DoubleAnimationUsingKeyFrames>

							<!-- JM 06-04-09 TFS14198 - Added Opacity animation for the NestedContentSite -->
							<DoubleAnimationUsingKeyFrames
							  BeginTime="00:00:00"
							  Storyboard.TargetName="PART_NestedContentSite"
							  Storyboard.TargetProperty="Opacity"
							  FillBehavior="HoldEnd">
								<DiscreteDoubleKeyFrame Value="1" KeyTime="00:00:00" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<!-- JM 06-04-09 TFS14198 - No longer need to fade ncpVisual to Opacity 0 - we just collapse the containing PART_NestedContentSite -->
						<!--<Storyboard x:Key="sbHideNested">
							<DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="ncpVisual"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="HoldEnd">
								<SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="0" KeyTime="00:00:00.15"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>-->
					</ControlTemplate.Resources>
					<Grid Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
						</Grid.RowDefinitions>
						<!-- Row for nested content -->
						<!-- Expansion Checkbox -->
                        <!-- AS 6/3/09 NA 2009 Vol 2 - Added Command(Parameter) & ToggleMode to support undo/redo -->
						<igWindows:ExpansionIndicator x:Name="ExpansionIndicator"
                                                      RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                                      Panel.ZIndex="1"
                                                      Visibility="{TemplateBinding ExpansionIndicatorVisibility}"
                                                      Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}"
                                                      CommandParameter="{TemplateBinding Record}"
                                                      ToggleMode="Manual"
                                                      IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
						<!-- Expandable Field Title -->
						<!-- AS 1/27/09 NA 2009 Vol 1 - Set RenderTransform for fixed fields -->
						<Grid
							x:Name="PART_RecordContentSite"
                            RenderTransform="{TemplateBinding FixedNearElementTransform}"
							Margin="0"
							Grid.Row="0"
							Grid.Column="1"
							Visibility="{TemplateBinding HeaderVisibility}">
							<Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								RenderTransformOrigin="0.5,0.5"
								CornerRadius="2,2,2,2"
								SnapsToDevicePixels="True"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}"
								x:Name="borderBackground">
								<Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
									<Rectangle
										Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelOuterBorder}}"
										StrokeThickness="1"
										RadiusX="1.55015910897703"
										RadiusY="1.55015910897703"
										Fill="Transparent"/>
									<Rectangle
										Margin="1"
										Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelInnerBorder}}"
										StrokeThickness="1"
										RadiusX="0.550159108977027"
										RadiusY="0.550159108977027"
										Fill="Transparent"/>
								</Grid>
							</Border>
							<Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								CornerRadius="2,2,2,2"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelHighlight}}"
								x:Name="borderBackgroundHighlight">
								<Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
									<Rectangle
										Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelOuterBorder}}"
										StrokeThickness="1"
										RadiusX="1.55015910897703"
										RadiusY="1.55015910897703"
										Fill="Transparent"/>
									<Rectangle
										Margin="1"
										Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelInnerBorder}}"
										StrokeThickness="1"
										RadiusX="0.550159108977027"
										RadiusY="0.550159108977027"
										Fill="Transparent"/>
								</Grid>
							</Border>
							<ContentPresenter
                                Content="{Binding Path=(igDP:RecordPresenter.Record).Description, RelativeSource={RelativeSource TemplatedParent}}"
                                TextBlock.Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"
                                Margin="10,3,10,3"/>
						</Grid>
						<!-- Nested Content -->
						<!-- AS 2/10/09 TFS13798 - Set RenderTransform for fixed fields -->
						<Grid
							x:Name="PART_NestedContentSite"
                            RenderTransform="{TemplateBinding FixedNearElementTransform}"
							Grid.Row="1"
							Grid.Column="1"
							Visibility="Collapsed">
							<Border
								CornerRadius="0,0,3,3"
								BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=NestedContentBackgroundBorder}}"
								BorderThickness="1"
								Background="{TemplateBinding NestedContentBackground}">
								<!-- JM 06-04-09 TFS14198 - Initialize the Opacity property to 1 instead of zero -->
								<!-- AS 11/14/07 BR26035
								The namescope was broken because the recordlistcontrol was not in the logical tree. We
								need to use a ContentControl instead so the content	is made a logical child. -->
								<ContentControl
									x:Name="ncpVisual"
                                    RenderTransform="{TemplateBinding ScrollableElementTransform}"
									Opacity="1"
									Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}"
									TextBlock.Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"
									Margin="{TemplateBinding Padding}"/>
							</Border>
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<!-- JM 06-04-09 TFS14198 - Use EventTriggers instead of property Triggers to avoid the rooting issue in the WPF framework -->
						<!--<Trigger Property="HasNestedContent" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource sbDisplayNested}" x:Name="NestedOn"/>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource sbHideNested}" x:Name="NestedOff"/>
								<StopStoryboard BeginStoryboardName="NestedOn"/>
							</Trigger.ExitActions>
							<Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
						</Trigger>-->

						<Trigger Property="HasNestedContent" Value="True">
							<Setter TargetName="PART_NestedContentSite" Property="Opacity" Value="0" />
							<Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible" />
						</Trigger>

                        <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature-->
                        <DataTrigger Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent">
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="1" />
                        </DataTrigger>

                        <!-- MD 8/3/10 - TFS35609 -->
                        <DataTrigger Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached">
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="1" />
                        </DataTrigger>

                        <EventTrigger  RoutedEvent="igDP:RecordPresenter.ShowNestedContent">
							<EventTrigger.Actions>
								<BeginStoryboard Storyboard="{StaticResource sbDisplayNested}" x:Name="NestedOn"/>
							</EventTrigger.Actions>
						</EventTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="TemplateCardView">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:ExpandableFieldRecordPresenter}">
					<ControlTemplate.Resources>
						<!-- JM 06-04-09 TFS14198 - Changed FillBehavior to Stop now that we are initializing the Opacity to 1 in the element. -->
						<Storyboard x:Key="sbDisplayNested">
							<DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="ncpVisual"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="Stop">
								<DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
								<DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
								<SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:0.75"/>
							</DoubleAnimationUsingKeyFrames>
							<!-- JM 06-04-09 TFS14198 - Added Opacity animation for the NestedContentSite -->
							<DoubleAnimationUsingKeyFrames
							  BeginTime="00:00:00"
							  Storyboard.TargetName="PART_NestedContentSite"
							  Storyboard.TargetProperty="Opacity"
							  FillBehavior="HoldEnd">
								<DiscreteDoubleKeyFrame Value="1" KeyTime="00:00:00" />
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<!-- JM 06-04-09 TFS14198 - No longer need to fade ncpVisual to Opacity 0 - we just collapse the containing PART_NestedContentSite -->
						<!--<Storyboard x:Key="sbHideNested">
							<DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="ncpVisual"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="HoldEnd">
								<SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="0" KeyTime="00:00:00.15"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>-->
					</ControlTemplate.Resources>
					<Grid Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
						</Grid.RowDefinitions>
						<!-- Row for nested content -->
						<!-- Expandable Field Title -->
						<Grid
							x:Name="PART_RecordContentSite"
							Margin="0"
							Grid.Row="0"
							Grid.Column="0"
							Visibility="{TemplateBinding HeaderVisibility}">
							<Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								RenderTransformOrigin="0.5,0.5"
								CornerRadius="2,2,2,2"
								SnapsToDevicePixels="True"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}"
								x:Name="borderBackground">
								<Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
									<Rectangle
										Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelOuterBorder}}"
										StrokeThickness="1"
										RadiusX="1.55015910897703"
										RadiusY="1.55015910897703"
										Fill="Transparent"/>
									<Rectangle
										Margin="1"
										Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelInnerBorder}}"
										StrokeThickness="1"
										RadiusX="0.550159108977027"
										RadiusY="0.550159108977027"
										Fill="Transparent"/>
								</Grid>
							</Border>
							<Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								CornerRadius="2,2,2,2"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelHighlight}}"
								x:Name="borderBackgroundHighlight">
								<Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
									<Rectangle
										Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelOuterBorder}}"
										StrokeThickness="1"
										RadiusX="1.55015910897703"
										RadiusY="1.55015910897703"
										Fill="Transparent"/>
									<Rectangle
										Margin="1"
										Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelInnerBorder}}"
										StrokeThickness="1"
										RadiusX="0.550159108977027"
										RadiusY="0.550159108977027"
										Fill="Transparent"/>
								</Grid>
							</Border>
							<ContentPresenter Content="{Binding Path=(igDP:RecordPresenter.Record).Description, RelativeSource={RelativeSource TemplatedParent}}" TextBlock.Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}" Margin="10,3,10,3"/>
						</Grid>
						<!-- Nested Content -->
						<Grid
							x:Name="PART_NestedContentSite"
							Grid.Row="1"
							Grid.Column="0"
							Visibility="Collapsed">
							<Border
								CornerRadius="0,0,3,3"
								BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=NestedContentBackgroundBorder}}"
								BorderThickness="1"
								Background="{TemplateBinding NestedContentBackground}">
								<!-- JM 06-04-09 TFS14198 - Initialize the Opacity property to 1 instead of zero -->
								<!-- AS 11/14/07 BR26035
								The namescope was broken because the recordlistcontrol was not in the logical tree. We
								need to use a ContentControl instead so the content	is made a logical child. -->
								<ContentControl
									x:Name="ncpVisual"
									Opacity="1"
									Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}"
									TextBlock.Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"
									Margin="{TemplateBinding Padding}"/>
							</Border>
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<!-- JM 06-04-09 TFS14198 - Use EventTriggers instead of property Triggers to avoid the rooting issue in the WPF framework -->
						<!--<Trigger Property="HasNestedContent" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource sbDisplayNested}" x:Name="NestedOn"/>
								<StopStoryboard BeginStoryboardName="NestedOff"/>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource sbHideNested}" x:Name="NestedOff"/>
								<StopStoryboard BeginStoryboardName="NestedOn"/>
							</Trigger.ExitActions>
							<Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
						</Trigger>-->

						<Trigger Property="HasNestedContent" Value="True">
							<Setter TargetName="PART_NestedContentSite" Property="Opacity" Value="0" />
							<Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible" />
						</Trigger>

						<EventTrigger  RoutedEvent="igDP:RecordPresenter.ShowNestedContent">
							<EventTrigger.Actions>
								<BeginStoryboard Storyboard="{StaticResource sbDisplayNested}" x:Name="NestedOn"/>
							</EventTrigger.Actions>
						</EventTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ ExpandedCellPresenter __________________________________________ -->
	<Style TargetType="{x:Type igDP:ExpandedCellPresenter}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:ExpandedCellPresenter}">
					<Border x:Name="MainBorder" Margin="2,2,2,2" Background="{TemplateBinding Background}">
						<!-- Content -->
						<ContentPresenter x:Name="ContentSite" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ ExpanderBar __________________________________________ -->
	<!-- TH 06/11/2008 : Moved from Windows Assembly into DP for washing Purposes					  -->
	<Style TargetType="{x:Type igWindows:ExpanderBar}" BasedOn="{x:Static igThemes:PrimitivesGeneric.ExpanderBar}">
		<Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ExpanderBarBackgroundKey}}"/>
		<Setter Property="BackgroundHover" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ExpanderBarBackgroundHoverKey}}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.GroupByNavBorderBrushKey}}"/>
		<Setter Property="BorderHoverBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.SummaryCommandButtonsBorderKey}}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="MinHeight" Value="10"/>
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Focusable" Value="False"/>
	</Style>

	<!-- _________________________ GroupByArea __________________________________________ -->
	<Style TargetType="{x:Type igDP:GroupByArea}">
        <Setter Property="Prompt1" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.GroupByAreaPrompt1}}"/>
        <Setter Property="Prompt2" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.GroupByAreaPrompt2}}"/>
        <Setter Property="FontSize" Value="12"/>
		<Setter Property="Foreground" Value="#151C55"/>
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
					<GradientStop Color="sc#1, 0.848967135, 0.848967135, 0.848967135" Offset="0"/>
					<GradientStop Color="sc#1, 0.694037557, 0.694037557, 0.694037557" Offset="1"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<!-- JM 04-09 9.2 CrossBandGrouping Feature -->
				<!-- I have made a number of changes to this template to integrate the new ExpanderDecorator element and
					 refactor the element layout to remove all hard-coded dimensions.  Note: I have left the hard-coded
					 font sizes - we may want to provide a way for the developer to override these in the future. I also removed
					 the animations for expanding/collapsing since this is now handled by the ExpanderDecorator. To reduce
					 clutter I have not retained the code I commented out - refer to previous TFS versions if you need to see the
					 old code. -->
				<ControlTemplate TargetType="{x:Type igDP:GroupByArea}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="TurnOnInsertionPoint">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PART_InsertionPoint" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="TurnOffInsertionPoint">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
								Storyboard.TargetName="PART_InsertionPoint"
								Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="ShowPrompts">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.5"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.8"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="HidePrompts">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.2"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2500000" Value="0.1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>

						<!-- ExpanderBarArea -->
						<!-- AS 2/25/11 TFS67071 - Since there are performance implications, we'll hook the Click instead of setting the Command. -->
						<igWindows:ExpanderBar
						  x:Name="ExpanderBarButton"
						  Grid.Row="0"
						  Height="10"
						 />
						<!-- End ExpanderBarArea-->

						<!-- Collapsible Area -->
						<igWindows:ExpanderDecorator Grid.Row="1"
													 HorizontalAlignment="Stretch"
													 IsExpanded="{Binding Path=IsExpanded, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
													 Orientation="Vertical">

							<Grid x:Name="outerGrid" SnapsToDevicePixels="True">
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto"/>
									<RowDefinition Height="Auto"/>
								</Grid.RowDefinitions>
								<!-- Background Area -->
								<Grid Grid.Row="0" Grid.RowSpan="2">
									<Rectangle Stroke="#00000000" HorizontalAlignment="Stretch"
									  VerticalAlignment="Stretch" Margin="0,0,0,0" Width="Auto" Height="Auto" x:Name="Rectangle" RenderTransformOrigin="0.5,0.5"
									  Fill="{TemplateBinding Background}" />

									<Border HorizontalAlignment="Stretch" Margin="3,3,3,0" Width="Auto" x:Name="Border" RenderTransformOrigin="0.5,0.5" CornerRadius="4,4,0,0"
										Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GroupByAreaBackgroundHighlight}}" />
									<!--Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GroupByLabelHighlight}}" />-->

								</Grid>
								<!-- End Background Area -->
								<!-- Grouping Prompts -->
								<StackPanel Orientation="Horizontal" Margin="6,12,0,0">
									<!-- JM 05-06-09 Honor the new Prompt1Template and Prompt2Template properties-->
									<!--<TextBlock
									  x:Name="prompt1"
									  FontSize="24"
									  Text="{TemplateBinding Prompt1}"
									  Opacity=".5" />
									<TextBlock
									  x:Name="prompt2"
									  Opacity=".8"
									  Margin="5,11.2,0,0"
									  Text="{TemplateBinding Prompt2}" />-->
									<ContentControl
									  x:Name="prompt1"
									  FontSize="24"
									  Content="{TemplateBinding Prompt1}"
									  ContentTemplate="{TemplateBinding Prompt1Template}"
									  Opacity=".5" />
									<ContentControl
									  x:Name="prompt2"
									  Opacity=".8"
									  Margin="5,11.2,0,0"
									  Content="{TemplateBinding Prompt2}"
									  ContentTemplate="{TemplateBinding Prompt2Template}"/>
								</StackPanel>
								<!-- GroupedFieldLabelsArea-->
								<Grid x:Name="PART_GroupedFieldLabelsArea" Margin="0,12,0,0" VerticalAlignment="Top">
									<!-- GroupedFields List -->
                                    <!-- JM 02-13-18 TFS248336 - Remove the binding on the Height property. -->
                                    <!--<igDP:GroupByAreaFieldListBox x:Name="GroupedFieldList" ItemsSource="{TemplateBinding GroupedFieldLabels}" Height="{Binding Path=ActualHeight, ElementName=AvailableFieldList}" AutomationProperties.Name="GroupedFieldsList"/>-->
                                    <igDP:GroupByAreaFieldListBox x:Name="GroupedFieldList" ItemsSource="{TemplateBinding GroupedFieldLabels}" AutomationProperties.Name="GroupedFieldsList"/>
                                </Grid>
								<!-- End GroupedFieldLabels Area -->
								<StackPanel Orientation="Vertical" Grid.Row="1">
									<!-- AvailableFieldLabels Area -->
									<Grid x:Name="PART_AvailableFieldLabelsArea" Margin="0,4,0,3" Visibility="Visible">
										<!-- AvailableField List -->
										<igDP:GroupByAreaFieldListBox x:Name="AvailableFieldList" ItemsSource="{TemplateBinding AvailableFieldLabels}" AutomationProperties.Name="AvailableFieldsList"/>
									</Grid>
									<!-- End AvailableFieldLabels Area -->
									<!-- Bottom Divider Bar -->
									<!-- AS 2/25/11 TFS67071 - Since there are performance implications, we'll hook the Click instead of setting the Command. -->
									<igWindows:ExpanderBar x:Name="ExpanderBarButtonBottom"
															Height="5"/>
									<!-- End Bottom Divider Bar-->
								</StackPanel>
								<!-- Insertion Point -->
								<Polygon
									x:Name="PART_InsertionPoint"
									Opacity="0"
									Fill="#FF151C55"
									Points="0,0 10,0 5,5"
									StrokeEndLineCap="Round"
									StrokeStartLineCap="Round"
									StrokeLineJoin="Round"
									HorizontalAlignment="Left"
									Margin="0,12,0,0"
									VerticalAlignment="Top"/>
							</Grid>
							<!--</Canvas>-->
						</igWindows:ExpanderDecorator>
						<!-- End Collapsible Area -->
					</Grid>
					<ControlTemplate.Triggers>
						<EventTrigger RoutedEvent="igDP:GroupByArea.ShowInsertionPoint">
							<BeginStoryboard x:Name="TurnOnInsertionPoint_BeginStoryboard" Storyboard="{StaticResource TurnOnInsertionPoint}"/>
						</EventTrigger>
						<EventTrigger RoutedEvent="igDP:GroupByArea.HideInsertionPoint">
							<BeginStoryboard x:Name="TurnOffInsertionPoint_BeginStoryboard" Storyboard="{StaticResource TurnOffInsertionPoint}"/>
						</EventTrigger>
						<EventTrigger RoutedEvent="igDP:GroupByArea.ShowPrompts">
							<BeginStoryboard x:Name="ShowPrompts_BeginStoryboard" Storyboard="{StaticResource ShowPrompts}"/>
						</EventTrigger>
						<EventTrigger RoutedEvent="igDP:GroupByArea.HidePrompts">
							<BeginStoryboard x:Name="HidePrompts_BeginStoryboard" Storyboard="{StaticResource HidePrompts}"/>
						</EventTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="btnGroupByNavRight" TargetType="{x:Type RepeatButton}">
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Grid Width="25" Height="16" x:Name="grid">
						<Path
							Margin="8,1.75,8,1.75"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							Height="Auto"
							Width="Auto"
							Stretch="Fill"
							Opacity="1"
							Data="M277.50946,64.418884 C277.50946,65.154053 278.08981,65.75 278.80579,65.75 279.07928,65.75 279.3334,65.663391 279.54254,65.514893 279.54254,65.514893 285.72241,60.621033 285.72241,60.621033 285.92444,60.530396 286.0993,60.388519 286.23199,60.211304 286.23199,60.211304 286.4325,59.825409 286.4325,59.825409 286.4762,59.692078 286.5,59.549255 286.5,59.400787 286.5,58.885895 286.21527,58.439667 285.79868,58.218262 285.79868,58.218262 279.85849,53.689484
279.85849,53.689484 279.73444,53.548218 279.58109,53.434479 279.40857,53.358124 279.40857,53.358124 279.18066,53.282745 279.18066,53.282745 279.08871,53.261566 278.99353,53.25 278.89532,53.25 278.45334,53.25 278.06287,53.477631 277.82886,53.824402 277.82886,53.824402 277.68216,54.111115 277.68216,54.111115 277.64917,54.200836 277.62518,54.294922 277.61172,54.392853 277.61172,54.392853 277.50119,54.837311 277.50119,54.837311 277.50119,54.837311
277.5,63.858368 277.5,63.858368 277.5,63.858368 277.50946,64.248932 277.50946,64.418884 z"
							Stroke="{TemplateBinding BorderBrush}"
							StrokeThickness="1"
							Fill="{TemplateBinding Background}"
							x:Name="path"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" TargetName="path" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GroupByNavBackgroundHover}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="MaxWidth" Value="25"/>
		<Setter Property="MaxHeight" Value="16"/>
		<Setter Property="MinHeight" Value="16"/>
		<Setter Property="MinWidth" Value="25"/>
		<Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GroupByNavBackground}}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GroupByNavBorderBrush}}"/>
	</Style>
	<Style x:Key="btnGroupByNavLeft" TargetType="{x:Type RepeatButton}">
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Grid Width="25" Height="16" x:Name="grid">
						<Path
							Width="9"
							Stretch="Fill"
							Opacity="1"
							Data="M16.49054,64.418884 C16.49054,65.154053 15.910187,65.75 15.194214,65.75 14.920715,65.75 14.666595,65.663391 14.457458,65.514893 14.457458,65.514893 8.2734375,60.722826 8.2734375,60.722826 8.0714111,60.632189 7.9006958,60.388519 7.7680049,60.211304 7.7680049,60.211304 7.5675049,59.825409 7.5675049,59.825409 7.5238042,59.692078 7.5,59.549255 7.5,59.400787 7.5,58.885895 7.784729,58.439667 8.2013245,58.218262 8.2013245,58.218262 14.14151,53.689484
14.14151,53.689484 14.265564,53.548218 14.418915,53.434479 14.591431,53.358124 14.591431,53.358124 14.819336,53.282745 14.819336,53.282745 14.911285,53.261566 15.00647,53.25 15.104675,53.25 15.546661,53.25 15.937134,53.477631 16.171143,53.824402 16.171143,53.824402 16.317841,54.111115 16.317841,54.111115 16.35083,54.200836 16.374817,54.294922 16.388275,54.392853 16.388275,54.392853 16.49881,54.837311 16.49881,54.837311 16.49881,54.837311
16.5,63.858368 16.5,63.858368 16.5,63.858368 16.49054,64.248932 16.49054,64.418884 z"
							Stroke="{TemplateBinding BorderBrush}"
							StrokeThickness="1"
							Height="12.5"
							HorizontalAlignment="Center"
							Margin="0,0,0,0"
							VerticalAlignment="Center"
							Fill="{TemplateBinding Background}"
							x:Name="path"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" TargetName="path" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GroupByNavBackgroundHover}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="MinHeight" Value="16"/>
		<Setter Property="MinWidth" Value="25"/>
		<Setter Property="MaxHeight" Value="16"/>
		<Setter Property="MaxWidth" Value="25"/>
		<Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GroupByNavBackground}}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GroupByNavBorderBrush}}"/>
	</Style>

	<!-- _________________________ Custom ScrollViewer __________________________________________ -->
	<Style x:Key="customScrollViewer" TargetType="{x:Type ScrollViewer}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="VerticalScrollBarVisibility" Value="Disabled"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollViewer}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="34"/>
							<ColumnDefinition Width="0.841*"/>
							<ColumnDefinition MinWidth="36" Width="30"/>
						</Grid.ColumnDefinitions>
						<!-- JM 05-08-09 Changed CanContentScroll to false since pixel scrolling is all we need.  The previous setting
							 created a problem when we re-used this ScrollViewer style in the GroupByAreaMulti template. -->
						<ScrollContentPresenter
							Grid.Column="1"
							CanContentScroll="False"
							Content="{TemplateBinding Content}"
							Grid.ColumnSpan="1"/>
						<!-- AS 2/25/11 TFS67071 - Set the command in the trigger -->
						<RepeatButton
							Content="L"
							CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
							Style="{StaticResource btnGroupByNavLeft}"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Width="Auto"
							Height="Auto"
							Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
							x:Name="repeatButton"/>
						<RepeatButton
							Content="R"
							CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
							Style="{StaticResource btnGroupByNavRight}"
							HorizontalAlignment="Center"
							Margin="0,0,0,0"
							VerticalAlignment="Center"
							Width="Auto"
							Height="Auto"
							Grid.Column="2"
							Grid.Row="0"
							Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
							x:Name="repeatButton1"/>
					</Grid>
					<ControlTemplate.Triggers>
						<!-- AS 2/25/11 TFS67071 - Set the command in the trigger -->
						<Trigger Property="ComputedHorizontalScrollBarVisibility" Value="Visible">
							<Setter TargetName="repeatButton" Property="Command" Value="ScrollBar.LineLeftCommand" />
							<Setter TargetName="repeatButton1" Property="Command" Value="ScrollBar.LineRightCommand" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ GroupByAreaFieldListBox __________________________________________ -->
	<Style TargetType="{x:Type igDP:GroupByAreaFieldListBox}">
		<Setter Property="MinWidth" Value="0"/>
		<Setter Property="Margin" Value="0,0,0,3"/>
		<Setter Property="HorizontalAlignment" Value="Stretch"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:GroupByAreaFieldListBox}">
					<!-- JM 08-18-09 TFS19242 - Set the FocusVisualStyle to Null so a focus rect is not displayed -->
                    <ScrollViewer Style="{StaticResource customScrollViewer}" CanContentScroll="true" FocusVisualStyle="{x:Null}">
						<!-- [JM 04-27-07 Changed to VirtualizingStackPanel from StackPanel to improve performance -->
						<!-- <StackPanel IsItemsHost="True" Orientation="Horizontal" Margin="{TemplateBinding Margin}"/> -->
						<VirtualizingStackPanel IsItemsHost="True" Orientation="Horizontal"/>
					</ScrollViewer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="HasItems" Value="False">
				<Setter Property="Height" Value="20"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- _________________________ GroupByAreaFieldLabel __________________________________________ -->
	<Style TargetType="{x:Type igDP:GroupByAreaFieldLabel}">
		<Setter Property="MinHeight" Value="10"/>
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Foreground" Value="#FF151C55"/>
		<Setter Property="BorderBrush" Value="#FF4A565D"/>
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Offset="0.000000" Color="#FFFCFDFD"/>
					<GradientStop Offset="0.5" Color="#FFDCDFE0"/>
					<GradientStop Offset="0.5" Color="#FFB8C2CB"/>
					<GradientStop Offset="1.000000" Color="#FFDAEBEB"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="6,3,6,3.5"/>
		<Setter Property="Margin" Value="0,0,1,0"/>
		<Setter Property="LayoutTransform">
			<Setter.Value>
				<ScaleTransform ScaleX="1" ScaleY="1"/>
			</Setter.Value>
		</Setter>
		<Setter Property="RenderTransform">
			<Setter.Value>
				<ScaleTransform ScaleX="1" ScaleY="1"/>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:GroupByAreaFieldLabel}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="sbHighlightOn">
							<DoubleAnimation
								Storyboard.TargetName="labelHighlight"
								Storyboard.TargetProperty="Opacity"
								BeginTime="00:00:00"
								Duration="00:00:00.15"
								To="1"
								FillBehavior="HoldEnd"/>
						</Storyboard>
						<Storyboard x:Key="sbHighlightOff">
							<DoubleAnimation
								Storyboard.TargetName="labelHighlight"
								Storyboard.TargetProperty="Opacity"
								BeginTime="00:00:00"
								Duration="00:00:01.25"
								To="0"
								FillBehavior="HoldEnd"/>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid x:Name="outerGrid" SnapsToDevicePixels="True" RenderTransformOrigin="0.5,0.5">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>
						<Grid.RenderTransform>
							<ScaleTransform ScaleX="1" ScaleY="1"/>
						</Grid.RenderTransform>
						<Rectangle
							Stroke="{TemplateBinding BorderBrush}"
							StrokeThickness="1"
							RadiusX="3"
							RadiusY="3"
							Fill="{TemplateBinding Background}"/>
						<Rectangle
							x:Name="labelHighlight"
							StrokeThickness="1"
							RadiusX="3"
							RadiusY="3"
							Stroke="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GroupByLabelHighlightBorder}}"
							Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GroupByLabelHighlight}}"
							Opacity="0"/>
						<ContentPresenter Margin="{TemplateBinding Padding}" Content="{Binding Path=(igDP:GroupByAreaFieldLabel.Field).Label, RelativeSource={RelativeSource TemplatedParent}}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource sbHighlightOn}" x:Name="HighlightOn"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource sbHighlightOff}" x:Name="HighlightOff"/>
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.RemovedFromAvailableList">
							<BeginStoryboard x:Name="CollapseLabel_BeginStoryboard" Storyboard="{StaticResource CollapseLabel}"/>
						</EventTrigger>
						<EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.AddedToAvailableList">
							<BeginStoryboard x:Name="AddLabelToList_BeginStoryboard" Storyboard="{StaticResource ExpandLabel}"/>
						</EventTrigger>
						<EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.AddedToGroupedList">
							<BeginStoryboard x:Name="AddLabelToGroup_BeginStoryboard" Storyboard="{StaticResource ExpandLabel}"/>
						</EventTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ GroupByRecordPresenter ______________________________________ -->
	<Style TargetType="{x:Type igDP:GroupByRecordPresenter}">
		<Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"/>
		<Setter Property="Background" Value="#00FFFFFF"/>
		<Setter Property="Margin" Value="0,0,0,2"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:GroupByRecordPresenter}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="sbDisplayNested">
							<DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="ncpVisual"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="HoldEnd">
								<DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
								<DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
								<SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:0.75"/>
							</DoubleAnimationUsingKeyFrames>
							<ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpVisual" Storyboard.TargetProperty="(UIElement.Visibility)">
								<DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="00:00:00"/>
								<DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="00:00:0.75"/>
							</ObjectAnimationUsingKeyFrames>
							<ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpMask" Storyboard.TargetProperty="(UIElement.Visibility)">
								<DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="00:00:00"/>
								<DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="00:00:0.75"/>
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="sbHideNested">
							<DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="NestedContentPresenter"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="HoldEnd">
								<SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:00.15"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition x:Name="row0" Height="Auto"/>
							<RowDefinition x:Name="row1" Height="Auto"/>
							<RowDefinition x:Name="row2" Height="*"/>
						</Grid.RowDefinitions>
						<!-- Row for nested content -->
						<!-- Expansion Checkbox -->
						<!-- AS 1/27/09 NA 2009 Vol 1 - Set ZIndex and RenderTransform for fixed fields -->
                        <!-- AS 6/3/09 NA 2009 Vol 2 - Added Command(Parameter) & ToggleMode to support undo/redo -->
						<igWindows:ExpansionIndicator x:Name="ExpansionIndicator"
                                                      RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                                      Panel.ZIndex="1"
 							                          Grid.Row="1"
                                                      Visibility="{TemplateBinding ExpansionIndicatorVisibility}"
                                                      Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}"
                                                      CommandParameter="{TemplateBinding Record}"
                                                      ToggleMode="Manual"
                                                      IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>

            <!-- JJD 10/10/12 - TFS123036 
								Added HeaderContentBackground so that the header area would span the entire width of the GroupByPresenter -->
						<Rectangle 
							x:Name="HeaderContentBackground"
								Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}"
								Grid.Row="0"
								Grid.Column="0"
								Grid.ColumnSpan="2"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
							/>
                        <!-- JJD 6/4/09 - TFS17060 - Added Header site to support HeaderPlacementInGroupBy 'OnTop' in reporting -->
                        <ContentPresenter
								x:Name="PART_HeaderContentSite"
								Grid.Row="0"
								Grid.Column="1"
								Content="{TemplateBinding HeaderContent}"
								Visibility="{Binding Path=HasHeaderContent, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource TemplatedParent}}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								d:IsHidden="True"/>

                        <!-- Record content site -->
                        <!-- AS 1/27/09 NA 2009 Vol 1 - Set RenderTransform for fixed fields -->
						<Grid
							x:Name="PART_RecordContentSite"
                            RenderTransform="{TemplateBinding FixedNearElementTransform}"
							Margin="0"
							Grid.Row="1"
							Grid.Column="1"
							Visibility="Collapsed">
							<!-- Background Bar -->
							<Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								RenderTransformOrigin="0.5,0.5"
								CornerRadius="2,2,2,2"
								SnapsToDevicePixels="True"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}">
								<Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
									<Rectangle
										Stroke="#44000000"
										StrokeThickness="1"
										RadiusX="1.55015910897703"
										RadiusY="1.55015910897703"
										Fill="Transparent"/>
									<Rectangle
										Margin="1"
										Stroke="#44FFFFFF"
										StrokeThickness="1"
										RadiusX="0.550159108977027"
										RadiusY="0.550159108977027"
										Fill="Transparent"/>
								</Grid>
							</Border>
							<!-- End Added 8/1/2006 GH -->
							<!-- End Background Bar -->
							<Border
								x:Name="highlight"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								CornerRadius="2,2,2,2"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelHighlight}}">
								<Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
									<Rectangle
										Stroke="#44000000"
										StrokeThickness="1"
										RadiusX="1.55015910897703"
										RadiusY="1.55015910897703"
										Fill="Transparent"/>
									<Rectangle
										Margin="1"
										Stroke="#44FFFFFF"
										StrokeThickness="1"
										RadiusX="0.550159108977027"
										RadiusY="0.550159108977027"
										Fill="Transparent"/>
								</Grid>
							</Border>
							<!-- End Add 8/1/2006 GH-->
							<!-- Label Text -->
							<!-- SSP 4/3/08 - Summaries Functionality
							Enclosed the existing ContentControl node into a Grid and added
							GroupBySummariesPresenter node.
							-->
							<StackPanel Orientation="Vertical">
								<ContentControl
									Style="{StaticResource LabelContentStyle}"
									Content="{Binding Path=Description, RelativeSource={RelativeSource TemplatedParent}}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
								<!-- SSP 4/3/08 - Summaries Functionality -->
								<!-- AS 1/27/09 NA 2009 Vol 1 - Set RenderTransform for fixed fields -->
								<igDP:GroupBySummariesPresenter
                                    RenderTransform="{TemplateBinding ScrollableElementTransform}"
									HorizontalAlignment="Left"
									x:Name="GroupBySummariesPresenter"
									Visibility="Collapsed"
									GroupByRecord="{TemplateBinding Record}"/>
							</StackPanel>
						</Grid>
						<!-- Nested Content -->
						<Grid
							x:Name="PART_NestedContentSite"
							Grid.Row="2"
							Grid.Column="1"
							Visibility="Collapsed">
							<!-- AS 2/13/09 TFS13978 - Set RenderTransform for fixed fields -->
							<Border
                                CornerRadius="0,0,3,3"
                                BorderBrush="#44102975"
                                BorderThickness="1"
                                RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                >
								<Border.Background>
									<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
										<GradientStop Color="#FFFFFFFF" Offset="0.25"/>
										<GradientStop Color="#FFEEEEEE" Offset="1.2"/>
									</LinearGradientBrush>
								</Border.Background>
								<!-- AS 3/25/09 TFS15801 -->
								<ContentControl
                                    RenderTransform="{TemplateBinding ScrollableElementTransform}"
                                    x:Name="NestedContentPresenter"
                                    Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}"
                                    Margin="0,0,0,5"/>
							</Border>
							<!-- AS 11/14/07 BR26035
								The namescope was broken because the recordlistcontrol was not in the logical tree. We
								need to use a ContentControl instead so the content	is made a logical child. -->
							<!-- AS 3/25/09 TFS15801
                                This should be nested within the Border above.
							<ContentControl x:Name="NestedContentPresenter" Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,0,5"/>-->
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<!-- AS 11/8/11 TFS88111 -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.AutoFitToWidth, RelativeSource={RelativeSource Self}}" Value="True" />
								<Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="PART_HeaderContentSite" Property="Grid.ColumnSpan" Value="2"/>
							<Setter TargetName="PART_RecordContentSite" Property="Grid.ColumnSpan" Value="2"/>
							<Setter TargetName="GroupBySummariesPresenter" Property="HorizontalAlignment" Value="Stretch"/>
                            <!-- AS 4/26/13 TFS138379 -->
                            <Setter TargetName="PART_HeaderContentSite" Property="HorizontalAlignment" Value="Stretch"/>
						</MultiDataTrigger>

						<Trigger Property="ShouldDisplayGroupByRecordContent" Value="true">
							<Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Visible"/>
						</Trigger>
						<Trigger Property="ShouldDisplayGroupByRecordContent" Value="false">
							<Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden"/>
						</Trigger>
						<!-- SSP 4/3/08 - Summaries Functionality -->
						<Trigger Property="ShouldDisplaySummaryCells" Value="true">
							<Setter TargetName="GroupBySummariesPresenter" Property="Visibility" Value="Visible"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Orientation" Value="Vertical"/>
								<Condition Property="ShouldDisplayGroupByRecordContent" Value="false"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="2"/>
						</MultiTrigger>

						<!-- JJD 1/20/09 - In horizontal mode we need to leave the height on the content area visible -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Orientation" Value="Horizontal"/>
								<Condition Property="ShouldDisplayGroupByRecordContent" Value="false"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Visible"/>
						</MultiTrigger>

						<Trigger Property="HasNestedContent" Value="true">
							<Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
						</Trigger>

                        <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="1" />
														<!-- JJD 10/10/12 - TFS123036 
																Added HeaderContentBackground so that the header area would span the entire width of the GroupByPresenter -->
														<Setter TargetName="HeaderContentBackground" Property="Grid.Row" Value="1" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="2" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="2" />
                            <Setter TargetName="row0" Property="Height" Value="*" />
                            <Setter TargetName="row2" Property="Height" Value="Auto" />
                        </MultiDataTrigger>

                        <!-- MD 8/3/10 - TFS35609 -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="1" />
														<!-- JJD 10/10/12 - TFS123036 
																Added HeaderContentBackground so that the header area would span the entire width of the GroupByPresenter -->
														<Setter TargetName="HeaderContentBackground" Property="Grid.Row" Value="1" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="2" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="2" />
                            <Setter TargetName="row0" Property="Height" Value="*" />
                            <Setter TargetName="row2" Property="Height" Value="Auto" />
                        </MultiDataTrigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="TemplateCardView">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:GroupByRecordPresenter}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="sbDisplayNested">
							<DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="ncpVisual"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="HoldEnd">
								<DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
								<DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
								<SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:0.75"/>
							</DoubleAnimationUsingKeyFrames>
							<ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpVisual" Storyboard.TargetProperty="(UIElement.Visibility)">
								<DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="00:00:00"/>
								<DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="00:00:0.75"/>
							</ObjectAnimationUsingKeyFrames>
							<ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpMask" Storyboard.TargetProperty="(UIElement.Visibility)">
								<DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="00:00:00"/>
								<DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="00:00:0.75"/>
							</ObjectAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="sbHideNested">
							<DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="NestedContentPresenter"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="HoldEnd">
								<SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:00.15"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" MinWidth="20"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
						</Grid.RowDefinitions>
						<!-- Row for nested content -->
						<!-- Record content site -->
						<Grid
							x:Name="PART_RecordContentSite"
							Margin="0"
							Grid.Row="1"
							Grid.Column="0"
							Visibility="Collapsed"
							d:LayoutOverrides="GridBox">
							<!-- Background Bar -->
							<Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								RenderTransformOrigin="0.5,0.5"
								CornerRadius="2,2,2,2"
								SnapsToDevicePixels="True"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}">
								<Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
									<Rectangle
										Stroke="#44000000"
										StrokeThickness="1"
										RadiusX="1.55015910897703"
										RadiusY="1.55015910897703"
										Fill="Transparent"/>
									<Rectangle
										Margin="1"
										Stroke="#44FFFFFF"
										StrokeThickness="1"
										RadiusX="0.550159108977027"
										RadiusY="0.550159108977027"
										Fill="Transparent"/>
								</Grid>
							</Border>
							<!-- End Background Bar -->
							<Border
								x:Name="highlight"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								CornerRadius="2,2,2,2"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelHighlight}}">
								<Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
									<Rectangle
										Stroke="#44000000"
										StrokeThickness="1"
										RadiusX="1.55015910897703"
										RadiusY="1.55015910897703"
										Fill="Transparent"/>
									<Rectangle
										Margin="1"
										Stroke="#44FFFFFF"
										StrokeThickness="1"
										RadiusX="0.550159108977027"
										RadiusY="0.550159108977027"
										Fill="Transparent"/>
								</Grid>
							</Border>
							<!-- End Add 8/1/2006 GH-->
							<!-- Label Text -->
							<StackPanel Orientation="Vertical">
								<ContentControl
									Style="{StaticResource LabelContentStyle}"
									Content="{Binding Path=Description, RelativeSource={RelativeSource TemplatedParent}}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
								<!-- SSP 4/3/08 - Summaries Functionality -->
								<igDP:GroupBySummariesPresenter
									Grid.Row="1"
									HorizontalAlignment="Left"
									x:Name="GroupBySummariesPresenter"
									Visibility="Collapsed"
									GroupByRecord="{TemplateBinding Record}"/>
							</StackPanel>
						</Grid>
						<!-- Nested Content -->
						<Grid
							x:Name="PART_NestedContentSite"
							Grid.Row="1"
							Grid.Column="0"
							Visibility="Collapsed">
							<!--<igWindows:NestedContentBackground/>-->
							<Border CornerRadius="0,0,3,3" BorderBrush="#44102975" BorderThickness="1">
								<Border.Background>
									<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
										<GradientStop Color="#FFFFFFFF" Offset="0.25"/>
										<GradientStop Color="#FFEEEEEE" Offset="1.2"/>
									</LinearGradientBrush>
								</Border.Background>
								<!-- AS 3/25/09 TFS15801 -->
								<ContentControl x:Name="NestedContentPresenter" Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,0,5"/>
							</Border>
							<!-- AS 11/14/07 BR26035
								The namescope was broken because the recordlistcontrol was not in the logical tree. We
								need to use a ContentControl instead so the content	is made a logical child. -->
							<!-- AS 3/25/09 TFS15801
                                This should be nested within the Border above.
                            <ContentControl x:Name="NestedContentPresenter" Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,0,5"/>-->
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="ShouldDisplayGroupByRecordContent" Value="true">
							<Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Visible"/>
						</Trigger>
						<!--<Trigger Property="ShouldDisplayGroupByRecordContent" Value="false"/>-->
						<!-- SSP 4/3/08 - Summaries Functionality -->
						<Trigger Property="ShouldDisplaySummaryCells" Value="true">
							<Setter TargetName="GroupBySummariesPresenter" Property="Visibility" Value="Visible"/>
						</Trigger>
						<Trigger Property="HasNestedContent" Value="true">
							<Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ HeaderPresenter__________________________________________ -->
	<Style TargetType="{x:Type igDP:HeaderPresenter}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:HeaderPresenter}">
					<ContentPresenter
						Content="{TemplateBinding Content}"
						ContentTemplate="{TemplateBinding ContentTemplate}"
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
						HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ HeaderLabelArea__________________________________________ -->
	<Style TargetType="{x:Type igDP:HeaderLabelArea}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:HeaderLabelArea}">
					<Grid>
						<ContentPresenter Content="{TemplateBinding Content}"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ HeaderPrefixArea__________________________________________ -->
    <!-- JJD 04/18/16 - Cross Field Record Filtering
                      Moved to DataPresenterGeneric.xaml so it could make use of
                      Menu and MenuItem style definitions shared by FixedFieldButton and FixedRecordButton  -->

    <!-- _________________________ LabelPresenter __________________________________________ -->
	<Style TargetType="{x:Type igDP:LabelPresenter}">
		<Setter Property="Padding" Value="7,4"/>
		<Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}"/>
		<Setter Property="LabelHighlight" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelHighlight}}"/>
		<Setter Property="InnerBorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelInnerBorder}}"/>
		<Setter Property="OuterBorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelOuterBorder}}"/>
		<Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"/>
		<Setter Property="HorizontalContentAlignment" Value="{Binding Path=Field.LabelTextAlignmentResolved, Converter={StaticResource textAlignmentToHorizontalAlignmentConverter}, RelativeSource={x:Static RelativeSource.Self}}"/>
		<!--SSP 7/6/09 - Field Chooser - Added ToolTip property on the field.-->
		<Setter Property="ToolTip" Value="{Binding Path=Field.ToolTip, RelativeSource={x:Static RelativeSource.Self}}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:LabelPresenter}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="sbHighlightOn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="highlight">
								<SplineDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
								<SplineDoubleKeyFrame Value="1" KeyTime="00:00:00.1750000"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="fishHeadHighlight">
								<SplineDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
								<SplineDoubleKeyFrame Value="1" KeyTime="00:00:00.1750000"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="sbHighlightOff">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="highlight">
								<SplineDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="fishHeadHighlight">
								<SplineDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SigmaFadeIn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SigmaFadeOut">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SigmaFadeInFilterButton">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SigmaFadeOutFilterButton">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid x:Name="labelCntr" Margin="2,4,2,4" Background="#00000000">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition x:Name="fishColumn" Width="0"/>
						</Grid.ColumnDefinitions>
                        <!-- Background Bar -->
						<Border
							Width="Auto"
							Height="Auto"
							RenderTransformOrigin="0.5,0.5"
							CornerRadius="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelCornerRadius}}"
							SnapsToDevicePixels="True"
							Background="{TemplateBinding Background}"
							x:Name="background"/>
						<!-- Highlight -->
						<Border
							x:Name="highlight"
							Opacity="0"
							Width="Auto"
							Height="Auto"
							CornerRadius="2,2,2,2"
							Background="{TemplateBinding LabelHighlight}"
							SnapsToDevicePixels="True"/>
						<Border
							BorderBrush="{TemplateBinding OuterBorderBrush}"
							BorderThickness="1"
							CornerRadius="1.55015910897703"
							Background="Transparent"
							Margin="0,0,0,0"
							x:Name="lineOuter"
							Width="Auto"
							Height="Auto"
							SnapsToDevicePixels="True"/>
						<Border
							BorderBrush="{TemplateBinding InnerBorderBrush}"
							BorderThickness="1"
							CornerRadius="0.550159108977027"
							Background="Transparent"
							Margin="1,1,1,1"
							x:Name="lineInner"
							Width="Auto"
							Height="Auto"
							SnapsToDevicePixels="True"/>
						<Path x:Name="fishHeadOuterStroke" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{TemplateBinding OuterBorderBrush}" Grid.Column="1" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z" />
						<Path x:Name="fishHead" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{TemplateBinding Background}" Grid.Column="1" Margin="0,1,1,1" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z" />
						<Path x:Name="fishHeadHighlight" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{TemplateBinding LabelHighlight}" Opacity="0"  Grid.Column="1" Margin="0,1,1,1" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z"/>
						<Path
							x:Name="fishHeadInnerStroke"
							Visibility="Collapsed"
							Stretch="Fill"
							Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,1 0,1 0,1 7,8 7,8 8,9 8,11 7,12 7,12 0,19 0,19 0,19 0,20 0,20 z"
							Fill="{TemplateBinding InnerBorderBrush}"
							Grid.Column="1"
							Margin="-1,1,1,1"
							SnapsToDevicePixels="True"/>
						<Grid
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							x:Name="sortIndicatorAndLabel">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<ContentPresenter
								x:Name="LabelContent"
								Focusable="False"
								Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
								ContentTemplate="{TemplateBinding ContentTemplate}"
								ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
								d:LayoutOverrides="Width, Height"
								VerticalAlignment="Center"/>
							<igWindows:SortIndicator
								x:Name="SortIndicator"
								SortStatus="{TemplateBinding SortStatus}"
								Visibility="Collapsed"
								HorizontalAlignment="Right"
								VerticalAlignment="Center"
								Width="Auto"
								Grid.Column="1"
								Margin="5,0,0,0"/>
							<!-- SSP 3/31/08 - Summaries Functionality -->
							<igDP:SummaryButton
								x:Name="SummaryButton"
								Field="{TemplateBinding Field}"
								Visibility="{Binding Path=Field.AllowSummariesResolved, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource TemplatedParent}}"
								HorizontalAlignment="Right"
								VerticalAlignment="Center"
								Width="Auto"
								Grid.Column="2"
								Margin="5,0,0,0"
								Opacity="0.4"/>
							<!-- JJD 1/06/09 - Filtering Functionality -->
							<igDP:FilterButton
								x:Name="FilterButton"
								Field="{TemplateBinding Field}"
								Visibility="{TemplateBinding FilterButtonVisibility}"
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								Width="Auto"
								Grid.Column="3"
                                Opacity="0.4"
								Margin="5,0,0,0"/>
							<!-- JM 1/14/09 - Fixed Fields Functionality -->
							<igDP:FixedFieldButton
								x:Name="FixedButton"
								Field="{TemplateBinding Field}"
								Visibility="{TemplateBinding FixedButtonVisibility}"
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								Width="Auto"
								Grid.Column="4"
								Margin="2,0,2,0"
								Opacity="0.6"/>
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<!--<DataTrigger Binding="{Binding Path=Field.LabelTextAlignmentResolved, RelativeSource={RelativeSource Self}}" Value="Center">
                            <Setter Property="HorizontalAlignment" TargetName="sortIndicatorAndLabel" Value="Center"/>
                        </DataTrigger>-->
						<!--<Trigger Property="IsDragSource" Value="True">
							<Setter TargetName="highlight" Property="Opacity" Value="1"/>
							<Setter TargetName="fishHeadHighlight" Property="Opacity" Value="1"/>
						</Trigger>-->

						<!-- HighlightPrimary -->
						<Trigger Property="HighlightAsPrimary" Value="true">
							<Setter TargetName="highlight" Property="Opacity" Value="1"/>
							<Setter TargetName="fishHeadHighlight" Property="Opacity" Value="1"/>
						</Trigger>
						<Trigger Property="HorizontalAlignment" Value="Center">
							<Setter Property="VerticalAlignment" TargetName="SortIndicator" Value="Top"/>
							<Setter Property="HorizontalAlignment" TargetName="SortIndicator" Value="Center"/>
							<Setter Property="Margin" TargetName="SortIndicator" Value="0,5,0,0"/>
						</Trigger>
						<!-- Only animate highlight -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<!--<Condition Property="SortStatus" Value="NotSorted"/>-->
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource sbHighlightOn}" x:Name="sbHighlightOn_BeginStoryboard"/>
								<BeginStoryboard Storyboard="{StaticResource SigmaFadeOut}" x:Name="SigmaFadeIn_BeginStoryboard"/>
								<BeginStoryboard x:Name="SigmaFadeIn_BeginStoryboard1" Storyboard="{StaticResource SigmaFadeIn}"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource sbHighlightOff}" x:Name="sbHighlightOff_BeginStoryboard"/>
								<BeginStoryboard Storyboard="{StaticResource SigmaFadeOut}" x:Name="SigmaFadeOut_BeginStoryboard"/>
								<StopStoryboard BeginStoryboardName="SigmaFadeIn_BeginStoryboard1"/>
								<StopStoryboard BeginStoryboardName="sbHighlightOn_BeginStoryboard"/>
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition SourceName="FilterButton" Property="HasActiveFilters" Value="False"/>
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
							<!-- JM 04-09-09 Comment these animations out for now to address TFS 16564.  This bug was discovered as we were getting ready to release
											 the April 2009 9.1 Hotfix and is caused by a bug in the WPF framework that we will need to work around by
											 replacing this MultiTrigger with a MultiDataTrigger. -->
							<!--<MultiTrigger.EnterActions>
								<BeginStoryboard x:Name="SigmaFadeIn_FB_BeginStoryboard" Storyboard="{StaticResource SigmaFadeInFilterButton}"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource SigmaFadeOutFilterButton}" x:Name="SigmaFadeOut_FB_BeginStoryboard"/>
								<RemoveStoryboard BeginStoryboardName="SigmaFadeIn_FB_BeginStoryboard"/>
							</MultiTrigger.ExitActions>-->
							<Setter TargetName="FilterButton" Property="Opacity" Value="1"/>
						</MultiTrigger>
						<Trigger SourceName="FilterButton" Property="HasActiveFilters" Value="True">
							<Setter TargetName="FilterButton" Property="Opacity" Value="1"/>
						</Trigger>
						<Trigger Property="SortStatus" Value="Ascending">
							<Setter TargetName="highlight" Property="Opacity" Value="1"/>
							<Setter TargetName="fishHeadHighlight" Property="Opacity" Value="1"/>
							<Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>
						</Trigger>
						<Trigger Property="SortStatus" Value="Descending">
							<Setter TargetName="highlight" Property="Opacity" Value="1"/>
							<Setter TargetName="fishHeadHighlight" Property="Opacity" Value="1"/>
							<Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>
						</Trigger>

						<DataTrigger Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True">
							<Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="background" Property="CornerRadius" Value="2,0,0,2"/>
							<Setter TargetName="highlight" Property="CornerRadius" Value="2,0,0,2"/>
							<Setter TargetName="lineOuter" Property="CornerRadius" Value="2,0,0,2"/>
							<Setter TargetName="lineInner" Property="CornerRadius" Value="2,0,0,2"/>
							<Setter TargetName="background" Property="BorderThickness" Value="1,1,0,1"/>
							<Setter TargetName="lineOuter" Property="BorderThickness" Value="1,1,0,1"/>
							<Setter TargetName="lineInner" Property="BorderThickness" Value="1,1,0,1"/>
							<Setter TargetName="lineInner" Property="Margin" Value="1,1,0,1"/>
							<Setter TargetName="fishHeadOuterStroke" Property="Visibility" Value="Visible"/>
							<Setter TargetName="fishHead" Property="Visibility" Value="Visible"/>
							<Setter TargetName="fishHeadHighlight" Property="Visibility" Value="Visible"/>
							<Setter TargetName="fishHeadInnerStroke" Property="Visibility" Value="Visible"/>
							<Setter TargetName="fishColumn" Property="Width" Value="14"/>
						</DataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.HasOffsetY), RelativeSource={RelativeSource Self}}" Value="False"/>
								<Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="labelCntr" Property="Margin" Value="-24,4,2,4"/>
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.HasOffsetY), RelativeSource={RelativeSource Self}}" Value="False"/>
								<Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True"/>
								<Condition Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.IsFirstInList), RelativeSource={RelativeSource Self}}" Value="False"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Padding" Value="25,4,5,4"/>
						</MultiDataTrigger>
						<DataTrigger Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.IsFirstInList), RelativeSource={RelativeSource Self}}" Value="True">
							<Setter TargetName="labelCntr" Property="Margin" Value="2,4,2,4"/>
						</DataTrigger>

						<!--SSP 6/23/09 - NAS9.2 Field Chooser
							If the label is in a field chooser then hide the sort indicator, filter button and
							summary button. Note that the fixed button is collapsed in code in label presenter
							by coercing the FixedButtonVisibility property to be Collapsed.-->
						<Trigger Property="IsInFieldChooser" Value="true">
							<Setter TargetName="SortIndicator" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="FilterButton" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="labelCntr" Property="Margin" Value="0,0,0,0"/>
						</Trigger>

						<Trigger Property="IsDragIndicator" Value="True">
							<Setter Property="Padding" Value="7,4"/>
							<Setter TargetName="labelCntr" Property="Margin" Value="2,4"/>
						</Trigger>

						<Trigger Property="IsMouseOver" Value="False">
							<Setter TargetName="highlight" Property="Opacity" Value="0"/>
							<Setter TargetName="fishHeadHighlight" Property="Opacity" Value="0"/>
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

    <!--// JJD 12/21/15 - TFS208975 - Field grouping feature-->
    <!-- _________________________ FieldGroupLabelPresenter __________________________________________ -->
	<Style TargetType="{x:Type igDP:FieldGroupLabelPresenter}">
		<Setter Property="Padding" Value="7,4"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelBackgroundKey}}"/>
        <Setter Property="InnerBorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelInnerBorderKey}}"/>
        <Setter Property="OuterBorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelOuterBorderKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelForegroundKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=FieldGroup.LabelTextAlignmentResolved, Converter={StaticResource textAlignmentToHorizontalAlignmentConverter}, RelativeSource={x:Static RelativeSource.Self}}"/>
		<Setter Property="ToolTip" Value="{Binding Path=FieldGroup.ToolTip, RelativeSource={x:Static RelativeSource.Self}}" />
		<Setter Property="Template">
			<Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:FieldGroupLabelPresenter}">
                    <Grid x:Name="labelCntr" Background="#00000000">
                        <!-- Background Bar -->
                        <Border
							Width="Auto"
							Height="Auto"
							RenderTransformOrigin="0.5,0.5"
							CornerRadius="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelCornerRadiusKey}}"
							SnapsToDevicePixels="True"
							Background="{TemplateBinding Background}"
							x:Name="background"/>
                        <Border
							BorderBrush="{TemplateBinding OuterBorderBrush}"
							BorderThickness="1"
							CornerRadius="1.55015910897703"
							Background="Transparent"
							Margin="0,0,0,0"
							x:Name="lineOuter"
							Width="Auto"
							Height="Auto"
							SnapsToDevicePixels="True"/>
                        <Border
							BorderBrush="{TemplateBinding InnerBorderBrush}"
							BorderThickness="1"
							CornerRadius="0.550159108977027"
							Background="Transparent"
							Margin="1,1,1,1"
							x:Name="lineInner"
							Width="Auto"
							Height="Auto"
							SnapsToDevicePixels="True"/>
                        <Grid
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							x:Name="labelAndFixedButton">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <igWindows:ExpansionIndicator
								x:Name="ExpansionIndicator"
								Grid.Column="0"
								Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
                                Command="{x:Static igDP:DataPresenterCommands.ToggleFieldGroupIsCollapsed}"
                                CommandParameter="{TemplateBinding FieldGroup}"
                                ToggleMode="Manual"
								IsChecked="{Binding Path=FieldGroup.IsCollapsed, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}"/>
                            <ContentPresenter
								x:Name="LabelContent"
								Focusable="False"
								Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
								ContentTemplate="{TemplateBinding ContentTemplate}"
								ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
								Grid.Column="1"
								d:LayoutOverrides="Width, Height"
								VerticalAlignment="Center"/>
                            <!-- JM 1/14/09 - Fixed Fields Functionality -->
                            <igDP:FixedFieldButton
								x:Name="FixedButton"
								Field="{TemplateBinding FieldGroup}"
								Visibility="{TemplateBinding FixedButtonVisibility}"
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								Width="Auto"
								Grid.Column="2"
								Margin="2,0,2,0"
								Opacity="0.7"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>

						<!--SSP 6/23/09 - NAS9.2 Field Chooser
							If the label is in a field chooser then hide the sort indicator, filter button and
							summary button. Note that the fixed button is collapsed in code in label presenter
							by coercing the FixedButtonVisibility property to be Collapsed.-->
						<Trigger Property="IsInFieldChooser" Value="true">
							<Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="labelCntr" Property="Margin" Value="0,0,0,0"/>
						</Trigger>

						<Trigger Property="IsDragIndicator" Value="True">
							<Setter Property="Padding" Value="7,4"/>
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ RecordListControl __________________________________________ -->
	<Style TargetType="{x:Type igDP:RecordListControl}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:RecordListControl}">
					<!-- AS 1/15/09 NA 2009 Vol 1 - Fixed Fields
                         We need to keep the record list control from scrolling out of view
                         since the scrollviewers scrollcontentpresenter will clip its contents.
                         We then need to "rescroll" the itemspresenter back with the scroll
                         offset. -->
					<ScrollViewer
                        RenderTransform="{TemplateBinding FixedNearElementTransform}"
						CanContentScroll="true"
						Focusable="false"
						HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
						VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}">
						<ItemsPresenter RenderTransform="{TemplateBinding ScrollableElementTransform}"/>
					</ScrollViewer>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ RecordSelector __________________________________________ -->
	<Style TargetType="{x:Type igDP:RecordSelector}">
		<Setter Property="Background" Value="#FF000000"/>
		<Setter Property="BorderBrush" Value="#FFCCCCCC"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="3,3,3,3"/>
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:RecordSelector}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="MouseEnter">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="selectorArrow" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="MouseLeave">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="selectorArrow" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.05"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="RecordActiveTrue">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="selectorArrow_Active" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedRecordBtn" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="RecordActiveFalse">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="selectorArrow_Active" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedRecordBtn" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="HideSelector">
							<DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Duration="00:00:00.0010000"
								Storyboard.TargetName="selectors"
								Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SigmaFadeIn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedRecordBtn" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SigmaFadeOut">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedRecordBtn" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
								<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid x:Name="MainBorder" Background="#00FFFFFF" Cursor="{TemplateBinding Cursor}">
						<!--SSP 4/21/09 NAS9.2 IDataErrorInfo Support
							Added a column definition.
						-->
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>

						<!-- iDataErrorInfo -->
						<Border x:Name="errorBd" Width="2"  Grid.ColumnSpan="4" Visibility="Collapsed" HorizontalAlignment="Right" />
                            
                        <!-- Selector Arrows -->
                        <Grid
						x:Name="selectors"
						Height="16"
						Width="16"
						Opacity="1">
                            <Path
							x:Name="selectorArrow"
							RenderTransformOrigin="0.5,0.5"
							Fill="{TemplateBinding Background}"
							Stretch="Fill"
							Stroke="#00CCCCCC"
							StrokeThickness="1"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Margin="{TemplateBinding Padding}"
							Width="7"
							Height="10"
							Cursor="{TemplateBinding Cursor}"
							Data="M60,40L60,20 70,30z"
							Visibility="Visible"
							Opacity="0.05"/>
                            <Path
							x:Name="selectorDataChanged"
							Margin="0,0,0,0"
							HorizontalAlignment="Left"
							VerticalAlignment="Top"
							Height="5.409"
							Width="3.444"
							Stretch="Fill"
							Opacity="1"
							Data="M 1,8.6568603515625 C1,8.6568603515625 1,1.3431400060653687 1,1.3431400060653687 1,1.3431400060653687 5.656859874725342,5 5.656859874725342,5 5.656859874725342,5 1,8.6568603515625 1,8.6568603515625 z"
							Fill="{TemplateBinding Background}"
							Visibility="Collapsed"/>
                            <Path
							x:Name="selectorAddRecord"
							Margin="0,0,0,0"
							HorizontalAlignment="Left"
							VerticalAlignment="Top"
							Height="7.497498035430908"
							Width="4.656859874725342"
							Stretch="Fill"
							Opacity="1"
							Data="M 0,7.497498035430908 C0,7.497498035430908 0,0 0,0 0,0 4.656859874725342,3.748749017715454 4.656859874725342,3.748749017715454 4.656859874725342,3.748749017715454 0,7.497498035430908 0,7.497498035430908 z"
							Fill="{TemplateBinding Background}"
							Visibility="Collapsed"
							RenderTransformOrigin="0.5,0.5"/>
                            <Path
							x:Name="selectorArrow_Active"
							RenderTransformOrigin="0.5,0.5"
							Fill="{TemplateBinding Background}"
							Stretch="Fill"
							Stroke="#00CCCCCC"
							StrokeThickness="1"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							Margin="4.5,3,4.5,3"
							Width="7"
							Height="10"
							Cursor="{TemplateBinding Cursor}"
							Data="M60,40L60,20 70,30z"
							Visibility="Visible"
							Opacity="0"/>
                            <!-- AS 7/9/10 TFS35642 - Moved the Command into the trigger -->
                            <Button
							x:Name="ClearButton"
							VerticalAlignment="Center"
							HorizontalAlignment="Center"
							Style="{DynamicResource {x:Static igDP:DataPresenterBase.FilterRecordClearButtonStyleKey}}"
							Visibility="{TemplateBinding FilterClearButtonVisibility}"/>
                        </Grid>
                            
                        <!-- IsAddRecord and IsDataChanged Icons (with mini-selectors) -->
                        <Grid
						x:Name="icons"
						Height="16"
						Width="16"
						d:LayoutOverrides="Width, Height"
						HorizontalAlignment="Center"
						Margin="0,0,0,0"
						VerticalAlignment="Center">
                            <Path
							x:Name="addRecordOuter"
							Margin="3,3,0,0"
							HorizontalAlignment="Left"
							VerticalAlignment="Top"
							Height="10"
							Width="10"
							Stretch="Fill"
							Opacity="1"
							Data="M 10,3 C10,3 6,3 6,3 6,3 6,6 6,6 6,6 3,6 3,6 3,6 3,10 3,10 3,10 6,10 6,10 6,10 6,13 6,13 6,13 10,13 10,13 10,13 10,10 10,10 10,10 13,10 13,10 13,10 13,6 13,6 13,6 10,6 10,6 10,6 10,3 10,3 z"
							Fill="#898989"
							Visibility="Collapsed"
							SnapsToDevicePixels="True"/>
                            <Path
							x:Name="addRecordInner"
							Margin="4,4,0,0"
							HorizontalAlignment="Left"
							VerticalAlignment="Top"
							Height="8"
							Width="8"
							Stretch="Fill"
							Opacity="1"
							Data="M 9,4 C9,4 7,4 7,4 7,4 7,7 7,7 7,7 4,7 4,7 4,7 4,9 4,9 4,9 7,9 7,9 7,9 7,12 7,12 7,12 9,12 9,12 9,12 9,9 9,9 9,9 12,9 12,9 12,9 12,7 12,7 12,7 9,7 9,7 9,7 9,4 9,4 z"
							Fill="#cccccc"
							Visibility="Collapsed"
							SnapsToDevicePixels="True"/>
                            <Path
							x:Name="dataChangedActive"
							Margin="4.510000228881836,4.190000057220459,0,0"
							HorizontalAlignment="Left"
							VerticalAlignment="Top"
							Height="10.559999942779541"
							Width="10.710000991821289"
							Stretch="Fill"
							Opacity="1"
							Data="M 11.762499809265137,4.190000057220459 C11.762499809265137,4.190000057220459 13.622968673706055,5.4495320320129395 13.622968673706055,5.4495320320129395 13.622968673706055,5.4495320320129395 10.8100004196167,8.90609359741211 10.8100004196167,8.90609359741211 10.8100004196167,8.90609359741211 15.220001220703125,8.364218711853027 15.220001220703125,8.364218711853027 15.220001220703125,8.364218711853027 15.220001220703125,10.575780868530273 15.220001220703125,10.575780868530273 15.220001220703125,10.575780868530273 10.8100004196167,10.07796859741211 10.8100004196167,10.07796859741211 10.8100004196167,10.07796859741211 13.622968673706055,13.51953125 13.622968673706055,13.51953125 13.622968673706055,13.51953125 11.762499809265137,14.75 11.762499809265137,14.75 11.762499809265137,14.75 9.842968940734863,10.575780868530273 9.842968940734863,10.575780868530273 9.842968940734863,10.575780868530273 7.952969074249268,14.75 7.952969074249268,14.75 7.952969074249268,14.75 6.09250020980835,13.51953125 6.09250020980835,13.51953125 6.09250020980835,13.51953125 8.920000076293945,10.07796859741211 8.920000076293945,10.07796859741211 8.920000076293945,10.07796859741211 4.510000228881836,10.575780868530273 4.510000228881836,10.575780868530273 4.510000228881836,10.575780868530273 4.510000228881836,8.364218711853027 4.510000228881836,8.364218711853027 4.510000228881836,8.364218711853027 8.920000076293945,8.90609359741211 8.920000076293945,8.90609359741211 8.920000076293945,8.90609359741211 6.09250020980835,5.4495320320129395 6.09250020980835,5.4495320320129395 6.09250020980835,5.4495320320129395 7.952969074249268,4.190000057220459 7.952969074249268,4.190000057220459 7.952969074249268,4.190000057220459 9.842968940734863,8.247031211853027 9.842968940734863,8.247031211853027 9.842968940734863,8.247031211853027 11.762499809265137,4.190000057220459 11.762499809265137,4.190000057220459 z"
							Visibility="Collapsed">
                                <Path.Fill>
                                    <RadialGradientBrush>
                                        <GradientStop Color="#00FFFFFF" Offset="0"/>
                                        <GradientStop Color="#FFB1B1B1" Offset="1"/>
                                    </RadialGradientBrush>
                                </Path.Fill>
                            </Path>
                            <Path
							x:Name="dataChanged"
							Margin="2.509999990463257,2.690000057220459,0,0"
							HorizontalAlignment="Left"
							VerticalAlignment="Top"
							Height="10.559999942779541"
							Width="10.710001230239868"
							Stretch="Fill"
							Opacity="1"
							Data="M 9.762499809265137,2.690000057220459 C9.762499809265137,2.690000057220459 11.622968673706055,3.9495320320129395 11.622968673706055,3.9495320320129395 11.622968673706055,3.9495320320129395 8.8100004196167,7.406094074249268 8.8100004196167,7.406094074249268 8.8100004196167,7.406094074249268 13.220001220703125,6.8642191886901855 13.220001220703125,6.8642191886901855 13.220001220703125,6.8642191886901855 13.220001220703125,9.075780868530273 13.220001220703125,9.075780868530273 13.220001220703125,9.075780868530273 8.8100004196167,8.57796859741211 8.8100004196167,8.57796859741211 8.8100004196167,8.57796859741211 11.622968673706055,12.01953125 11.622968673706055,12.01953125 11.622968673706055,12.01953125 9.762499809265137,13.25 9.762499809265137,13.25 9.762499809265137,13.25 7.842968940734863,9.075780868530273 7.842968940734863,9.075780868530273 7.842968940734863,9.075780868530273 5.952969074249268,13.25 5.952969074249268,13.25 5.952969074249268,13.25 4.09250020980835,12.01953125 4.09250020980835,12.01953125 4.09250020980835,12.01953125 6.920000076293945,8.57796859741211 6.920000076293945,8.57796859741211 6.920000076293945,8.57796859741211 2.509999990463257,9.075780868530273 2.509999990463257,9.075780868530273 2.509999990463257,9.075780868530273 2.509999990463257,6.8642191886901855 2.509999990463257,6.8642191886901855 2.509999990463257,6.8642191886901855 6.920000076293945,7.406094074249268 6.920000076293945,7.406094074249268 6.920000076293945,7.406094074249268 4.09250020980835,3.9495320320129395 4.09250020980835,3.9495320320129395 4.09250020980835,3.9495320320129395 5.952969074249268,2.690000057220459 5.952969074249268,2.690000057220459 5.952969074249268,2.690000057220459 7.842968940734863,6.747031211853027 7.842968940734863,6.747031211853027 7.842968940734863,6.747031211853027 9.762499809265137,2.690000057220459 9.762499809265137,2.690000057220459 z"
							Visibility="Collapsed">
                                <Path.Fill>
                                    <RadialGradientBrush>
                                        <GradientStop Color="#00FFFFFF" Offset="0"/>
                                        <GradientStop Color="#FFB1B1B1" Offset="1"/>
                                    </RadialGradientBrush>
                                </Path.Fill>
                            </Path>
                            <Path
							x:Name="addRecordActiveOuter"
							Margin="4,3.923218011856079,0,0"
							HorizontalAlignment="Left"
							VerticalAlignment="Top"
							Height="10.076781988143921"
							Width="10"
							Stretch="Fill"
							Opacity="1"
							Data="M 10.990951538085938,3.923218011856079 C10.990951538085938,3.923218011856079 7,3.923218011856079 7,3.923218011856079 7,3.923218011856079 7,7 7,7 7,7 4,7 4,7 4,7 4,11 4,11 4,11 7,11 7,11 7,11 7,14 7,14 7,14 10.990951538085938,14 10.990951538085938,14 10.990951538085938,14 10.989999771118164,11 10.989999771118164,11 10.989999771118164,11 14,11 14,11 14,11 14,7 14,7 14,7 10.989999771118164,7 10.989999771118164,7 10.989999771118164,7 10.990951538085938,3.923218011856079 10.990951538085938,3.923218011856079 z"
							Fill="#898989"
							Visibility="Collapsed"
							SnapsToDevicePixels="False"/>
                            <Path
							x:Name="addRecordActiveInner"
							Margin="5,5,0,0"
							HorizontalAlignment="Left"
							VerticalAlignment="Top"
							Height="8"
							Width="8"
							Stretch="Fill"
							Opacity="1"
							Data="M 10,5 C10,5 8,5 8,5 8,5 8,8 8,8 8,8 5,8 5,8 5,8 5,10 5,10 5,10 8,10 8,10 8,10 8,13 8,13 8,13 10,13 10,13 10,13 10,10 10,10 10,10 13,10 13,10 13,10 13,8 13,8 13,8 10,8 10,8 10,8 10,5 10,5 z"
							Fill="#cccccc"
							Visibility="Collapsed"
							SnapsToDevicePixels="False"/>
                        </Grid>
                            
                        <!-- JJD 11/26/13 NA 2014 Vol 1 - Record Number   -->
                        <igDP:RecordSelectorNumber x:Name="RecordNumber" Grid.Column="1"
                            Visibility="{Binding Path=RecordNumber, RelativeSource={RelativeSource Self}, Converter={StaticResource emptyToCollapsed}}"
                            />

                        <igDP:FixedRecordButton x:Name="FixedRecordBtn" Grid.Column="2"
                                         IsFixedOnTopAllowed="{TemplateBinding IsFixedOnTopAllowed}"
                                         IsFixedOnBottomAllowed="{TemplateBinding IsFixedOnBottomAllowed}"
										 Visibility="{TemplateBinding FixedButtonVisibility}" VerticalAlignment="Center"
										 Opacity="0.6"/>
						<Rectangle x:Name="OrientationHorizontalSep" Width="1" Fill="#FFE7E7E7" HorizontalAlignment="Right" Visibility="Collapsed" Grid.ColumnSpan="4"/>
						<!--JJD 6/10/09 NAS9.2 Record fing feature-->

						<!--SSP 4/21/09 NAS9.2 IDataErrorInfo Support-->
						<!--SSP 9/1/09 TFS19773 - Replaced Control with AutomationControl-->
						<igWindows:AutomationControl x:Name="errorIcon" Grid.Column="3"
										 Visibility="Collapsed"
										 Margin="2,0,4,0"
										 Style="{DynamicResource {x:Static igDP:DataPresenterBase.DataErrorIconStyleKey}}" />
                    </Grid>
					<ControlTemplate.Triggers>
						<!-- JJD 9/17/09
                             Use event trigger below instead of property triggers which can root the element
                             in certain situations due to a bug in the WPF framework
                        <MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="IsFilterRecord" Value="False"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource MouseEnter}"/>
								<BeginStoryboard Storyboard="{StaticResource SigmaFadeOut}" x:Name="SigmaFadeIn_BeginStoryboard"/>
								<BeginStoryboard x:Name="SigmaFadeIn_BeginStoryboard1" Storyboard="{StaticResource SigmaFadeIn}"/>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource MouseLeave}" x:Name="MouseLeave_BeginStoryboard"/>
								<BeginStoryboard Storyboard="{StaticResource SigmaFadeOut}" x:Name="SigmaFadeOut_BeginStoryboard"/>
								<StopStoryboard BeginStoryboardName="SigmaFadeIn_BeginStoryboard1"/>
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsActive" Value="True"/>
								<Condition Property="IsFilterRecord" Value="False"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource RecordActiveFalse}" x:Name="MouseLeave_BeginStoryboard1"/>
							</MultiTrigger.ExitActions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource RecordActiveTrue}" x:Name="RecordActiveTrue_BeginStoryboard"/>
							</MultiTrigger.EnterActions>
						</MultiTrigger>-->
                        <EventTrigger RoutedEvent="UIElement.MouseEnter">
                            <EventTrigger.Actions>
							    <BeginStoryboard Storyboard="{StaticResource MouseEnter}"/>
								<BeginStoryboard Storyboard="{StaticResource SigmaFadeIn}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="UIElement.MouseLeave">
                            <EventTrigger.Actions>
							    <BeginStoryboard Storyboard="{StaticResource MouseLeave}"/>
								<BeginStoryboard Storyboard="{StaticResource SigmaFadeOut}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:RecordSelector.Activated">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource RecordActiveTrue}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:RecordSelector.Deactivated">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource RecordActiveFalse}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
						<Trigger Property="IsFilterRecord" Value="True">
							<Setter Property="Visibility" TargetName="selectorArrow" Value="Collapsed"/>
							<Setter Property="Visibility" TargetName="selectorArrow_Active" Value="Collapsed"/>
						</Trigger>
            <!-- AS 7/9/10 TFS35642
              Only set the command when we know we will use it so it doesn't unnecessarily cause routed events.
            -->
            <Trigger Property="FilterClearButtonVisibility" Value="Visible">
              <Setter Property="Command" TargetName="ClearButton" Value="{x:Static igDP:DataPresenterCommands.ClearActiveRecordCellFilters}" />
            </Trigger>
						<!-- DataRecordPresenter .IsAddRecord == true -->
						<Trigger Property="IsAddRecord" Value="True">
							<Setter TargetName="addRecordOuter" Property="Visibility" Value="Visible"/>
							<Setter TargetName="addRecordInner" Property="Visibility" Value="Visible"/>
							<Setter Property="Visibility" TargetName="selectorAddRecord" Value="Visible"/>
							<Setter Property="Visibility" TargetName="selectorArrow" Value="Collapsed"/>
							<Setter Property="Visibility" TargetName="selectorArrow_Active" Value="Collapsed"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsDataChanged" Value="True"/>
								<Condition Property="IsFilterRecord" Value="False"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="dataChanged" Property="Visibility" Value="Visible"/>
							<Setter Property="Visibility" TargetName="selectorDataChanged" Value="Visible"/>
							<Setter Property="Visibility" TargetName="selectorArrow" Value="Collapsed"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsAddRecord" Value="True"/>
								<Condition Property="IsDataChanged" Value="True"/>
								<Condition Property="IsFilterRecord" Value="False"/>
							</MultiTrigger.Conditions>
							<Setter Property="Visibility" TargetName="dataChanged" Value="Collapsed"/>
							<Setter Property="Visibility" TargetName="dataChangedActive" Value="Collapsed"/>
						</MultiTrigger>
						<!--SSP 4/21/09 NAS9.2 IDataErrorInfo Support-->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasDataError" Value="True" />
								<Condition Property="IsDataErrorDisplayModeIcon" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="errorIcon" Property="Visibility" Value="Visible" />
							<Setter TargetName="errorIcon" Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=DataError}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasDataError" Value="True" />
								<Condition Property="IsDataErrorDisplayModeHighlight" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="errorBd" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.DataErrorHighlightBorderBrushKey}}" />
							<Setter TargetName="errorBd" Property="CornerRadius" Value="1"/>
							<Setter TargetName="errorBd" Property="Visibility" Value="Visible" />
							<Setter TargetName="MainBorder" Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=DataError}" />
						</MultiTrigger>
						<!-- Location Triggers -->
						<Trigger Property="Location" Value="AboveCellArea">
							<Setter Property="Grid.Column" TargetName="selectors" Value="1"/>
							<Setter Property="HorizontalAlignment" TargetName="selectors" Value="Center"/>
							<Setter Property="Margin" TargetName="selectors" Value="0,0,15,0"/>
							<Setter Property="Grid.Column" TargetName="icons" Value="1"/>
                             <!--JJD 11/26/13 NA 2014 Vol 1 - Record Number-->   
                            <Setter Property="Grid.Column" TargetName="RecordNumber" Value="0"/>
							<Setter Property="HorizontalAlignment" TargetName="icons" Value="Left"/>
							<Setter Property="Grid.Column" TargetName="errorIcon" Value="1"/>
							<Setter Property="HorizontalAlignment" TargetName="errorIcon" Value="Left"/>
							<Setter Property="HorizontalAlignment" TargetName="FixedRecordBtn" Value="Center"/>
							<Setter Property="Margin" TargetName="FixedRecordBtn" Value="15,0,0,0"/>
							<Setter Property="Background" TargetName="MainBorder" Value="#FFF5F5F5"/>
							<Setter Property="Visibility" TargetName="OrientationHorizontalSep" Value="Visible"/>
							<Setter TargetName="errorBd" Property="Width" Value="Auto" />
							<Setter TargetName="errorBd" Property="Height" Value="2" />
							<Setter TargetName="errorBd" Property="HorizontalAlignment" Value="Stretch" />
							<Setter TargetName="errorBd" Property="VerticalAlignment" Value="Bottom" />
							<Setter TargetName="addRecordActiveOuter" Property="HorizontalAlignment" Value="Center" />
							<Setter TargetName="addRecordActiveInner" Property="HorizontalAlignment" Value="Center" />
							<Setter TargetName="addRecordOuter" Property="HorizontalAlignment" Value="Center" />
							<Setter TargetName="addRecordInner" Property="HorizontalAlignment" Value="Center" />
							<Setter TargetName="icons" Property="Grid.Column" Value="1" />
							<Setter TargetName="icons" Property="HorizontalAlignment" Value="Center" />
							<Setter Property="RenderTransform" TargetName="selectorArrow">
								<Setter.Value>
									<TransformGroup>
										<RotateTransform Angle="90"/>
									</TransformGroup>
								</Setter.Value>
							</Setter>
							<Setter Property="RenderTransform" TargetName="selectorArrow_Active">
								<Setter.Value>
									<TransformGroup>
										<RotateTransform Angle="90"/>
									</TransformGroup>
								</Setter.Value>
							</Setter>
							<Setter Property="RenderTransform" TargetName="selectorAddRecord">
								<Setter.Value>
									<TransformGroup>
										<RotateTransform Angle="90"/>
									</TransformGroup>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="Location" Value="BelowCellArea">
							<Setter Property="Grid.Column" TargetName="selectors" Value="1"/>
							<Setter Property="HorizontalAlignment" TargetName="selectors" Value="Center"/>
							<Setter Property="Margin" TargetName="selectors" Value="0,0,15,0"/>
							<Setter Property="Grid.Column" TargetName="icons" Value="1"/>
                            <!-- JJD 11/26/13 NA 2014 Vol 1 - Record Number   -->
                            <Setter Property="Grid.Column" TargetName="RecordNumber" Value="0"/>
                            <Setter Property="HorizontalAlignment" TargetName="icons" Value="Left"/>
							<Setter Property="Grid.Column" TargetName="errorIcon" Value="1"/>
							<Setter Property="HorizontalAlignment" TargetName="errorIcon" Value="Left"/>
							<Setter Property="HorizontalAlignment" TargetName="FixedRecordBtn" Value="Center"/>
							<Setter Property="Margin" TargetName="FixedRecordBtn" Value="15,0,0,0"/>
							<Setter Property="Background" TargetName="MainBorder" Value="#FFF5F5F5"/>
							<Setter Property="Visibility" TargetName="OrientationHorizontalSep" Value="Visible"/>
							<Setter TargetName="errorBd" Property="Width" Value="Auto" />
							<Setter TargetName="errorBd" Property="Height" Value="2" />
							<Setter TargetName="errorBd" Property="HorizontalAlignment" Value="Stretch" />
							<Setter TargetName="errorBd" Property="VerticalAlignment" Value="Top" />
							<Setter TargetName="addRecordActiveOuter" Property="HorizontalAlignment" Value="Center" />
							<Setter TargetName="addRecordActiveInner" Property="HorizontalAlignment" Value="Center" />
							<Setter TargetName="addRecordOuter" Property="HorizontalAlignment" Value="Center" />
							<Setter TargetName="addRecordInner" Property="HorizontalAlignment" Value="Center" />
							<Setter TargetName="icons" Property="Grid.Column" Value="1" />
							<Setter TargetName="icons" Property="HorizontalAlignment" Value="Center" />
							<Setter Property="RenderTransform" TargetName="selectorArrow">
								<Setter.Value>
									<TransformGroup>
										<RotateTransform Angle="-90"/>
									</TransformGroup>
								</Setter.Value>
							</Setter>
							<Setter Property="RenderTransform" TargetName="selectorArrow_Active">
								<Setter.Value>
									<TransformGroup>
										<RotateTransform Angle="-90"/>
									</TransformGroup>
								</Setter.Value>
							</Setter>
							<Setter Property="RenderTransform" TargetName="selectorAddRecord">
								<Setter.Value>
									<TransformGroup>
										<RotateTransform Angle="-90"/>
									</TransformGroup>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="Location" Value="RightOfCellArea">
							<Setter Property="RenderTransform" TargetName="selectorArrow">
								<Setter.Value>
									<TransformGroup>
										<RotateTransform Angle="180"/>
									</TransformGroup>
								</Setter.Value>
							</Setter>
							<Setter Property="RenderTransform" TargetName="selectorArrow_Active">
								<Setter.Value>
									<TransformGroup>
										<RotateTransform Angle="180"/>
									</TransformGroup>
								</Setter.Value>
							</Setter>
							<Setter Property="RenderTransform" TargetName="selectorAddRecord">
								<Setter.Value>
									<TransformGroup>
										<RotateTransform Angle="180"/>
									</TransformGroup>
								</Setter.Value>
							</Setter>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="FixedButtonVisibility" Value="Collapsed"/>
								<Condition Property="Location" Value="AboveCellArea"/>
							</MultiTrigger.Conditions>
							<Setter Property="Margin" TargetName="selectors" Value="0"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="FixedButtonVisibility" Value="Collapsed"/>
								<Condition Property="Location" Value="BelowCellArea"/>
							</MultiTrigger.Conditions>
							<Setter Property="Margin" TargetName="selectors" Value="0"/>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

    <!-- JJD 11/26/13 NA 2014 Vol 1 - Record Number                                                 -->
	<!-- _________________________ RecordSelectorNumber __________________________________________ -->
	<Style TargetType="{x:Type igDP:RecordSelectorNumber}">
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="Margin" Value="1,1,1,2"/>        
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:RecordSelectorNumber}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Margin="{TemplateBinding Padding}">
                        <TextBlock x:Name="Text" 
                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                               Text="{TemplateBinding RecordNumber}">
                        </TextBlock>
                    </Border>
                </ControlTemplate>
			</Setter.Value>
		</Setter>       
    </Style>

	<!-- _____________________ RecordScrollTipInfo DataTemplate________________________ -->
	<HierarchicalDataTemplate DataType="{x:Type igDP:RecordScrollTipInfo}" ItemsSource="{Binding Path=Children}">
		<HierarchicalDataTemplate.Resources>
			<DataTemplate DataType="{x:Type igDP:DataRecord}">
				<StackPanel Orientation="Horizontal">
					<ContentPresenter TextBlock.FontWeight="Bold" VerticalAlignment="Center" Content="{Binding Path=FieldLayout.ScrollTipField.Label}"/>
					<!-- AS 5/31/07 BR22875 -->
					<!--<TextBlock VerticalAlignment="Center" Text=":" Margin="0,0,2,0"/>-->
					<TextBlock
						VerticalAlignment="Center"
						Text=":"
						Margin="0,0,2,0"
						Visibility="{Binding Path=FieldLayout.ScrollTipField.HasLabel, Converter={StaticResource BoolToVisConverter}}"/>
                    <!-- JJD 09/09/15 - TFS206086 
                         For tree fields we need a TreeCellValuePresenter in case a style was supplied that targets 
                         that type so place both elements in the template and set their visibility to 'Collapsed' then
                         use triggers below to make one or the other visible and bind its Field property-->
                    <!--<igDP:CellValuePresenter Padding="0" Margin="0" Field="{Binding Path=FieldLayout.ScrollTipField}"/>-->
					<igDP:CellValuePresenter x:Name="Cvp" Visibility="Collapsed" Padding="0" Margin="0" />
					<igDP:TreeCellValuePresenter x:Name="Tcvp"  Visibility="Collapsed" Padding="0" Margin="0" />
				</StackPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Path=FieldLayout.ScrollTipField.IsTreeField}" Value="True">
                        <Setter TargetName="Tcvp" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="Tcvp" Property="Field" Value="{Binding Path=FieldLayout.ScrollTipField}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=FieldLayout.ScrollTipField.IsTreeField}" Value="False">
                        <Setter TargetName="Cvp" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="Cvp" Property="Field" Value="{Binding Path=FieldLayout.ScrollTipField}"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
			</DataTemplate>
			<DataTemplate DataType="{x:Type igDP:GroupByRecord}">
				<TextBlock Text="{Binding Path=Description}" Margin="0,3"/>
			</DataTemplate>
			<DataTemplate DataType="{x:Type igDP:ExpandableFieldRecord}">
				<TextBlock Text="{Binding Path=Description}" Margin="0,3"/>
			</DataTemplate>
			<!--SSP 6/7/08 BR33580 - Added SummaryRecord data template-->
			<DataTemplate DataType="{x:Type igDP:SummaryRecord}">
				<TextBlock Text="{Binding Path=Description}" Margin="0,3"/>
			</DataTemplate>
		</HierarchicalDataTemplate.Resources>
		<ContentControl Content="{Binding Path=Record}"/>
	</HierarchicalDataTemplate>

	<!-- _________________________ RecordScrollTip __________________________________________ -->
	<Style TargetType="{x:Type igDP:RecordScrollTip}">
		<!-- BasedOn="{StaticResource {x:Type ToolTip}}"> -->
		<Setter Property="VerticalContentAlignment" Value="Top"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:RecordScrollTip}">
					<Grid SnapsToDevicePixels="True">
						<Border
							x:Name="outerBorder"
							Opacity="1"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							CornerRadius="5.58,5.58,5.58,5.58"
							BorderBrush="#b7b7b7"
							BorderThickness="1">
							<Border.Background>
								<LinearGradientBrush StartPoint="0.01680672268907563,-0.2903225806451613" EndPoint="0.7068450030158547,1.3268999899587324">
									<LinearGradientBrush.GradientStops>
										<GradientStopCollection>
											<GradientStop Color="#FFffffff" Offset="0"/>
											<GradientStop Color="#FFdcdcdc" Offset="0.9944444298744202"/>
										</GradientStopCollection>
									</LinearGradientBrush.GradientStops>
								</LinearGradientBrush>
							</Border.Background>
						</Border>
						<Border
							x:Name="innerBorder"
							Opacity="1"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							Margin="1,1,1,1"
							CornerRadius="5.3999999999999995,5.3999999999999995,5.3999999999999995,5.3999999999999995"
							BorderBrush="#ffffff"
							BorderThickness="1"/>
						<ContentPresenter Margin="5,5,5,5"/>
					</Grid>
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding Source={x:Static interop:BrowserInteropHelper.IsBrowserHosted}}" Value="True">
							<Setter Property="CornerRadius" TargetName="outerBorder" Value="0"/>
							<Setter Property="CornerRadius" TargetName="innerBorder" Value="0"/>
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<TreeView ItemsSource="{Binding}">
						<TreeView.Style>
							<Style TargetType="{x:Type TreeView}">
								<Setter Property="Background" Value="Transparent"/>
								<Setter Property="BorderThickness" Value="0"/>
								<Setter Property="VerticalContentAlignment" Value="Top"/>
								<Setter Property="Foreground" Value="#767676"/>
							</Style>
						</TreeView.Style>
						<TreeView.ItemContainerStyle>
							<Style TargetType="{x:Type TreeViewItem}">
								<Setter Property="IsExpanded" Value="true"/>
								<Setter Property="Focusable" Value="false"/>
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate>
											<StackPanel Orientation="Vertical">
												<ContentPresenter
													ContentSource="Header"
													HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
													x:Name="PART_Header"
													ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
													Content="{TemplateBinding HeaderedContentControl.Header}"
													Grid.ColumnSpan="2"/>
												<StackPanel Orientation="Horizontal" x:Name="ItemsHostPanel">
													<FrameworkElement MinWidth="10" Height="0"/>
													<ItemsPresenter
														x:Name="ItemsHost"
														Grid.Column="1"
														Grid.Row="1"
														Grid.ColumnSpan="2"/>
												</StackPanel>
											</StackPanel>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>
						</TreeView.ItemContainerStyle>
					</TreeView>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- SSP 3/27/09 - Summaries Functionality
				Added style for summaries related elements
	-->
	<!-- _________________________ SummaryRecordPresenter ______________________________________ -->
	<Style TargetType="{x:Type igDP:SummaryRecordPresenter}">
		<Setter Property="Foreground" Value="#FF000000"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="HeaderAreaBackground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}"/>
		<Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryRecordPresenterBackground}}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryRecordPresenterBorder}}"/>
		<Setter Property="Margin" Value="0,0,0,2"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:SummaryRecordPresenter}">
					<igWindows:CardPanel x:Name="baseGrid">
						<Border
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="0,1,0,1"
							Background="{TemplateBinding Background}"
                            RenderTransform="{TemplateBinding FixedNearElementTransform}"
							x:Name="Background"/>
						<Grid Margin="0">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
								<!-- SSP 5/6/08 - Record Separators - Added two col defs-->
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
								<!-- SSP 5/6/08 - Record Separators - Added two row defs-->
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
							</Grid.RowDefinitions>
							<!-- Expansion Checkbox -->
							<!-- SSP 5/6/08 - Record Separators - changed grid.row to 2 from 1-->
                            <!-- AS 6/3/09 NA 2009 Vol 2 - Added Command(Parameter) & ToggleMode to support undo/redo -->
							<igWindows:ExpansionIndicator
								x:Name="ExpansionIndicator"
								Grid.Row="2"
								Grid.Column="0"
								Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
                                Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}"
                                CommandParameter="{TemplateBinding Record}"
                                ToggleMode="Manual"
								IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
							<!-- Header Background -->
							<!-- Added 8/2/2006 GH -->
							<!-- SSP 5/6/08 - Record Separators - changed grid.colspan to 5 from 3-->
							<!-- AS 2/10/09 TFS13798 - Set RenderTransform for fixed fields -->
							<igWindows:CardPanel
								x:Name="SpacerFill"
                                RenderTransform="{TemplateBinding FixedNearElementTransform}"
								Grid.Row="0"
								Grid.Column="0"
								Grid.ColumnSpan="5"
								Visibility="Visible">
								<Rectangle x:Name="fill" Margin="0,0,0,0" Fill="{TemplateBinding HeaderAreaBackground}"/>
								<Rectangle
									x:Name="lightLine"
									Fill="#3FFFFFFF"
									VerticalAlignment="Top"
									Margin="0,1,0,0"
									Width="Auto"
									Height="1"/>
								<Rectangle
									x:Name="darkLine"
									Fill="#66000000"
									VerticalAlignment="Top"
									Margin="0,0,0,0"
									Width="Auto"
									Height="1"/>
							</igWindows:CardPanel>
							<!-- End Added 8/2/2006 GH -->
							<!-- Header Content -->
							<!-- SSP 5/6/08 - Record Separators - changed grid.col to 2 from 1-->
							<ContentPresenter
								x:Name="PART_HeaderContentSite"
								Grid.Row="0"
								Grid.Column="2"
								Content="{TemplateBinding HeaderContent}"
								Visibility="Visible"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								d:IsHidden="True"/>
							<!-- SSP 5/6/08 - Record Separators - Added separator rectangle -->
							<Border
								x:Name="RecordSeparator"
								Grid.Row="1"
								Grid.Column="0"
								Visibility="Collapsed"
                                RenderTransform="{TemplateBinding FixedNearElementTransform}"
								Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=RecordSeparatorStyle}}"
								Grid.ColumnSpan="5"/>
							<!-- Record Content -->
							<!-- SSP 5/6/08 - Record Separators - changed grid.row to 2 from 1 and grid.col to 2 from 1-->
							<ContentPresenter
								x:Name="PART_RecordContentSite"
								Grid.Row="2"
								Grid.Column="2"
								Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"
								ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								Margin="{TemplateBinding ContentAreaMargins}"/>
						</Grid>
					</igWindows:CardPanel>
					<ControlTemplate.Triggers>
						<!-- AS 11/8/11 TFS88111 -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.AutoFitToWidth, RelativeSource={RelativeSource Self}}" Value="True" />
								<Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="PART_HeaderContentSite" Property="Grid.ColumnSpan" Value="3"/>
							<Setter TargetName="PART_RecordContentSite" Property="Grid.ColumnSpan" Value="3"/>
							<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
						</MultiDataTrigger>

						<Trigger Property="Orientation" Value="Horizontal">
							<!-- START SSP 5/6/08 - Record Separators
                             <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="1" />
                            <Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="3" />
														-->
							<Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="2"/>
							<Setter TargetName="PART_HeaderContentSite" Property="Grid.Column" Value="0"/>
							<Setter TargetName="PART_RecordContentSite" Property="VerticalAlignment" Value="Top"/>
							<Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0"/>
							<Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="2"/>
							<Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1"/>
							<Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="5"/>
							<Setter TargetName="RecordSeparator" Property="Grid.Row" Value="2"/>
							<Setter TargetName="RecordSeparator" Property="Grid.Column" Value="1"/>
							<Setter TargetName="RecordSeparator" Property="Width" Value="10"/>
							<Setter TargetName="RecordSeparator" Property="Height" Value="Auto"/>
							<!-- END SSP 5/6/08 - Record Separators -->
						</Trigger>
						<Trigger Property="ShouldDisplayRecordContent" Value="False">
							<Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Collapsed"/>
							<!--JJD 9/4/07 - BR26153 -->
							<!--Only set ExpansionIndicator Visibility to Hidden if is was Visible (see new MultiTrigger below) -->
							<!--<Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />-->
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Orientation" Value="Horizontal"/>
								<Condition Property="ShouldDisplayRecordContent" Value="False"/>
							</MultiTrigger.Conditions>
							<!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
							<Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="3"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Orientation" Value="Vertical"/>
								<Condition Property="ShouldDisplayRecordContent" Value="False"/>
							</MultiTrigger.Conditions>
							<!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
							<Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="3"/>
						</MultiTrigger>
						<Trigger Property="IsHeaderRecord" Value="True">
							<Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0"/>
							<Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="0"/>
						</Trigger>
						<Trigger Property="HasHeaderContent" Value="False">
							<Setter Property="Visibility" TargetName="SpacerFill" Value="Collapsed"/>
							<Setter Property="Visibility" TargetName="PART_HeaderContentSite" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="IsFixedOnBottom" Value="true">
							<Setter Property="Margin" Value="0,2,0,0"/>
							<!-- JJD 2/3/09 - shouldn't step on Margin property of PART_RecordContentSite since
                                 it is bound to the ContentAreaMargins property -->
							<!--<Setter Property="Margin" TargetName="PART_RecordContentSite" Value="0,2,0,2"/>-->
							<Setter Property="BorderThickness" TargetName="Background" Value="0,1,0,0"/>
						</Trigger>
						<!-- START SSP 5/6/08 - Record Separators -->
						<!-- For HasSeparatorBefore, default grid.row and grid.column settings are fine as setup
												when declaring the record separator (and for horizontal orientation as setup in the
												orientation=horizontal trigger above).
											-->
						<Trigger Property="HasSeparatorBefore" Value="true">
							<Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
						</Trigger>
						<!-- For HasSeparatorAfter, we have to set grid.row and grid.col based on the orientation-->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasSeparatorAfter" Value="true"/>
								<Condition Property="Orientation" Value="Vertical"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
							<Setter TargetName="RecordSeparator" Property="Grid.Row" Value="3"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasSeparatorAfter" Value="true"/>
								<Condition Property="Orientation" Value="Horizontal"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
							<Setter TargetName="RecordSeparator" Property="Grid.Column" Value="3"/>
						</MultiTrigger>
						<!-- END SSP 5/6/08 - Record Separators -->
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="TemplateCardView">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:SummaryRecordPresenter}">
					<igWindows:CardPanel x:Name="baseGrid" Background="{TemplateBinding Background}">
						<!-- Record Content -->
						<Rectangle Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CardBackground}}"/>
						<ContentPresenter
							x:Name="PART_RecordContentSite"
							Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"
							ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</igWindows:CardPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ SummaryRecordContentArea ______________________________________ -->
	<Style TargetType="{x:Type igDP:SummaryRecordContentArea}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:SummaryRecordContentArea}">
					<Border BorderBrush="{x:Null}" BorderThickness="0,1,0,1" Background="{x:Null}">
						<StackPanel>
							<!--Position the summary record header-->
							<igDP:SummaryRecordHeaderPresenter
                                x:Name="SummaryRecordHeaderPresenter"
                                SummaryRecord="{TemplateBinding SummaryRecord}"
                                RenderTransform="{Binding Path=FixedNearElementTransform, RelativeSource={RelativeSource AncestorType={x:Type igDP:RecordPresenter}}}"
                                Visibility="{TemplateBinding SummaryRecordHeaderVisibility}"/>
							<igDP:SummaryRecordCellArea x:Name="cellArea" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							<Border BorderBrush="{x:Null}">
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*"/>
										<ColumnDefinition Width="*"/>
										<ColumnDefinition Width="*"/>
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition/>
									</Grid.RowDefinitions>
									<igDP:SummaryResultsPresenter Grid.Column="0" SummaryResults="{TemplateBinding SummaryResultsLeft}"/>
									<igDP:SummaryResultsPresenter Grid.Column="1" SummaryResults="{TemplateBinding SummaryResultsCenter}"/>
									<igDP:SummaryResultsPresenter Grid.Column="2" SummaryResults="{TemplateBinding SummaryResultsRight}"/>
								</Grid>
							</Border>
						</StackPanel>
					</Border>
					<ControlTemplate.Triggers>
						<!-- SSP 1/6/10 TFS25633 - Added HasSummariesInCellArea property. We should not display
											the summary record cell area if there are no summaries displayed inside it - that is
											all the visible summaries are free-form (left, center and right) summaries.
										-->
						<Trigger Property="HasSummariesInCellArea" Value="false">
							<Setter TargetName="cellArea" Property="Height" Value="0" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ SummaryRecordPrefixArea __________________________________________ -->
	<Style TargetType="{x:Type igDP:SummaryRecordPrefixArea}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:SummaryRecordPrefixArea}">
					<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
						<ContentPresenter
							Content="{TemplateBinding Content}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ SummaryRecordCellArea __________________________________________ -->
	<Style TargetType="{x:Type igDP:SummaryRecordCellArea}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:SummaryRecordCellArea}">
					<igWindows:CardPanel>
						<Border BorderThickness="0,1,0,1">
							<ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
						</Border>
					</igWindows:CardPanel>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Margin" Value="0,0,0,0"/>
	</Style>

	<!-- _________________________ SummaryRecordHeaderPresenter ______________________________________ -->
	<Style TargetType="{x:Type igDP:SummaryRecordHeaderPresenter}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:SummaryRecordHeaderPresenter}">
					<Border Background="{x:Null}" BorderBrush="{x:Null}">
						<TextBlock
							FontWeight="Bold"
							Text="{Binding Path=SummaryRecord.SummaryRecordHeaderResolved, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
							Foreground="{TemplateBinding Foreground}"
							Margin="{TemplateBinding Padding}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.SummaryCSCItemForegroundKey}}"/>
		<Setter Property="Padding" Value="3,3,3,3"/>
	</Style>

    <!-- _________________________ SummaryResultsPresenter ______________________________________ -->
	<Style TargetType="{x:Type igDP:SummaryResultsPresenter}">
		<Style.Resources>
            <!-- SSP 4/10/12 - Optimizations - Note that this is no longer being used as a result of the change below. -->
			<DataTemplate DataType="{x:Type igDP:SummaryResult}">
				<igDP:SummaryResultPresenter SummaryResult="{Binding}"/>
			</DataTemplate>
            <!-- SSP 4/10/12 - Optimizations - Added SummaryResultEntry template. -->
            <DataTemplate DataType="{x:Type igDP:SummaryResultEntry}">
                <igDP:SummaryResultPresenter SummaryResult="{Binding Path=SummaryResult}"/>
            </DataTemplate>
        </Style.Resources>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:SummaryResultsPresenter}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}"
						SnapsToDevicePixels="true">
                        <!-- SSP 4/10/12 - Optimizations - Changed ItemsSource="{TemplateBinding SummaryResults}" to ItemsSource="{TemplateBinding SummaryResultEntries}". -->
                        <ItemsControl ItemsSource="{TemplateBinding SummaryResultEntries}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding TreeLineOffset}">
							<ItemsControl.ItemsPanel>
								<ItemsPanelTemplate>
									<StackPanel CanHorizontallyScroll="false" CanVerticallyScroll="false"/>
								</ItemsPanelTemplate>
							</ItemsControl.ItemsPanel>
						</ItemsControl>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ SummaryResultPresenter ______________________________________ -->
	<Style TargetType="{x:Type igDP:SummaryResultPresenter}">
		<Setter Property="Padding" Value="1,1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:SummaryResultPresenter}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="1"
						Padding="{TemplateBinding Padding}"
						ToolTip="{Binding Path=SummaryResult.ToolTipResolved, RelativeSource={RelativeSource TemplatedParent}}">
                        <!-- SSP 3/19/10 - Optimizations
                            Changed the binding to bind to the new DisplayTextAsync instead of the DisplayText so we
                            don't force synchronous calculation of the summary if it's dirty.
                        -->
                        <TextBlock Text="{Binding Path=SummaryResult.DisplayTextAsync, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Margin" Value="0,0,0,2"/>
	</Style>

	<!-- _________________________ SummaryCellPresenter ______________________________________ -->
	<Style TargetType="{x:Type igDP:SummaryCellPresenter}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:SummaryCellPresenter}">
					<igDP:SummaryCellPresenterLayoutElement/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ SummaryButton ______________________________________ -->
	<Style TargetType="{x:Type igDP:SummaryButton}">
		<Setter Property="Background" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:SummaryButton}">
					<Grid>
						<Grid>
							<Rectangle
								Stroke="{x:Null}"
								StrokeThickness="1"
								RadiusX="2"
								RadiusY="2"
								Width="12"
								Height="14"
								Visibility="Visible"
								x:Name="rectangle2"
								Opacity="0"
								Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonBackgroundHover}}"/>
							<Path
								Margin="2,2,2,2"
								HorizontalAlignment="Center"
								VerticalAlignment="Center"
								Stretch="Fill"
								Data="M 0,0 C0,0 5,0 5,0 5,0 5,1 5,1 5,1 2,1 2,1 2,1 4,3.5 4,3.5 4,3.5 2,6 2,6 2,6 5,6 5,6 5,6 5,7 5,7 5,7 0,7 0,7 0,7 0,6 0,6 0,6 2,3.5625 2,3.5625 2,3.5625 0,1 0,1 0,1 0,0 0,0 z"
								Fill="{TemplateBinding Foreground}"
								Width="5"
								Height="7"
								d:LayoutOverrides="Width, Height"
								x:Name="path"
								Stroke="{x:Null}"/>
						</Grid>
						<Popup
							x:Name="PART_Popup"
							AllowsTransparency="True"
							Placement="Bottom"
							VerticalOffset="4"
							HorizontalOffset="0"
							IsOpen="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							StaysOpen="False"
							PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
							SnapsToDevicePixels="True">
							<!-- JJD 3/5/09 - TFS5971/BR32606 - set focus scope to true and navigation settings-->
							<Border
								CornerRadius="3,3,3,3"
								BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupBorder}}"
								x:Name="border"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabNavigation="Contained"
                                FocusManager.IsFocusScope="True"
								BorderThickness="1,1,1,1"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupBackground}}">
								<Grid Width="Auto" Height="Auto">
									<Rectangle
										Stroke="{x:Null}"
										Margin="2,2,2,2"
										x:Name="InnerBackground"
										Visibility="Visible"
										RadiusX="3"
										RadiusY="3"
										Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupInnerBackground}}"/>
									<StackPanel Margin="5,5,5,5">
										<igDP:SummaryCalculatorSelectionControl x:Name="CalculatorSelectionControl" Field="{TemplateBinding Field}"/>
										<Rectangle
											Fill="#CCFFFFFF"
											Stroke="{x:Null}"
											x:Name="rectangle"
											Margin="-3,0,-3,0"
											Height="1"/>
										<Rectangle
											Fill="#3FFFFFFF"
											Stroke="{x:Null}"
											Width="Auto"
											Height="1"
											x:Name="rectangle1"
											Margin="-3,0,-3,0"/>
										<StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,2,3,0">
											<Button
												x:Name="RowSummaryOkButton"
												Content="Ok"
												IsDefault="True"
												Height="12"
												Margin="0,0,5,0"
												Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=RowSummaryOkButton}}"
												Width="13"/>
											<!-- JJD 3/5/09 - TFS5971/BR32606 - set IsCancel to True-->
											<Button
												x:Name="RowSummaryCancelButton"
												Content="Cancel"
                                                IsCancel="True"
												Height="12"
												Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=RowSummaryCancelButton}}"
												Width="13"/>
										</StackPanel>
									</StackPanel>
								</Grid>
							</Border>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Opacity" TargetName="rectangle2" Value="1"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"/>
	</Style>

	<!-- _________________________ SummaryCalculatorSelectionControl ______________________________________ -->
	<Style TargetType="{x:Type igDP:SummaryCalculatorSelectionControl}">
		<Style.Resources>
			<!-- SSP 9/21/09 TFS15959 - Instead of setting ItemTemplate on the ItemsControl, add the
							data template to the style resources.-->
			<DataTemplate DataType="{x:Type igDP:SummaryCalculatorHolder}">
				<igWindows:CardPanel x:Name="mainPanel">
					<Grid Margin="0,0,0,5">
						<!-- JJD 3/5/09 - TFS5971/BR32606 - set FocusVisualStyle to null-->
						<!-- SSP 10/16/09 TFS19525 - Added line that sets AutomationProperties.AutomationId -->
						<CheckBox
							x:Name="checkBox"
							AutomationProperties.AutomationId="{Binding Path=Calculator.Name, Converter={StaticResource stringFormatConverter}, ConverterParameter=\{0\}_CheckBox}"
							Visibility="Visible"
							Grid.Column="0"
							IsChecked="{Binding Path=IsChecked, Mode=TwoWay}"
																		FocusVisualStyle="{x:Null}">
							<StackPanel>
								<Image Source="{Binding Path=Calculator.Image}" Margin="5,0,0,0"/>
								<TextBlock Text="{Binding Path=Calculator.DisplayName}" Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCSCItemForeground}}" Margin="5,0"/>
							</StackPanel>
						</CheckBox>
					</Grid>
					<Grid Margin="0,0,0,10">
						<!-- JJD 3/5/09 - TFS5971/BR32606 - set FocusVisualStyle to null-->
						<!-- SSP 10/16/09 TFS19525 - Added line that sets AutomationProperties.AutomationId -->
						<RadioButton
							x:Name="radioButton"
							AutomationProperties.AutomationId="{Binding Path=Calculator.Name, Converter={StaticResource stringFormatConverter}, ConverterParameter=\{0\}_RadioButton}"
							Visibility="Collapsed"
							Grid.Column="0"
							IsChecked="{Binding Path=IsChecked, Mode=TwoWay}"
																		FocusVisualStyle="{x:Null}">
							<StackPanel>
								<Image Source="{Binding Path=Calculator.Image}" Margin="5,0,0,0"/>
								<TextBlock Text="{Binding Path=Calculator.DisplayName}" Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCSCItemForeground}}" Margin="5,0"/>
							</StackPanel>
						</RadioButton>
					</Grid>
					<!-- JJD 3/5/09 - TFS5971/BR32606 - added focus rect-->
					<Rectangle Visibility="{Binding Path=IsKeyboardFocusWithin, ElementName=mainPanel, Converter={StaticResource BoolToVisConverter}}" Margin="17,0,0,3" Stroke="#D0000000" StrokeThickness="1" StrokeDashArray="1 2"/>
				</igWindows:CardPanel>
				<DataTemplate.Triggers>
					<DataTrigger Binding="{Binding Path=SelectionControl.AllowMultipleSummaries}" Value="False">
						<Setter TargetName="checkBox" Property="Visibility" Value="Collapsed"/>
						<Setter TargetName="radioButton" Property="Visibility" Value="Visible"/>
					</DataTrigger>
				</DataTemplate.Triggers>
			</DataTemplate>
		</Style.Resources>
		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:SummaryCalculatorSelectionControl}">
					<!-- JJD 3/5/09 - TFS5971/BR32606 - set focusable to false-->
					<ItemsControl
						ItemsSource="{TemplateBinding SummaryCalculatorHolders}"
						KeyboardNavigation.DirectionalNavigation="Contained"
                        Focusable="False"
						Margin="{TemplateBinding Padding}"
						Foreground="{TemplateBinding Foreground}"
					/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderThickness" Value="1,1,1,1"/>
		<Setter Property="Padding" Value="3,3,3,5"/>
	</Style>

	<!-- _________________________ GroupBySummariesPresenter ______________________________________ -->
	<Style TargetType="{x:Type igDP:GroupBySummariesPresenter}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:GroupBySummariesPresenter}">
					<Border Margin="{TemplateBinding ContentAreaMargins}" Background="{TemplateBinding Background}">
						<igDP:SummaryRecordContentArea/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--<Style TargetType="{x:Type igWindows:SortIndicator}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="MinHeight" Value="3.5"/>
        <Setter Property="MinWidth" Value="7"/>
        <Setter Property="Visibility" Value="Hidden"/>
        <Setter Property="Background" Value="#FFDDDDDD"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igWindows:SortIndicator}">
                    <Polygon x:Name="Arrow" Fill="{TemplateBinding Background}" StrokeEndLineCap="Round" StrokeLineJoin="Round" StrokeStartLineCap="Round" Points="0,0 7,0 3.5,3.5"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SortStatus" Value="Descending">
                            <Setter Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="SortStatus" Value="Ascending">
                            <Setter Property="Points" TargetName="Arrow" Value="0,3.5 7,3.5 3.5,0"/>
                            <Setter Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="Arrow" Value="#FFFFFFFF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

	<Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, RowSummaryOkButton}" BasedOn="{x:Null}" TargetType="{x:Type Button}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Path
							Opacity="1"
							Stretch="Fill"
							Stroke="{TemplateBinding BorderBrush}"
							StrokeThickness="0.5"
							Data="M 11.44970703125,-0.32843017578125 C11.44970703125,-0.32843017578125 5.0858154296875,6.0355224609375 5.0858154296875,6.0355224609375 5.0858154296875,6.0355224609375 2.55023193359375,3.5 2.55023193359375,3.5 2.55023193359375,3.5 0.13604736328125,5.914215087890625 0.13604736328125,5.914215087890625 0.13604736328125,5.914215087890625 5.0858154296875,10.86395263671875 5.0858154296875,10.86395263671875 5.0858154296875,10.86395263671875 13.86395263671875,2.085784912109375 13.86395263671875,2.085784912109375 13.86395263671875,2.085784912109375 11.44970703125,-0.32843017578125 11.44970703125,-0.32843017578125 z"
							x:Name="path"
							Fill="{TemplateBinding Background}"/>
						<ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							RecognizesAccessKey="True"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True"/>
						<Trigger Property="IsDefaulted" Value="True"/>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" TargetName="path" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCommandButtonsBackgroundHover}}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True"/>
						<Trigger Property="IsEnabled" Value="False"/>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="Foreground" Value="{x:Null}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCommandButtonsBorder}}"/>
		<Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCommandButtonsBackground}}"/>
	</Style>

	<Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, RowSummaryCancelButton}" BasedOn="{x:Null}" TargetType="{x:Type Button}">
		<Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCommandButtonsBackground}}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCommandButtonsBorder}}"/>
		<Setter Property="Foreground" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Path
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							Height="Auto"
							Width="Auto"
							Stretch="Fill"
							Opacity="1"
							Data="M 561.3890991210938,474.9895935058594 C561.3890991210938,474.9895935058594 557.5,478.8799743652344 557.5,478.8799743652344 557.5,478.8799743652344 553.6109008789062,474.9895935058594 553.6109008789062,474.9895935058594 553.6109008789062,474.9895935058594 551.4895629882812,477.11090087890625 551.4895629882812,477.11090087890625 551.4895629882812,477.11090087890625 555.3800048828125,481 555.3800048828125,481 555.3800048828125,481 551.4895629882812,484.88909912109375 551.4895629882812,484.88909912109375 551.4895629882812,484.88909912109375 553.6109008789062,487.0104064941406 553.6109008789062,487.0104064941406 553.6109008789062,487.0104064941406 557.5,483.1199951171875 557.5,483.1199951171875 557.5,483.1199951171875 561.3890991210938,487.0104064941406 561.3890991210938,487.0104064941406 561.3890991210938,487.0104064941406 563.5104370117188,484.88909912109375 563.5104370117188,484.88909912109375 563.5104370117188,484.88909912109375 559.6199951171875,481 559.6199951171875,481 559.6199951171875,481 563.5104370117188,477.11090087890625 563.5104370117188,477.11090087890625 563.5104370117188,477.11090087890625 561.3890991210938,474.9895935058594 561.3890991210938,474.9895935058594 z"
							Stroke="{TemplateBinding BorderBrush}"
							StrokeThickness="0.5"
							Fill="{TemplateBinding Background}"
							x:Name="path"/>
						<ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							RecognizesAccessKey="True"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True"/>
						<Trigger Property="IsDefaulted" Value="True"/>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" TargetName="path" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCommandButtonsBackgroundHover}}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="True"/>
						<Trigger Property="IsEnabled" Value="False"/>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

    <!--SS 05/28/2015 TFS194623 Show filter clear button disabled when no active filter-->
	<!--JJD 12/23/08 RecordFiltering Feature -->
	<!-- _________________________ FilterCellClearButtonStyleKey ______________________________________ -->
	<Style x:Key="{x:Static igDP:DataPresenterBase.FilterCellClearButtonStyleKey}" TargetType="{x:Type Button}">
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<!--<Image
						x:Name="FilterCellIcon"
						Stretch="None"
						VerticalAlignment="Center"
						HorizontalAlignment="Center"
						igWindows:Utilities.SnapElementToDevicePixels="True"
						Visibility="Hidden">
						<Image.Source>
							<BitmapImage DecodePixelWidth="14" DecodePixelHeight="14" UriSource="Images/FilterClearButton.png"/>
						</Image.Source>
					</Image>-->
					<igWindows:AutoDisabledImage
                        x:Name="FilterCellIcon"
                        Stretch="None"
                        igWindows:Utilities.SnapElementToDevicePixels="True"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Center">
                        <Image.Source>
                            <BitmapImage DecodePixelWidth="14" DecodePixelHeight="14" UriSource="Images/FilterClearButton.png"/>
                        </Image.Source>
                    </igWindows:AutoDisabledImage>
					<!--<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="True">
							<Setter TargetName="FilterCellIcon" Property="Visibility" Value="Visible"/>
						</Trigger>
					</ControlTemplate.Triggers>-->
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- JJD 07/06/10 - TFS32174 - added -->
	<!-- _________________________ FilterDropDownLoadingTemplateKey ______________________________________ -->
	<!-- AS NA 11.2 Excel Style Filtering
	Moved the bulk of the template into another datatemplate. I want to use this animation in
	the filtertree but don't want the line on top.

	<DataTemplate x:Key="{x:Static igDP:DataPresenterBase.FilterDropDownLoadingTemplateKey}" >
	 -->
	<DataTemplate x:Key="BaseFilterDropDownLoadingTemplate" >
		<DataTemplate.Resources>
			<Storyboard x:Key="LoadingAni" RepeatBehavior="Forever">
				<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="path" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
					<SplineDoubleKeyFrame KeyTime="00:00:00.7500000" Value="360"/>
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
		</DataTemplate.Resources>
		<DataTemplate.Triggers>
			<!-- AS NA 11.2 Excel Style Filtering
			The Loaded event may have already occurred. Instead start when the element is made visible.

			<EventTrigger RoutedEvent="FrameworkElement.Loaded">
				<BeginStoryboard Storyboard="{StaticResource LoadingAni}"/>
			</EventTrigger>-->
			<Trigger Property="IsVisible" Value="True">
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource LoadingAni}"/>
				</Trigger.EnterActions>
			</Trigger>
		</DataTemplate.Triggers>
		<!-- AS NA 11.2 Excel Style Filtering
		Moved the border to the "outer" datatemplate.
		<Border Padding="5" BorderThickness="0,1,0,0" BorderBrush="#FFCCCCCC">-->
			<Grid HorizontalAlignment="Center">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto"/>
					<ColumnDefinition Width="*"/>
				</Grid.ColumnDefinitions>
				<Canvas Width="16" Height="16">
					<Path Stretch="Fill" VerticalAlignment="Top" Width="16" Height="16" Data="M8,11 C8.5522847,11 9,11.447715 9,12 L9,15 C9,15.552285 8.5522847,16 8,16 7.4477153,16 7,15.552285 7,15 L7,12 C7,11.447715 7.4477153,11 8,11 z M10.93934,9.9393406 C11.195262,9.9393406 11.451184,10.036971 11.646447,10.232233 L13.767767,12.353554 C14.158291,12.744078 14.158291,13.377243 13.767767,13.767767 13.377243,14.158291 12.744078,14.158291 12.353553,13.767767 L10.232233,11.646446 C9.8417087,11.255922 9.8417087,10.622757 10.232233,10.232233 10.427495,10.036971 10.683418,9.9393406 10.93934,9.9393406 z M5.0606601,9.9393406 C5.3165824,9.9393406 5.5725048,10.036971 5.767767,10.232233 6.1582912,10.622757 6.1582912,11.255922 5.767767,11.646446 L3.6464467,13.767767 C3.2559223,14.158291 2.6227574,14.158291 2.232233,13.767767 1.8417087,13.377243 1.8417087,12.744078 2.232233,12.353554 L4.3535533,10.232233 C4.5488155,10.036971 4.8047378,9.9393406 5.0606601,9.9393406 z M12,7 L15,7 C15.552285,7 16,7.4477153 16,8 16,8.5522852 15.552285,9 15,9 L12,9 C11.447715,9 11,8.5522852 11,8 11,7.4477153 11.447715,7 12,7 z M1,7 L4,7 C4.5522847,7 5,7.4477153 5,8 5,8.5522852 4.5522847,9 4,9 L1,9 C0.44771528,9 0,8.5522852 0,8 0,7.4477153 0.44771528,7 1,7 z M13.06066,1.9393396 C13.316583,1.9393399 13.572505,2.0369709 13.767767,2.232233 14.158291,2.6227574 14.158291,3.2559223 13.767767,3.6464467 L11.646447,5.767767 C11.255922,6.1582913 10.622757,6.1582913 10.232233,5.767767 9.8417087,5.3772426 9.8417087,4.7440777 10.232233,4.3535533 L12.353553,2.232233 C12.548816,2.0369709 12.804738,1.9393399 13.06066,1.9393396 z M2.9393396,1.9393396 C3.1952622,1.9393399 3.4511845,2.0369709 3.6464467,2.232233 L5.767767,4.3535533 C6.1582912,4.7440777 6.1582912,5.3772426 5.767767,5.767767 5.3772427,6.1582913 4.7440777,6.1582913 4.3535533,5.767767 L2.232233,3.6464467 C1.8417087,3.2559223 1.8417087,2.6227574 2.232233,2.232233 2.427495,2.0369709 2.6834173,1.9393399 2.9393396,1.9393396 z M8,0 C8.5522847,0 9,0.44771525 9,1 L9,4 C9,4.5522847 8.5522847,5 8,5 7.4477153,5 7,4.5522847 7,4 L7,1 C7,0.44771525 7.4477153,0 8,0 z" Fill="#FFDDDDDD"/>
					<Path x:Name="path" Stretch="Fill" VerticalAlignment="Top" Width="16" Height="16" Data="M8,11 C8.5522847,11 9,11.447715 9,12 L9,15 C9,15.552285 8.5522847,16 8,16 7.4477153,16 7,15.552285 7,15 L7,12 C7,11.447715 7.4477153,11 8,11 z M10.93934,9.9393406 C11.195262,9.9393406 11.451184,10.036971 11.646447,10.232233 L13.767767,12.353554 C14.158291,12.744078 14.158291,13.377243 13.767767,13.767767 13.377243,14.158291 12.744078,14.158291 12.353553,13.767767 L10.232233,11.646446 C9.8417087,11.255922 9.8417087,10.622757 10.232233,10.232233 10.427495,10.036971 10.683418,9.9393406 10.93934,9.9393406 z M5.0606601,9.9393406 C5.3165824,9.9393406 5.5725048,10.036971 5.767767,10.232233 6.1582912,10.622757 6.1582912,11.255922 5.767767,11.646446 L3.6464467,13.767767 C3.2559223,14.158291 2.6227574,14.158291 2.232233,13.767767 1.8417087,13.377243 1.8417087,12.744078 2.232233,12.353554 L4.3535533,10.232233 C4.5488155,10.036971 4.8047378,9.9393406 5.0606601,9.9393406 z M12,7 L15,7 C15.552285,7 16,7.4477153 16,8 16,8.5522852 15.552285,9 15,9 L12,9 C11.447715,9 11,8.5522852 11,8 11,7.4477153 11.447715,7 12,7 z M1,7 L4,7 C4.5522847,7 5,7.4477153 5,8 5,8.5522852 4.5522847,9 4,9 L1,9 C0.44771528,9 0,8.5522852 0,8 0,7.4477153 0.44771528,7 1,7 z M13.06066,1.9393396 C13.316583,1.9393399 13.572505,2.0369709 13.767767,2.232233 14.158291,2.6227574 14.158291,3.2559223 13.767767,3.6464467 L11.646447,5.767767 C11.255922,6.1582913 10.622757,6.1582913 10.232233,5.767767 9.8417087,5.3772426 9.8417087,4.7440777 10.232233,4.3535533 L12.353553,2.232233 C12.548816,2.0369709 12.804738,1.9393399 13.06066,1.9393396 z M2.9393396,1.9393396 C3.1952622,1.9393399 3.4511845,2.0369709 3.6464467,2.232233 L5.767767,4.3535533 C6.1582912,4.7440777 6.1582912,5.3772426 5.767767,5.767767 5.3772427,6.1582913 4.7440777,6.1582913 4.3535533,5.767767 L2.232233,3.6464467 C1.8417087,3.2559223 1.8417087,2.6227574 2.232233,2.232233 2.427495,2.0369709 2.6834173,1.9393399 2.9393396,1.9393396 z M8,0 C8.5522847,0 9,0.44771525 9,1 L9,4 C9,4.5522847 8.5522847,5 8,5 7.4477153,5 7,4.5522847 7,4 L7,1 C7,0.44771525 7.4477153,0 8,0 z" RenderTransformOrigin="0.5,0.5">
						<Path.RenderTransform>
							<TransformGroup>
								<ScaleTransform/>
								<SkewTransform/>
								<RotateTransform/>
								<TranslateTransform/>
							</TransformGroup>
						</Path.RenderTransform>
						<Path.Fill>
							<LinearGradientBrush MappingMode="RelativeToBoundingBox" EndPoint="0.5,1" StartPoint="0.5,0">
								<LinearGradientBrush.RelativeTransform>
									<TransformGroup>
										<ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="0.469" ScaleY="1.186"/>
										<SkewTransform CenterX="0.5" CenterY="0.5"/>
										<RotateTransform CenterX="0.5" CenterY="0.5" Angle="-5.738"/>
										<TranslateTransform X="-0.117" Y="-0.2"/>
									</TransformGroup>
								</LinearGradientBrush.RelativeTransform>
								<GradientStop Color="#FF333333" Offset="0.031"/>
								<GradientStop Offset="0.767"/>
								<GradientStop Color="#FF494949" Offset="0.472"/>
							</LinearGradientBrush>
						</Path.Fill>
					</Path>
				</Canvas>
				<TextBlock
					 Margin="5,0,0,0"
					 HorizontalAlignment="Left"
					 VerticalAlignment="Center"
					 FontWeight="Bold"
					 Grid.Column="1"
					 Text="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.FilterDropDownLoadingIndicator}}" />

			</Grid>
		<!--</Border>-->
    </DataTemplate>

	<!-- AS NA 11.2 Excel Style Filtering -->
	<DataTemplate x:Key="{x:Static igDP:DataPresenterBase.FilterDropDownLoadingTemplateKey}" >
		<Border Padding="5" BorderThickness="0,1,0,0" BorderBrush="#FFCCCCCC">
			<ContentPresenter ContentTemplate="{StaticResource BaseFilterDropDownLoadingTemplate}" />
		</Border>
	</DataTemplate>

	<!-- _________________________ FilterRecordClearButtonStyleKey ______________________________________ -->
	<Style x:Key="{x:Static igDP:DataPresenterBase.FilterRecordClearButtonStyleKey}" TargetType="{x:Type Button}">
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Image
						x:Name="FilterRecordIcon"
						Stretch="None"
						VerticalAlignment="Center"
						HorizontalAlignment="Center"
						igWindows:Utilities.SnapElementToDevicePixels="True">
						<Image.Source>
							<BitmapImage DecodePixelWidth="14" DecodePixelHeight="14" UriSource="Images/Filter.png"/>
						</Image.Source>
					</Image>
					<!--<igWindows:AutoDisabledImage
                        Stretch="None"
                        VerticalAlignment="Center"
                        igWindows:Utilities.SnapElementToDevicePixels="True"
                        HorizontalAlignment="Center">
                        <Image.Source>
                            <BitmapImage DecodePixelWidth="14" DecodePixelHeight="14" UriSource="Images/Filter.png"/>
                        </Image.Source>
                    </igWindows:AutoDisabledImage>-->
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="True">
							<Setter TargetName="FilterRecordIcon" Property="Source" Value="Images/FilterClearButton.png"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--JJD 12/23/08 RecordFiltering Feature -->
    <!--SS 05/27/2015 TFS194609 Change BackgroundActive, BackgroundSelected, BackgroundFieldSelected to Transparent-->
	<!-- _________________________ FilterCellValuePresenter ______________________________________ -->
	<Style TargetType="{x:Type igDP:FilterCellValuePresenter}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="#FFCCCCCC"/>
		<Setter Property="BackgroundHover" Value="Transparent"/>
		<Setter Property="BorderHoverBrush" Value="#FFCCCCCC"/>
        <Setter Property="BackgroundActive" Value="Transparent">
			<!--<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Offset="0" Color="#FF85A2B2"/>
					<GradientStop Offset="1.1" Color="#00FFFFFF"/>
				</LinearGradientBrush>
			</Setter.Value>-->
		</Setter>
		<Setter Property="BorderActiveBrush" Value="#FFCCCCCC"/>
        <Setter Property="BackgroundSelected" Value="Transparent">
			<!--<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Offset="0" Color="#FFCAEBFF"/>
					<GradientStop Offset="1.1" Color="#00FFFFFF"/>
					<GradientStop Color="#83CAEBFF" Offset="1"/>
				</LinearGradientBrush>
			</Setter.Value>-->
		</Setter>
		<Setter Property="BorderSelectedBrush" Value="#FF666666"/>
        <Setter Property="BackgroundFieldSelected" Value="Transparent">
			<!--<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Offset="0" Color="#FFDDDDDD"/>
					<GradientStop Offset="1.1" Color="#00FFFFFF"/>
				</LinearGradientBrush>
			</Setter.Value>-->
		</Setter>
		<Setter Property="BorderFieldSelectedBrush" Value="#FF666666"/>
		<Setter Property="BackgroundPrimary" Value="#7FE9E9E9"/>
		<Setter Property="BorderPrimaryBrush" Value="#FFE9E9E9"/>
		<Setter Property="Foreground" Value="#FF000000"/>
		<Setter Property="ForegroundStyle">
			<Setter.Value>
				<Style/>
			</Setter.Value>
		</Setter>
		<Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=BlackForegroundStyle}}"/>
		<Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}"/>
		<Setter Property="ForegroundPrimaryStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}"/>
		<Setter Property="ForegroundSelectedStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=BlackForegroundStyle}}"/>
		<Setter Property="ForegroundFieldSelectedStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=BlackForegroundStyle}}"/>
		<Setter Property="ForegroundHoverStyle">
			<Setter.Value>
				<Style>
					<Setter Property="TextBlock.Foreground" Value="#FF151C55"/>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="CornerRadius" Value="0"/>
		<Setter Property="Padding" Value="2,0,0,0"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<!-- AS 5/23/07 BR23120 -->
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:FilterCellValuePresenter}">
					<igWindows:CardPanel>
						<Border
							x:Name="MainBorder"
							CornerRadius="{TemplateBinding CornerRadius}"
							BorderThickness="{TemplateBinding BorderThickness}"
							BorderBrush="{TemplateBinding BorderBrush}"
							Background="{TemplateBinding Background}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						<Grid Margin="{TemplateBinding Padding}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition/>
                                <ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<igWindows:ComparisonOperatorSelector
								Grid.Column="0"
								IsDropDownOpen="{Binding Path=IsOperatorDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
								AllowableOperators="{Binding Path=Field.FilterOperatorDropDownItemsResolved, RelativeSource={RelativeSource TemplatedParent}}"
								SelectedOperator="{Binding Path=Operator, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
								Visibility="{Binding Path=Field.FilterOperatorVisibilityResolved, RelativeSource={RelativeSource TemplatedParent}}"
								Foreground="{TemplateBinding Foreground}"/>
							<Button
								Style="{DynamicResource {x:Static igDP:DataPresenterBase.FilterCellClearButtonStyleKey}}"
								Grid.Column="3"
								Command="{x:Static igDP:DataPresenterCommands.ClearActiveCellFilters}"
								Visibility="{Binding Path=Field.FilterClearButtonVisibilityResolved, RelativeSource={RelativeSource TemplatedParent}}"
								Margin="2,0,4,0"/>
                            <igDP:ExcelStyleFilterButton x:Name="ExcelStyleFilterButton"
								Field="{TemplateBinding Field}"
								Width="Auto"
								Grid.Column="2"/>
							<ContentPresenter
								x:Name="PART_EditorSite"
                                Grid.Column="1"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								Style="{TemplateBinding ForegroundStyle}"/>
						</Grid>
					</igWindows:CardPanel>
                    <!--SS 05/27/2015 TFS194609 Change RelativeSource to Self TargetName is not set-->
					<ControlTemplate.Triggers>
						<!-- HighlightAsPrimary -->
						<Trigger Property="HighlightAsPrimary" Value="true">
							<Setter Property="Background" Value="{Binding Path=BackgroundPrimary, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderPrimaryBrush, RelativeSource={RelativeSource Self}}"/>
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundPrimaryStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
						</Trigger>
						<!-- IsFieldSelected -->
						<Trigger Property="IsFieldSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundFieldSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderFieldSelectedBrush, RelativeSource={RelativeSource Self}}"/>
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundFieldSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
						</Trigger>
						<!-- IsSelected -->
						<Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderSelectedBrush, RelativeSource={RelativeSource Self}}"/>
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
							<!--<Setter Property="Visibility" Value="Visible" TargetName="LeftBorder" />-->
						</Trigger>
						<!-- IsActive -->
						<Trigger Property="IsActive" Value="true">
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Background" Value="{Binding Path=BackgroundActive, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderActiveBrush, RelativeSource={RelativeSource Self}}"/>
                        </Trigger>
						<!-- IsMouseOver -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="IsSelected" Value="False"/>
								<Condition Property="IsFieldSelected" Value="False"/>
							</MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}"/>
							<Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- AS 1/7/09 NA 2009 Vol 1 - Fixed Fields -->
	<!-- Base Style for all FixedFieldSplitters -->
	<Style x:Key="FixedFieldSplitterBaseStyle" TargetType="{x:Type igDP:FixedFieldSplitter}">
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="MinWidth" Value="7" />
				<Setter Property="BorderThickness" Value="1,0,1,0"/>
				<Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterVerticalFillBrush}}"/>
				<!-- JJD 07/11/12 - TFS113976
						Replace igWindows:CursorExtension with new VerticalCursor property.
						Added VerticalCursor and HorizontalCursor properties that we could use in Style triggers to set the
						appropriate cursor based on Orientation. This was so that we could remove the CursorExtension custom
						MarkupExtension from our xaml. Expression Blend does not support custom markup extensions inside
						property setters
				-->
				<!--<Setter Property="Cursor" Value="{igWindows:CursorExtension Path=ResourceSets/Cursors/verticalSplitter.cur, TypeInAssembly={x:Type igWindows:ExpansionIndicator}, FallbackValue={x:Static Cursors.SizeWE}}" />-->
				<Setter Property="Cursor" Value="{Binding Path=VerticalCursor, RelativeSource={RelativeSource Self} }" />
			</Trigger>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="MinHeight" Value="7" />
				<Setter Property="BorderThickness" Value="0,1,0,1"/>
				<Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterHorizontalFillBrush}}"/>
				<!-- JJD 07/11/12 - TFS113976
						Replace igWindows:CursorExtension with new HorizontalCursor property.
						Added VerticalCursor and HorizontalCursor properties that we could use in Style triggers to set the
						appropriate cursor based on Orientation. This was so that we could remove the CursorExtension custom
						MarkupExtension from our xaml. Expression Blend does not support custom markup extensions inside
						property setters
				-->
				<!--<Setter Property="Cursor" Value="{igWindows:CursorExtension Path=ResourceSets/Cursors/horizontalSplitter.cur, TypeInAssembly={x:Type igWindows:ExpansionIndicator}, FallbackValue={x:Static Cursors.SizeNS}}" />-->
				<Setter Property="Cursor" Value="{Binding Path=HorizontalCursor, RelativeSource={RelativeSource Self} }" />
			</Trigger>
			<!--<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Orientation" Value="Vertical"/>
					<Condition Property="IsHighlighted" Value="True"/>
				</MultiTrigger.Conditions>
				<Setter Property="BorderThickness" Value="1,0,1,0"/>
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterHottrackStrokeBrush}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Orientation" Value="Horizontal"/>
					<Condition Property="IsHighlighted" Value="True"/>
				</MultiTrigger.Conditions>
				<Setter Property="BorderThickness" Value="0,1,0,1"/>
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterHottrackStrokeBrush}}"/>
			</MultiTrigger>-->
			<Trigger Property="IsHighlighted" Value="True">
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterHottrackStrokeBrush}}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- Shared Office and Aero Base Style -->
	<Style x:Key="OfficeAeroSharedFieldSplitterStyle" BasedOn="{StaticResource FixedFieldSplitterBaseStyle}" TargetType="{x:Type igDP:FixedFieldSplitter}">
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterStrokeBrush}}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:FixedFieldSplitter}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="SplitterHoverIn">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="splitterHoverBd" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="innerStroke" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="SplitterHoverOut">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="splitterHoverBd" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="innerStroke" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid Background="Transparent">
						<Border
							x:Name="splitterMainBd"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						<Border
							x:Name="splitterHoverBd"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Opacity="0"
							Padding="{TemplateBinding Padding}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterVerticalHottrackFillBrush}}"/>
						<Border
							x:Name="innerStroke"
							Margin="1,0,1,0"
							BorderBrush="#59FFFFFF"
							BorderThickness="1,0,1,0"
							Opacity="0"/>
						<!-- AS 2/13/09 TFS13982 - Do not templatebind to the margin. Since the negative
                            margin was done to center the lines, center the panel containing the lines and then
                            just offset its margin by 1 -->
						<Grid x:Name="gripperLinesVertical" Visibility="Collapsed" HorizontalAlignment="Center" Margin="1,0,0,0">
							<Grid.RowDefinitions>
								<RowDefinition Height="0.15*"/>
								<RowDefinition Height="0.7*"/>
								<RowDefinition Height="0.15*"/>
							</Grid.RowDefinitions>
							<Border
								Width="2"
								Grid.Row="1"
								HorizontalAlignment="Center"
								Margin="0,0,2,0"
								VerticalAlignment="Stretch"
								Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperDarkLineBrush}}"
								BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperLightLineBrush}}"
								BorderThickness="0,0,1,0"/>
							<Border
								Width="2"
								Grid.Row="1"
								HorizontalAlignment="Center"
								Margin="2,0,0,0"
								VerticalAlignment="Stretch"
								Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperDarkLineBrush}}"
								BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperLightLineBrush}}"
								BorderThickness="0,0,1,0"/>
						</Grid>
						<!-- AS 2/13/09 TFS13982 - Do not templatebind to the margin. Since the negative
                            margin was done to center the lines, center the panel containing the lines and then
                            just offset its margin by 1 -->
						<Grid x:Name="gripperLinesHorizontal" Visibility="Collapsed" VerticalAlignment="Center" Margin="0,1,0,0">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="0.15*"/>
								<ColumnDefinition Width="0.7*"/>
								<ColumnDefinition Width="0.15*"/>
							</Grid.ColumnDefinitions>
							<Border
								Height="2"
								Grid.Column="1"
								HorizontalAlignment="Stretch"
								Margin="0,0,0,2"
								VerticalAlignment="Center"
								Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperDarkLineBrush}}"
								BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperLightLineBrush}}"
								BorderThickness="0,0,0,1"/>
							<Border
								Height="2"
								Grid.Column="1"
								HorizontalAlignment="Stretch"
								Margin="0,2,0,0"
								VerticalAlignment="Center"
								Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperDarkLineBrush}}"
								BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperLightLineBrush}}"
								BorderThickness="0,0,0,1"/>
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="Orientation" Value="Horizontal">
							<Setter TargetName="splitterHoverBd"  Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterHorizontalHottrackFillBrush}}"/>
							<Setter TargetName="innerStroke" Property="BorderThickness" Value="0,1,0,1"/>
							<Setter TargetName="innerStroke" Property="Margin" Value="0,1,0,1"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Orientation" Value="Vertical"/>
								<Condition Property="IsInHeader" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="gripperLinesVertical" Property="Visibility" Value="Visible"/>
							<Setter TargetName="splitterMainBd" Property="Visibility" Value="Collapsed"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Orientation" Value="Horizontal"/>
								<Condition Property="IsInHeader" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="gripperLinesHorizontal" Property="Visibility" Value="Visible"/>
							<Setter TargetName="splitterMainBd" Property="Visibility" Value="Collapsed"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsHighlighted" Value="True"/>
								<Condition Property="IsInHeader" Value="False"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.ExitActions>
								<StopStoryboard BeginStoryboardName="SplitterHover_BeginStoryboard"/>
								<BeginStoryboard Storyboard="{StaticResource SplitterHoverOut}"/>
							</MultiTrigger.ExitActions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard x:Name="SplitterHover_BeginStoryboard" Storyboard="{StaticResource SplitterHoverIn}"/>
							</MultiTrigger.EnterActions>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Define Style for Generic-->
	<Style BasedOn="{StaticResource OfficeAeroSharedFieldSplitterStyle}" TargetType="{x:Type igDP:FixedFieldSplitter}" />

	<!-- Define Shared Luna Template -->
	<ControlTemplate x:Key="LunaFixedFieldSplitterTemplate" TargetType="{x:Type igDP:FixedFieldSplitter}">
		<ControlTemplate.Resources>
			<Storyboard x:Key="SplitterHoverIn">
				<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="splitterHoverBd" Storyboard.TargetProperty="(UIElement.Opacity)">
					<SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="1"/>
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="SplitterHoverOut">
				<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="splitterHoverBd" Storyboard.TargetProperty="(UIElement.Opacity)">
					<SplineDoubleKeyFrame KeyTime="00:00:00.300" Value="0"/>
				</DoubleAnimationUsingKeyFrames>
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid Background="Transparent">
			<Border x:Name="splitterMainBd"
				   BorderBrush="{TemplateBinding BorderBrush}"
				   BorderThickness="{TemplateBinding BorderThickness}"
				   Padding="{TemplateBinding Padding}"
				   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Background="{TemplateBinding Background}"/>
			<Border x:Name="splitterHoverBd"
            	BorderBrush="{TemplateBinding BorderBrush}"
            	BorderThickness="{TemplateBinding BorderThickness}"
            	Padding="{TemplateBinding Padding}"
            	SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Opacity="0"
            	Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterVerticalHottrackFillBrush}}"/>
			<Grid x:Name="DotGrippers_Vertical" Visibility="Collapsed" Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FFSplitterVerticalTileBrushKey}}">
				<!--<Rectangle Width="2" Height="2" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperLightLineBrush}}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="1,0,0,7"/>
				<Rectangle Width="2" Height="2" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperDarkLineBrush}}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,8"/>
				<Rectangle Width="2" Height="2" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperLightLineBrush}}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="1,1,0,0"/>
				<Rectangle Width="2" Height="2" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperDarkLineBrush}}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
				<Rectangle Width="2" Height="2" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperLightLineBrush}}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="1,9,0,0"/>
				<Rectangle Width="2" Height="2" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperDarkLineBrush}}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,8,0,0"/>-->
			</Grid>
			<Grid x:Name="DotGrippers_Horizontal" Visibility="Collapsed" Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FFSplitterHorizontalTileBrushKey}}">
				<!--<Rectangle Width="2" Height="2" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperLightLineBrush}}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,1,7,0"/>
				<Rectangle Width="2" Height="2" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperDarkLineBrush}}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,8,0"/>
				<Rectangle Width="2" Height="2" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperLightLineBrush}}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="1,1,0,0"/>
				<Rectangle Width="2" Height="2" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperDarkLineBrush}}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
				<Rectangle Width="2" Height="2" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperLightLineBrush}}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="9,1,0,0"/>
				<Rectangle Width="2" Height="2" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperDarkLineBrush}}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="8,0,0,0"/>-->
			</Grid>
			<Border
				x:Name="footerMid"
				Height="3"
				Margin="0,0,0,0"
				VerticalAlignment="Bottom"
				SnapsToDevicePixels="True"
				Visibility="Collapsed"
				Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.LabelPresenterFooterMid}}"/>
		</Grid>
		<ControlTemplate.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Orientation" Value="Vertical"/>
					<Condition Property="IsInHeader" Value="True"/>
				</MultiTrigger.Conditions>
				<Setter TargetName="DotGrippers_Vertical" Property="Visibility" Value="Visible"/>
				<Setter TargetName="footerMid" Property="Visibility" Value="Visible"/>
				<Setter TargetName="splitterMainBd" Property="Visibility" Value="Collapsed"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Orientation" Value="Horizontal"/>
					<Condition Property="IsInHeader" Value="True"/>
				</MultiTrigger.Conditions>
				<Setter TargetName="DotGrippers_Horizontal" Property="Visibility" Value="Visible"/>
				<Setter TargetName="splitterMainBd" Property="Visibility" Value="Collapsed"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsHighlighted" Value="True"/>
					<Condition Property="IsInHeader" Value="False"/>
				</MultiTrigger.Conditions>
				<MultiTrigger.ExitActions>
					<StopStoryboard BeginStoryboardName="SplitterHover_BeginStoryboard"/>
					<BeginStoryboard Storyboard="{StaticResource SplitterHoverOut}"/>
				</MultiTrigger.ExitActions>
				<MultiTrigger.EnterActions>
					<BeginStoryboard x:Name="SplitterHover_BeginStoryboard" Storyboard="{StaticResource SplitterHoverIn}"/>
				</MultiTrigger.EnterActions>
			</MultiTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- _____________________________________________________________________________________ -->
	<!--                                                                                       -->
	<!-- JJD 4/9/09 NA 2009 vol 2 - Cross-band Grouping Feature                                -->
	<!-- _____________________________________________________________________________________ -->
	<!--                                                                                       -->
	<!-- _________________________ FieldLayoutGroupByInfo ____________________________________ -->
	<DataTemplate DataType="{x:Type igDP:FieldLayoutGroupByInfo}" >
		<StackPanel
            Orientation="Horizontal"
            Margin="{Binding Path=(igDP:GroupByAreaMulti.Offset)}">
			<ContentControl
				Content="{Binding Path=FieldLayout}"
				ContentTemplate="{Binding FieldLayoutDescriptionTemplate}"
                igDP:GroupByAreaMulti.IsConnectorLineTarget="True"
                Opacity=".7"
				VerticalAlignment="Top"
				Visibility="{Binding Path=FieldLayoutDescriptionVisibility}"
                Margin="2"/>
			<ItemsControl
               ItemsSource="{Binding Path=GroupByFields}"
                Margin="1">
				<ItemsControl.ItemsPanel>
					<ItemsPanelTemplate>
						<igDP:GroupByAreaMultiPanel
                            Orientation="Horizontal"
                            ConnectorLinePen="{Binding Path=ConnectorLinePen, RelativeSource={RelativeSource AncestorType={x:Type igDP:GroupByAreaMulti}}}"
                            />
					</ItemsPanelTemplate>
				</ItemsControl.ItemsPanel>
			</ItemsControl>
		</StackPanel>
	</DataTemplate>

	<!-- _____________________________________________________________________________________ -->
	<!--                                                                                       -->
	<!-- JJD 4/9/09 NA 2009 vol 2 - Cross-band Grouping Feature                                -->
	<!-- _____________________________________________________________________________________ -->
	<!--                                                                                       -->
	<!-- _________________________ GroupByAreaMulti __________________________________________ -->
    <!-- AS 11/23/09 TFS24800
        The pen is a freezable and since it cannot be frozen (because it gets its brush from
        a dynamic resource), we need each use to get a different instance. To do this we need
        to be able to set the x:Shared to false. Note since we need to set x:Shared this has to
        be a root level dictionary item and not a child of the groupbyarea style. Also since I
        don't want to inadvertantly pick up some other resource I used a componentresourcekey
        as the key. -->
    <!-- JJD 4/27/11
        Moved Pen up to ...Brushes.xaml files to fix regression issue introduced by fix
        to TFS7339 where using this in a StaticReference caused an exception to be raised
        when used from multiple threads
    <Pen x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, GroupByAreaMultiConnectorLinePen}"
         x:Shared="false"
         Brush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ConnectorLinePenBrush}}"
         Thickness="3"
         DashStyle="{x:Static DashStyles.Dot}"
         DashCap="Round"
         StartLineCap="Round"
         EndLineCap="Round"
         LineJoin="Round"/>-->

    <Style TargetType="{x:Type igDP:GroupByAreaMulti}">
		<Style.Resources>
			<DataTemplate DataType="{x:Type igDP:Field}" >
				<igDP:LabelPresenter
								Field="{Binding}"
								VerticalAlignment="Top"
								Margin="{Binding Path=(igDP:GroupByAreaMulti.Offset)}"
								IsInGroupByArea="true"
				/>
			</DataTemplate>
        </Style.Resources>
    <Setter Property="Prompt1" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.GroupByAreaPrompt1}}"/>
    <Setter Property="Prompt2" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.GroupByAreaPrompt2}}"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.GroupByAreaMultiBackgroundBrush}}"/>
		<Setter Property="BorderThickness" Value="1,0,1,1"/>
		<Setter Property="BorderBrush" Value="#FFA7A9B0"/>
		<Setter Property="Padding" Value="0,5"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldLayoutForeground}}"/>
		<Setter Property="FieldLayoutDescriptionTemplate">
			<Setter.Value>
				<DataTemplate>
					<Border>
						<TextBlock Foreground="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldLayoutForeground}}" Text="{Binding Description}" Margin="4,2,4,2" FontWeight="Bold" VerticalAlignment="Center" igDP:GroupByAreaMulti.IsConnectorLineTarget="False"/>
					</Border>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<!-- AS 11/23/09 TFS24800
        <Setter Property="ConnectorLinePen">
			<Setter.Value>
				<Pen Brush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ConnectorLinePenBrush}}" Thickness="3" DashStyle="{x:Static DashStyles.Dot}" DashCap="Round" StartLineCap="Round" EndLineCap="Round" LineJoin="Round"/>
			</Setter.Value>
		</Setter>-->
		<!-- JM 04-25-11 TFS73393 Change Value to StaticResource -->
      <!-- JJD 4/27/11
        Moved Pen up to ...Brushes.xaml files to fix regression issue introduced by fix
        to TFS7339 where using this in a StaticReference caused an exception to be raised
        when used from multiple threads -->
		<!--<Setter Property="ConnectorLinePen" Value="{StaticResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GroupByAreaMultiConnectorLinePen}}" />-->
		<Setter Property="ConnectorLinePen" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ConnectorLinePen}}" />
        <Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:GroupByAreaMulti}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="ShowPrompts">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.5"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="0.8"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="HidePrompts">
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
								<SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<!-- AS 2/25/11 TFS67071 - Since there are performance implications, we'll hook the Click instead of setting the Command. -->
						<igWindows:ExpanderBar
							x:Name="ExpanderBarButton"
							Grid.Row="0"
							Height="10"/>
						<igWindows:ExpanderDecorator Grid.Row="1"
													 HorizontalAlignment="Stretch"
													 IsExpanded="{Binding Path=IsExpanded, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
													 Orientation="Vertical">
							<Grid>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto"/>
								</Grid.RowDefinitions>
								<Border
									Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}">
									<Grid>
										<Grid.RowDefinitions>
											<RowDefinition MaxHeight="13"/>
											<RowDefinition Height="*"/>
										</Grid.RowDefinitions>
										<Rectangle Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.GroupByAreaMultiHighlightBrush}}"/>
										<Rectangle Fill="#59FFFFFF" Height="1" Grid.Row="1" VerticalAlignment="Bottom"/>
										<igWindows:CardPanel Grid.RowSpan="2" Margin="{TemplateBinding Padding}">
										<StackPanel
											Orientation="Horizontal"
											HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
											<ContentControl x:Name="prompt1"
												Content="{TemplateBinding Prompt1}"
												ContentTemplate="{TemplateBinding Prompt1Template}"
												Margin="1,1,4,1"
												FontSize="24"
												Opacity=".5"
												VerticalAlignment="Center"
												/>
											<ContentControl x:Name="prompt2"
												Content="{TemplateBinding Prompt2}"
												ContentTemplate="{TemplateBinding Prompt2Template}"
												Opacity=".8"
												VerticalAlignment="Center"/>
										</StackPanel>
										<ItemsControl
											ItemsSource="{Binding Path=FieldLayoutGroupByInfos, RelativeSource={RelativeSource TemplatedParent}}"
											VerticalAlignment="Center">
											<ItemsControl.Template>
												<ControlTemplate>
													<ScrollViewer Style="{StaticResource customScrollViewer}" CanContentScroll="False">
														<igDP:GroupByAreaMultiPanel
														IsItemsHost="True"
														Orientation="{Binding Path=FieldLayoutOrientation, RelativeSource={RelativeSource AncestorType={x:Type igDP:GroupByAreaMulti}}}"
														ConnectorLinePen="{Binding Path=ConnectorLinePen, RelativeSource={RelativeSource AncestorType={x:Type igDP:GroupByAreaMulti}}}"/>
													</ScrollViewer>
												</ControlTemplate>
											</ItemsControl.Template>
										</ItemsControl>
									</igWindows:CardPanel>
									</Grid>
								</Border>
							</Grid>
						</igWindows:ExpanderDecorator>
					</Grid>
					<ControlTemplate.Triggers>
						<EventTrigger RoutedEvent="igDP:GroupByAreaMulti.ShowPrompts">
							<BeginStoryboard x:Name="ShowPrompts_BeginStoryboard" Storyboard="{StaticResource ShowPrompts}"/>
							<StopStoryboard BeginStoryboardName="HidePrompts_BeginStoryboard"/>
						</EventTrigger>
						<EventTrigger RoutedEvent="igDP:GroupByAreaMulti.HidePrompts">
							<BeginStoryboard x:Name="HidePrompts_BeginStoryboard" Storyboard="{StaticResource HidePrompts}"/>
							<StopStoryboard BeginStoryboardName="ShowPrompts_BeginStoryboard"/>
						</EventTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="FieldLayoutOrientation" Value="Horizontal">
				<Setter Property="ConnectorLinePen" Value="{x:Null}"/>
				<Setter Property="FieldLayoutOffsetY" Value="0"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- _________________________ FieldChooser ______________________________________ -->
	<Style TargetType="{x:Type igDP:FieldChooser}">

        <Style.Resources>

			<!--Represents a field in the field chooser.-->
			<DataTemplate DataType="{x:Type igDP:FieldChooserEntry}">
				<DockPanel>
					<editors:XamCheckEditor
							x:Name="checkBox"
							DockPanel.Dock="Left"
							IsThreeState="false"
                            IsEnabled="{Binding Path=IsParentFieldGroupVisible}"
							Margin="{Binding Path=LabelIndent}"
                            Value="{Binding Path=IsVisible, Mode=TwoWay}" />
                    <igWindows:CardPanel x:Name="labelArea" DockPanel.Dock="Left">
                        <igDP:LabelPresenter
							x:Name="label"
							IsInFieldChooser="true"
                            Visibility="Collapsed"
                            IsEnabled="{Binding Path=IsParentFieldGroupVisible}"
							HorizontalContentAlignment="Left"
							VerticalContentAlignment="Center"
							IsSelectedInFieldChooser="{Binding Path=IsSelected}"
							Margin="5,0,0,0"
							>

                            <!--This is for toggling the visibility of a field by double clicking on it in
						the field chooser.-->
                            <igDP:LabelPresenter.InputBindings>
                                <MouseBinding MouseAction="LeftDoubleClick"
									Command="{x:Static igDP:FieldChooserCommands.ToggleVisibility}"
							/>
                            </igDP:LabelPresenter.InputBindings>
                        </igDP:LabelPresenter>
                        <igDP:FieldGroupLabelPresenter
							x:Name="grouplabel"
							IsInFieldChooser="true"
                            IsEnabled="{Binding Path=IsParentFieldGroupVisible}"
                            Visibility="Collapsed"
							HorizontalContentAlignment="Left"
							VerticalContentAlignment="Center"
							IsSelectedInFieldChooser="{Binding Path=IsSelected}"
							Margin="5,0,0,0">

                            <!--This is for toggling the visibility of a field by double clicking on it in
						the field chooser.-->
                            <igDP:FieldGroupLabelPresenter.InputBindings>
                                <MouseBinding MouseAction="LeftDoubleClick"
									Command="{x:Static igDP:FieldChooserCommands.ToggleVisibility}"
							/>
                            </igDP:FieldGroupLabelPresenter.InputBindings>
                        </igDP:FieldGroupLabelPresenter>
                    </igWindows:CardPanel>
                </DockPanel>
				<DataTemplate.Triggers>
					<!--When DisplayHiddenFieldsOnly is true, we display only the fields that are currently hidden in
						the data presenter. In this mode we shouldn't display checkboxes next to them because they all
						would be unchecked to begin with (since all fields being displayed are hidden) and checking a
						checkbox will make the field disappear from the field chooser since it would not longer be hidden
						in the data presenter.-->
					<DataTrigger Binding="{Binding Path=DisplayHiddenFieldsOnly, RelativeSource={RelativeSource AncestorType={x:Type igDP:FieldChooser}}}" Value="true">
						<Setter TargetName="checkBox" Property="Visibility" Value="Collapsed" />
					</DataTrigger>
					<DataTrigger Binding="{Binding Path=IsFieldGroup}" Value="false">
                        <Setter TargetName="label" Property="Visibility" Value="Visible" />
                        <Setter TargetName="label" Property="Field" Value="{Binding Path=Field}" />
					</DataTrigger>
					<DataTrigger Binding="{Binding Path=IsFieldGroup}" Value="true">
                        <Setter TargetName="grouplabel" Property="Visibility" Value="Visible" />
                        <Setter TargetName="grouplabel" Property="FieldGroup" Value="{Binding Path=FieldGroup}" />
					</DataTrigger>
                    <DataTrigger Binding="{Binding Path=IsParentFieldGroupVisible}" Value="false">
                        <Setter TargetName="labelArea" Property="Opacity" Value=".35" />
					</DataTrigger>
				</DataTemplate.Triggers>
			</DataTemplate>

			<!--Template that represents field groups displayed in the combo editor's drop-down list
			as well as its edit area.-->
			<DataTemplate DataType="{x:Type igDP:FieldChooserGroup}">
				<StackPanel x:Name="panel" ToolTip="{Binding FieldLayout.ToolTip}">
					<TextBlock x:Name="fieldLayoutDescription" Text="{Binding Path=FieldLayout.Description}" />
					<StackPanel x:Name="filterPanel" Orientation="Horizontal" Visibility="Collapsed">
						<!--This rectangle is for indenting the filter description.-->
						<Rectangle Width="20" />
						<TextBlock Text="{Binding Path=FieldFilter.Description}" />
					</StackPanel>
				</StackPanel>

				<DataTemplate.Triggers>
					<DataTrigger Binding="{Binding Path=HasFieldFilter}" Value="true">
						<Setter TargetName="panel" Property="ToolTip" Value="{Binding FieldFilter.ToolTip}" />
						<Setter TargetName="filterPanel" Property="Visibility" Value="Visible" />
						<Setter TargetName="fieldLayoutDescription" Property="Visibility" Value="Collapsed" />
					</DataTrigger>
				</DataTemplate.Triggers>
			</DataTemplate>

		</Style.Resources>

        <!-- JJD 05/11/16 - TFS219295  -->
        <Setter Property="AllFieldsPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.AllFieldsPrompt}}"/>
        
        <Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:FieldChooser}">
					<Border
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Background="{TemplateBinding Background}"
						Padding="{TemplateBinding Padding}"
						SnapsToDevicePixels="true"
					>

						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="*" />
							</Grid.RowDefinitions>

                            <!-- JJD 05/11/16 - TFS219295  
                                 Only determine the XamComboEditor's visibility based on the FieldGroupSelectorVisibilityResolved -->
							<!--<DockPanel Visibility="{TemplateBinding FieldGroupSelectorVisibilityResolved}" >-->
							<DockPanel>
								<editors:XamCheckEditor
									x:Name="toggleAllCheckBox"
									DockPanel.Dock="Left"
									IsThreeState="false"
									Value="{Binding Path=AllCurrentFieldsVisible, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}"
									Visibility="{Binding Path=DisplayHiddenFieldsOnly, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource NotBoolToVisConverter}, Mode=OneWay}"
									Margin="4,0,0,0"
								/>

                                <!-- JJD 05/11/16 - TFS219295  
                                    Added a label for when there is only one FieldLayout and the XamComboEditor below is collapsed-->
                                <Label x:Name="allFieldsPrompt" DockPanel.Dock="Left" 
                                       Target="{Binding ElementName=toggleAllCheckBox}"
                                       Padding="1,5,5,5"
                                       Content="{Binding Path=AllFieldsPrompt, RelativeSource={RelativeSource TemplatedParent}}"
                                       Visibility="Collapsed"/>
                                
								<!--Combo editor that has list of field layouts in its drop-down.-->
								<editors:XamComboEditor
										x:Name="fieldGroupSelector"
										DockPanel.Dock="Right"
										ItemsSource="{TemplateBinding FieldGroups}"
										ValueType="{x:Type igDP:FieldChooserGroup}"
										DisplayValueSource="Value"
										Value="{Binding Path=CurrentFieldGroup, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}"
										HorizontalAlignment="Stretch"
                                        Visibility="{TemplateBinding FieldGroupSelectorVisibilityResolved}"
                                    />
							</DockPanel>

							<igWindows:CardPanel Grid.Row="1">

								<!--List box that displays the fields-->
								<ListBox
										x:Name="PART_FieldsListBox"
										ItemsSource="{TemplateBinding CurrentFields}"
										SelectionMode="Single"
										SelectedItem="{Binding Path=SelectedField, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}"
										HorizontalContentAlignment="Stretch"

								>
									<!--Since the LabelPresenter elements are rendering the selected state, make the listbox item
									from rendering selected state itself. Also prevent it from drawing the dashed focus rect.-->
									<ListBox.ItemContainerStyle>
										<Style TargetType="{x:Type ListBoxItem}">
											<Setter Property="FocusVisualStyle" Value="{x:Null}" />
											<Setter Property="Template">
												<Setter.Value>
													<ControlTemplate TargetType="{x:Type ListBoxItem}">
														<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
															<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
														</Border>
													</ControlTemplate>
												</Setter.Value>
											</Setter>
										</Style>
									</ListBox.ItemContainerStyle>

									<ListBox.InputBindings>
										<!--This is for toggling the visibility of the field in the data presenter (essentially the
												checkbox next to the field label).-->
										<KeyBinding
												Key="Space"
												Command="{x:Static igDP:FieldChooserCommands.ToggleVisibility}"
										/>
									</ListBox.InputBindings>
								</ListBox>

								<Border
										x:Name="highlightBorder"
										BorderThickness="2"
										BorderBrush="Transparent"
										HorizontalAlignment="Stretch"
										VerticalAlignment="Stretch"
								/>

							</igWindows:CardPanel>

						</Grid>

					</Border>

					<ControlTemplate.Triggers>
                        <!-- JJD 05/11/16 - TFS219295  
                             When there is only one FieldLayout the FieldGroupSelectorVisibilityResolved will be collapsed.
                             In this case we want to bind the new Label's visibility to the XamCheckBox's-->
                        <Trigger Property="FieldGroupSelectorVisibilityResolved" Value="Collapsed">
                            <Setter TargetName="allFieldsPrompt" Property="Visibility" Value="{Binding ElementName=toggleAllCheckBox, Path=Visibility}" />
						</Trigger>
						<!--NOTE: The following trigger can be used to highlight the field chooser
						when a field from it is being dragged.-->
						<Trigger Property="IsDraggingItem" Value="true">
							<Setter TargetName="highlightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldChooserDragBorderBrushKey}}" />
						</Trigger>
						<!--NOTE: The following trigger can be used to highlight the field chooser
						when a field from the associated data presenter is being dragged.-->
						<Trigger Property="IsDraggingItemFromDataPresenter" Value="true">
							<Setter TargetName="highlightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldChooserDragBorderBrushKey}}" />
						</Trigger>
						<!--NOTE: The following trigger can be used to highlight the field chooser
						when a field from the associated data presenter is being dragged over the
						field chooser.-->
						<Trigger Property="IsDragItemOver" Value="true">
							<Setter TargetName="highlightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldChooserDragBorderBrushKey}}" />
						</Trigger>
						<!--SSP 10/21/09 TFS22726 - Added the following DataTrigger to hide the toggleAllCheckBox
						when there are no fields in the field chooser.-->
						<DataTrigger Binding="{Binding Path=CurrentFields.Count, RelativeSource={RelativeSource Self}}" Value="0" >
							<Setter TargetName="toggleAllCheckBox" Property="IsEnabled" Value="false" />
						</DataTrigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- SSP 6/18/09 - NAS9.2 Field Chooser -->
	<!-- _________________________ FieldChooserButtonStyleKey ______________________________________ -->
	<Style x:Key="{x:Static igDP:DataPresenterBase.FieldChooserButtonStyleKey}" TargetType="{x:Type Button}">
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Background" Value="#FFFFFFFF"/>
		<Setter Property="BorderBrush">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<LinearGradientBrush.GradientStops>
						<GradientStopCollection>
							<GradientStop Offset="0" Color="#FF999999"/>
							<GradientStop Offset="1" Color="#FF666666"/>
						</GradientStopCollection>
					</LinearGradientBrush.GradientStops>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="Foreground" Value="#FF000000"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid Background="Transparent" Width="16" Height="16">
						<Grid x:Name="FieldChooserIcon" Width="14" Height="14" VerticalAlignment="Center" HorizontalAlignment="Center" >
							<Path Fill="{TemplateBinding Background}" Data="M 3,0 C3,0 3,4 3,4 3,4 0,4 0,4 0,4 0,14 0,14 0,14 7,14 7,14 7,14 7,10 7,10 7,10 14,10 14,10 14,10 14,0 14,0 14,0 3,0 3,0 z" SnapsToDevicePixels="True"/>
							<Path Fill="{TemplateBinding BorderBrush}" Data="M 1,5 C1,5 6,5 6,5 6,5 6,7 6,7 6,7 1,7 1,7 1,7 1,5 1,5 zM 1,8 C1,8 6,8 6,8 6,8 6,10 6,10 6,10 1,10 1,10 1,10 1,8 1,8 zM 1,11 C1,11 6,11 6,11 6,11 6,13 6,13 6,13 1,13 1,13 1,13 1,11 1,11 zM 7,7 C7,7 13,7 13,7 13,7 13,9 13,9 13,9 7,9 7,9 7,9 7,7 7,7 zM 7,4 C7,4 13,4 13,4 13,4 13,6 13,6 13,6 7,6 7,6 7,6 7,4 7,4 zM 4,1 C4,1 13,1 13,1 13,1 13,3 13,3 13,3 4,3 4,3 4,3 4,1 4,1 zM 3,0 C3,0 3,4 3,4 3,4 0,4 0,4 0,4 0,14 0,14 0,14 7,14 7,14 7,14 7,10 7,10 7,10 14,10 14,10 14,10 14,0 14,0 14,0 3,0 3,0 z" SnapsToDevicePixels="True"/>
							<Grid Margin="0,0,0,1">
								<Border
									Width="6"
									Height="3"
									Margin="0,0,2,2"
									BorderBrush="{TemplateBinding Foreground}"
									BorderThickness="0,0,1,1"
									CornerRadius="0,0,2,0"
									SnapsToDevicePixels="True"/>
								<Path
									Width="5"
									Height="3"
									Margin="3,1,0,0"
									VerticalAlignment="Top"
									Data="M 0,2 C0,2 0,3 0,3 0,3 5,3 5,3 5,3 5,2 5,2 5,2 4,2 4,2 4,2 4,1 4,1 4,1 3,1 3,1 3,1 3,0 3,0 3,0 2,0 2,0 2,0 2,1 2,1 2,1 1,1 1,1 1,1 1,2 1,2 1,2 0,2 0,2 z"
									Fill="{TemplateBinding Foreground}"
									Stretch="Fill"
									SnapsToDevicePixels="True"/>
							</Grid>
						</Grid>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- AS 3/3/11 NA 2011.1 - Async Exporting -->
	<Style TargetType="igDP:RecordExportStatusControl">
		<Setter Property="HorizontalContentAlignment" Value="Right" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="0,2,5,2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="igDP:RecordExportStatusControl">
					<Border BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}"
							Padding="{TemplateBinding Padding}"
							SnapsToDevicePixels="true">
						<StackPanel SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									Orientation="Horizontal"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" >
							<TextBlock x:Name="message" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
							<ProgressBar x:Name="progress"
										 IsIndeterminate="True"
										 Margin="5,0,0,0"
										 Style="{DynamicResource {x:Static igDP:RecordExportStatusControl.IndeterminateProgressBarStyleKey}}"
										 />
							<Button Margin="8,0,0,0" x:Name="cancel"
									Focusable="False"
									ToolTip="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.CancelExportToolTip}}"
									Command="{x:Static igDP:DataPresenterCommands.CancelExport}"
									CommandTarget="{Binding DataPresenter, RelativeSource={RelativeSource TemplatedParent}}"
									Style="{DynamicResource {x:Static igDP:RecordExportStatusControl.CancelExportButtonStyleKey}}"
									/>
						</StackPanel>
					</Border>
					<ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="True">
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource stringFormatConverter}">
                                        <Binding Path="ExportInfo.StatusMessage" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ExportInfo.FileName" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
								<Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="True" />
								<Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Exporting" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="message" Property="Text">
								<Setter.Value>
									<MultiBinding Converter="{StaticResource stringFormatConverter}">
										<Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusExportingMessage}" />
										<Binding Path="ExportInfo.FileNameWithoutPath" RelativeSource="{RelativeSource TemplatedParent}" />
										<Binding Path="ExportedRecordCount" RelativeSource="{RelativeSource TemplatedParent}" />
									</MultiBinding>
								</Setter.Value>
							</Setter>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
								<Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
								<Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Exporting" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="message" Property="Text">
								<Setter.Value>
									<MultiBinding Converter="{StaticResource stringFormatConverter}">
										<Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusExportingMessage}" />
										<Binding Path="ExportInfo.ExportType" RelativeSource="{RelativeSource TemplatedParent}" />
										<Binding Path="ExportedRecordCount" RelativeSource="{RelativeSource TemplatedParent}" />
									</MultiBinding>
								</Setter.Value>
							</Setter>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
								<Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="True" />
								<Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Initializing" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="message" Property="Text">
								<Setter.Value>
									<MultiBinding Converter="{StaticResource stringFormatConverter}">
										<Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusInitializingMessage}" />
										<Binding Path="ExportInfo.FileNameWithoutPath" RelativeSource="{RelativeSource TemplatedParent}" />
									</MultiBinding>
								</Setter.Value>
							</Setter>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
								<Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
								<Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Initializing" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="message" Property="Text">
								<Setter.Value>
									<MultiBinding Converter="{StaticResource stringFormatConverter}">
										<Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusInitializingMessage}" />
										<Binding Path="ExportInfo.ExportType" RelativeSource="{RelativeSource TemplatedParent}" />
									</MultiBinding>
								</Setter.Value>
							</Setter>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
								<Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="True" />
								<Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Pending" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="message" Property="Text">
								<Setter.Value>
									<MultiBinding Converter="{StaticResource stringFormatConverter}">
										<Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusPendingMessage}" />
										<Binding Path="ExportInfo.FileNameWithoutPath" RelativeSource="{RelativeSource TemplatedParent}" />
									</MultiBinding>
								</Setter.Value>
							</Setter>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
								<Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
								<Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Pending" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="message" Property="Text">
								<Setter.Value>
									<MultiBinding Converter="{StaticResource stringFormatConverter}">
										<Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusPendingMessage}" />
										<Binding Path="ExportInfo.ExportType" RelativeSource="{RelativeSource TemplatedParent}" />
									</MultiBinding>
								</Setter.Value>
							</Setter>
						</MultiDataTrigger>
						<Trigger Property="Status" Value="NotExporting">
							<Setter TargetName="progress" Property="IsIndeterminate" Value="false" />
							<Setter TargetName="progress" Property="Visibility" Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="Button" x:Key="{x:Static igDP:RecordExportStatusControl.CancelExportButtonStyleKey}">
		<Setter Property="Height" Value="14" />
		<Setter Property="Width" Value="14" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<TextBlock Text="X" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="ProgressBar" x:Key="{x:Static igDP:RecordExportStatusControl.IndeterminateProgressBarStyleKey}" >
		<Setter Property="Height" Value="14" />
		<Setter Property="Width" Value="90" />
	</Style>

	<!-- _________________________ RecordFilterTreeItem [AS NA 11.2 Excel Style Filtering] _______________________________________ -->
  <!-- SSP 3/27/13 TFS135571-->
  <DataTemplate x:Key="stringTemplate" DataType="{x:Type System:String}">
    <TextBlock Text="{Binding}" />
  </DataTemplate>

  <HierarchicalDataTemplate DataType="{x:Type igDP:RecordFilterTreeItem}" ItemsSource="{Binding Items}">
    <!-- SSP 3/27/13 TFS135571 - Added ContentTemplate setter. -->
		<CheckBox Background="{Binding Path=Background, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" 
                  Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" 
                  Focusable="False" IsChecked="{Binding IsChecked, Mode=TwoWay}" Content="{Binding DisplayText}" 
                  ContentTemplate="{StaticResource stringTemplate}"
              />
	</HierarchicalDataTemplate>

	<Style x:Key="clearSearchButtonStyle" TargetType="Button">
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.RecordFilterTreeSearchBorderBrushKey}}" />
		<Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.RecordFilterTreeClearSearchFillBrushKey}}" />
		<Setter Property="BorderThickness" Value="1,0,0,0" />
		<Setter Property="Padding" Value="3" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Border BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}"
							Padding="{TemplateBinding Padding}">
						<Grid
							Width="8"
							Height="7"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<Path
		                        Width="8"
		                        Height="7"
		                        Data="M 3,1 C3,1 3,0 3,0 3,0 0,0 0,0 0,0 0,3 0,3 0,3 2,3 2,3 2,3 2,4 2,4 2,4 0,4 0,4 0,4 0,7 0,7 0,7 3,7 3,7 3,7 3,6 3,6 3,6 5,6 5,6 5,6 5,7 5,7 5,7 8,7 8,7 8,7 8,4 8,4 8,4 6,4 6,4 6,4 6,3 6,3 6,3 8,3 8,3 8,3 8,0 8,0 8,0 5,0 5,0 5,0 5,1 5,1 5,1 3,1 3,1 z"
		                        Fill="#99FFFFFF"
		                        Stretch="Fill"/>
							<Path
                                x:Name="closeGlyph"
		                        Width="6"
		                        Height="5"
		                        Data="M 0,0 C0,0 0,1 0,1 0,1 1,1 1,1 1,1 1,2 1,2 1,2 2,2 2,2 2,2 2,3 2,3 2,3 1,3 1,3 1,3 1,4 1,4 1,4 0,4 0,4 0,4 0,5 0,5 0,5 2,5 2,5 2,5 2,4 2,4 2,4 4,4 4,4 4,4 4,5 4,5 4,5 6,5 6,5 6,5 6,4 6,4 6,4 5,4 5,4 5,4 5,3 5,3 5,3 4,3 4,3 4,3 4,2 4,2 4,2 5,2 5,2 5,2 5,1 5,1 5,1 6,1 6,1 6,1 6,0 6,0 6,0 4,0 4,0 4,0 4,1 4,1 4,1 2,1 2,1 2,1 2,0 2,0 2,0 0,0 0,0 z"
		                        Fill="#CC000000"
		                        Stretch="Fill"/>
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.RecordFilterTreeClearSearchHotTrackFillBrushKey}}" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="filterTreeScopesComboToggleButtonStyle" TargetType="ToggleButton">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="ClickMode" Value="Press" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="Padding" Value="2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Border x:Name="outerBorder"
							BorderBrush="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnNormalOuterBorderFillKey}}"
							BorderThickness="1"
							Background="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnNormalCenterFillKey}}">
						<Border x:Name="innerBorder"
								BorderBrush="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnNormalInnerBorderFillKey}}"
								BorderThickness="1"
								Padding="{TemplateBinding Padding}">
							<Path x:Name="glyph"
								  HorizontalAlignment="Center"
								  VerticalAlignment="Center"
								  Fill="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnGlyphNormalForegroundFillKey}}"
								  Stretch="None"
								  Data="M0,0 L7,0 3.5,4z" />
						</Border>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter Property="BorderBrush" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnPressedOuterBorderFillKey}}"/>
							<Setter Property="Background" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnPressedCenterFillKey}}"/>
							<Setter Property="BorderBrush" TargetName="innerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnPressedInnerBorderFillKey}}"/>
							<Setter Property="Fill" TargetName="glyph" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnGlyphHottrackForegroundFillKey}}"/>
						</Trigger>

						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsChecked" Value="False"/>
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="innerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackInnerBorderFillKey}}"/>
							<Setter Property="Background" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackCenterFillKey}}"/>
							<Setter Property="BorderBrush" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackOuterBorderFillKey}}"/>
							<Setter Property="Fill" TargetName="glyph" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnGlyphHottrackForegroundFillKey}}"/>
						</MultiTrigger>

						<!-- when not dropped down but the combo has the keyboard focus the button should appear as it does when hottracked -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" Value="False"/>
								<Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="BorderBrush" TargetName="innerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackInnerBorderFillKey}}"/>
							<Setter Property="Background" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackCenterFillKey}}"/>
							<Setter Property="BorderBrush" TargetName="outerBorder" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnHottrackOuterBorderFillKey}}"/>
							<Setter Property="Fill" TargetName="glyph" Value="{DynamicResource {x:Static editors:EditorsBrushKeys.DropdownBtnGlyphHottrackForegroundFillKey}}"/>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="filterTreeScopesComboStyle" TargetType="ComboBox">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ComboBox">
					<Grid Background="Transparent">
						<ToggleButton
							x:Name="PART_DropDownButton"
							Grid.ColumnSpan="3"
							Style="{StaticResource filterTreeScopesComboToggleButtonStyle}"
							IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							/>
						<Popup
							x:Name="PART_Popup"
							AllowsTransparency="True"
							Placement="Bottom"
							IsOpen="{TemplateBinding IsDropDownOpen}"
							Focusable="False"
							PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
							MaxHeight="{TemplateBinding MaxDropDownHeight}">
							<luna:SystemDropShadowChrome
								x:Name="Shdw"
								Color="Transparent">
								<Border Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}">
									<ScrollViewer x:Name="ScrollViewer">
										<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
									</ScrollViewer>
								</Border>
							</luna:SystemDropShadowChrome>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
							<Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
							<Setter TargetName="Shdw" Property="Color" Value="#71000000" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- _________________________ RecordFilterTreeControl [AS NA 11.2 Excel Style Filtering] _______________________________________ -->
	<Style TargetType="igDP:RecordFilterTreeControl">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="igDP:RecordFilterTreeControl">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}"
						SnapsToDevicePixels="True">
						<igWindows:CardPanel>
							<Grid x:Name="gridContent" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition />
									<RowDefinition Height="Auto" />
								</Grid.RowDefinitions>
								<Border
									Grid.Row="0"
									BorderThickness="1"
									BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.RecordFilterTreeSearchBorderBrushKey}}"
									Margin="0,1,0,3">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition />
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="Auto" />
										</Grid.ColumnDefinitions>
										<TextBox
											x:Name="PART_SearchTextBox"
											Grid.Column="0"
											BorderThickness="0"
											Text="{Binding Path=SearchText, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
											/>
										<TextBlock
											x:Name="txtSearchPrompt"
											Foreground="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
											Grid.Column="0"
											Margin="2,0"
											Text="{TemplateBinding SearchTextPrompt}"
											Visibility="Collapsed"
											IsHitTestVisible="False" />
										<Grid Grid.Column="1">
											<Image
												x:Name="MagnifyingGlass"
												Margin="2,2,1,2"
												Stretch="None"
												HorizontalAlignment="Center"
												VerticalAlignment="Center"
												Source="Images/MagnifyingGlass.png" />
											<Button
												x:Name="btnClearSearchText"
												Content="X"
												Visibility="Hidden"
												Style="{StaticResource clearSearchButtonStyle}"
												Command="{Binding ClearSearchTextCommand, RelativeSource={RelativeSource TemplatedParent}}" />
										</Grid>
										<ComboBox
											x:Name="PART_SearchScopeCombo"
											Grid.Column="2"
											IsEditable="False"
											Style="{StaticResource filterTreeScopesComboStyle}"
											SelectedValuePath="Value"
											SelectedValue="{Binding Path=SearchScope, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
											ItemsSource="{Binding Path=AvailableSearchScopes, RelativeSource={RelativeSource TemplatedParent}}"
											Visibility="Collapsed"
											/>
									</Grid>
								</Border>
								<TreeView
									Grid.Row="1"
									x:Name="PART_Tree"
									ItemsSource="{Binding Nodes, RelativeSource={RelativeSource TemplatedParent}}"
									BorderThickness="1"
									BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemSeparatorBrushKey}}"
									/>
								<TextBlock
									x:Name="txtNoMatch"
									Grid.Row="1"
									Text="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.RecordFilterTreeNoSearchMatches}}"
									Visibility="Collapsed"
									TextAlignment="Center"
									VerticalAlignment="Center"
									TextWrapping="Wrap" />
								<StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,15,0,3">
                                    <Button Content="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.CustomFilterSelectionControlOkButtonLabel}}" MinWidth="73" Margin="0,0,11,0" Command="{Binding UpdateRecordFilterCommand, RelativeSource={RelativeSource TemplatedParent}}" MinHeight="0" Padding="2" Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ButtonStyle}}"/>
                                    <Button Content="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.CustomFilterSelectionControlCancelButtonLabel}}" MinWidth="73" Command="{Binding CancelChangesCommand, RelativeSource={RelativeSource TemplatedParent}}" MinHeight="0" Padding="2" Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ButtonStyle}}"/>
								</StackPanel>
							</Grid>
							<ContentControl x:Name="LoadingIndicator" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center" />
						</igWindows:CardPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsLoadingItems" Value="True">
							<Setter TargetName="LoadingIndicator" Property="ContentTemplate" Value="{StaticResource BaseFilterDropDownLoadingTemplate}" />
							<Setter TargetName="LoadingIndicator" Property="Visibility" Value="Visible" />
							<Setter TargetName="gridContent" Property="Opacity" Value="0.5" />
						</Trigger>
						<Trigger Property="HasSearchText" Value="True">
							<Setter TargetName="btnClearSearchText" Property="Visibility" Value="Visible" />
							<Setter TargetName="MagnifyingGlass" Property="Visibility" Value="Hidden" />
						</Trigger>
						<Trigger Property="HasEmptySearchResults" Value="True">
							<Setter TargetName="PART_Tree" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="txtNoMatch" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="HasMultipleSearchScopes" Value="True">
							<Setter TargetName="PART_SearchScopeCombo" Property="Visibility" Value="Visible" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition SourceName="PART_SearchTextBox" Property="IsFocused" Value="False" />
								<Condition Property="HasSearchText" Value="False" />
							</MultiTrigger.Conditions>
							<!-- Show the watermark when there is no search text and the textbox isn't focused -->
							<Setter TargetName="txtSearchPrompt" Property="Visibility" Value="Visible" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>
