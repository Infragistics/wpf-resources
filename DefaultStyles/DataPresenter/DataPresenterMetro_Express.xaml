<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:igWindows="http://infragistics.com/Windows"
    xmlns:igThemes="http://infragistics.com/Themes"
    xmlns:editors="http://infragistics.com/Editors"
    xmlns:igDP="http://infragistics.com/DataPresenter"
    xmlns:themes="http://infragistics.com/Themes"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:interop="clr-namespace:System.Windows.Interop;assembly=PresentationFramework"
    xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008">

    <!-- *********************************  RESOURCES  ********************************* -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="DataPresenterGeneric_Express.xaml"/>
        <ResourceDictionary Source="DataPresenterMetro_Brushes.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!-- *********************************  BRUSHES  ********************************* -->
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="GroupByAreaFieldLabelStroke" Color="{StaticResource Color_005}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="GroupByAreaFieldLabelBackground" Color="{StaticResource Color_005}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="GripperLinesVerticalStroke" Color="{StaticResource Color_005}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="GroupByRecordCellValuePresenterBg" Color="{StaticResource Color_006}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="HeaderHoverBackgroundBrush" Color="{StaticResource Color_005}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="PopupBackgroundBrush" Color="{StaticResource Color_009}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="PopupBorderBrush" Color="{StaticResource Color_004}"/>

    <!-- Arrow Brushes -->
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="ArrowNormalFill" Color="{StaticResource Color_003}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="ArrowHoverFill" Color="{StaticResource Color_002}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="ArrowPressedFill" Color="{StaticResource Color_024}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="ArrowDisabledFill" Color="{StaticResource Color_005}"/>
    <SolidColorBrush  PresentationOptions:Freeze="true" x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type igDP:RecordSelector}, ResourceId=SelectorArrowActiveFill}" Color="{StaticResource Color_003}" />

    <!-- CellValuePresenter Brushes -->
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="CellVPBackgroundBrush" Color="{StaticResource Color_016}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="CellVPBorderBrush" Color="{StaticResource Color_004}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="CellVPBackgroundActive" Color="{StaticResource Color_026}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="CellVPBorderActiveBrush" Color="{StaticResource Color_024}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="CellVPBackgroundFieldSelected" Color="{StaticResource Color_026}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="CellVPBorderFieldSelectedBrush" Color="{StaticResource Color_026}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="CellVPBackgroundHover" Color="{StaticResource Color_016}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="CellVPBorderHoverBrush" Color="{StaticResource Color_004}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="CellVPBackgroundPrimary" Color="{StaticResource Color_004}" Opacity="0.2"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="CellVPBorderPrimaryBrush" Color="{StaticResource Color_016}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="CellVPBackgroundSelected" Color="{StaticResource Color_026}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="CellVPBorderSelectedBrush" Color="{StaticResource Color_024}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="CellVPForegroundBrush" Color="{StaticResource Color_001}"/>

    <!--SS 05/27/2015 TFS194609 Change FilterCellValuePresenterBgActive, FilterCellValuePresenterBgFieldSelected, FilterCellValuePresenterBgSelected
    to the default color-->
    <!-- FilterCellValuePresenter Brushes -->
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="FilterCellValuePresenterBg" Color="{StaticResource Color_016}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="FilterCellValuePresenterStroke" Color="{StaticResource Color_004}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="FilterCellValuePresenterBgActive" Color="{StaticResource Color_016}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="FilterCellValuePresenterStrokeActive" Color="{StaticResource Color_024}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="FilterCellValuePresenterBgFieldSelected" Color="{StaticResource Color_016}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="FilterCellValuePresenterStrokeFieldSelected" Color="{StaticResource Color_024}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="FilterCellValuePresenterBgHover" Color="{StaticResource Color_006}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="FilterCellValuePresenterStrokeHover" Color="{StaticResource Color_003}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="FilterCellValuePresenterBgPrimary" Color="{StaticResource Color_009}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="FilterCellValuePresenterStrokePrimary" Color="{StaticResource Color_004}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="FilterCellValuePresenterBgSelected" Color="{StaticResource Color_016}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="FilterCellValuePresenterStrokeSelected" Color="{StaticResource Color_024}"/>

    <!-- DataRecordCell Brushes -->
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="DataRecordCellAreaBackground" Color="{StaticResource Color_016}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="DataRecordCellAreaBorderBrush" Color="{StaticResource Color_004}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="DataRecordCellAreaBackgroundActive" Color="{StaticResource Color_026}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="DataRecordCellAreaBorderActiveBrush" Color="{StaticResource Color_024}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="DataRecordCellAreaBackgroundAlternate" Color="{StaticResource Color_008}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="DataRecordCellAreaBorderAlternateBrush" Color="{StaticResource Color_004}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="DataRecordCellAreaBgHover" Color="{StaticResource Color_006}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="DataRecordCellAreaBorderHoverBrush" Color="{StaticResource Color_003}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="DataRecordCellAreaBgSelected" Color="{StaticResource Color_026}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="DataRecordCellAreaBorderSelectedBrush" Color="{StaticResource Color_024}"/>

    <!-- Label Brushes -->
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="LabelPresenterInnerBorderBrush" Color="{StaticResource Color_004}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="LabelPresenterOuterBorderBrush" Color="{StaticResource Color_004}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="LabelPresenterHighlightasPrimaryBackground"  Color="{StaticResource Color_026}" />
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="LabelPresenterHighlightasPrimaryBorderBrush"  Color="{StaticResource Color_024}" />

    <!-- ProgressBar Brushes -->
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="ProgressBarBackgroundBrush" Color="{StaticResource Color_024}" />
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="ProgressBarBorderBrush" Color="{StaticResource Color_006}" />
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="ProgressBarForegroundBrush" Color="{StaticResource Color_009}" />

    <!-- **************************************************************** WPF SPECIFIC RESOURCES *********************************************************************
    ********************************************************************************************************************************************************************* -->
    <!-- *********************************  BRUSHES  ********************************* -->
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="ScrollbarNormalFill" Color="{StaticResource Color_003}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="ScrollbarHoverFill" Color="{StaticResource Color_002}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="ScrollbarPressedFill" Color="{StaticResource Color_024}"/>
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="ScrollbarDisabledFill" Color="{StaticResource Color_005}"/>

    <!-- *********************************  Horizontal Scrollbar Button Style  ********************************* -->
    <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="MinWidth" Value="30"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid x:Name="grid1">
                        <Rectangle Fill="{StaticResource TransparentBrush}"/>
                        <Path x:Name="Arrow" Data="F1 M 541.537,173.589L 531.107,173.589L 536.322,167.49L 541.537,173.589 Z " Height="6" Stretch="Uniform" Width="10" Fill="{StaticResource ArrowNormalFill}" Margin="{TemplateBinding Padding}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource ArrowHoverFill}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource ArrowPressedFill}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource ArrowDisabledFill}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  Vertical Scrollbar Page Button Style  ********************************* -->
    <Style x:Key="VScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  Horizontal Scrollbar Gray Thumb Style  ********************************* -->
    <Style x:Key="HScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="MinWidth" Value="20"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Margin="0">
                        <Rectangle Fill="{StaticResource TransparentBrush}"/>
                        <Rectangle x:Name="Thumb" Margin="1" Fill="{StaticResource ScrollbarNormalFill}" Height="8"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="Thumb" Value="{StaticResource ScrollbarHoverFill}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Fill" TargetName="Thumb" Value="{StaticResource ScrollbarPressedFill}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Thumb" Property="Fill" Value="{StaticResource ScrollbarDisabledFill}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  Vertical Scrollbar Thumb Style  ********************************* -->
    <Style x:Key="VScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="MinWidth" Value="30"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="grid" Height="Auto" Width="Auto">
                        <Rectangle Fill="{StaticResource TransparentBrush}" />
                        <Rectangle x:Name="Thumb" Fill="{StaticResource ScrollbarNormalFill}" Width="8"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="Thumb" Value="{StaticResource ScrollbarHoverFill}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Fill" TargetName="Thumb" Value="{StaticResource ScrollbarPressedFill}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Thumb" Property="Fill" Value="{StaticResource ScrollbarDisabledFill}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  Horizontal Scrollbar Page Button Style  ********************************* -->
    <Style x:Key="HScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  Scrollbar Style  ********************************* -->
    <Style x:Key="ScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="MinWidth" Value="30"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition Height="30"/>
                        </Grid.RowDefinitions>
                        <Rectangle Grid.RowSpan="3" StrokeThickness="1" Fill="{StaticResource TransparentBrush}" Stroke="{StaticResource TransparentBrush}" Margin="0"/>
                        <RepeatButton x:Name="repeatButton" Command="{x:Static ScrollBar.LineUpCommand}" IsEnabled="True" Style="{StaticResource ScrollBarButton}" HorizontalAlignment="Center"/>
                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="True" Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource VScrollBarPageButton}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource VScrollBarPageButton}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb x:Name="thumb" Style="{StaticResource VScrollBarThumb}" HorizontalAlignment="Center" Width="30"/>
                            </Track.Thumb>
                        </Track>
                        <RepeatButton x:Name="repeatButton1" Command="{x:Static ScrollBar.LineDownCommand}" IsEnabled="True" Grid.Row="2" Style="{StaticResource ScrollBarButton}" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Center">
                            <RepeatButton.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="180"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </RepeatButton.RenderTransform>
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollbarDisabledFill}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="30"/>
                <Setter Property="MinHeight" Value="30"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="30"/>
                                    <ColumnDefinition Width="0.00001*"/>
                                    <ColumnDefinition Width="30"/>
                                </Grid.ColumnDefinitions>
                                <Rectangle Grid.ColumnSpan="5" StrokeThickness="1" Fill="{StaticResource TransparentBrush}" Stroke="{StaticResource TransparentBrush}"/>
                                <RepeatButton x:Name="repeatButton" Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="True" Style="{StaticResource ScrollBarButton}" Opacity="1" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center">
                                    <RepeatButton.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform Angle="-90"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </RepeatButton.RenderTransform>
                                </RepeatButton>
                                <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="True">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource HScrollBarPageButton}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource HScrollBarPageButton}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource HScrollBarThumb}" VerticalAlignment="Center" Height="30"/>
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton x:Name="repeatButton1" Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}" IsEnabled="True" Style="{StaticResource ScrollBarButton}" Opacity="1" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center">
                                    <RepeatButton.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform Angle="90"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </RepeatButton.RenderTransform>
                                </RepeatButton>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollbarDisabledFill}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- *********************************  ScrollViewer Style ********************************* -->
    <Style x:Key="ScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Rectangle Fill="{StaticResource TransparentBrush}"/>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Style="{StaticResource ScrollBarStyle}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Style="{StaticResource ScrollBarStyle}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** Foreground Styles **********************************-->
    <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}">
        <Setter Property="TextBlock.Foreground" Value="{StaticResource ForegroundBrush}"/>
    </Style>

    <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}">
        <Setter Property="TextBlock.Foreground" Value="{StaticResource ForegroundBrush}"/>
    </Style>

    <!-- **********************************  FieldChooserButton Style  ********************************** -->
    <Style x:Key="{x:Static igDP:DataPresenterBase.FieldChooserButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalCenterBrush}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalOuterBorderBrush}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="Transparent" Width="30" Height="30">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True"/>
                        <Grid x:Name="FieldChooserIcon" Width="16" Height="14" VerticalAlignment="Center" HorizontalAlignment="Center" >
                            <Path Data="M0,11.02352 L7,11.02352 L7,13.024 L0,13.024 z M0,8.0228004 L7,8.0228004 L7,9.9180002 L7,10.02328 L0,10.02328 z M13.209056,6.0014405 L16,6.0014405 L16,8.0019207 C16,8.0019207 15.249996,8.0013342 15.249996,8.0013342 C15.249996,8.0013342 13.209056,6.0014405 13.209056,6.0014405 z M8,6.0014405 L10.706825,6.0014405 C10.706825,6.0014405 8.665885,8.0013342 8.665885,8.0013342 C8.665885,8.0013342 8,8.0019207 8,8.0019207 z M0,5.0220799 L7,5.0220799 L7,7.0225601 L0,7.0225601 z M3,3.0007203 L16,3.0007203 L16,5.0012007 C16,5.0012007 8,5.0012007 8,5.0012007 L8,4.0009604 L3,4.0009604 z M3,0 L16,0 L16,2.0004802 L3,2.0004802 z" Fill="{StaticResource IndicatorsFill}" Stretch="Fill" Width="16" Height="13" VerticalAlignment="Top"/>
                            <Path Data="M4.9164996,-0.26899645 C4.9164996,-0.26899645 8.3285465,3.4231417 8.3285465,3.4231417 C8.3285465,3.4231417 6.0180621,3.4231181 6.0180621,3.4231181 C6.0120416,3.4231181 6,8.0001135 6,8.0001135 L0.99014938,8.0001135 L0.99014938,6.000114 L4,6.000114 L4,3.4231181 C4,3.4231181 1.5044707,3.4231417 1.5044707,3.4231417 C1.5044707,3.4231417 4.9164996,-0.26899645 4.9164996,-0.26899645 z" Fill="{StaticResource ArrowNormalFill}" Stretch="Fill"  Margin="7.996,6.533,0.583,0" SnapsToDevicePixels="True"/>
                        </Grid>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverCenterBrush}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- **********************************  btnGroupByNavBase Style **********************************-->
    <Style x:Key="btnGroupByNavBase" TargetType="{x:Type RepeatButton}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Width" Value="25"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GroupByNavBackground}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GroupByNavBorderBrush}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid x:Name="grid">
                        <Rectangle Fill="{StaticResource TransparentBrush}"/>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="grid" Property="Opacity" Value="0.35"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GroupByNavBackgroundHover}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GroupByLabelHighlightBorder}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ********************************** DataTemplates for GroupByNav **********************************-->
    <Style x:Key="btnGroupByNav" TargetType="{x:Type RepeatButton}">
        <Setter Property="MinWidth" Value="30"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid x:Name="grid1">
                        <Rectangle Fill="{StaticResource TransparentBrush}" Margin="-5"/>
                        <Path x:Name="Arrow" Data="F1 M 541.537,173.589L 531.107,173.589L 536.322,167.49L 541.537,173.589 Z " Height="6" Stretch="Uniform" Width="10" Fill="{StaticResource ArrowNormalFill}" Margin="{TemplateBinding Padding}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource ArrowHoverFill}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource ArrowPressedFill}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource ArrowDisabledFill}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** Custom ScrollViewer Style **********************************-->
    <Style x:Key="customScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="34"/>
                            <ColumnDefinition Width="0.841*"/>
                            <ColumnDefinition MinWidth="36" Width="30"/>
                        </Grid.ColumnDefinitions>
                        <ScrollContentPresenter Grid.Column="1" CanContentScroll="False" Content="{TemplateBinding Content}" Grid.ColumnSpan="1"/>
                        <RepeatButton Command="ScrollBar.LineLeftCommand" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource btnGroupByNav}" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" x:Name="repeatButton" RenderTransformOrigin="0.5,0.5">
                            <RepeatButton.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="-90"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </RepeatButton.RenderTransform>
                        </RepeatButton>
                        <RepeatButton Command="ScrollBar.LineRightCommand" CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource btnGroupByNav}" HorizontalAlignment="Center" VerticalAlignment="Center" Grid.Column="2" Grid.Row="0" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" x:Name="repeatButton1" RenderTransformOrigin="0.5,0.5">
                            <RepeatButton.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="90"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </RepeatButton.RenderTransform>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** ListBox Style **********************************-->
    <Style x:Key="ListBoxStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{StaticResource ListboxBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListboxBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="true">
                        <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}" Style="{StaticResource ScrollViewerStyle}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** GroupByAreaFieldListBox Style **********************************-->
    <Style TargetType="{x:Type igDP:GroupByAreaFieldListBox}">
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Margin" Value="0,0,0,3"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:GroupByAreaFieldListBox}">
                    <ScrollViewer Style="{StaticResource customScrollViewer}" CanContentScroll="true" FocusVisualStyle="{x:Null}">
                        <VirtualizingStackPanel IsItemsHost="True" Orientation="Horizontal"/>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Height" Value="20"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ********************************** CellValuePresenter **********************************-->
    <Style TargetType="{x:Type igDP:CellValuePresenter}">
        <Setter Property="BackgroundActive" Value="{StaticResource CellVPBackgroundActive}"/>
        <Setter Property="BackgroundHover" Value="{StaticResource CellVPBackgroundHover}"/>
        <Setter Property="BackgroundSelected" Value="{StaticResource CellVPBackgroundSelected}"/>
        <Setter Property="BackgroundFieldSelected" Value="{StaticResource CellVPBackgroundFieldSelected}"/>
        <Setter Property="BackgroundPrimary" Value="{StaticResource CellVPBackgroundPrimary}"/>

        <Setter Property="BorderActiveBrush" Value="{StaticResource CellVPBorderActiveBrush}"/>
        <Setter Property="BorderHoverBrush" Value="{StaticResource CellVPBorderHoverBrush}"/>
        <Setter Property="BorderSelectedBrush" Value="{StaticResource CellVPBorderSelectedBrush}"/>
        <Setter Property="BorderFieldSelectedBrush" Value="{StaticResource CellVPBorderFieldSelectedBrush}"/>
        <Setter Property="BorderPrimaryBrush" Value="{StaticResource CellVPBorderPrimaryBrush}"/>

        <Setter Property="ForegroundStyle" Value="{x:Null}"/>
        <Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
        <Setter Property="ForegroundAlternateStyle" Value="{x:Null}"/>
        <Setter Property="ForegroundPrimaryStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
        <Setter Property="ForegroundSelectedStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
        <Setter Property="ForegroundFieldSelectedStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
        <Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}}"/>

        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="Margin" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="{StaticResource CellVPBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CellVPBorderBrush}"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="Padding" Value="0,0,1,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:CellValuePresenter}">
                    <igWindows:CardPanel>
                        <Border x:Name="MainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}"/>
                        <Rectangle x:Name="Active1" Fill="{TemplateBinding BackgroundActive}" SnapsToDevicePixels="True" Stroke="{TemplateBinding BorderActiveBrush}" StrokeThickness="1" Visibility="Collapsed"/>
                        <ContentPresenter x:Name="PART_EditorSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Style="{TemplateBinding ForegroundStyle}"/>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsAlternate, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=Record.RecordType, RelativeSource={RelativeSource Self}}" Value="DataRecord"/>
                                <Condition Binding="{Binding Path=Record.IsAddRecord, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundAlternateStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOverRecord" Value="True">
                            <Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOverRecord, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource FindAncestor, {x:Type igDP:DataRecordPresenter}, 1}}" Value="Horizontal"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver,RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource FindAncestor, {x:Type igDP:DataRecordPresenter}, 1}}" Value="Horizontal"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
                        </MultiDataTrigger>
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundPrimary, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderPrimaryBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundPrimaryStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="IsFieldSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundFieldSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderFieldSelectedBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundFieldSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderSelectedBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="IsActive" Value="true">
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="Active1" Property="Visibility" Value="Visible"/>
                            <!-- SS 10/23/15 TFS208100 Set the Background to Transparent, so only the ActiveBackground color could be applied when the cell is active-->
                            <Setter Property="Background" Value="Transparent"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsActive" Value="False"/>
                                <Condition Property="IsFieldSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOverRecord" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOverRecord" Value="True"/>
                                <Condition Property="IsActive" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                        <DataTrigger Binding="{Binding Path=Field.IsFixedStateChanging, RelativeSource={RelativeSource Self}}" Value="True">
                        </DataTrigger>
                        <Trigger Property="IsDataErrorTemplateActive" Value="true">
                            <Setter TargetName="PART_EditorSite" Property="ContentTemplate" Value="{DynamicResource {x:Static igDP:DataPresenterBase.DataErrorContentTemplateKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <!-- ********************************** TreeCellValuePresenter **********************************-->
    <Style TargetType="{x:Type igDP:TreeCellValuePresenter}">
        <Setter Property="BackgroundActive" Value="{StaticResource CellVPBackgroundActive}"/>
        <Setter Property="BackgroundHover" Value="{StaticResource CellVPBackgroundHover}"/>
        <Setter Property="BackgroundSelected" Value="{StaticResource CellVPBackgroundSelected}"/>
        <Setter Property="BackgroundFieldSelected" Value="{StaticResource CellVPBackgroundFieldSelected}"/>
        <Setter Property="BackgroundPrimary" Value="{StaticResource CellVPBackgroundPrimary}"/>

        <Setter Property="BorderActiveBrush" Value="{StaticResource CellVPBorderActiveBrush}"/>
        <Setter Property="BorderHoverBrush" Value="{StaticResource CellVPBorderHoverBrush}"/>
        <Setter Property="BorderSelectedBrush" Value="{StaticResource CellVPBorderSelectedBrush}"/>
        <Setter Property="BorderFieldSelectedBrush" Value="{StaticResource CellVPBorderFieldSelectedBrush}"/>
        <Setter Property="BorderPrimaryBrush" Value="{StaticResource CellVPBorderPrimaryBrush}"/>

        <Setter Property="ForegroundStyle" Value="{x:Null}"/>
        <Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
        <Setter Property="ForegroundAlternateStyle" Value="{x:Null}"/>
        <Setter Property="ForegroundPrimaryStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
        <Setter Property="ForegroundSelectedStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
        <Setter Property="ForegroundFieldSelectedStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
        <Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}}"/>

        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="Margin" Value="0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="{StaticResource CellVPBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CellVPBorderBrush}"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="Padding" Value="6,4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:TreeCellValuePresenter}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{Binding Path=Indent, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="MainBorder"
                                Grid.ColumnSpan="3"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}"/>
                        <Rectangle x:Name="Active1"
                                   Grid.ColumnSpan="3"
                                   Fill="{TemplateBinding BackgroundActive}"
                                   SnapsToDevicePixels="True"
                                   Stroke="{TemplateBinding BorderActiveBrush}"
                                   StrokeThickness="1"
                                   Visibility="Collapsed"/>
                        <igWindows:ExpansionIndicator
								x:Name="PART_Expander"
                                Panel.ZIndex="1"
								Grid.Column="1"
								Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
							    Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}"
							    CommandParameter="{TemplateBinding Record}"
                                VerticalAlignment="Center"
							    ToggleMode="Manual"
								IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ContentPresenter
                            x:Name="PART_EditorSite"
                            Grid.Column="2"
                            IsEnabled="{TemplateBinding IsContentEnabled}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Style="{TemplateBinding ForegroundStyle}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsAlternate, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=Record.RecordType, RelativeSource={RelativeSource Self}}" Value="DataRecord"/>
                                <Condition Binding="{Binding Path=Record.IsAddRecord, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundAlternateStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOverRecord" Value="True">
                            <Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOverRecord, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource FindAncestor, {x:Type igDP:DataRecordPresenter}, 1}}" Value="Horizontal"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver,RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource FindAncestor, {x:Type igDP:DataRecordPresenter}, 1}}" Value="Horizontal"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
                        </MultiDataTrigger>
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundPrimary, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderPrimaryBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundPrimaryStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="IsFieldSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundFieldSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderFieldSelectedBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundFieldSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderSelectedBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="IsActive" Value="true">
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="Active1" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsActive" Value="False"/>
                                <Condition Property="IsFieldSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOverRecord" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOverRecord" Value="True"/>
                                <Condition Property="IsActive" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                        <DataTrigger Binding="{Binding Path=Field.IsFixedStateChanging, RelativeSource={RelativeSource Self}}" Value="True">
                        </DataTrigger>
                        <Trigger Property="IsDataErrorTemplateActive" Value="true">
                            <Setter TargetName="PART_EditorSite" Property="ContentTemplate" Value="{DynamicResource {x:Static igDP:DataPresenterBase.DataErrorContentTemplateKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <!-- ********************************** Converters **********************************-->
    <BooleanToVisibilityConverter x:Key="BoolToVisConverter"/>

    <!-- ********************************** RecordSeparator Style **********************************-->
    <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, RecordSeparatorStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackgroundHover}}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Height" Value="6"/>
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="BorderBrush" Value="{StaticResource CellVPBorderBrush}" />
    </Style>

    <!-- ********************************** DataRecordPresenter Style **********************************-->
    <Style TargetType="{x:Type igDP:DataRecordPresenter}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="HeaderAreaBackground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelBackground}}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="NestedContentBackground" Value="Transparent"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:DataRecordPresenter}">
                    <Border x:Name="baseGrid" RenderTransform="{TemplateBinding FixedNearElementTransform}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <igWindows:CardPanel>
                            <Border x:Name="addRowFooter" Background="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, AddRowBackground}}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed"/>
                            <Grid RenderTransform="{TemplateBinding ScrollableElementTransform}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Border x:Name="OrientationHorizontalSep" Grid.ColumnSpan="6" Background="#FFFAFAFA" BorderBrush="#FFE7E7E7" BorderThickness="0,0,1,0" Visibility="Collapsed"/>
                                <igWindows:ExpansionIndicator x:Name="ExpansionIndicator" Grid.Column="1" Grid.Row="3" Panel.ZIndex="1" Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}" CommandParameter="{TemplateBinding Record}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" RenderTransform="{TemplateBinding FixedNearElementTransform}" ToggleMode="Manual" Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <Border x:Name="SpacerFill" Grid.Column="1" Grid.ColumnSpan="6" Grid.Row="1" RenderTransform="{TemplateBinding FixedNearElementTransform}" Background="{TemplateBinding HeaderAreaBackground}"/>
                                <ContentPresenter x:Name="PART_HeaderContentSite" Grid.Column="3" Grid.Row="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding HeaderContent}" d:IsHidden="True" Visibility="Visible"/>
                                <Border x:Name="RecordSeparator" Grid.Column="1" Grid.ColumnSpan="6" Grid.Row="2" RenderTransform="{TemplateBinding FixedNearElementTransform}" Style="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, RecordSeparatorStyle}}" Height="3" Visibility="Collapsed" Background="{StaticResource FilterCellValuePresenterStrokeActive}" BorderBrush="{StaticResource FilterCellValuePresenterStrokeActive}"/>
                                <ContentPresenter x:Name="PART_RecordContentSite" Grid.Column="3" Grid.Row="3" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"/>
                                <!-- Nested Content -->
                                <Border x:Name="PART_NestedContentSite" Grid.Column="3" Grid.Row="5" HorizontalAlignment="Left" VerticalAlignment="Top" Background="{TemplateBinding NestedContentBackground}" RenderTransform="{TemplateBinding FixedNearElementTransform}" Visibility="Visible">
                                    <ContentControl x:Name="contentControl" Content="{TemplateBinding NestedContent}" RenderTransform="{TemplateBinding ScrollableElementTransform}"/>
                                </Border>
                            </Grid>
                        </igWindows:CardPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.AutoFitToWidth}" Value="True"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.ColumnSpan" Value="3"/>
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.ColumnSpan" Value="3"/>
                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        </MultiDataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical"/>
                                <Condition Property="IsHeaderRecord" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="SpacerFill" Property="BorderBrush" Value="{StaticResource LabelPresenterOuterBorderBrush}"/>
                            <Setter TargetName="SpacerFill" Property="BorderThickness" Value="0,1,0,1"/>
                        </MultiTrigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="3"/>
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="3"/>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="5"/>
                            <Setter TargetName="PART_RecordContentSite" Property="VerticalAlignment" Value="Top"/>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="ExpansionIndicator" Property="Margin" Value="0,2"/>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="3"/>
                            <Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1"/>
                            <Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="6"/>
                            <Setter TargetName="RecordSeparator" Property="Width" Value="10"/>
                            <Setter TargetName="RecordSeparator" Property="Height" Value="Auto"/>
                            <Setter TargetName="RecordSeparator" Property="BorderThickness" Value="1,0"/>
                            <Setter TargetName="OrientationHorizontalSep" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ShouldDisplayRecordContent" Value="False">
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
                                <Condition Property="IsHeaderRecord" Value="False"/>
                                <Condition Property="ExpansionIndicatorVisibility" Value="Visible"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Horizontal"/>
                                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="4"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical"/>
                                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="4"/>
                        </MultiTrigger>
                        <Trigger Property="IsHeaderRecord" Value="True">
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="1"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHeaderRecord" Value="True"/>
                                <Condition Property="ExpansionIndicatorVisibility" Value="Visible"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden"/>
                        </MultiTrigger>
                        <Trigger Property="HasHeaderContent" Value="False">
                            <Setter TargetName="SpacerFill" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_HeaderContentSite" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasNestedContent" Value="true">
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="baseGrid" Property="Background" Value="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="HasNestedContent" Value="False">
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSpecialRecord}" Value="true"/>
                                <Condition Binding="{Binding Path=IsFixedOnTop, RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="addRowFooter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="addRowFooter" Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, FixedRecord}}"/>
                            <Setter TargetName="addRowFooter" Property="BorderThickness" Value="0,0,0,1"/>
                            <Setter Property="Margin" Value="0,0,0,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSpecialRecord}" Value="true"/>
                                <Condition Binding="{Binding Path=IsFixedOnBottom, RelativeSource={RelativeSource Self}}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="addRowFooter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="addRowFooter" Property="BorderThickness" Value="0,1,0,0"/>
                            <Setter TargetName="addRowFooter" Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, FixedRecord}}"/>
                            <Setter Property="Margin" Value="0,1,0,0"/>
                        </MultiDataTrigger>
                        <Trigger Property="HasSeparatorBefore" Value="true">
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSeparatorAfter" Value="true"/>
                                <Condition Property="Orientation" Value="Vertical"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="4"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSeparatorAfter" Value="true"/>
                                <Condition Property="Orientation" Value="Horizontal"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="4"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.ColumnSpan" Value="1"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.RowSpan" Value="6"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSeparatorBefore" Value="true"/>
                                <Condition Property="Orientation" Value="Horizontal"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="2"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.ColumnSpan" Value="1"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="1"/>
                            <Setter TargetName="RecordSeparator" Property="Grid.RowSpan" Value="6"/>
                        </MultiTrigger>
                        <Trigger Property="IsOpacityReduced" Value="True">
                            <Setter TargetName="PART_RecordContentSite" Property="Opacity" Value="0.35"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="0"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TemplateCardView">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:DataRecordPresenter}">
                    <igWindows:CardPanel x:Name="baseGrid" Background="{TemplateBinding Background}">
                        <!-- Record Content -->
                        <Rectangle Fill="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, CardBackground}}"/>
                        <ContentPresenter x:Name="PART_RecordContentSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"/>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsInCard" Value="True">
                            <Setter Property="VerticalContentAlignment" Value="Top"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** DataRecordCellArea Style ********************************** -->
    <Style TargetType="{x:Type igDP:DataRecordCellArea}" BasedOn="{x:Static themes:DataPresenterGeneric.DataRecordCellArea}">
        <Setter Property="Background" Value="{StaticResource DataRecordCellAreaBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource DataRecordCellAreaBorderBrush}"/>
        <Setter Property="BackgroundHover" Value="{StaticResource DataRecordCellAreaBgHover}"/>
        <Setter Property="BorderHoverBrush" Value="{StaticResource DataRecordCellAreaBorderHoverBrush}"/>
        <Setter Property="BackgroundActive" Value="{StaticResource DataRecordCellAreaBackgroundActive}"/>
        <Setter Property="BorderActiveBrush" Value="{StaticResource DataRecordCellAreaBorderActiveBrush}"/>
        <Setter Property="BackgroundAlternate" Value="{StaticResource DataRecordCellAreaBackgroundAlternate}"/>
        <Setter Property="BorderAlternateBrush" Value="{StaticResource DataRecordCellAreaBorderAlternateBrush}"/>
        <Setter Property="BackgroundSelected" Value="{StaticResource DataRecordCellAreaBgSelected}"/>
        <Setter Property="BorderSelectedBrush" Value="{StaticResource DataRecordCellAreaBorderSelectedBrush}"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
        <Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
        <Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:DataRecordCellArea}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="timelineIsActive">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Active" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="timelineIsActive_off">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Active" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="timelineIsSelected">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Selected" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="timelineIsSelected_off">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Selected" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="timelineHover">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="timelineHover_off">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <igWindows:CardPanel>
                        <Border x:Name="Background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}"/>
                        <Border x:Name="Alternate" Background="{TemplateBinding BackgroundAlternate}" BorderBrush="{TemplateBinding BorderAlternateBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Opacity="1" Visibility="Collapsed"/>
                        <Border x:Name="Selected" Background="{TemplateBinding BackgroundSelected}" BorderBrush="{TemplateBinding BorderSelectedBrush}" BorderThickness="1" CornerRadius="{TemplateBinding CornerRadius}" Opacity="0" Visibility="Visible"/>
                        <Border x:Name="Hover" Background="{TemplateBinding BackgroundHover}" BorderBrush="{TemplateBinding BorderHoverBrush}" BorderThickness="1 1 2 2" CornerRadius="{TemplateBinding CornerRadius}" Opacity="0" Visibility="Visible"/>
                        <Border x:Name="Active" Background="{TemplateBinding BackgroundActive}" BorderBrush="{TemplateBinding BorderActiveBrush}" BorderThickness="0" CornerRadius="{TemplateBinding CornerRadius}" Visibility="Collapsed"/>
                        <ContentPresenter x:Name="CellContent" Style="{TemplateBinding ForegroundStyle}"/>

                        <!-- JM 12-28-15 TFS211627 - Added. -->
                        <Rectangle
							x:Name="DynamicDataPendingOverlay"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							SnapsToDevicePixels="True"
							Opacity="1"
                            Margin="5,2"
							Visibility="Collapsed"/>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsAlternate" Value="True"/>
                                <Condition Property="IsFilterRecord" Value="False"/>
                                <Condition Property="IsAddRecord" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Alternate" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundAlternateStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsActive" Value="True"/>
                                <Condition Property="IsFilterRecord" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="Active" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <EventTrigger RoutedEvent="igDP:DataRecordCellArea.HoverBegin">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource timelineHover}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:DataRecordCellArea.HoverEnd">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource timelineHover_off}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:DataRecordCellArea.Selected">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource timelineIsSelected}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:DataRecordCellArea.Deselected">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource timelineIsSelected_off}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <Trigger Property="IsAddRecord" Value="True">
                            <Setter TargetName="Hover" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsFilterRecord" Value="True">
                            <Setter TargetName="Hover" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="Selected" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CellContent" Property="Style" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CellContent" Property="Style" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsActive" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                        <!-- JM 12-28-15 TFS211627 - Added. -->
                        <Trigger Property="IsDynamicDataPending" Value="true">
                            <Setter Property="Visibility" TargetName="DynamicDataPendingOverlay" Value="Visible"/>
                            <Setter Property="Fill" TargetName="DynamicDataPendingOverlay" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.DataPendingOverlayBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsDynamicDataPending" Value="false">
                            <Setter Property="Visibility" TargetName="DynamicDataPendingOverlay" Value="Collapsed"/>
                            <Setter Property="Fill" TargetName="DynamicDataPendingOverlay" Value="{x:Null}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** ExpandableFieldRecordPresenter **********************************-->
    <Style TargetType="{x:Type igDP:ExpandableFieldRecordPresenter}">
        <Setter Property="Margin" Value="0,0,0,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:ExpandableFieldRecordPresenter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="sbDisplayNested">
                            <DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="ncpVisual"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="Stop">
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:0.75"/>
                            </DoubleAnimationUsingKeyFrames>

                            <DoubleAnimationUsingKeyFrames
							  BeginTime="00:00:00"
							  Storyboard.TargetName="PART_NestedContentSite"
							  Storyboard.TargetProperty="Opacity"
							  FillBehavior="HoldEnd">
                                <DiscreteDoubleKeyFrame Value="1" KeyTime="00:00:00" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <!-- Row for nested content -->
                        <!-- Expansion Checkbox -->
                        <igWindows:ExpansionIndicator x:Name="ExpansionIndicator"
                                                      RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                                      Panel.ZIndex="1"
                                                      Visibility="{TemplateBinding ExpansionIndicatorVisibility}"
                                                      Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}"
                                                      CommandParameter="{TemplateBinding Record}"
                                                      ToggleMode="Manual"
                                                      IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <!-- Expandable Field Title -->
                        <Grid
							x:Name="PART_RecordContentSite"
                            RenderTransform="{TemplateBinding FixedNearElementTransform}"
							Margin="0"
							Grid.Row="0"
							Grid.Column="1"
							Visibility="{TemplateBinding HeaderVisibility}">
                            <Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								RenderTransformOrigin="0.5,0.5"
								SnapsToDevicePixels="True"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}"
								x:Name="borderBackground">
                            </Border>
                            <Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelHighlight}}"
								x:Name="borderBackgroundHighlight">
                            </Border>
                            <ContentPresenter
                                Content="{Binding Path=(igDP:RecordPresenter.Record).Description, RelativeSource={RelativeSource TemplatedParent}}"
                                TextBlock.Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ExpandableFieldRecordPresenterForeground}}"
                                Margin="10,5"/>
                        </Grid>
                        <!-- Nested Content -->
                        <Grid
							x:Name="PART_NestedContentSite"
                            RenderTransform="{TemplateBinding FixedNearElementTransform}"
							Grid.Row="1"
							Grid.Column="1"
							Visibility="Collapsed">
                            <Border
								BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=NestedContentBackgroundBorder}}"
								BorderThickness="1"
								Background="{TemplateBinding NestedContentBackground}">
                                <ContentControl
									x:Name="ncpVisual"
                                    RenderTransform="{TemplateBinding ScrollableElementTransform}"
									Opacity="1"
									Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}"
									TextBlock.Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"
									Margin="{TemplateBinding Padding}"/>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="HasNestedContent" Value="True">
                            <Setter TargetName="PART_NestedContentSite" Property="Opacity" Value="0" />
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature-->
                        <DataTrigger Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent">
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="1" />
                        </DataTrigger>

                        <!-- MD 8/3/10 - TFS35609 -->
                        <DataTrigger Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached">
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="1" />
                        </DataTrigger>

                        <EventTrigger  RoutedEvent="igDP:RecordPresenter.ShowNestedContent">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource sbDisplayNested}" x:Name="NestedOn"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TemplateCardView">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:ExpandableFieldRecordPresenter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="sbDisplayNested">
                            <DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="ncpVisual"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="Stop">
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:0.75"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames
							  BeginTime="00:00:00"
							  Storyboard.TargetName="PART_NestedContentSite"
							  Storyboard.TargetProperty="Opacity"
							  FillBehavior="HoldEnd">
                                <DiscreteDoubleKeyFrame Value="1" KeyTime="00:00:00" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <!-- Row for nested content -->
                        <!-- Expandable Field Title -->
                        <Grid
							x:Name="PART_RecordContentSite"
							Margin="0"
							Grid.Row="0"
							Grid.Column="0"
							Visibility="{TemplateBinding HeaderVisibility}">
                            <Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								RenderTransformOrigin="0.5,0.5"
								SnapsToDevicePixels="True"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}"
								x:Name="borderBackground">
                            </Border>
                            <Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelHighlight}}"
								x:Name="borderBackgroundHighlight">
                            </Border>
                            <ContentPresenter Content="{Binding Path=(igDP:RecordPresenter.Record).Description, RelativeSource={RelativeSource TemplatedParent}}" TextBlock.Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}" Margin="10,5"/>
                        </Grid>
                        <!-- Nested Content -->
                        <Grid
							x:Name="PART_NestedContentSite"
							Grid.Row="1"
							Grid.Column="0"
							Visibility="Collapsed">
                            <Border
								BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=NestedContentBackgroundBorder}}"
								BorderThickness="1"
								Background="{TemplateBinding NestedContentBackground}">
                                <ContentControl
									x:Name="ncpVisual"
									Opacity="1"
									Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}"
									TextBlock.Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"
									Margin="{TemplateBinding Padding}"/>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasNestedContent" Value="True">
                            <Setter TargetName="PART_NestedContentSite" Property="Opacity" Value="0" />
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <EventTrigger  RoutedEvent="igDP:RecordPresenter.ShowNestedContent">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource sbDisplayNested}" x:Name="NestedOn"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** GroupByAreaFieldLabel Style **********************************-->
    <Style TargetType="{x:Type igDP:GroupByAreaFieldLabel}">
        <Setter Property="MinHeight" Value="10"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource GroupByAreaFieldLabelStroke}"/>
        <Setter Property="Background" Value="{StaticResource GroupByAreaFieldLabelBackground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="6,3,6,3.5"/>
        <Setter Property="Margin" Value="0,0,1,0"/>
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1" ScaleY="1"/>
            </Setter.Value>
        </Setter>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1" ScaleY="1"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:GroupByAreaFieldLabel}">
                    <Grid x:Name="outerGrid" SnapsToDevicePixels="True" RenderTransformOrigin="0.5,0.5">
                        <Rectangle x:Name="Bd" Stroke="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}"/>
                        <ContentPresenter Margin="{TemplateBinding Padding}" Content="{Binding Path=(igDP:GroupByAreaFieldLabel.Field).Label, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.RemovedFromAvailableList">
                            <BeginStoryboard x:Name="CollapseLabel_BeginStoryboard" Storyboard="{StaticResource CollapseLabel}"/>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.AddedToAvailableList">
                            <BeginStoryboard x:Name="AddLabelToList_BeginStoryboard" Storyboard="{StaticResource ExpandLabel}"/>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.AddedToGroupedList">
                            <BeginStoryboard x:Name="AddLabelToGroup_BeginStoryboard" Storyboard="{StaticResource ExpandLabel}"/>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GroupByLabelHighlight}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GroupByLabelHighlightBorder}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ********************************** RowSummaryOkButton Style **********************************-->
    <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, RowSummaryOkButton}" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Path HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="14" Width="16" Stretch="Fill" Opacity="1" Data="M 11.44970703125,-0.32843017578125 C11.44970703125,-0.32843017578125 5.0858154296875,6.0355224609375 5.0858154296875,6.0355224609375 5.0858154296875,6.0355224609375 2.55023193359375,3.5 2.55023193359375,3.5 2.55023193359375,3.5 0.13604736328125,5.914215087890625 0.13604736328125,5.914215087890625 0.13604736328125,5.914215087890625 5.0858154296875,10.86395263671875 5.0858154296875,10.86395263671875 5.0858154296875,10.86395263671875 13.86395263671875,2.085784912109375 13.86395263671875,2.085784912109375 13.86395263671875,2.085784912109375 11.44970703125,-0.32843017578125 11.44970703125,-0.32843017578125 z" x:Name="path" Fill="{TemplateBinding Background}"/>
                        <ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackgroundHover}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="path" Value="{StaticResource SummaryCommandButtonsBackgroundPressed}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBorder}}"/>
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackground}}"/>
    </Style>

    <!-- ********************************** RowSummaryCancelButton Style **********************************-->
    <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, RowSummaryCancelButton}" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackground}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBorder}}"/>
        <Setter Property="Foreground" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle Fill="{StaticResource TransparentBrush}"/>
                        <Path HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="14" Width="14" Stretch="Fill" Opacity="1"
							Data="M8.4446707,-0.6250003 L10.625006,1.5604857 L7.1956725,4.9880161 L10.625,8.4285631 L8.5070467,10.625005 L5.0209293,7.1613607 L1.5554626,10.625 L-0.62499386,8.4862156 L2.8442898,5.0018182 L-0.625,1.5548685 L1.602536,-0.62499505 L5.0254283,2.8090899 z"
							Fill="{TemplateBinding Background}"
							x:Name="path"/>
                        <ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
							RecognizesAccessKey="True"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="path" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackgroundHover}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="path" Value="{StaticResource SummaryCommandButtonsBackgroundPressed}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** LabelPresenter Style **********************************-->
    <Style TargetType="{x:Type igDP:LabelPresenter}">
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelBackground}}"/>
        <Setter Property="LabelHighlight" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelHighlight}}"/>
        <Setter Property="BorderThickness" Value="0,1,0,1"/>
        <Setter Property="InnerBorderBrush" Value="{StaticResource LabelPresenterInnerBorderBrush}"/>
        <Setter Property="OuterBorderBrush" Value="{StaticResource LabelPresenterOuterBorderBrush}"/>
        <Setter Property="Margin" Value="-1 0 0 0" />
        <Setter Property="Padding" Value="6,5"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelForeground}}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=Field.LabelTextAlignmentResolved, Converter={StaticResource textAlignmentToHorizontalAlignmentConverter}, RelativeSource={x:Static RelativeSource.Self}}"/>
        <Setter Property="ToolTip" Value="{Binding Path=Field.ToolTip, RelativeSource={x:Static RelativeSource.Self}}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:LabelPresenter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="SigmaFadeInFilterButton">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeOutFilterButton">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="labelCntr">
                        <Border x:Name="background" RenderTransformOrigin="0.5,0.5" CornerRadius="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelCornerRadius}}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" Background="{TemplateBinding Background}" >
                            <Border BorderBrush="{TemplateBinding InnerBorderBrush}" BorderThickness="1,0,1,0" x:Name="lineInner" SnapsToDevicePixels="True"/>
                        </Border>
                        <Border BorderBrush="{TemplateBinding OuterBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" x:Name="lineOuter" SnapsToDevicePixels="True"/>
                        <Grid x:Name="sortIndicatorAndLabel" Margin="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="LabelContent" Focusable="False" Margin="{TemplateBinding Padding}" Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <igWindows:SortIndicator x:Name="SortIndicator" Width="30" SortStatus="{TemplateBinding SortStatus}" HorizontalAlignment="Right" VerticalAlignment="Center" Grid.Column="1" Visibility="Collapsed" />
                            <igDP:SummaryButton x:Name="SummaryButton" Width="30" Field="{TemplateBinding Field}" Visibility="{Binding Path=Field.AllowSummariesResolved, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Right" Grid.Column="2" />
                            <igDP:FilterButton Width="30" x:Name="FilterButton" Field="{TemplateBinding Field}" HorizontalAlignment="Left" Grid.Column="3" Visibility="{TemplateBinding FilterButtonVisibility}"/>
                            <igDP:FixedFieldButton Width="30" x:Name="FixedButton" Field="{TemplateBinding Field}" HorizontalAlignment="Left" Grid.Column="4" Visibility="{TemplateBinding FixedButtonVisibility}"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter TargetName="background" Property="Background" Value="{StaticResource LabelPresenterHighlightasPrimaryBackground}"/>
                            <Setter TargetName="background" Property="BorderBrush" Value="{StaticResource LabelPresenterHighlightasPrimaryBorderBrush}"/>
                        </Trigger>
                        <Trigger Property="HorizontalAlignment" Value="Center">
                            <Setter Property="VerticalAlignment" TargetName="SortIndicator" Value="Top"/>
                            <Setter Property="HorizontalAlignment" TargetName="SortIndicator" Value="Center"/>
                            <Setter Property="Margin" TargetName="SortIndicator" Value="0,5,0,0"/>
                        </Trigger>
                        <Trigger Property="SortStatus" Value="Ascending">
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="SortStatus" Value="Descending">
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="background" Property="Background" Value="{StaticResource HeaderHoverBackgroundBrush}"/>
                            <Setter TargetName="lineOuter" Property="BorderBrush" Value="{StaticResource HeaderHoverBackgroundBrush}"/>
                            <Setter TargetName="lineInner" Property="BorderBrush" Value="{StaticResource HeaderHoverBackgroundBrush}"/>
                        </DataTrigger>
                        <Trigger Property="IsInFieldChooser" Value="true">
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="FilterButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="labelCntr" Property="Margin" Value="0,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsDragIndicator" Value="True">
                            <Setter Property="Padding" Value="7,4"/>
                            <Setter TargetName="labelCntr" Property="Margin" Value="2,4"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition SourceName="FilterButton" Property="HasActiveFilters" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="background" Property="Background" Value="{StaticResource HeaderHoverBackgroundBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition SourceName="FilterButton" Property="HasActiveFilters" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="background" Property="Background" Value="{StaticResource HeaderHoverBackgroundBrush}"/>
                            <Setter TargetName="FilterButton" Property="Background" Value="{Binding Path=LabelHighlight, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter TargetName="FilterButton" Property="Opacity" Value="1"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="FilterButton" Property="HasActiveFilters" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="FilterButton" Property="Opacity" Value="1"/>
                            <Setter TargetName="FilterButton" Property="Background" Value="{Binding Path=LabelHighlight, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                        <Trigger SourceName="FilterButton" Property="HasActiveFilters" Value="True">
                            <Setter TargetName="FilterButton" Property="Opacity" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** FieldGroupLabelPresenter Style **********************************-->
    <Style TargetType="{x:Type igDP:FieldGroupLabelPresenter}">
        <Setter Property="Padding" Value="7,4"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelBackgroundKey}}"/>
        <Setter Property="InnerBorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelInnerBorderKey}}"/>
        <Setter Property="OuterBorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelOuterBorderKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelForegroundKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=FieldGroup.LabelTextAlignmentResolved, Converter={StaticResource textAlignmentToHorizontalAlignmentConverter}, RelativeSource={x:Static RelativeSource.Self}}"/>
        <Setter Property="ToolTip" Value="{Binding Path=FieldGroup.ToolTip, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:FieldGroupLabelPresenter}">
                    <Grid x:Name="labelCntr" Background="#00000000">
                        <!-- Background Bar -->
                        <Border
							Width="Auto"
							Height="Auto"
							RenderTransformOrigin="0.5,0.5"
							CornerRadius="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelCornerRadiusKey}}"
							SnapsToDevicePixels="True"
							Background="{TemplateBinding Background}"
							x:Name="background"/>
                        <Border
							BorderBrush="{TemplateBinding OuterBorderBrush}"
							BorderThickness="1"
							CornerRadius="1.55015910897703"
							Background="Transparent"
							Margin="0,0,0,0"
							x:Name="lineOuter"
							Width="Auto"
							Height="Auto"
							SnapsToDevicePixels="True"/>
                        <Border
							BorderBrush="{TemplateBinding InnerBorderBrush}"
							BorderThickness="1"
							CornerRadius="0.550159108977027"
							Background="Transparent"
							Margin="1,1,1,1"
							x:Name="lineInner"
							Width="Auto"
							Height="Auto"
							SnapsToDevicePixels="True"/>
                        <Grid
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							x:Name="labelAndFixedButton">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <igWindows:ExpansionIndicator
								x:Name="ExpansionIndicator"
								Grid.Column="0"
								Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
                                Command="{x:Static igDP:DataPresenterCommands.ToggleFieldGroupIsCollapsed}"
                                CommandParameter="{TemplateBinding FieldGroup}"
                                ToggleMode="Manual"
								IsChecked="{Binding Path=FieldGroup.IsCollapsed, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}"/>
                            <ContentPresenter
								x:Name="LabelContent"
								Focusable="False"
								Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
								ContentTemplate="{TemplateBinding ContentTemplate}"
								ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
								Grid.Column="1"
								d:LayoutOverrides="Width, Height"
								VerticalAlignment="Center"/>
                            <!-- JM 1/14/09 - Fixed Fields Functionality -->
                            <igDP:FixedFieldButton
								x:Name="FixedButton"
								Field="{TemplateBinding FieldGroup}"
								Visibility="{TemplateBinding FixedButtonVisibility}"
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								Width="Auto"
								Grid.Column="2"
								Margin="2,0,2,0"
								Opacity="1"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <!--SSP 6/23/09 - NAS9.2 Field Chooser
							If the label is in a field chooser then hide the sort indicator, filter button and
							summary button. Note that the fixed button is collapsed in code in label presenter
							by coercing the FixedButtonVisibility property to be Collapsed.-->
                        <Trigger Property="IsInFieldChooser" Value="true">
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="labelCntr" Property="Margin" Value="0,0,0,0"/>
                        </Trigger>

                        <Trigger Property="IsDragIndicator" Value="True">
                            <Setter Property="Padding" Value="7,4"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** SummaryRecordPresenter Style **********************************-->
    <Style TargetType="{x:Type igDP:SummaryRecordPresenter}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
    </Style>

    <!-- ********************************** SummaryRecordPrefixArea Style **********************************-->
    <Style TargetType="{x:Type igDP:SummaryRecordPrefixArea}">
    </Style>

    <!-- ********************************** HeaderPrefixArea Style **********************************-->
    <!-- JJD 04/18/16 - Cross Field Record Filtering
                      Moved to DataPresenterGeneric.xaml so it could make use of
                      Menu and MenuItem style definitions shared by FixedFieldButton and FixedRecordButton  -->

    <!-- ********************************** RecordListControl Style **********************************-->
    <Style TargetType="{x:Type igDP:RecordListControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:RecordListControl}">
                    <ScrollViewer Style="{StaticResource ScrollViewerStyle}"
                        RenderTransform="{TemplateBinding FixedNearElementTransform}"
						CanContentScroll="true"
						Focusable="false"
						HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
						VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}">
                        <ItemsPresenter RenderTransform="{TemplateBinding ScrollableElementTransform}"/>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** RecordSelector Style **********************************-->
    <Style TargetType="{x:Type igDP:RecordSelector}">
        <Setter Property="Background" Value="#FF000000"/>
        <Setter Property="BorderBrush" Value="#FFCCCCCC"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="3,3,3,3"/>
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:RecordSelector}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="MouseEnter">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="selectorArrow" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="MouseLeave">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="selectorArrow" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0.05"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="RecordActiveTrue">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="selectorArrow_Active" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FixedRecordBtn" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="RecordActiveFalse">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="selectorArrow_Active" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FixedRecordBtn" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="0" Value="0.4"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HideSelector">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="selectors" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeIn">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FixedRecordBtn" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeOut">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="FixedRecordBtn" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="0" Value="0.4"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="MainBorder" Background="#00FFFFFF" Cursor="{TemplateBinding Cursor}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Border  Grid.ColumnSpan="4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" />
                        <!-- iDataErrorInfo -->
                        <Border x:Name="errorBd" Width="2" Grid.ColumnSpan="4" Visibility="Collapsed" HorizontalAlignment="Right"/>

                        <!-- Selector Arrows -->
                        <Grid x:Name="selectors" Opacity="1" HorizontalAlignment="Center" VerticalAlignment="Center" Width="30" Height="30">
                            <Path x:Name="selectorArrow" RenderTransformOrigin="0.5,0.5" Fill="{StaticResource ArrowNormalFill}" Stretch="Fill" Stroke="#00CCCCCC" StrokeThickness="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Width="6" Height="10" Cursor="{TemplateBinding Cursor}" Data="M60,40L60,20 70,30z"
							Visibility="Visible" Opacity="0.05"/>
                            <Path x:Name="selectorDataChanged" Margin="0,0,0,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  Width="6" Height="10" Stretch="Fill" Opacity="1" Data="M60,40L60,20 70,30z" Fill="{StaticResource ArrowNormalFill}"
							Visibility="Collapsed"/>
                            <Path x:Name="selectorAddRecord" Margin="0,0,0,0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"   Width="6" Height="10"  Stretch="Fill" Opacity="1" Data="M60,40L60,20 70,30z" Fill="{StaticResource ArrowNormalFill}"
							Visibility="Collapsed" RenderTransformOrigin="0.5,0.5"/>
                            <Path x:Name="selectorArrow_Active" RenderTransformOrigin="0.5,0.5" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:RecordSelector}, ResourceId=SelectorArrowActiveFill}}" Stretch="Fill" Stroke="#00CCCCCC" StrokeThickness="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  Width="6" Height="10" Cursor="{TemplateBinding Cursor}" Data="M60,40L60,20 70,30z"
							Visibility="Visible" Opacity="0"/>
                            <!-- AS 7/9/10 TFS35642 - Moved the Command into the trigger -->
                            <Button x:Name="ClearButton" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  Style="{DynamicResource {x:Static igDP:DataPresenterBase.FilterRecordClearButtonStyleKey}}"
							Visibility="{TemplateBinding FilterClearButtonVisibility}"/>
                        </Grid>

                        <!-- IsAddRecord and IsDataChanged Icons (with mini-selectors) -->
                        <Grid x:Name="icons" Height="12" Width="12" HorizontalAlignment="Left" VerticalAlignment="Center">
                            <Path x:Name="addRecordOuter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  Height="6" Width="6" Stretch="Fill" Opacity="1" Data="M 9,4 C9,4 7,4 7,4 7,4 7,7 7,7 7,7 4,7 4,7 4,7 4,9 4,9 4,9 7,9 7,9 7,9 7,12 7,12 7,12 9,12 9,12 9,12 9,9 9,9 9,9 12,9 12,9 12,9 12,7 12,7 12,7 9,7 9,7 9,7 9,4 9,4 z"
							Fill="{StaticResource ArrowNormalFill}" SnapsToDevicePixels="True" Visibility="Collapsed" />
                            <Path x:Name="addRecordInner" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  Height="6" Width="6" Stretch="Fill" Opacity="1" Data="M 9,4 C9,4 7,4 7,4 7,4 7,7 7,7 7,7 4,7 4,7 4,7 4,9 4,9 4,9 7,9 7,9 7,9 7,12 7,12 7,12 9,12 9,12 9,12 9,9 9,9 9,9 12,9 12,9 12,9 12,7 12,7 12,7 9,7 9,7 9,7 9,4 9,4 z" Fill="{StaticResource ArrowNormalFill}"
							SnapsToDevicePixels="True" Visibility="Collapsed" />
                            <Path x:Name="dataChangedActive" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  Height="6" Width="6" Stretch="Fill" Opacity="1" Data="M 11.762499809265137,4.190000057220459 C11.762499809265137,4.190000057220459 13.622968673706055,5.4495320320129395 13.622968673706055,5.4495320320129395 13.622968673706055,5.4495320320129395 10.8100004196167,8.90609359741211 10.8100004196167,8.90609359741211 10.8100004196167,8.90609359741211 15.220001220703125,8.364218711853027 15.220001220703125,8.364218711853027 15.220001220703125,8.364218711853027 15.220001220703125,10.575780868530273 15.220001220703125,10.575780868530273 15.220001220703125,10.575780868530273 10.8100004196167,10.07796859741211 10.8100004196167,10.07796859741211 10.8100004196167,10.07796859741211 13.622968673706055,13.51953125 13.622968673706055,13.51953125 13.622968673706055,13.51953125 11.762499809265137,14.75 11.762499809265137,14.75 11.762499809265137,14.75 9.842968940734863,10.575780868530273 9.842968940734863,10.575780868530273 9.842968940734863,10.575780868530273 7.952969074249268,14.75 7.952969074249268,14.75 7.952969074249268,14.75 6.09250020980835,13.51953125 6.09250020980835,13.51953125 6.09250020980835,13.51953125 8.920000076293945,10.07796859741211 8.920000076293945,10.07796859741211 8.920000076293945,10.07796859741211 4.510000228881836,10.575780868530273 4.510000228881836,10.575780868530273 4.510000228881836,10.575780868530273 4.510000228881836,8.364218711853027 4.510000228881836,8.364218711853027 4.510000228881836,8.364218711853027 8.920000076293945,8.90609359741211 8.920000076293945,8.90609359741211 8.920000076293945,8.90609359741211 6.09250020980835,5.4495320320129395 6.09250020980835,5.4495320320129395 6.09250020980835,5.4495320320129395 7.952969074249268,4.190000057220459 7.952969074249268,4.190000057220459 7.952969074249268,4.190000057220459 9.842968940734863,8.247031211853027 9.842968940734863,8.247031211853027 9.842968940734863,8.247031211853027 11.762499809265137,4.190000057220459 11.762499809265137,4.190000057220459 z"
							Fill="{StaticResource ArrowNormalFill}" Visibility="Collapsed"/>
                            <Path x:Name="dataChanged" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  Height="6" Width="6" Stretch="Fill" Opacity="1" Data="M 9.762499809265137,2.690000057220459 C9.762499809265137,2.690000057220459 11.622968673706055,3.9495320320129395 11.622968673706055,3.9495320320129395 11.622968673706055,3.9495320320129395 8.8100004196167,7.406094074249268 8.8100004196167,7.406094074249268 8.8100004196167,7.406094074249268 13.220001220703125,6.8642191886901855 13.220001220703125,6.8642191886901855 13.220001220703125,6.8642191886901855 13.220001220703125,9.075780868530273 13.220001220703125,9.075780868530273 13.220001220703125,9.075780868530273 8.8100004196167,8.57796859741211 8.8100004196167,8.57796859741211 8.8100004196167,8.57796859741211 11.622968673706055,12.01953125 11.622968673706055,12.01953125 11.622968673706055,12.01953125 9.762499809265137,13.25 9.762499809265137,13.25 9.762499809265137,13.25 7.842968940734863,9.075780868530273 7.842968940734863,9.075780868530273 7.842968940734863,9.075780868530273 5.952969074249268,13.25 5.952969074249268,13.25 5.952969074249268,13.25 4.09250020980835,12.01953125 4.09250020980835,12.01953125 4.09250020980835,12.01953125 6.920000076293945,8.57796859741211 6.920000076293945,8.57796859741211 6.920000076293945,8.57796859741211 2.509999990463257,9.075780868530273 2.509999990463257,9.075780868530273 2.509999990463257,9.075780868530273 2.509999990463257,6.8642191886901855 2.509999990463257,6.8642191886901855 2.509999990463257,6.8642191886901855 6.920000076293945,7.406094074249268 6.920000076293945,7.406094074249268 6.920000076293945,7.406094074249268 4.09250020980835,3.9495320320129395 4.09250020980835,3.9495320320129395 4.09250020980835,3.9495320320129395 5.952969074249268,2.690000057220459 5.952969074249268,2.690000057220459 5.952969074249268,2.690000057220459 7.842968940734863,6.747031211853027 7.842968940734863,6.747031211853027 7.842968940734863,6.747031211853027 9.762499809265137,2.690000057220459 9.762499809265137,2.690000057220459 z"
							SnapsToDevicePixels="True" Fill="{StaticResource ArrowNormalFill}" Visibility="Collapsed" />
                            <Path x:Name="addRecordActiveOuter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  Height="6" Width="6" Stretch="Fill" Opacity="1" Data="M 9,4 C9,4 7,4 7,4 7,4 7,7 7,7 7,7 4,7 4,7 4,7 4,9 4,9 4,9 7,9 7,9 7,9 7,12 7,12 7,12 9,12 9,12 9,12 9,9 9,9 9,9 12,9 12,9 12,9 12,7 12,7 12,7 9,7 9,7 9,7 9,4 9,4 z"
							Fill="{StaticResource ArrowNormalFill}"  SnapsToDevicePixels="True" Visibility="Collapsed"/>
                            <Path x:Name="addRecordActiveInner" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  Height="6" Width="6" Stretch="Fill" Opacity="1" Data="M 10,5 C10,5 8,5 8,5 8,5 8,8 8,8 8,8 5,8 5,8 5,8 5,10 5,10 5,10 8,10 8,10 8,10 8,13 8,13 8,13 10,13 10,13 10,13 10,10 10,10 10,10 13,10 13,10 13,10 13,8 13,8 13,8 10,8 10,8 10,8 10,5 10,5 z" Fill="{StaticResource ArrowNormalFill}"
							 SnapsToDevicePixels="True" Visibility="Collapsed"/>
                        </Grid>
                        <!-- JJD 11/26/13 NA 2014 Vol 1 - Record Number   -->
                        <igDP:RecordSelectorNumber x:Name="RecordNumber" Grid.Column="1"                                         
                            Visibility="{Binding Path=RecordNumber, RelativeSource={RelativeSource Self}, Converter={StaticResource emptyToCollapsed}}"
                            />

                        <igDP:FixedRecordButton x:Name="FixedRecordBtn" Grid.Column="2" IsFixedOnTopAllowed="{TemplateBinding IsFixedOnTopAllowed}" IsFixedOnBottomAllowed="{TemplateBinding IsFixedOnBottomAllowed}" VerticalAlignment="Center" Opacity="0.4" Visibility="{TemplateBinding FixedButtonVisibility}"/>
                        <Rectangle x:Name="OrientationHorizontalSep" Width="1" Fill="#FFE7E7E7" HorizontalAlignment="Right" Visibility="Collapsed" Grid.ColumnSpan="4"/>
                        <igWindows:AutomationControl x:Name="errorIcon" Grid.Column="3" Visibility="Collapsed" Margin="2,0,4,0" Style="{DynamicResource {x:Static igDP:DataPresenterBase.DataErrorIconStyleKey}}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="UIElement.MouseEnter">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource MouseEnter}"/>
                                <BeginStoryboard Storyboard="{StaticResource SigmaFadeIn}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="UIElement.MouseLeave">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource MouseLeave}"/>
                                <BeginStoryboard Storyboard="{StaticResource SigmaFadeOut}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:RecordSelector.Activated">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource RecordActiveTrue}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:RecordSelector.Deactivated">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource RecordActiveFalse}"/>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <Trigger Property="IsFilterRecord" Value="True">
                            <Setter Property="Visibility" TargetName="selectorArrow" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="selectorArrow_Active" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="FilterClearButtonVisibility" Value="Visible">
                            <Setter Property="Command" TargetName="ClearButton" Value="{x:Static igDP:DataPresenterCommands.ClearActiveRecordCellFilters}"/>
                        </Trigger>
                        <Trigger Property="IsAddRecord" Value="True">
                            <Setter TargetName="addRecordOuter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="addRecordInner" Property="Visibility" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="selectorAddRecord" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="selectorArrow" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="selectorArrow_Active" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsDataChanged" Value="True"/>
                                <Condition Property="IsFilterRecord" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="dataChanged" Property="Visibility" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="selectorDataChanged" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="selectorArrow" Value="Collapsed"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsAddRecord" Value="True"/>
                                <Condition Property="IsDataChanged" Value="True"/>
                                <Condition Property="IsFilterRecord" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="dataChanged" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="dataChangedActive" Value="Collapsed"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasDataError" Value="True"/>
                                <Condition Property="IsDataErrorDisplayModeIcon" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="errorIcon" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="errorIcon" Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=DataError}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasDataError" Value="True"/>
                                <Condition Property="IsDataErrorDisplayModeHighlight" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="errorBd" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.DataErrorHighlightBorderBrushKey}}"/>
                            <Setter TargetName="errorBd" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="errorBd" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="MainBorder" Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=DataError}"/>
                        </MultiTrigger>
                        <Trigger Property="Location" Value="AboveCellArea">
                            <Setter Property="Grid.Column" TargetName="selectors" Value="1"/>
                            <Setter Property="HorizontalAlignment" TargetName="selectors" Value="Center"/>
                            <Setter Property="Margin" TargetName="selectors" Value="0,0,15,0"/>
                            <Setter Property="Grid.Column" TargetName="icons" Value="1"/>
                            <Setter Property="HorizontalAlignment" TargetName="icons" Value="Left"/>
                            <Setter Property="Grid.Column" TargetName="errorIcon" Value="1"/>
                            <!--JJD 11/26/13 NA 2014 Vol 1 - Record Number-->
                            <Setter Property="Grid.Column" TargetName="RecordNumber" Value="0"/>
                            <Setter Property="HorizontalAlignment" TargetName="errorIcon" Value="Left"/>
                            <Setter Property="HorizontalAlignment" TargetName="FixedRecordBtn" Value="Center"/>
                            <Setter Property="Margin" TargetName="FixedRecordBtn" Value="15,0,0,0"/>
                            <Setter Property="Background" TargetName="MainBorder" Value="#FFF5F5F5"/>
                            <Setter Property="Visibility" TargetName="OrientationHorizontalSep" Value="Visible"/>
                            <Setter TargetName="errorBd" Property="Width" Value="Auto"/>
                            <Setter TargetName="errorBd" Property="Height" Value="2"/>
                            <Setter TargetName="errorBd" Property="HorizontalAlignment" Value="Stretch"/>
                            <Setter TargetName="errorBd" Property="VerticalAlignment" Value="Bottom"/>
                            <Setter TargetName="addRecordActiveOuter" Property="HorizontalAlignment" Value="Center"/>
                            <Setter TargetName="addRecordActiveInner" Property="HorizontalAlignment" Value="Center"/>
                            <Setter TargetName="addRecordOuter" Property="HorizontalAlignment" Value="Center"/>
                            <Setter TargetName="addRecordInner" Property="HorizontalAlignment" Value="Center"/>
                            <Setter TargetName="icons" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="icons" Property="HorizontalAlignment" Value="Center"/>
                            <Setter Property="RenderTransform" TargetName="selectorArrow">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="90"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransform" TargetName="selectorArrow_Active">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="90"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransform" TargetName="selectorAddRecord">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="90"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="Location" Value="BelowCellArea">
                            <Setter Property="Grid.Column" TargetName="selectors" Value="1"/>
                            <Setter Property="HorizontalAlignment" TargetName="selectors" Value="Center"/>
                            <Setter Property="Margin" TargetName="selectors" Value="0,0,15,0"/>
                            <Setter Property="Grid.Column" TargetName="icons" Value="1"/>
                            <!--JJD 11/26/13 NA 2014 Vol 1 - Record Number-->
                            <Setter Property="Grid.Column" TargetName="RecordNumber" Value="0"/>
                            <Setter Property="HorizontalAlignment" TargetName="icons" Value="Left"/>
                            <Setter Property="Grid.Column" TargetName="errorIcon" Value="1"/>
                            <Setter Property="HorizontalAlignment" TargetName="errorIcon" Value="Left"/>
                            <Setter Property="HorizontalAlignment" TargetName="FixedRecordBtn" Value="Center"/>
                            <Setter Property="Margin" TargetName="FixedRecordBtn" Value="15,0,0,0"/>
                            <Setter Property="Background" TargetName="MainBorder" Value="#FFF5F5F5"/>
                            <Setter Property="Visibility" TargetName="OrientationHorizontalSep" Value="Visible"/>
                            <Setter TargetName="errorBd" Property="Width" Value="Auto"/>
                            <Setter TargetName="errorBd" Property="Height" Value="2"/>
                            <Setter TargetName="errorBd" Property="HorizontalAlignment" Value="Stretch"/>
                            <Setter TargetName="errorBd" Property="VerticalAlignment" Value="Top"/>
                            <Setter TargetName="addRecordActiveOuter" Property="HorizontalAlignment" Value="Center"/>
                            <Setter TargetName="addRecordActiveInner" Property="HorizontalAlignment" Value="Center"/>
                            <Setter TargetName="addRecordOuter" Property="HorizontalAlignment" Value="Center"/>
                            <Setter TargetName="addRecordInner" Property="HorizontalAlignment" Value="Center"/>
                            <Setter TargetName="icons" Property="Grid.Column" Value="1"/>
                            <Setter TargetName="icons" Property="HorizontalAlignment" Value="Center"/>
                            <Setter Property="RenderTransform" TargetName="selectorArrow">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="-90"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransform" TargetName="selectorArrow_Active">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="-90"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransform" TargetName="selectorAddRecord">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="-90"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="Location" Value="RightOfCellArea">
                            <Setter Property="RenderTransform" TargetName="selectorArrow">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="180"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransform" TargetName="selectorArrow_Active">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="180"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransform" TargetName="selectorAddRecord">
                                <Setter.Value>
                                    <TransformGroup>
                                        <RotateTransform Angle="180"/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="FixedButtonVisibility" Value="Collapsed"/>
                                <Condition Property="Location" Value="AboveCellArea"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" TargetName="selectors" Value="0"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="FixedButtonVisibility" Value="Collapsed"/>
                                <Condition Property="Location" Value="BelowCellArea"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" TargetName="selectors" Value="0"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- JJD 11/26/13 NA 2014 Vol 1 - Record Number                                                 -->
    <!-- ************************* RecordSelectorNumber Style **********************************-->
    <Style TargetType="{x:Type igDP:RecordSelectorNumber}">
        <Setter Property="Margin" Value="1,1,3,2"/>
    </Style>

    
    <!-- ********************************** ExpanderBar Style **********************************-->
    <Style TargetType="{x:Type igWindows:ExpanderBar}" BasedOn="{x:Static igThemes:PrimitivesGeneric.ExpanderBar}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ExpanderBarBackgroundKey}}"/>
        <Setter Property="BackgroundHover" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ExpanderBarBackgroundHoverKey}}"/>
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="BorderHoverBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.GroupByNavBorderBrushKey}}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="MinHeight" Value="10"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Focusable" Value="False"/>
    </Style>

    <!-- ********************************** CheckBox Style **********************************-->
    <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="14.667" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource CheckBoxFill}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CheckboxNormalStroke}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Padding" Value="6 0 0 0" />
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="MinWidth" Value="20"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent" SnapsToDevicePixels="true" VerticalAlignment="Center">
                        <BulletDecorator.Bullet>
                            <Grid>
                                <Rectangle x:Name="normal" Opacity="1" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" Fill="{TemplateBinding Background}" Width="18" Height="18"/>
                                <Path x:Name="checkBox" Fill="{StaticResource CheckboxPressedStroke}" Height="10" Width="12" Stretch="Fill" Visibility="Collapsed" Data="M 1145.607177734375,430 C1145.607177734375,430 1141.449951171875,435.0772705078125 1141.449951171875,435.0772705078125 1141.449951171875,435.0772705078125 1139.232177734375,433.0999755859375 1139.232177734375,433.0999755859375 1139.232177734375,433.0999755859375 1138,434.5538330078125 1138,434.5538330078125 1138,434.5538330078125 1141.482177734375,438 1141.482177734375,438 1141.482177734375,438 1141.96875,437.9375 1141.96875,437.9375 1141.96875,437.9375 1147,431.34619140625 1147,431.34619140625 1147,431.34619140625 1145.607177734375,430 1145.607177734375,430 z"  />
                                <Rectangle x:Name="IndeterminateCheck" Fill="{StaticResource CheckboxHoverStroke}" Height="3" Width="8" Opacity="0"/>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="normal" Value="{StaticResource CheckboxHoverStroke}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="checkBox" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="IndeterminateCheck" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** SummaryCalculatorSelectionControl Style **********************************-->
    <Style TargetType="{x:Type igDP:SummaryCalculatorSelectionControl}">
        <Style.Resources>
            <DataTemplate DataType="{x:Type igDP:SummaryCalculatorHolder}">
                <igWindows:CardPanel x:Name="mainPanel">
                    <Grid Margin="0,0,0,5">
                        <CheckBox x:Name="checkBox" AutomationProperties.AutomationId="{Binding Path=Calculator.Name, Converter={StaticResource stringFormatConverter}, ConverterParameter=\{0\}_CheckBox}" IsChecked="{Binding Path=IsChecked, Mode=TwoWay}" Style="{StaticResource CheckBoxStyle}"  FocusVisualStyle="{x:Null}">
                            <StackPanel>
                                <Image Source="{Binding Path=Calculator.Image}" Margin="5,0,0,0"/>
                                <TextBlock Text="{Binding Path=Calculator.DisplayName}" Foreground="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCSCItemForeground}}" Margin="5,0"/>
                            </StackPanel>
                        </CheckBox>
                    </Grid>
                    <Grid Margin="0,0,0,10">
                        <RadioButton x:Name="radioButton" AutomationProperties.AutomationId="{Binding Path=Calculator.Name, Converter={StaticResource stringFormatConverter}, ConverterParameter=\{0\}_RadioButton}" Visibility="Collapsed" IsChecked="{Binding Path=IsChecked, Mode=TwoWay}" FocusVisualStyle="{x:Null}">
                            <StackPanel>
                                <Image Source="{Binding Path=Calculator.Image}" Margin="5,0,0,0"/>
                                <TextBlock Text="{Binding Path=Calculator.DisplayName}" Foreground="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCSCItemForeground}}" Margin="5,0"/>
                            </StackPanel>
                        </RadioButton>
                    </Grid>
                    <Rectangle Visibility="{Binding Path=IsKeyboardFocusWithin, ElementName=mainPanel, Converter={StaticResource BoolToVisConverter}}" Margin="17,0,0,3" Stroke="#D0000000" StrokeThickness="0" StrokeDashArray="0"/>
                </igWindows:CardPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Path=SelectionControl.AllowMultipleSummaries}" Value="False">
                        <Setter TargetName="checkBox" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="radioButton" Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
        </Style.Resources>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:SummaryCalculatorSelectionControl}">
                    <ItemsControl ItemsSource="{TemplateBinding SummaryCalculatorHolders}" KeyboardNavigation.DirectionalNavigation="Contained" Focusable="False" Margin="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="1,1,1,1"/>
        <Setter Property="Padding" Value="3,3,3,5"/>
    </Style>

    <!-- ********************************** SummaryButton Style **********************************-->
    <Style TargetType="{x:Type igDP:SummaryButton}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Padding" Value="3,0"/>
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBorder}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:SummaryButton}">
                    <Grid Background="Transparent">
                        <Grid>
                            <Path x:Name="path" Fill="{TemplateBinding Foreground}"  Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Fill" Data="M 0,0 C0,0 5,0 5,0 5,0 5,1 5,1 5,1 2,1 2,1 2,1 4,3.5 4,3.5 4,3.5 2,6 2,6 2,6 5,6 5,6 5,6 5,7 5,7 5,7 0,7 0,7 0,7 0,6 0,6 0,6 2,3.5625 2,3.5625 2,3.5625 0,1 0,1 0,1 0,0 0,0 z"  Width="8" Height="10"/>
                        </Grid>
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" VerticalOffset="0" HorizontalOffset="0" IsOpen="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" StaysOpen="False" PopupAnimation="None" SnapsToDevicePixels="True">
                            <Border BorderBrush="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonPopupBorder}}" x:Name="border" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabNavigation="Contained" FocusManager.IsFocusScope="True" BorderThickness="1" Background="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonPopupBackground}}">
                                <Grid>
                                    <StackPanel Margin="5,5,5,5">
                                        <igDP:SummaryCalculatorSelectionControl x:Name="CalculatorSelectionControl" Field="{TemplateBinding Field}"/>
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="2">
                                            <Button x:Name="RowSummaryOkButton" Width="30" Height="30" Content="Ok" IsDefault="True" Margin="0,0,5,0" Style="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, RowSummaryOkButton}}" />
                                            <Button x:Name="RowSummaryCancelButton" Width="30" Height="30" Content="Cancel" IsCancel="True" Style="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, RowSummaryCancelButton}}" />
                                        </StackPanel>
                                    </StackPanel>
                                </Grid>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" >
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackgroundHover}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** String Template **********************************-->
    <DataTemplate x:Key="stringTemplate" DataType="{x:Type System:String}">
        <TextBlock Text="{Binding}" />
    </DataTemplate>

    <!-- ********************************** RecordFilterTreeItem Template **********************************-->
    <HierarchicalDataTemplate DataType="{x:Type igDP:RecordFilterTreeItem}" ItemsSource="{Binding Items}">
        <CheckBox Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}" Focusable="False" IsChecked="{Binding IsChecked, Mode=TwoWay}" Content="{Binding DisplayText}" Style="{StaticResource CheckBoxStyle}"
                  ContentTemplate="{StaticResource stringTemplate}"
                />
    </HierarchicalDataTemplate>

    <!-- ********************************** GroupByRecordPresenter Style **********************************-->
    <Style TargetType="{x:Type igDP:GroupByRecordPresenter}">
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelForeground}}"/>
        <Setter Property="Background" Value="#00FFFFFF"/>
        <Setter Property="Margin" Value="0,0,0,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:GroupByRecordPresenter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="sbDisplayNested">
                            <DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="ncpVisual"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="HoldEnd">
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:0.75"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpVisual" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="00:00:00"/>
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="00:00:0.75"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpMask" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="00:00:00"/>
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="00:00:0.75"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="sbHideNested">
                            <DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="NestedContentPresenter"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="HoldEnd">
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:00.15"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="row0" Height="Auto"/>
                            <RowDefinition x:Name="row1" Height="Auto"/>
                            <RowDefinition x:Name="row2" Height="*"/>
                        </Grid.RowDefinitions>
                        <igWindows:ExpansionIndicator x:Name="ExpansionIndicator"
                                                      RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                                      Panel.ZIndex="1"
 							                          Grid.Row="1"
                                                      Visibility="{TemplateBinding ExpansionIndicatorVisibility}"
                                                      Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}"
                                                      CommandParameter="{TemplateBinding Record}"
                                                      ToggleMode="Manual"
                                                      IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ContentPresenter
								x:Name="PART_HeaderContentSite"
								Grid.Row="0"
								Grid.Column="1"
								Content="{TemplateBinding HeaderContent}"
								Visibility="{Binding Path=HasHeaderContent, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource TemplatedParent}}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								d:IsHidden="True"/>
                        <!-- Record content site -->
                        <Grid
							x:Name="PART_RecordContentSite"
                            RenderTransform="{TemplateBinding FixedNearElementTransform}"
							Margin="0"
							Grid.Row="1"
							Grid.Column="1"
							Visibility="Collapsed">
                            <Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								RenderTransformOrigin="0.5,0.5"
								SnapsToDevicePixels="True"
								Background="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelBackground}}">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle StrokeThickness="0"
										Stroke="#44000000"
										Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <Border
								x:Name="highlight"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								Background="{StaticResource GroupByRecordCellValuePresenterBg}">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle
										Stroke="#44000000"
										StrokeThickness="0"
										Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <StackPanel Orientation="Vertical">
                                <ContentControl
									Style="{StaticResource LabelContentStyle}"
									Content="{Binding Path=Description, RelativeSource={RelativeSource TemplatedParent}}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                                <igDP:GroupBySummariesPresenter
                                    RenderTransform="{TemplateBinding ScrollableElementTransform}"
									HorizontalAlignment="Left"
									x:Name="GroupBySummariesPresenter"
									Visibility="Collapsed"
									GroupByRecord="{TemplateBinding Record}"/>
                            </StackPanel>
                        </Grid>
                        <!-- Nested Content -->
                        <Grid
							x:Name="PART_NestedContentSite"
							Grid.Row="2"
							Grid.Column="1"
							Visibility="Collapsed">
                            <Border
                                BorderBrush="#44102975"
                                BorderThickness="0"
                                RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                Background="Transparent">
                                <ContentControl
                                    RenderTransform="{TemplateBinding ScrollableElementTransform}"
                                    x:Name="NestedContentPresenter"
                                    Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}"
                                    Margin="0,0,0,5"/>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.AutoFitToWidth, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.ColumnSpan" Value="2"/>
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.ColumnSpan" Value="2"/>
                            <Setter TargetName="GroupBySummariesPresenter" Property="HorizontalAlignment" Value="Stretch"/>
                            <Setter TargetName="PART_HeaderContentSite" Property="HorizontalAlignment" Value="Stretch"/>
                        </MultiDataTrigger>
                        <Trigger Property="ShouldDisplayGroupByRecordContent" Value="true">
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ShouldDisplayGroupByRecordContent" Value="false">
                            <Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="ShouldDisplaySummaryCells" Value="true">
                            <Setter TargetName="GroupBySummariesPresenter" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical"/>
                                <Condition Property="ShouldDisplayGroupByRecordContent" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="2"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Horizontal"/>
                                <Condition Property="ShouldDisplayGroupByRecordContent" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="HasNestedContent" Value="true">
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="1" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="2" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="2" />
                            <Setter TargetName="row0" Property="Height" Value="*" />
                            <Setter TargetName="row2" Property="Height" Value="Auto" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached"/>
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="1" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="2" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="2" />
                            <Setter TargetName="row0" Property="Height" Value="*" />
                            <Setter TargetName="row2" Property="Height" Value="Auto" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TemplateCardView">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:GroupByRecordPresenter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="sbDisplayNested">
                            <DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="ncpVisual"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="HoldEnd">
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00"/>
                                <DiscreteDoubleKeyFrame Value="0" KeyTime="00:00:00.25"/>
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:0.75"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpVisual" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="00:00:00"/>
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="00:00:0.75"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpMask" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Visible}" KeyTime="00:00:00"/>
                                <DiscreteObjectKeyFrame Value="{x:Static Visibility.Collapsed}" KeyTime="00:00:0.75"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="sbHideNested">
                            <DoubleAnimationUsingKeyFrames
								BeginTime="00:00:00"
								Storyboard.TargetName="NestedContentPresenter"
								Storyboard.TargetProperty="Opacity"
								FillBehavior="HoldEnd">
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5" Value="1" KeyTime="00:00:00.15"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" MinWidth="20"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <!-- Row for nested content -->
                        <!-- Record content site -->
                        <Grid
							x:Name="PART_RecordContentSite"
							Margin="0"
							Grid.Row="1"
							Grid.Column="0"
							Visibility="Collapsed"
							d:LayoutOverrides="GridBox">
                            <!-- Background Bar -->
                            <Border
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								RenderTransformOrigin="0.5,0.5"
								SnapsToDevicePixels="True"
								Background="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelBackground}}">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle
										Stroke="#44000000"
										StrokeThickness="1"
										Fill="Transparent"/>
                                    <Rectangle
										Margin="1"
										Stroke="#44FFFFFF"
										StrokeThickness="1"
										Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <!-- End Background Bar -->
                            <Border
								x:Name="highlight"
								HorizontalAlignment="Stretch"
								VerticalAlignment="Stretch"
								Width="Auto"
								Height="Auto"
								Background="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelHighlight}}">
                                <Grid Margin="0,0,0,0" Width="Auto" Height="Auto">
                                    <Rectangle
										Stroke="#44000000"
										StrokeThickness="1"
										Fill="Transparent"/>
                                    <Rectangle
										Margin="1"
										Stroke="#44FFFFFF"
										StrokeThickness="1"
										Fill="Transparent"/>
                                </Grid>
                            </Border>
                            <!-- Label Text -->
                            <StackPanel Orientation="Vertical">
                                <ContentControl
									Style="{StaticResource LabelContentStyle}"
									Content="{Binding Path=Description, RelativeSource={RelativeSource TemplatedParent}}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                                <igDP:GroupBySummariesPresenter
									Grid.Row="1"
									HorizontalAlignment="Left"
									x:Name="GroupBySummariesPresenter"
									Visibility="Collapsed"
									GroupByRecord="{TemplateBinding Record}"/>
                            </StackPanel>
                        </Grid>
                        <!-- Nested Content -->
                        <Grid
							x:Name="PART_NestedContentSite"
							Grid.Row="1"
							Grid.Column="0"
							Visibility="Collapsed">
                            <Border BorderBrush="#44102975" BorderThickness="1">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Color="#FFFFFFFF" Offset="0.25"/>
                                        <GradientStop Color="#FFEEEEEE" Offset="1.2"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <ContentControl x:Name="NestedContentPresenter" Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,0,5"/>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ShouldDisplayGroupByRecordContent" Value="true">
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="ShouldDisplaySummaryCells" Value="true">
                            <Setter TargetName="GroupBySummariesPresenter" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="HasNestedContent" Value="true">
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** GroupByArea Style **********************************-->
    <Style TargetType="{x:Type igDP:GroupByArea}">
        <Setter Property="Prompt1" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.GroupByAreaPrompt1}}"/>
        <Setter Property="Prompt2" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.GroupByAreaPrompt2}}"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.GroupByAreaMultiBackgroundBrush}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:GroupByArea}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="TurnOnInsertionPoint">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_InsertionPoint" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="TurnOffInsertionPoint">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_InsertionPoint" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="ShowPrompts">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HidePrompts">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <igWindows:ExpanderBar x:Name="ExpanderBarButton" Height="10"/>
                        <igWindows:ExpanderDecorator Grid.Row="1" HorizontalAlignment="Stretch" IsExpanded="{Binding Path=IsExpanded, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" Orientation="Vertical">
                            <Grid x:Name="outerGrid" SnapsToDevicePixels="True">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid Grid.Row="0" Grid.RowSpan="2">
                                    <Rectangle x:Name="Rectangle" RenderTransformOrigin="0.5,0.5" Fill="{TemplateBinding Background}"/>
                                    <Border HorizontalAlignment="Stretch" Margin="0" Width="Auto" x:Name="Border" RenderTransformOrigin="0.5,0.5" CornerRadius="0" Background="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GroupByAreaBackgroundHighlight}}" />
                                </Grid>
                                <StackPanel Orientation="Horizontal" Margin="6 12 6 0">
                                    <ContentControl x:Name="prompt1" Content="{TemplateBinding Prompt1}" ContentTemplate="{TemplateBinding Prompt1Template}" Margin="1,1,10,1" Foreground="{StaticResource AccentForegroundBrush}" FontFamily="Segoe UI Semibold"/>
                                    <ContentControl x:Name="prompt2" Content="{TemplateBinding Prompt2}" ContentTemplate="{TemplateBinding Prompt2Template}"  />
                                </StackPanel>
                                <Grid x:Name="PART_GroupedFieldLabelsArea" Margin="0,12,0,0" VerticalAlignment="Top">
                                    <!-- JM 02-13-18 TFS248336 - Remove the binding on the Height property. -->
                                    <!--<igDP:GroupByAreaFieldListBox x:Name="GroupedFieldList" ItemsSource="{TemplateBinding GroupedFieldLabels}" Height="{Binding Path=ActualHeight, ElementName=AvailableFieldList}" AutomationProperties.Name="GroupedFieldsList" MinHeight="30"/>-->
                                    <igDP:GroupByAreaFieldListBox x:Name="GroupedFieldList" ItemsSource="{TemplateBinding GroupedFieldLabels}" AutomationProperties.Name="GroupedFieldsList" MinHeight="30"/>
                                </Grid>
                                <StackPanel Orientation="Vertical" Grid.Row="1">
                                    <Grid x:Name="PART_AvailableFieldLabelsArea" Margin="0,4,0,3" Visibility="Visible">
                                        <igDP:GroupByAreaFieldListBox x:Name="AvailableFieldList" ItemsSource="{TemplateBinding AvailableFieldLabels}" AutomationProperties.Name="AvailableFieldsList"/>
                                    </Grid>
                                    <igWindows:ExpanderBar x:Name="ExpanderBarButtonBottom" Height="5"/>
                                </StackPanel>
                                <!-- Insertion Point -->
                                <Polygon x:Name="PART_InsertionPoint" Opacity="0" Fill="#FF151C55" Points="0,0 10,0 5,6" StrokeEndLineCap="Round" StrokeStartLineCap="Round" StrokeLineJoin="Round" HorizontalAlignment="Left" Margin="12" VerticalAlignment="Top"/>
                            </Grid>
                        </igWindows:ExpanderDecorator>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="igDP:GroupByArea.ShowInsertionPoint">
                            <BeginStoryboard x:Name="TurnOnInsertionPoint_BeginStoryboard" Storyboard="{StaticResource TurnOnInsertionPoint}"/>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:GroupByArea.HideInsertionPoint">
                            <BeginStoryboard x:Name="TurnOffInsertionPoint_BeginStoryboard" Storyboard="{StaticResource TurnOffInsertionPoint}"/>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:GroupByArea.ShowPrompts">
                            <BeginStoryboard x:Name="ShowPrompts_BeginStoryboard" Storyboard="{StaticResource ShowPrompts}"/>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:GroupByArea.HidePrompts">
                            <BeginStoryboard x:Name="HidePrompts_BeginStoryboard" Storyboard="{StaticResource HidePrompts}"/>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** GroupByAreaMulti Style **********************************-->
    <Style TargetType="{x:Type igDP:GroupByAreaMulti}">
        <Style.Resources>
            <DataTemplate DataType="{x:Type igDP:Field}">
                <igDP:LabelPresenter Field="{Binding}" VerticalAlignment="Top" Margin="{Binding Path=(igDP:GroupByAreaMulti.Offset)}" IsInGroupByArea="true"/>
            </DataTemplate>
        </Style.Resources>
        <Setter Property="Prompt1" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.GroupByAreaPrompt1}}"/>
        <Setter Property="Prompt2" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.GroupByAreaPrompt2}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.GroupByAreaMultiBackgroundBrush}}"/>
        <Setter Property="BorderThickness" Value="0 0 0 1"/>
        <Setter Property="BorderBrush" Value="{StaticResource GroupByAreaMultiBackgroundStroke}"/>
        <Setter Property="Padding" Value="0,5"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldLayoutForeground}}"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FieldLayoutDescriptionTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border>
                        <TextBlock Foreground="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldLayoutForeground}}" Text="{Binding Description}" Margin="4,2,4,2" FontWeight="Bold" VerticalAlignment="Center" igDP:GroupByAreaMulti.IsConnectorLineTarget="False"/>
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ConnectorLinePen" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ConnectorLinePen}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:GroupByAreaMulti}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="ShowPrompts">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HidePrompts">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <igWindows:ExpanderBar x:Name="ExpanderBarButton" Height="10"/>
                        <igWindows:ExpanderDecorator Grid.Row="1" IsExpanded="{Binding Path=IsExpanded, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" Orientation="Vertical">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition MaxHeight="13"/>
                                            <RowDefinition Height="*"/>
                                        </Grid.RowDefinitions>
                                        <igWindows:CardPanel Grid.RowSpan="2" Margin="{TemplateBinding Padding}">
                                            <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="6">
                                                <ContentControl x:Name="prompt1" Content="{TemplateBinding Prompt1}" ContentTemplate="{TemplateBinding Prompt1Template}" Margin="1,1,10,1" FontFamily="Segoe UI Semibold" Foreground="{StaticResource AccentForegroundBrush}" VerticalAlignment="Center"/>
                                                <ContentControl x:Name="prompt2" Content="{TemplateBinding Prompt2}" ContentTemplate="{TemplateBinding Prompt2Template}" VerticalAlignment="Center"/>
                                            </StackPanel>
                                            <ItemsControl ItemsSource="{Binding Path=FieldLayoutGroupByInfos, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center">
                                                <ItemsControl.Template>
                                                    <ControlTemplate>
                                                        <ScrollViewer Style="{StaticResource customScrollViewer}" CanContentScroll="False">
                                                            <igDP:GroupByAreaMultiPanel IsItemsHost="True" Orientation="{Binding Path=FieldLayoutOrientation, RelativeSource={RelativeSource AncestorType={x:Type igDP:GroupByAreaMulti}}}" ConnectorLinePen="{Binding Path=ConnectorLinePen, RelativeSource={RelativeSource AncestorType={x:Type igDP:GroupByAreaMulti}}}"/>
                                                        </ScrollViewer>
                                                    </ControlTemplate>
                                                </ItemsControl.Template>
                                            </ItemsControl>
                                        </igWindows:CardPanel>
                                    </Grid>
                                </Border>
                            </Grid>
                        </igWindows:ExpanderDecorator>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="igDP:GroupByAreaMulti.ShowPrompts">
                            <BeginStoryboard x:Name="ShowPrompts_BeginStoryboard" Storyboard="{StaticResource ShowPrompts}"/>
                            <StopStoryboard BeginStoryboardName="HidePrompts_BeginStoryboard"/>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:GroupByAreaMulti.HidePrompts">
                            <BeginStoryboard x:Name="HidePrompts_BeginStoryboard" Storyboard="{StaticResource HidePrompts}"/>
                            <StopStoryboard BeginStoryboardName="ShowPrompts_BeginStoryboard"/>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="FieldLayoutOrientation" Value="Horizontal">
                <Setter Property="ConnectorLinePen" Value="{x:Null}"/>
                <Setter Property="FieldLayoutOffsetY" Value="0"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ********************************** FieldChooser Style **********************************-->
    <Style TargetType="{x:Type igDP:FieldChooser}">
        <Style.Resources>
            <!--Represents a field in the field chooser.-->
            <DataTemplate DataType="{x:Type igDP:FieldChooserEntry}">
                <DockPanel>
                    <editors:XamCheckEditor x:Name="checkBox"
                                            DockPanel.Dock="Left"
                                            IsThreeState="false"
                                            IsEnabled="{Binding Path=IsParentFieldGroupVisible}"
							                Margin="{Binding Path=LabelIndent}"
                                            Value="{Binding Path=IsVisible, Mode=TwoWay}"/>
                    <igWindows:CardPanel x:Name="labelArea" DockPanel.Dock="Left">
                        <igDP:LabelPresenter x:Name="label"
                                             IsInFieldChooser="true"
                                             Visibility="Collapsed"
                                             IsEnabled="{Binding Path=IsParentFieldGroupVisible}"
                                             HorizontalContentAlignment="Left"
                                             VerticalContentAlignment="Center"
                                             IsSelectedInFieldChooser="{Binding Path=IsSelected}"
                                             Margin="5,0,0,0">
                            <!--This is for toggling the visibility of a field by double clicking on it in
						    the field chooser.-->
                            <igDP:LabelPresenter.InputBindings>
                                <MouseBinding MouseAction="LeftDoubleClick" Command="{x:Static igDP:FieldChooserCommands.ToggleVisibility}"/>
                            </igDP:LabelPresenter.InputBindings>
                        </igDP:LabelPresenter>
                        <igDP:FieldGroupLabelPresenter
							x:Name="grouplabel"
							IsInFieldChooser="true"
                            IsEnabled="{Binding Path=IsParentFieldGroupVisible}"
                            Visibility="Collapsed"
							HorizontalContentAlignment="Left"
							VerticalContentAlignment="Center"
							IsSelectedInFieldChooser="{Binding Path=IsSelected}"
							Margin="5,0,0,0">

                            <!--This is for toggling the visibility of a field by double clicking on it in
						the field chooser.-->
                            <igDP:FieldGroupLabelPresenter.InputBindings>
                                <MouseBinding MouseAction="LeftDoubleClick"
									Command="{x:Static igDP:FieldChooserCommands.ToggleVisibility}"
							/>
                            </igDP:FieldGroupLabelPresenter.InputBindings>
                        </igDP:FieldGroupLabelPresenter>
                    </igWindows:CardPanel>
                </DockPanel>
                <DataTemplate.Triggers>
                    <!--When DisplayHiddenFieldsOnly is true, we display only the fields that are currently hidden in
						the data presenter. In this mode we shouldn't display checkboxes next to them because they all
						would be unchecked to begin with (since all fields being displayed are hidden) and checking a
						checkbox will make the field disappear from the field chooser since it would not longer be hidden
						in the data presenter.-->
                    <DataTrigger Binding="{Binding Path=DisplayHiddenFieldsOnly, RelativeSource={RelativeSource AncestorType={x:Type igDP:FieldChooser}}}" Value="true">
                        <Setter TargetName="checkBox" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=IsFieldGroup}" Value="false">
                        <Setter TargetName="label" Property="Visibility" Value="Visible" />
                        <Setter TargetName="label" Property="Field" Value="{Binding Path=Field}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=IsFieldGroup}" Value="true">
                        <Setter TargetName="grouplabel" Property="Visibility" Value="Visible" />
                        <Setter TargetName="grouplabel" Property="FieldGroup" Value="{Binding Path=FieldGroup}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=IsParentFieldGroupVisible}" Value="false">
                        <Setter TargetName="labelArea" Property="Opacity" Value=".35" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
            <!--Template that represents field groups displayed in the combo editor's drop-down list
			as well as its edit area.-->
            <DataTemplate DataType="{x:Type igDP:FieldChooserGroup}">
                <StackPanel x:Name="panel" ToolTip="{Binding FieldLayout.ToolTip}">
                    <TextBlock x:Name="fieldLayoutDescription" Text="{Binding Path=FieldLayout.Description}"/>
                    <StackPanel x:Name="filterPanel" Orientation="Horizontal" Visibility="Collapsed">
                        <!--This rectangle is for indenting the filter description.-->
                        <Rectangle Width="20"/>
                        <TextBlock Text="{Binding Path=FieldFilter.Description}"/>
                    </StackPanel>
                </StackPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Path=HasFieldFilter}" Value="true">
                        <Setter TargetName="panel" Property="ToolTip" Value="{Binding FieldFilter.ToolTip}"/>
                        <Setter TargetName="filterPanel" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="fieldLayoutDescription" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
        </Style.Resources>
        <!-- JJD 05/11/16 - TFS219295  -->
        <Setter Property="AllFieldsPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.AllFieldsPrompt}}"/>

        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="14.667" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:FieldChooser}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <!-- JJD 05/11/16 - TFS219295  
                                 Only determine the XamComboEditor's visibility based on the FieldGroupSelectorVisibilityResolved -->
                            <!--<DockPanel Visibility="{TemplateBinding FieldGroupSelectorVisibilityResolved}" >-->
                            <DockPanel>
                                <editors:XamCheckEditor x:Name="toggleAllCheckBox" DockPanel.Dock="Left" IsThreeState="false" Value="{Binding Path=AllCurrentFieldsVisible, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}" Visibility="{Binding Path=DisplayHiddenFieldsOnly, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource NotBoolToVisConverter}, Mode=OneWay}" Margin="4,0,0,0"/>

                                <!-- JJD 05/11/16 - TFS219295  
                                    Added a label for when there is only one FieldLayout and the XamComboEditor below is collapsed-->
                                <Label x:Name="allFieldsPrompt" DockPanel.Dock="Left"
                                       Target="{Binding ElementName=toggleAllCheckBox}"
                                       Padding="1,5,5,5"
                                       Content="{Binding Path=AllFieldsPrompt, RelativeSource={RelativeSource TemplatedParent}}"
                                       Visibility="Collapsed"/>

                                <!--Combo editor that has list of field layouts in its drop-down.-->
                                <editors:XamComboEditor x:Name="fieldGroupSelector" DockPanel.Dock="Right" ItemsSource="{TemplateBinding FieldGroups}" ValueType="{x:Type igDP:FieldChooserGroup}" DisplayValueSource="Value" Value="{Binding Path=CurrentFieldGroup, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}" HorizontalAlignment="Stretch"
                                                      Visibility="{TemplateBinding FieldGroupSelectorVisibilityResolved}"  />
                            </DockPanel>
                            <igWindows:CardPanel Grid.Row="1">
                                <!--List box that displays the fields-->
                                <ListBox x:Name="fieldsListBox" ItemsSource="{TemplateBinding CurrentFields}" SelectionMode="Single" SelectedItem="{Binding Path=SelectedField, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}" HorizontalContentAlignment="Stretch" Style="{StaticResource ListBoxStyle}">
                                    <!--Since the LabelPresenter elements are rendering the selected state, make the listbox item
									from rendering selected state itself. Also prevent it from drawing the dashed focus rect.-->
                                    <ListBox.ItemContainerStyle>
                                        <Style TargetType="{x:Type ListBoxItem}">
                                            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ListBox.ItemContainerStyle>
                                    <ListBox.InputBindings>
                                        <!--This is for toggling the visibility of the field in the data presenter (essentially the
												checkbox next to the field label).-->
                                        <KeyBinding Key="Space" Command="{x:Static igDP:FieldChooserCommands.ToggleVisibility}"/>
                                    </ListBox.InputBindings>
                                </ListBox>
                                <Border x:Name="highlightBorder" BorderThickness="2" BorderBrush="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                            </igWindows:CardPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- JJD 05/11/16 - TFS219295  
                             When there is only one FieldLayout the FieldGroupSelectorVisibilityResolved will be collapsed.
                             In this case we want to bind the new Label's visibility to the XamCheckBox's-->
                        <Trigger Property="FieldGroupSelectorVisibilityResolved" Value="Collapsed">
                            <Setter TargetName="allFieldsPrompt" Property="Visibility" Value="{Binding ElementName=toggleAllCheckBox, Path=Visibility}" />
                        </Trigger>
                        <!--NOTE: The following trigger can be used to highlight the field chooser
						when a field from it is being dragged.-->
                        <Trigger Property="IsDraggingItem" Value="true">
                            <Setter TargetName="highlightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldChooserDragBorderBrushKey}}"/>
                        </Trigger>
                        <!--NOTE: The following trigger can be used to highlight the field chooser
						when a field from the associated data presenter is being dragged.-->
                        <Trigger Property="IsDraggingItemFromDataPresenter" Value="true">
                            <Setter TargetName="highlightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldChooserDragBorderBrushKey}}"/>
                        </Trigger>
                        <!--NOTE: The following trigger can be used to highlight the field chooser
						when a field from the associated data presenter is being dragged over the
						field chooser.-->
                        <Trigger Property="IsDragItemOver" Value="true">
                            <Setter TargetName="highlightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldChooserDragBorderBrushKey}}"/>
                        </Trigger>
                        <!--SSP 10/21/09 TFS22726 - Added the following DataTrigger to hide the toggleAllCheckBox
						when there are no fields in the field chooser.-->
                        <DataTrigger Binding="{Binding Path=CurrentFields.Count, RelativeSource={RelativeSource Self}}" Value="0">
                            <Setter TargetName="toggleAllCheckBox" Property="IsEnabled" Value="false"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** RecordScrollTipInfo Template **********************************-->
    <HierarchicalDataTemplate DataType="{x:Type igDP:RecordScrollTipInfo}" ItemsSource="{Binding Path=Children}">
        <HierarchicalDataTemplate.Resources>
            <DataTemplate DataType="{x:Type igDP:DataRecord}">
                <StackPanel Orientation="Horizontal">
                    <ContentControl VerticalAlignment="Top" Content="{Binding Path=FieldLayout.ScrollTipField.Label}" FontFamily="Segoe UI" Foreground="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelHighlight}}" Margin="3"/>
                    <TextBlock
						VerticalAlignment="Top"
						Text=":"
						Margin="1,2,2,0" Foreground="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelHighlight}}"
						Visibility="{Binding Path=FieldLayout.ScrollTipField.HasLabel, Converter={StaticResource BoolToVisConverter}}"/>
                    <!-- JJD 09/09/15 - TFS206086 
                         For tree fields we need a TreeCellValuePresenter in case a style was supplied that targets 
                         that type so place both elements in the template and set their visibility to 'Collapsed' then
                         use triggers below to make one or the other visible and bind its Field property-->
                    <!--<igDP:CellValuePresenter Padding="0" Margin="0" Field="{Binding Path=FieldLayout.ScrollTipField}" VerticalAlignment="Top"/>-->
                    <igDP:CellValuePresenter x:Name="Cvp" Visibility="Collapsed" Padding="0" Margin="0" VerticalAlignment="Top"/>
                    <igDP:TreeCellValuePresenter x:Name="Tcvp"  Visibility="Collapsed" Padding="0" Margin="0" VerticalAlignment="Top"/>
                </StackPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Path=FieldLayout.ScrollTipField.IsTreeField}" Value="True">
                        <Setter TargetName="Tcvp" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="Tcvp" Property="Field" Value="{Binding Path=FieldLayout.ScrollTipField}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=FieldLayout.ScrollTipField.IsTreeField}" Value="False">
                        <Setter TargetName="Cvp" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="Cvp" Property="Field" Value="{Binding Path=FieldLayout.ScrollTipField}"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
            <DataTemplate DataType="{x:Type igDP:GroupByRecord}">
                <TextBlock Text="{Binding Path=Description}" Margin="0,3"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type igDP:ExpandableFieldRecord}">
                <TextBlock Text="{Binding Path=Description}" Margin="0,3"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type igDP:SummaryRecord}">
                <TextBlock Text="{Binding Path=Description}" Margin="0,3"/>
            </DataTemplate>
        </HierarchicalDataTemplate.Resources>
        <ContentControl Content="{Binding Path=Record}"/>
    </HierarchicalDataTemplate>

    <!-- ********************************** RecordScrollTip **********************************-->
    <Style TargetType="{x:Type igDP:RecordScrollTip}">
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Background" Value="{StaticResource RecordScrollTipBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource RecordScrollTipStroke}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:RecordScrollTip}">
                    <Grid SnapsToDevicePixels="True">
                        <Border x:Name="outerBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
                        <ContentPresenter Margin="5"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TreeView ItemsSource="{Binding}">
                        <TreeView.Style>
                            <Style TargetType="{x:Type TreeView}">
                                <Setter Property="Background" Value="{StaticResource TreeViewBackground}"/>
                                <Setter Property="BorderThickness" Value="0"/>
                                <Setter Property="VerticalContentAlignment" Value="Top"/>
                                <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
                            </Style>
                        </TreeView.Style>
                        <TreeView.ItemContainerStyle>
                            <Style TargetType="{x:Type TreeViewItem}">
                                <Setter Property="IsExpanded" Value="true"/>
                                <Setter Property="Focusable" Value="false"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <StackPanel Orientation="Vertical">
                                                <ContentPresenter
													ContentSource="Header"
													HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
													x:Name="PART_Header"
													ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
													Content="{TemplateBinding HeaderedContentControl.Header}"
													Grid.ColumnSpan="2"/>
                                                <StackPanel Orientation="Horizontal" x:Name="ItemsHostPanel">
                                                    <FrameworkElement MinWidth="10" Height="0"/>
                                                    <ItemsPresenter
														x:Name="ItemsHost"
														Grid.Column="1"
														Grid.Row="1"
														Grid.ColumnSpan="2"/>
                                                </StackPanel>
                                            </StackPanel>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </TreeView.ItemContainerStyle>
                    </TreeView>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** FilterCellValuePresenter Style **********************************-->
    <Style TargetType="{x:Type igDP:FilterCellValuePresenter}" BasedOn="{x:Static themes:DataPresenterGeneric.FilterCellValuePresenter}">
        <Setter Property="Background" Value="{StaticResource FilterCellValuePresenterBg}"/>
        <Setter Property="BorderBrush" Value="{StaticResource FilterCellValuePresenterStroke}"/>
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="BackgroundHover" Value="{StaticResource FilterCellValuePresenterBgHover}"/>
        <Setter Property="BorderHoverBrush" Value="{StaticResource FilterCellValuePresenterStrokeHover}"/>
        <Setter Property="BackgroundActive" Value="{StaticResource FilterCellValuePresenterBgActive}"/>
        <Setter Property="BorderActiveBrush" Value="{StaticResource FilterCellValuePresenterStrokeActive}"/>
        <Setter Property="BackgroundSelected" Value="{StaticResource FilterCellValuePresenterBgSelected}"/>
        <Setter Property="BorderSelectedBrush" Value="{StaticResource FilterCellValuePresenterStrokeSelected}"/>
        <Setter Property="BackgroundFieldSelected" Value="{StaticResource FilterCellValuePresenterBgFieldSelected}"/>
        <Setter Property="BorderFieldSelectedBrush" Value="{StaticResource FilterCellValuePresenterStrokeFieldSelected}"/>
        <Setter Property="BackgroundPrimary" Value="{StaticResource FilterCellValuePresenterBgPrimary}"/>
        <Setter Property="BorderPrimaryBrush" Value="{StaticResource FilterCellValuePresenterStrokePrimary}"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
        <Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
        <Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
        <Setter Property="ForegroundPrimaryStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
        <Setter Property="ForegroundSelectedStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
        <Setter Property="ForegroundFieldSelectedStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
        <Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="Padding" Value="6,4"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:FilterCellValuePresenter}">
                    <igWindows:CardPanel>
                        <Border
							x:Name="MainBorder"
							CornerRadius="{TemplateBinding CornerRadius}"
							BorderThickness="{TemplateBinding BorderThickness}"
							BorderBrush="{TemplateBinding BorderBrush}"
							Background="{TemplateBinding Background}"
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <igWindows:ComparisonOperatorSelector
								Grid.Column="0"
								IsDropDownOpen="{Binding Path=IsOperatorDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
								AllowableOperators="{Binding Path=Field.FilterOperatorDropDownItemsResolved, RelativeSource={RelativeSource TemplatedParent}}"
								SelectedOperator="{Binding Path=Operator, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
								Visibility="{Binding Path=Field.FilterOperatorVisibilityResolved, RelativeSource={RelativeSource TemplatedParent}}"
								Foreground="{TemplateBinding Foreground}"/>
                            <Button
								Style="{DynamicResource {x:Static igDP:DataPresenterBase.FilterCellClearButtonStyleKey}}"
								Grid.Column="3"
								Command="{x:Static igDP:DataPresenterCommands.ClearActiveCellFilters}"
								Visibility="{Binding Path=Field.FilterClearButtonVisibilityResolved, RelativeSource={RelativeSource TemplatedParent}}"
								Margin="0"/>
                            <igDP:ExcelStyleFilterButton x:Name="ExcelStyleFilterButton"
								Field="{TemplateBinding Field}"
								Width="Auto"
								Grid.Column="2"/>
                            <ContentPresenter
								x:Name="PART_EditorSite"
                                Grid.Column="1"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								Style="{TemplateBinding ForegroundStyle}"/>
                        </Grid>
                    </igWindows:CardPanel>
                    <!--SS 05/27/2015 TFS194609 Change RelativeSource to Self TargetName is not set-->
                    <ControlTemplate.Triggers>
                        <!-- HighlightAsPrimary -->
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundPrimary, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderPrimaryBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundPrimaryStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <!-- IsFieldSelected -->
                        <Trigger Property="IsFieldSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundFieldSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderFieldSelectedBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundFieldSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <!-- IsSelected -->
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundSelected, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderSelectedBrush, RelativeSource={RelativeSource Self}}"/>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <!-- IsActive -->
                        <Trigger Property="IsActive" Value="true">
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="Background" Value="{Binding Path=BackgroundActive, RelativeSource={RelativeSource Self}}"/>
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderActiveBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderThickness" Value="1" />
                        </Trigger>
                        <!-- IsMouseOver -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsFieldSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Setter Property="BorderThickness" Value="0 0 1 1" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** FixedFieldSplitter Style **********************************-->
    <Style BasedOn="{StaticResource FixedFieldSplitterBaseStyle}" TargetType="{x:Type igDP:FixedFieldSplitter}">
        <Setter Property="Background" Value="{StaticResource FixedFieldsSplitterBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterStrokeBrush}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:FixedFieldSplitter}">
                    <Grid Background="Transparent">
                        <Border x:Name="splitterMainBd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        <Border x:Name="splitterHoverBd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Opacity="0" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterVerticalHottrackFillBrush}}"/>
                        <Border x:Name="gripperLinesVertical" Visibility="Collapsed" BorderThickness="0" Background="{StaticResource GripperLinesVerticalStroke}">
                            <Grid HorizontalAlignment="Center">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="0.15*"/>
                                    <RowDefinition Height="0.7*"/>
                                    <RowDefinition Height="0.15*"/>
                                </Grid.RowDefinitions>
                                <Border Width="6" Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Stretch" Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperDarkLineBrush}}" BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperLightLineBrush}}" />
                            </Grid>
                        </Border>
                        <Grid x:Name="gripperLinesHorizontal" Visibility="Collapsed" VerticalAlignment="Center" Margin="0,1,0,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="0.15*"/>
                                <ColumnDefinition Width="0.7*"/>
                                <ColumnDefinition Width="0.15*"/>
                            </Grid.ColumnDefinitions>
                            <Border Height="6" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Center" Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperDarkLineBrush}}" BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterGripperLightLineBrush}}" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="splitterHoverBd" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterHorizontalHottrackFillBrush}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical"/>
                                <Condition Property="IsInHeader" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="gripperLinesVertical" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="splitterMainBd" Property="Visibility" Value="Collapsed"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Horizontal"/>
                                <Condition Property="IsInHeader" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="gripperLinesHorizontal" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="splitterMainBd" Property="Visibility" Value="Collapsed"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True"/>
                                <Condition Property="IsInHeader" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="splitterHoverBd" Property="Opacity" Value="1"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** FilterRecordClearButton Style **********************************-->
    <Style x:Key="{x:Static igDP:DataPresenterBase.FilterRecordClearButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="{StaticResource IndicatorsFill}" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="Transparent">
                        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Path Fill="{TemplateBinding Background}" x:Name="FilterGlyphStroke" Width="14" Height="10" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0,0 C0,0 11,0 11,0 11,0 7,4 7,4 7,4 7,8 7,8 7,8 4,8 4,8 4,8 4,4 4,4 4,4 0,0 0,0 z" Stretch="Fill"/>
                            <Path Fill="{TemplateBinding Background}" x:Name="clearFilterGlyphStroke" Visibility="Collapsed" Data="M0,6.7055439E-08 C0,-2.2351813E-08 14,-2.2351813E-08 14,6.7055439E-08 C14,-2.2351813E-08 8.909091,5 8.909091,5 C8.909091,5 8.909091,10 8.909091,10 C8.909091,10 5.090909,10 5.090909,10 C5.090909,10 5.090909,5 5.090909,5 C5.090909,5 0,-2.2351813E-08 0,6.7055439E-08 z M19.061932,4.000001 L21.000006,5.9426546 L17.951712,8.9893465 L21,12.047609 L19.117376,14.000002 L16.018606,10.921208 L12.938193,13.999997 L11.000011,12.098856 L14.083817,9.0016155 L11.000006,5.9376612 L12.980037,4.0000057 L16.022606,7.0525246 z" Height="12" Stretch="Fill"  Width="17" Margin="-4,0,0,0"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter TargetName="clearFilterGlyphStroke" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="FilterGlyphStroke" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="clearFilterGlyphStroke" Property="Fill" Value="{StaticResource ArrowHoverFill}"/>
                            <Setter TargetName="FilterGlyphStroke" Property="Fill" Value="{StaticResource ArrowHoverFill}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="clearFilterGlyphStroke" Property="Fill" Value="{StaticResource ArrowPressedFill}"/>
                            <Setter TargetName="FilterGlyphStroke" Property="Fill" Value="{StaticResource ArrowPressedFill}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--SS 05/28/2015 TFS194623 Show filter clear button disabled when no active filter-->
    <!-- ********************************** FilterCellClearButton Style **********************************-->
    <Style x:Key="{x:Static igDP:DataPresenterBase.FilterCellClearButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="{StaticResource IndicatorsFill}" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="Transparent">
                        <Grid HorizontalAlignment="Center" VerticalAlignment="Center" >
                            <Path Fill="{TemplateBinding Background}" x:Name="clearFilterGlyphStroke" Opacity=".5" Data="M0,6.7055439E-08 C0,-2.2351813E-08 14,-2.2351813E-08 14,6.7055439E-08 C14,-2.2351813E-08 8.909091,5 8.909091,5 C8.909091,5 8.909091,10 8.909091,10 C8.909091,10 5.090909,10 5.090909,10 C5.090909,10 5.090909,5 5.090909,5 C5.090909,5 0,-2.2351813E-08 0,6.7055439E-08 z M19.061932,4.000001 L21.000006,5.9426546 L17.951712,8.9893465 L21,12.047609 L19.117376,14.000002 L16.018606,10.921208 L12.938193,13.999997 L11.000011,12.098856 L14.083817,9.0016155 L11.000006,5.9376612 L12.980037,4.0000057 L16.022606,7.0525246 z" Height="12" Stretch="Fill"  Width="17" Margin="-4,0,0,0"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsEnabled" Value="True">
                            <Setter TargetName="clearFilterGlyphStroke" Property="Visibility" Value="Visible"/>
                        </Trigger>-->
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter TargetName="clearFilterGlyphStroke" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="clearFilterGlyphStroke" Property="Fill" Value="{StaticResource ArrowHoverFill}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="clearFilterGlyphStroke" Property="Fill" Value="{StaticResource ArrowPressedFill}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** ClearSearchButton Style **********************************-->
    <Style x:Key="clearSearchButtonStyle" TargetType="Button">
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.RecordFilterTreeSearchBorderBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.RecordFilterTreeClearSearchFillBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Path x:Name="CloseIcon" Data="M8.4446707,-0.6250003 L10.625006,1.5604857 L7.1956725,4.9880161 L10.625,8.4285631 L8.5070467,10.625005 L5.0209293,7.1613607 L1.5554626,10.625 L-0.62499386,8.4862156 L2.8442898,5.0018182 L-0.625,1.5548685 L1.602536,-0.62499505 L5.0254283,2.8090899 z"
							Fill="{StaticResource ArrowNormalFill}" Width="12" Height="12" Stretch="Fill" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="CloseIcon" Value="{StaticResource ArrowHoverFill}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="CloseIcon" Value="{StaticResource ArrowPressedFill}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="CloseIcon" Value="{StaticResource ArrowDisabledFill}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** Button Style **********************************-->
    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="TextElement.Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="FontSize" Value="14.667"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="Padding" Value="10,0,10,2"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="MinWidth" Value="30"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalCenterBrush}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalOuterBorderBrush}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                            <ContentControl x:Name="Content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                        <Border x:Name="innerStroke" SnapsToDevicePixels="True" Margin="1,1,1,1" BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalInnerBorderBrush}}" BorderThickness="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverCenterBrush}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverOuterBorderBrush}}"/>
                            <Setter Property="BorderBrush" TargetName="innerStroke" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverInnerBorderBrush}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedCenterBrush}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedOuterBorderBrush}}"/>
                            <Setter Property="BorderBrush" TargetName="innerStroke" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedInnerBorderBrush}}"/>
                            <Setter Property="Foreground" TargetName="Content" Value="{StaticResource LightForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonDisabledCenterBrush}}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonDisabledOuterBorderBrush}}"/>
                            <Setter Property="BorderBrush" TargetName="innerStroke" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonDisabledInnerBorderBrush}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** RecordExportStatusControl Style **********************************-->
    <Style TargetType="igDP:RecordExportStatusControl">
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0,2,5,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igDP:RecordExportStatusControl">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}"
							Padding="{TemplateBinding Padding}"
							SnapsToDevicePixels="true">
                        <StackPanel SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									Orientation="Horizontal"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" >
                            <TextBlock x:Name="message" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <ProgressBar x:Name="progress"
										 IsIndeterminate="True"
										 Margin="5,0,0,0"
										 Style="{DynamicResource {x:Static igDP:RecordExportStatusControl.IndeterminateProgressBarStyleKey}}"
										 />
                            <Button Margin="8,0,0,0" x:Name="cancel"
									Focusable="False"
									ToolTip="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.CancelExportToolTip}}"
									Command="{x:Static igDP:DataPresenterCommands.CancelExport}"
									CommandTarget="{Binding DataPresenter, RelativeSource={RelativeSource TemplatedParent}}"
									Style="{DynamicResource {x:Static igDP:RecordExportStatusControl.CancelExportButtonStyleKey}}"
									/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="True">
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource stringFormatConverter}">
                                        <Binding Path="ExportInfo.StatusMessage" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ExportInfo.FileName" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="True" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Exporting" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource stringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusExportingMessage}" />
                                        <Binding Path="ExportInfo.FileNameWithoutPath" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ExportedRecordCount" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Exporting" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource stringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusExportingMessage}" />
                                        <Binding Path="ExportInfo.ExportType" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ExportedRecordCount" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="True" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Initializing" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource stringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusInitializingMessage}" />
                                        <Binding Path="ExportInfo.FileNameWithoutPath" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Initializing" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource stringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusInitializingMessage}" />
                                        <Binding Path="ExportInfo.ExportType" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="True" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Pending" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource stringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusPendingMessage}" />
                                        <Binding Path="ExportInfo.FileNameWithoutPath" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.StatusMessage, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Pending" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource stringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusPendingMessage}" />
                                        <Binding Path="ExportInfo.ExportType" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <Trigger Property="Status" Value="NotExporting">
                            <Setter TargetName="progress" Property="IsIndeterminate" Value="false" />
                            <Setter TargetName="progress" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** CancelExportButton Style **********************************-->
    <Style TargetType="Button" x:Key="{x:Static igDP:RecordExportStatusControl.CancelExportButtonStyleKey}">
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid HorizontalAlignment="Center" VerticalAlignment="Center" Background="Transparent">
                        <Path HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="12" Width="12" Stretch="Fill" Opacity="1"
							Data="M8.4446707,-0.6250003 L10.625006,1.5604857 L7.1956725,4.9880161 L10.625,8.4285631 L8.5070467,10.625005 L5.0209293,7.1613607 L1.5554626,10.625 L-0.62499386,8.4862156 L2.8442898,5.0018182 L-0.625,1.5548685 L1.602536,-0.62499505 L5.0254283,2.8090899 z"
							Fill="{StaticResource ArrowNormalFill}" x:Name="CloseIcon"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="CloseIcon" Value="{StaticResource ArrowHoverFill}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="CloseIcon" Value="{StaticResource ArrowPressedFill}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="CloseIcon" Value="{StaticResource ArrowDisabledFill}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** IndeterminateProgressBar Style **********************************-->
    <Style TargetType="ProgressBar" x:Key="{x:Static igDP:RecordExportStatusControl.IndeterminateProgressBarStyleKey}" >
        <Setter Property="Height" Value="14" />
        <Setter Property="Width" Value="90" />
        <Setter Property="BorderBrush" Value="{StaticResource ProgressBarBorderBrush}" />
        <Setter Property="Background" Value="{StaticResource ProgressBarBackgroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ProgressBarForegroundBrush}" />
    </Style>

    <!-- ********************************** FilterTreeScopesComboToggleButton Style **********************************-->
    <Style x:Key="filterTreeScopesComboToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Margin" Value="5 0 0 0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border x:Name="outerBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Path x:Name="glyph" Width="10" Height="6" Fill="{StaticResource ArrowNormalFill}" Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z " Stretch="Fill"
								  HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Fill" TargetName="glyph" Value="{StaticResource ArrowPressedFill}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="glyph" Value="{StaticResource ArrowHoverFill}"/>
                        </MultiTrigger>
                        <!-- when not dropped down but the combo has the keyboard focus the button should appear as it does when hottracked -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="glyph" Value="{StaticResource ArrowPressedFill}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** FilterTreeScopesCombo Style **********************************-->
    <Style x:Key="filterTreeScopesComboStyle" TargetType="ComboBox">
        <Setter Property="Background" Value="{StaticResource PopupBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource PopupBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid Background="Transparent">
                        <ToggleButton
							x:Name="PART_DropDownButton"
							Grid.ColumnSpan="3" HorizontalContentAlignment="Right"
							Background="{StaticResource TransparentBrush}"
							BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
							Style="{StaticResource filterTreeScopesComboToggleButtonStyle}"
							IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
							/>
                        <Popup
							x:Name="PART_Popup"
							AllowsTransparency="True"
							Placement="Bottom"
							IsOpen="{TemplateBinding IsDropDownOpen}"
							Focusable="False"
							PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
							MaxHeight="{TemplateBinding MaxDropDownHeight}">
                            <Border BorderBrush="{StaticResource PopupBorderBrush}" Background="{StaticResource PopupBackgroundBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                <ScrollViewer x:Name="ScrollViewer" Style="{StaticResource ScrollViewerStyle}">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************** TreeView Style **********************************-->
    <Style x:Key="TreeViewStyle" TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemSeparatorBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="_tv_scrollviewer_" Background="{TemplateBinding Background}" CanContentScroll="false" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" Style="{StaticResource ScrollViewerStyle}">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                            <Setter Property="CanContentScroll" TargetName="_tv_scrollviewer_" Value="true"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ********************************** TreeViewItem Style **********************************-->
    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z" PresentationOptions:Freeze="true" />

    <!-- ********************************** ExpandCollapseToggle Style **********************************-->
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Padding="0">
                        <Grid>
                            <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{StaticResource ArrowNormalFill}" Stroke="{StaticResource ArrowNormalFill}"  HorizontalAlignment="Center" VerticalAlignment="Center" >
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource ArrowHoverFill}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource ArrowHoverFill}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource ArrowPressedFill}"/>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource ArrowPressedFill}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ********************************** TreeViewItem Style **********************************-->
    <Style x:Key="TreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="6 4"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="30" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}"/>
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource CellVPBackgroundSelected}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource CellVPBorderSelectedBrush}"/>
                            <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource CellVPBackgroundSelected}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource CellVPBorderSelectedBrush}"/>
                            <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ********************************** RecordFilterTreeControl Style **********************************-->
    <Style TargetType="igDP:RecordFilterTreeControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igDP:RecordFilterTreeControl">
                    <Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}"
						SnapsToDevicePixels="True">
                        <igWindows:CardPanel>
                            <Grid x:Name="gridContent" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Border  Grid.Row="0"  BorderThickness="0"  BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.RecordFilterTreeSearchBorderBrushKey}}"  Margin="0,1,0,10">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition />
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>

                                        <Rectangle Stroke="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemSeparatorBrushKey}}" Grid.ColumnSpan="2" Fill="White" />

                                        <TextBox Margin="1 1 0 1" x:Name="PART_SearchTextBox" Padding="5 3 0 0" Foreground="{StaticResource ForegroundBrush}"
											Grid.Column="0" BorderThickness="0" Text="{Binding Path=SearchText, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  />

                                        <TextBlock
											x:Name="txtSearchPrompt" Foreground="{StaticResource ForegroundBrush}" Grid.Column="0"  Margin="5 3 0 0"
											Text="{TemplateBinding SearchTextPrompt}"
											Visibility="Collapsed"
											IsHitTestVisible="False" />
                                        <Grid Grid.Column="1">
                                            <Border x:Name="MagnifyingGlass" Height="30" Width="30" HorizontalAlignment="Right" VerticalAlignment="Center">
                                                <Path Data="M5,2 C3.3431458,2 2,3.3431458 1.9999999,5 C2,6.6568542 3.3431458,8 5,8 C6.6568542,8 8,6.6568542 8,5 C8,3.3431458 6.6568542,2 5,2 z M5,0 C7.7614236,7.4505508E-08 10,2.2385762 10,5 C10,5.9060922 9.7589817,6.7558913 9.3375578,7.4887848 L9.2829828,7.5810957 L9.3355074,7.627512 C10.503476,8.6596594 12.702006,10.602526 12.702006,10.602526 C12.889167,10.85279 13.000003,11.163451 13.000003,11.5 C13.000003,12.328427 12.32843,13 11.500003,13 C11.08579,13 10.71079,12.832107 10.439342,12.56066 C10.439342,12.56066 8.223464,10.596959 7.1155252,9.6151075 L7.0535035,9.5601444 L6.9462256,9.6070747 C6.3480339,9.8600893 5.6903558,10 5,10 C2.2385762,10 0,7.7614236 0,5 C0,2.2385762 2.2385762,7.4505508E-08 5,0 z" Stretch="Fill"  StrokeThickness="0.5" Fill="{StaticResource IndicatorsFill}" Width="16" Height="16"/>
                                            </Border>
                                            <Button
												x:Name="btnClearSearchText"
												Content="X" Visibility="Hidden"
												Style="{StaticResource clearSearchButtonStyle}"
												Command="{Binding ClearSearchTextCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </Grid>
                                        <ComboBox Margin="5 0 0 0"
											x:Name="PART_SearchScopeCombo"
											Grid.Column="2"
											Background="White"
											IsEditable="False"
											Style="{StaticResource filterTreeScopesComboStyle}"
											SelectedValuePath="Value" Visibility="Collapsed"
											SelectedValue="{Binding Path=SearchScope, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
											ItemsSource="{Binding Path=AvailableSearchScopes, RelativeSource={RelativeSource TemplatedParent}}" ItemContainerStyle="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type editors:XamTextEditor}, ResourceId=ComboBoxItemStyle}}" />
                                    </Grid>
                                </Border>
                                <TreeView
									Grid.Row="1"
									x:Name="PART_Tree"
									ItemsSource="{Binding Nodes, RelativeSource={RelativeSource TemplatedParent}}"
									Style="{StaticResource TreeViewStyle}"
									ItemContainerStyle="{StaticResource TreeViewItemStyle}"
									/>
                                <TextBlock
									x:Name="txtNoMatch"
									Grid.Row="1"
									Text="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.RecordFilterTreeNoSearchMatches}}"
									Visibility="Collapsed"
									TextAlignment="Center"
									VerticalAlignment="Center"
									TextWrapping="Wrap" />
                                <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,15,0,12" Height="30">
                                    <Button Content="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.CustomFilterSelectionControlOkButtonLabel}}" MinWidth="73" Margin="0,0,11,0" Command="{Binding UpdateRecordFilterCommand, RelativeSource={RelativeSource TemplatedParent}}" MinHeight="0" Style="{StaticResource ButtonStyle}" />
                                    <Button Content="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.CustomFilterSelectionControlCancelButtonLabel}}" MinWidth="73" Command="{Binding CancelChangesCommand, RelativeSource={RelativeSource TemplatedParent}}" MinHeight="0" Style="{StaticResource ButtonStyle}"/>
                                </StackPanel>
                            </Grid>
                            <ContentControl x:Name="LoadingIndicator" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </igWindows:CardPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsLoadingItems" Value="True">
                            <Setter TargetName="LoadingIndicator" Property="ContentTemplate" Value="{StaticResource BaseFilterDropDownLoadingTemplate}" />
                            <Setter TargetName="LoadingIndicator" Property="Visibility" Value="Visible" />
                            <Setter TargetName="gridContent" Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="HasSearchText" Value="True">
                            <Setter TargetName="btnClearSearchText" Property="Visibility" Value="Visible" />
                            <Setter TargetName="MagnifyingGlass" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="HasEmptySearchResults" Value="True">
                            <Setter TargetName="PART_Tree" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="txtNoMatch" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="HasMultipleSearchScopes" Value="True">
                            <Setter TargetName="PART_SearchScopeCombo" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_SearchTextBox" Property="IsFocused" Value="False" />
                                <Condition Property="HasSearchText" Value="False" />
                            </MultiTrigger.Conditions>
                            <!-- Show the watermark when there is no search text and the textbox isn't focused -->
                            <Setter TargetName="txtSearchPrompt" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>