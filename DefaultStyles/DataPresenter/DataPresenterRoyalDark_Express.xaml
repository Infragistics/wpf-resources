<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:editors="http://infragistics.com/Editors"
                    xmlns:igDP="http://infragistics.com/DataPresenter"
                    xmlns:igThemes="http://infragistics.com/Themes"
                    xmlns:igWindows="http://infragistics.com/Windows"
                    xmlns:interop="clr-namespace:System.Windows.Interop;assembly=PresentationFramework"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:themes="http://infragistics.com/Themes"
                    mc:Ignorable="d">
    <!--  *********************************  RESOURCES  *********************************  -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="DataPresenterGeneric_Express.xaml" />
        <ResourceDictionary Source="DataPresenterRoyalDark_Brushes.xaml" />
    </ResourceDictionary.MergedDictionaries>


    <!--  *********************************  BRUSHES  *********************************  -->
    <SolidColorBrush x:Key="FieldChooserButtonBackground" PresentationOptions:Freeze="true" Color="{StaticResource Color_046}" />
    <SolidColorBrush x:Key="FieldChooserButtonBorder" PresentationOptions:Freeze="true" Color="{StaticResource Color_046}" />
    <SolidColorBrush x:Key="FieldChooserButtonHoverBackground" PresentationOptions:Freeze="true" Color="{StaticResource Color_010}" />
    <SolidColorBrush x:Key="FieldChooserButtonPressedBackground" PresentationOptions:Freeze="true" Color="{StaticResource Color_011}" />

    <SolidColorBrush x:Key="SummaryDropDownBackground" PresentationOptions:Freeze="true" Color="{StaticResource Color_007}" />

    <SolidColorBrush x:Key="GroupByAreaFieldLabelStroke" PresentationOptions:Freeze="true" Color="{StaticResource Color_008}" />
    <SolidColorBrush x:Key="GroupByAreaFieldLabelBackground" PresentationOptions:Freeze="true" Color="{StaticResource Color_007}" />
    <SolidColorBrush x:Key="GripperLinesVerticalStroke" PresentationOptions:Freeze="true" Color="{StaticResource Color_004}" />
    <SolidColorBrush x:Key="GroupByRecordCellValuePresenterBg" PresentationOptions:Freeze="true" Color="{StaticResource Color_007}" />
    <SolidColorBrush x:Key="HeaderHoverBackgroundBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_010}" />
    <SolidColorBrush x:Key="PopupBackgroundBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_009}" />
    <SolidColorBrush x:Key="PopupBorderBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_014}" />
 
    <!--  Arrow Brushes  -->
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}" PresentationOptions:Freeze="true" Color="{StaticResource Color_004}" />
    <SolidColorBrush x:Key="GlyphHoverBackgroundBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_001}" />
    <SolidColorBrush x:Key="GlyphPressedBackgroundBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_012}" />
    <SolidColorBrush x:Key="GlyphDisabledBackgroundBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_006}" />

    <!--  CellValuePresenter Brushes  -->
    <SolidColorBrush x:Key="CellVPBackgroundBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_046}" />
    <SolidColorBrush x:Key="CellVPBorderBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_008}" />
    <SolidColorBrush x:Key="CellVPBackgroundActive" PresentationOptions:Freeze="true" Color="{StaticResource Color_011}" />
    <SolidColorBrush x:Key="CellVPBorderActiveBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_008}" />
    <SolidColorBrush x:Key="CellVPBackgroundFieldSelected" PresentationOptions:Freeze="true" Color="{StaticResource Color_011}" />
    <SolidColorBrush x:Key="CellVPBorderFieldSelectedBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_008}" />
    <SolidColorBrush x:Key="CellVPBackgroundHover" PresentationOptions:Freeze="true" Color="{StaticResource Color_046}" />
    <SolidColorBrush x:Key="CellVPBorderHoverBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_008}" />
    <SolidColorBrush x:Key="CellVPBackgroundPrimary" PresentationOptions:Freeze="true" Opacity="0.2" Color="{StaticResource Color_014}" />
    <SolidColorBrush x:Key="CellVPBorderPrimaryBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_008}" />
    <SolidColorBrush x:Key="CellVPBackgroundSelected" PresentationOptions:Freeze="true" Color="{StaticResource Color_011}" />
    <SolidColorBrush x:Key="CellVPBorderSelectedBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_008}" />
    <SolidColorBrush x:Key="CellVPForegroundBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_016}" />

    <!--  FilterCellValuePresenter Brushes  -->
    <SolidColorBrush x:Key="FilterCellValuePresenterBg" PresentationOptions:Freeze="true" Color="{StaticResource Color_018}" />
    <SolidColorBrush x:Key="FilterCellValuePresenterStroke" PresentationOptions:Freeze="true" Color="{StaticResource Color_008}" />
    <SolidColorBrush x:Key="FilterCellValuePresenterBgActive" PresentationOptions:Freeze="true" Color="{StaticResource Color_011}" />
    <SolidColorBrush x:Key="FilterCellValuePresenterStrokeActive" PresentationOptions:Freeze="true" Color="{StaticResource Color_011}" />
    <SolidColorBrush x:Key="FilterCellValuePresenterBgFieldSelected" PresentationOptions:Freeze="true" Color="{StaticResource Color_011}" />
    <SolidColorBrush x:Key="FilterCellValuePresenterStrokeFieldSelected" PresentationOptions:Freeze="true" Color="{StaticResource Color_011}" />
    <SolidColorBrush x:Key="FilterCellValuePresenterBgHover" PresentationOptions:Freeze="true" Color="{StaticResource Color_014}" />
    <SolidColorBrush x:Key="FilterCellValuePresenterStrokeHover" PresentationOptions:Freeze="true" Color="{StaticResource Color_008}" />
    <SolidColorBrush x:Key="FilterCellValuePresenterBgPrimary" PresentationOptions:Freeze="true" Color="{StaticResource Color_046}" />
    <SolidColorBrush x:Key="FilterCellValuePresenterStrokePrimary" PresentationOptions:Freeze="true" Color="{StaticResource Color_046}" />
    <SolidColorBrush x:Key="FilterCellValuePresenterBgSelected" PresentationOptions:Freeze="true" Color="{StaticResource Color_011}" />
    <SolidColorBrush x:Key="FilterCellValuePresenterStrokeSelected" PresentationOptions:Freeze="true" Color="{StaticResource Color_011}" />

    <!--  DataRecordCell Brushes  -->
    <SolidColorBrush x:Key="DataRecordCellAreaBackground" PresentationOptions:Freeze="true" Color="{StaticResource Color_018}" />
    <SolidColorBrush x:Key="DataRecordCellAreaBorderBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_008}" />
    <SolidColorBrush x:Key="DataRecordCellAreaBackgroundActive" PresentationOptions:Freeze="true" Color="{StaticResource Color_011}" />
    <SolidColorBrush x:Key="DataRecordCellAreaBorderActiveBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_011}" />
    <SolidColorBrush x:Key="DataRecordCellAreaBackgroundAlternate" PresentationOptions:Freeze="true" Opacity="0.2" Color="{StaticResource Color_014}" />
    <SolidColorBrush x:Key="DataRecordCellAreaBorderAlternateBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_008}" />
    <SolidColorBrush x:Key="DataRecordCellAreaBgHover" PresentationOptions:Freeze="true" Color="{StaticResource Color_014}" />
    <SolidColorBrush x:Key="DataRecordCellAreaBorderHoverBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_008}" />
    <SolidColorBrush x:Key="DataRecordCellAreaBgSelected" PresentationOptions:Freeze="true" Color="{StaticResource Color_011}" />
    <SolidColorBrush x:Key="DataRecordCellAreaBorderSelectedBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_011}" />

    <!--  Label Brushes  -->
    <SolidColorBrush x:Key="LabelPresenterInnerBorderBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_003}" />
    <SolidColorBrush x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelPresenterOuterBorderBrush}" PresentationOptions:Freeze="true" Color="{StaticResource Color_003}" />
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelPresenterHighlightasPrimaryBackground}" PresentationOptions:Freeze="true" Color="{StaticResource Color_010}" />
    <SolidColorBrush x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelPresenterHighlightasPrimaryBorderBrush}" PresentationOptions:Freeze="true" Color="{StaticResource Color_008}" />

    <!--  ProgressBar Brushes  -->
    <SolidColorBrush x:Key="ProgressBarBackgroundBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_0451}" />
    <SolidColorBrush x:Key="ProgressBarBorderBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_046}" />
    <SolidColorBrush x:Key="ProgressBarForegroundBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_001}" />

    <!--  Filter ClearButton Brushes  -->
    <SolidColorBrush x:Key="FilterClearButtonBackgroundBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_004}" />
    <SolidColorBrush x:Key="FilterClearButtonBackgroundHoverBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_001}" />
    <SolidColorBrush x:Key="FilterClearButtonBackgroundPressedBrush" PresentationOptions:Freeze="true" Color="{StaticResource Color_001}" />

    <!--
        **************************************************************** WPF SPECIFIC RESOURCES *********************************************************************
        *********************************************************************************************************************************************************************
    -->
 <!-- ********************************** Specific FilterOperators DrawingImages ********************************** -->
    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorEqualsImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,10,6"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <Path Width="10" Height="6" Data="M 0,2 C0,3 0,6 0,6 0,6 10,6 10,6 10,6 10,4 10,4 10,4 0,4 0,4 zM 0,0 C0,0 0,2 0,2 0,2 10,2 10,2 10,2 10,0 10,0 10,0 0,0 0,0 z" Fill="{StaticResource FilterOperatorForegroundBrush}" VerticalAlignment="Center" />
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorNotEqualsImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,10,10"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <Grid>
                                <Path Width="10" Height="6" Data="M 0,2 C0,3 0,6 0,6 0,6 10,6 10,6 10,6 10,4 10,4 10,4 0,4 0,4 zM 0,0 C0,0 0,2 0,2 0,2 10,2 10,2 10,2 10,0 10,0 10,0 0,0 0,0 z" Fill="{StaticResource FilterOperatorForegroundBrush}" VerticalAlignment="Center" />
                                <Path Width="10" Height="10" Data="M 0,10 C0,10 2,10 2,10 2,10 8,0 8,0 8,0 6,0 6,0 6,0 0,10 0,10 z" Fill="{StaticResource FilterOperatorForegroundBrush}" Stretch="Fill" />
                            </Grid>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorLessThanImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,8,8"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <Path Width="8" Height="8" HorizontalAlignment="Center" Data="M 7,0 C7,0 8,1 8,1 8,1 3,4 3,4 3,4 8,7 8,7 8,7 7,8 7,8 7,8 0,4 0,4 0,4 7,0 7,0 z" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorLessThanOrEqualToImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,8,8"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <StackPanel x:Name="LessThanOrEqualOperand">
                                <Path Width="8" Height="8" HorizontalAlignment="Center" Data="M 7,0 C7,0 8,1 8,1 8,1 3,4 3,4 3,4 8,7 8,7 8,7 7,8 7,8 7,8 0,4 0,4 0,4 7,0 7,0 z" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                                <Rectangle Width="8" Height="1" Margin="0,1,0,0" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                            </StackPanel>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorGreaterThanImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,8,8"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <Path Width="8" Height="8" HorizontalAlignment="Center" Data="M 1,0 C1,0 0,1 0,1 0,1 5,4 5,4 5,4 0,7 0,7 0,7 1,8 1,8 1,8 8,4 8,4 8,4 1,0 1,0 z" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorGreaterThanOrEqualToImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,8,8"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <StackPanel x:Name="GreaterThanOrEqual">
                                <Path Width="8" Height="8" HorizontalAlignment="Center" Data="M 1,0 C1,0 0,1 0,1 0,1 5,4 5,4 5,4 0,7 0,7 0,7 1,8 1,8 1,8 8,4 8,4 8,4 1,0 1,0 z" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                                <Rectangle Width="8" Height="1" Margin="0,1,0,0" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                            </StackPanel>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorContainsImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,12,12"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <Border Width="12" Height="12" Background="{StaticResource FilterOperatorBackgroundBrush}" BorderBrush="{StaticResource FilterOperatorForegroundBrush}" BorderThickness="1">
                                <Rectangle Margin="2" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                            </Border>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorDoesNotContainImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,12,12"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <Grid x:Name="DoesNotContains">
                                <Rectangle Width="12" Height="12" Fill="{StaticResource FilterOperatorBackgroundBrush}" Stroke="{StaticResource FilterOperatorForegroundBrush}" StrokeDashArray="2" />
                                <Rectangle Width="6" Height="6" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                            </Grid>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <!-- NAS14.1 - In/NotIn Operators-->
    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorInImageKey}" PresentationOptions:Freeze="true">
      <DrawingImage.Drawing>
        <GeometryDrawing Brush="{StaticResource FilterOperatorForegroundBrush}">
          <GeometryDrawing.Geometry>
            <PathGeometry Figures="M5,4 L6,4 6,5 5,5 z M4,3 L5,3 5,4 4,4 z M7,0 L8,0 8,8 7,8 7,7 6,7 6,6 6,5 7,5 z M2,0 L3,0 3,1 4,1 4,2 4,3 3,3 3,8 2,8 z M0,0 L1,0 1,8 0,8 z" />
          </GeometryDrawing.Geometry>
         </GeometryDrawing>
      </DrawingImage.Drawing>
    </DrawingImage>

    <!-- NAS14.1 - In/NotIn Operators-->
    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorNotInImageKey}" PresentationOptions:Freeze="true">
      <DrawingImage.Drawing>
        <GeometryDrawing Brush="{StaticResource FilterOperatorForegroundBrush}">
          <GeometryDrawing.Geometry>
            <PathGeometry Figures="M0,11 L1,11 1,12 0,12 z M1,10 L2.0000001,10 2.0000001,11 1,11 z M7,6 L8,6 8,7 7,7 z M6,5 L7,5 7,6 6,6 z M7,4 L8,4 8,5 7,5 z M9,2.0000001 L10,2.0000001 10,2.9999998 10,10 9,10 9,9 8,9 8,8 8,7 9,7 9,4 8,4 8,2.9999998 9,2.9999998 z M2.0000001,2.0000001 L3,2.0000001 3,8 4,8 4,7 4,2.0000001 5,2.0000001 5,3 6,3 6,4 6,5 5,5 5,6 6,6 6,7 5,7 5,8 5,10 4,10 4,9 3,9 3,10 2.0000001,10 2.0000001,9&#xD;&#xA; z M10,1 L11,1 11,2.0000001 10,2.0000001 z M11,0 L12,0 12,1 11,1 z" />
          </GeometryDrawing.Geometry>
        </GeometryDrawing>
      </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorLikeImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,12,12"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <Grid x:Name="Like">
                                <Path Fill="{StaticResource FilterOperatorForegroundBrush}" Data="M0,6 C0,6 0,6 0,6 C4,4 4,4 4,4 C6,0 6,0 6,0 C8,4 8,4 8,4 C12,6 12,6 12,6 C8,8 8,8 8,8 C6,12 6,12 6,12 C4,8 4,8 4,8 z" />
                                <Path Fill="{StaticResource FilterOperatorForegroundBrush}" Data="M0,6 C0,6 0,6 0,6 C4,4 4,4 4,4 C6,0 6,0 6,0 C8,4 8,4 8,4 C12,6 12,6 12,6 C8,8 8,8 8,8 C6,12 6,12 6,12 C4,8 4,8 4,8 z" RenderTransformOrigin="0.5 0.5">
                                    <Path.RenderTransform>
                                        <RotateTransform Angle="45" />
                                    </Path.RenderTransform>
                                </Path>
                            </Grid>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorNotLikeImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,14,14"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <Grid x:Name="NotLike">
                                <Grid Margin="1,1,0,0">
                                    <Path Fill="{StaticResource FilterOperatorForegroundBrush}" Data="M0,6 C0,6 0,6 0,6 C4,4 4,4 4,4 C6,0 6,0 6,0 C8,4 8,4 8,4 C12,6 12,6 12,6 C8,8 8,8 8,8 C6,12 6,12 6,12 C4,8 4,8 4,8 z" />
                                    <Path Fill="{StaticResource FilterOperatorForegroundBrush}" Data="M0,6 C0,6 0,6 0,6 C4,4 4,4 4,4 C6,0 6,0 6,0 C8,4 8,4 8,4 C12,6 12,6 12,6 C8,8 8,8 8,8 C6,12 6,12 6,12 C4,8 4,8 4,8 z" RenderTransformOrigin="0.5 0.5">
                                        <Path.RenderTransform>
                                            <RotateTransform Angle="45" />
                                        </Path.RenderTransform>
                                    </Path>
                                </Grid>
                                <Path Height="14" Width="14" Data="M0,14 C0,14 0,14 0,14 C2,14 2,14 2,14 C14,0 14,0 14,0 C12,0 12,0 12,0 z" Fill="{StaticResource FilterOperatorForegroundBrush}" Stretch="Fill" />
                            </Grid>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorMatchImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,12,3"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <StackPanel x:Name="Match" Orientation="Horizontal">
                                <Rectangle Width="3" Height="3" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                                <Rectangle Width="6" Height="1" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                                <Rectangle Width="3" Height="3" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                            </StackPanel>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorDoesNotMatchImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,12,3"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <StackPanel x:Name="DoesNotMatch" Orientation="Horizontal">
                                <Rectangle Width="3" Height="3" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                                <Rectangle Width="4" Margin="1,0,1,0" Height="1" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                                <Rectangle Width="3" Height="3" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                            </StackPanel>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorStartsWithImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,13,11"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <StackPanel Orientation="Horizontal" x:Name="BeginsWith" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <TextBlock FontSize="8" Text="A" TextDecorations="Underline" Foreground="{StaticResource FilterOperatorForegroundBrush}" />
                                <TextBlock FontSize="8" Text="a" Foreground="{StaticResource FilterOperatorForegroundBrush}" />
                            </StackPanel>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorEndsWithImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,13,11"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <StackPanel Orientation="Horizontal" x:Name="EndsWith" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <TextBlock FontSize="8" Text="a" Foreground="{StaticResource FilterOperatorForegroundBrush}" />
                                <TextBlock FontSize="8" Text="A" TextDecorations="Underline" Foreground="{StaticResource FilterOperatorForegroundBrush}" />
                            </StackPanel>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorDoesNotStartWithImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,13,15"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <Grid>
                                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                                    <TextBlock FontSize="11" Text="A" TextDecorations="Underline" Foreground="{StaticResource FilterOperatorForegroundBrush}" />
                                    <TextBlock FontSize="11" Text="a" Foreground="{StaticResource FilterOperatorForegroundBrush}" />
                                </StackPanel>
                                <Grid>
                                    <Path Width="8" Height="15" HorizontalAlignment="Left" Margin="1,0,0,0" Data="M 0,11 C0,11 1,11 1,11 1,11 8,0 8,0 8,0 7,0 7,0 7,0 0,11 0,11 z" Fill="{StaticResource FilterOperatorForegroundBrush}" Stretch="Fill" />
                                </Grid>
                            </Grid>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorDoesNotEndWithImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,13,15"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <Grid>
                                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                                    <TextBlock FontSize="11" Text="a" Foreground="{StaticResource FilterOperatorForegroundBrush}" />
                                    <TextBlock FontSize="11" Text="A" TextDecorations="Underline" Foreground="{StaticResource FilterOperatorForegroundBrush}" />
                                </StackPanel>
                                <Grid>
                                    <Path Width="8" Height="15" HorizontalAlignment="Right" Data="M 0,11 C0,11 1,11 1,11 1,11 8,0 8,0 8,0 7,0 7,0 7,0 0,11 0,11 z" Fill="{StaticResource FilterOperatorForegroundBrush}" Stretch="Fill" />
                                </Grid>
                            </Grid>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorTopImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,8,6"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <Path Data="M0,6 C0,6 0,6 0,6 C8,6 8,6 8,6 C4,0 4,0 4,0z" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorBottomImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,8,6"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <Path Data="M0,0 C0,0 0,0 0,0 C8,0 8,0 8,0 C4,6 4,6 4,6z" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorTopPercentileImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,12,14"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <StackPanel>
                                <TextBlock Text="%" FontSize="8" Margin="2,-2,0,0" HorizontalAlignment="Center" Foreground="{StaticResource FilterOperatorForegroundBrush}" />
                                <Path Margin="3,-1,0,0" Data="M0,4 C0,4 0,4 0,4 C6,4 6,4 6,4 C3,0 3,0 3,0z" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                            </StackPanel>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>

    <DrawingImage x:Key="{x:Static igWindows:ComparisonOperatorSelector.OperatorBottomPercentileImageKey}" x:Shared="false">
        <DrawingImage.Drawing>
            <GeometryDrawing>
                <GeometryDrawing.Geometry>
                    <RectangleGeometry Rect="0,0,12,14"></RectangleGeometry>
                </GeometryDrawing.Geometry>
                <GeometryDrawing.Brush>
                    <VisualBrush>
                        <VisualBrush.Visual>
                            <StackPanel>
                                <Path Margin="3,0,0,0" Data="M0,0 C0,0 0,0 0,0 C6,0 6,0 6,0 C3,4 3,4 3,4z" Fill="{StaticResource FilterOperatorForegroundBrush}" />
                                <TextBlock Text="%" FontSize="8" Margin="3,-2,0,0" HorizontalAlignment="Center" Foreground="{StaticResource FilterOperatorForegroundBrush}" />
                            </StackPanel>
                        </VisualBrush.Visual>
                    </VisualBrush>
                </GeometryDrawing.Brush>
            </GeometryDrawing>
        </DrawingImage.Drawing>
    </DrawingImage>
    
    <!--  ********************************** Foreground Styles **********************************  -->
    <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}">
        <Setter Property="TextBlock.Foreground" Value="{StaticResource CellVPForegroundBrush}" />
    </Style>

    <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}">
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
    </Style>

    <!--  **********************************  FieldChooserButton Style  **********************************  -->
    <Style x:Key="{x:Static igDP:DataPresenterBase.FieldChooserButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource FieldChooserButtonBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource FieldChooserButtonBorder}" />
        <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Width="22"
                          Height="22"
                          Background="{StaticResource TransparentBrush}"
                          SnapsToDevicePixels="True">
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="True" />
                        <Grid x:Name="FieldChooserIcon"
                              Width="16"
                              Height="16"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              SnapsToDevicePixels="True">
                            <Path x:Name="icon"
                                  Width="16"
                                  Height="14"
                                  VerticalAlignment="Top"
                                  Data="{StaticResource ColumnChooserIcon}"
                                  Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}"
                                  SnapsToDevicePixels="True"
                                  Stretch="Fill" />
                        </Grid>
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="icon" Property="Fill" Value="{StaticResource GlyphHoverBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="icon" Property="Fill" Value="{StaticResource GlyphHoverBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  **********************************  btnGroupByNavBase Style **********************************  -->
    <Style x:Key="btnGroupByNavBase" TargetType="{x:Type RepeatButton}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Width" Value="22" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GroupByNavBackground}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GroupByNavBorderBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid x:Name="grid">
                        <Rectangle Fill="{StaticResource TransparentBrush}" />
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{TemplateBinding Content}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="grid" Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GroupByNavBackgroundHover}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GroupByLabelHighlightBorder}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  ********************************** DataTemplates for GroupByNav **********************************  -->
    <Style x:Key="btnGroupByNav" TargetType="{x:Type RepeatButton}">
        <Setter Property="MinWidth" Value="22" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid x:Name="grid1">
                        <Rectangle Margin="-5" Fill="{StaticResource TransparentBrush}" />
                        <Path x:Name="Arrow"
                              Width="7"
                              Height="4"
                              Margin="{TemplateBinding Padding}"
                              Data="{StaticResource UpArrow}"
                              Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}"
                              Stretch="Uniform" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource GlyphHoverBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{StaticResource GlyphHoverBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="grid1" Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** Custom ScrollViewer Style **********************************  -->
    <Style x:Key="customScrollViewer" TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="34" />
                            <ColumnDefinition Width="0.841*" />
                            <ColumnDefinition Width="24" MinWidth="24" />
                        </Grid.ColumnDefinitions>
                        <ScrollContentPresenter Grid.Column="1"
                                                Grid.ColumnSpan="1"
                                                CanContentScroll="False"
                                                Content="{TemplateBinding Content}" />
                        <RepeatButton x:Name="repeatButton"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Command="ScrollBar.LineLeftCommand"
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                      RenderTransformOrigin="0.5,0.5"
                                      Style="{StaticResource btnGroupByNav}"
                                      Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}">
                            <RepeatButton.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform Angle="-90" />
                                    <TranslateTransform />
                                </TransformGroup>
                            </RepeatButton.RenderTransform>
                        </RepeatButton>
                        <RepeatButton x:Name="repeatButton1"
                                      Grid.Row="0"
                                      Grid.Column="2"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Command="ScrollBar.LineRightCommand"
                                      CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                      RenderTransformOrigin="0.5,0.5"
                                      Style="{StaticResource btnGroupByNav}"
                                      Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}">
                            <RepeatButton.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform Angle="90" />
                                    <TranslateTransform />
                                </TransformGroup>
                            </RepeatButton.RenderTransform>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** ListBox Style **********************************  -->
    <Style x:Key="ListBoxStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{StaticResource ListboxBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource ListboxBorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="1"
                            SnapsToDevicePixels="true">
                        <ScrollViewer Focusable="false"
                                      Padding="{TemplateBinding Padding}"
                                      Style="{DynamicResource ScrollViewerStyle}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Bd" Property="Opacity" Value="0.3" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** GroupByAreaFieldListBox Style **********************************  -->
    <Style TargetType="{x:Type igDP:GroupByAreaFieldListBox}">
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Margin" Value="0,0,0,3" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:GroupByAreaFieldListBox}">
                    <ScrollViewer CanContentScroll="true"
                                  FocusVisualStyle="{x:Null}"
                                  Style="{StaticResource customScrollViewer}">
                        <VirtualizingStackPanel IsItemsHost="True" Orientation="Horizontal" />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter Property="Height" Value="20" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  ********************************** CellValuePresenter **********************************  -->
    <Style TargetType="{x:Type igDP:CellValuePresenter}">
        <Setter Property="BackgroundActive" Value="{StaticResource CellVPBackgroundActive}" />
        <Setter Property="BackgroundHover" Value="{StaticResource CellVPBackgroundHover}" />
        <Setter Property="BackgroundSelected" Value="{StaticResource CellVPBackgroundSelected}" />
        <Setter Property="BackgroundFieldSelected" Value="{StaticResource CellVPBackgroundFieldSelected}" />
        <Setter Property="BackgroundPrimary" Value="{StaticResource CellVPBackgroundPrimary}" />

        <Setter Property="BorderActiveBrush" Value="{StaticResource CellVPBorderActiveBrush}" />
        <Setter Property="BorderHoverBrush" Value="{StaticResource CellVPBorderHoverBrush}" />
        <Setter Property="BorderSelectedBrush" Value="{StaticResource CellVPBorderSelectedBrush}" />
        <Setter Property="BorderFieldSelectedBrush" Value="{StaticResource CellVPBorderFieldSelectedBrush}" />
        <Setter Property="BorderPrimaryBrush" Value="{StaticResource CellVPBorderPrimaryBrush}" />

        <!-- SS 08/30/17 TFS241725 - Do not set ForegroundStyle so only the Foreground property can control the Foreground 
        <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />-->
        <Setter Property="ForegroundStyle" Value="{x:Null}"/>
        <Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}}" />
        <Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundPrimaryStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}}" />
        <Setter Property="ForegroundSelectedStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}}" />
        <Setter Property="ForegroundFieldSelectedStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}}" />
        <Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}}" />

        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="BorderThickness" Value="{StaticResource CellBorderThickness}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Background" Value="{StaticResource CellVPBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource CellVPBorderBrush}" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="Padding" Value="6 0 6 1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:CellValuePresenter}">
                    <igWindows:CardPanel>
                        <Border x:Name="MainBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}" />
                        <Border x:Name="Active1" 
                                Background="{TemplateBinding BackgroundActive}"
                                SnapsToDevicePixels="True"
                                BorderBrush="{TemplateBinding BorderActiveBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Visibility="Collapsed" />
                        <ContentPresenter x:Name="PART_EditorSite"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Style="{TemplateBinding ForegroundStyle}" />
                    </igWindows:CardPanel>
                   <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsAlternate, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=Record.RecordType, RelativeSource={RelativeSource Self}}" Value="DataRecord"/>
                                <Condition Binding="{Binding Path=Record.IsAddRecord, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundAlternateStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiDataTrigger>
                        <Trigger Property="IsRecordSelected" Value="True">
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=Record.IsActive, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </DataTrigger>
                        <Trigger Property="IsMouseOverRecord" Value="True">
                            <Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOverRecord, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource FindAncestor, {x:Type igDP:DataRecordPresenter}, 1}}" Value="Horizontal" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver,RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource FindAncestor, {x:Type igDP:DataRecordPresenter}, 1}}" Value="Horizontal" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
                        </MultiDataTrigger>
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundPrimary, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderPrimaryBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundPrimaryStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsFieldSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundFieldSelected, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderFieldSelectedBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundFieldSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundSelected, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderSelectedBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderThickness" Value="1" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsActive" Value="true">
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Active1" Property="Visibility" Value="Visible" />
                            <!-- SS 10/23/15 TFS208100 Set the Background to Transparent, so only the ActiveBackground color could be applied when the cell is active-->
                            <Setter Property="Background" Value="{StaticResource TransparentBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsActive" Value="False" />
                                <Condition Property="IsFieldSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOverRecord" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOverRecord" Value="True" />
                                <Condition Property="IsActive" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                        <DataTrigger Binding="{Binding Path=Field.IsFixedStateChanging, RelativeSource={RelativeSource Self}}" Value="True">
                        </DataTrigger>
                        <Trigger Property="IsDataErrorTemplateActive" Value="true">
                            <Setter TargetName="PART_EditorSite" Property="ContentTemplate" Value="{DynamicResource {x:Static igDP:DataPresenterBase.DataErrorContentTemplateKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMergedCell" Value="true">
                <Setter Property="BackgroundSelected" Value="Transparent"/>
                <Setter Property="BackgroundFieldSelected" Value="Transparent"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--  ********************************** TreeCellValuePresenter **********************************  -->
    <Style TargetType="{x:Type igDP:TreeCellValuePresenter}">
        <Setter Property="BackgroundActive" Value="{StaticResource CellVPBackgroundActive}" />
        <Setter Property="BackgroundHover" Value="{StaticResource CellVPBackgroundHover}" />
        <Setter Property="BackgroundSelected" Value="{StaticResource CellVPBackgroundSelected}" />
        <Setter Property="BackgroundFieldSelected" Value="{StaticResource CellVPBackgroundFieldSelected}" />
        <Setter Property="BackgroundPrimary" Value="{StaticResource CellVPBackgroundPrimary}" />

        <Setter Property="BorderActiveBrush" Value="{StaticResource CellVPBorderActiveBrush}" />
        <Setter Property="BorderHoverBrush" Value="{StaticResource CellVPBorderHoverBrush}" />
        <Setter Property="BorderSelectedBrush" Value="{StaticResource CellVPBorderSelectedBrush}" />
        <Setter Property="BorderFieldSelectedBrush" Value="{StaticResource CellVPBorderFieldSelectedBrush}" />
        <Setter Property="BorderPrimaryBrush" Value="{StaticResource CellVPBorderPrimaryBrush}" />

        <Setter Property="ForegroundStyle" Value="{x:Null}" />
        <Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
        <Setter Property="ForegroundAlternateStyle" Value="{x:Null}" />
        <Setter Property="ForegroundPrimaryStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundSelectedStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundFieldSelectedStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}}" />

        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="BorderThickness" Value="{StaticResource CellBorderThickness}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Background" Value="{StaticResource CellVPBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource CellVPBorderBrush}" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="Padding" Value="6 0 6 1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:TreeCellValuePresenter}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{Binding Path=Indent, RelativeSource={RelativeSource TemplatedParent}}" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="MainBorder"
                                Grid.ColumnSpan="3"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}" />
                        <Rectangle x:Name="Active1"
                                   Grid.ColumnSpan="3"
                                   Fill="{TemplateBinding BackgroundActive}"
                                   SnapsToDevicePixels="True"
                                   Stroke="{TemplateBinding BorderActiveBrush}"
                                   StrokeThickness="1"
                                   Visibility="Collapsed" />
                        <igWindows:ExpansionIndicator x:Name="PART_Expander"
                                                      Grid.Column="1"
                                                      VerticalAlignment="Center"
                                                      Panel.ZIndex="1"
                                                      Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}"
                                                      CommandParameter="{TemplateBinding Record}"
                                                      IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                      ToggleMode="Manual"
                                                      Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}" />
                        <ContentPresenter x:Name="PART_EditorSite"
                                          Grid.Column="2"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          IsEnabled="{TemplateBinding IsContentEnabled}"
                                          Style="{TemplateBinding ForegroundStyle}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsAlternate, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=Record.RecordType, RelativeSource={RelativeSource Self}}" Value="DataRecord" />
                                <Condition Binding="{Binding Path=Record.IsAddRecord, RelativeSource={RelativeSource Self}}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundAlternateStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiDataTrigger>
                        <Trigger Property="IsMouseOverRecord" Value="True">
                            <Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Margin" Value="0 0 0 -1" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOverRecord, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource FindAncestor, {x:Type igDP:DataRecordPresenter}, 1}}" Value="Horizontal" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
                            <Setter Property="Margin" Value="0 0 0 -1" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource FindAncestor, {x:Type igDP:DataRecordPresenter}, 1}}" Value="Horizontal" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
                            <Setter Property="Margin" Value="0 0 0 -1" />
                        </MultiDataTrigger>
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundPrimary, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderPrimaryBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundPrimaryStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="BorderThickness" Value="0,0,0,1" />
                        </Trigger>
                        <Trigger Property="IsFieldSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundFieldSelected, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderFieldSelectedBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundFieldSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundSelected, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderSelectedBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsActive" Value="true">
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Active1" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsActive" Value="False" />
                                <Condition Property="IsFieldSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Margin" Value="0 0 0 -1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOverRecord" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOverRecord" Value="True" />
                                <Condition Property="IsActive" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                        <DataTrigger Binding="{Binding Path=Field.IsFixedStateChanging, RelativeSource={RelativeSource Self}}" Value="True" />
                        <Trigger Property="IsDataErrorTemplateActive" Value="true">
                            <Setter TargetName="PART_EditorSite" Property="ContentTemplate" Value="{DynamicResource {x:Static igDP:DataPresenterBase.DataErrorContentTemplateKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers />
    </Style>

    <!--  ********************************** Converters **********************************  -->
    <BooleanToVisibilityConverter x:Key="BoolToVisConverter" />

    <!--  ********************************** RecordSeparator Style **********************************  -->
    <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, RecordSeparatorStyle}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{StaticResource FilterActiveBackgroundBrush}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Height" Value="6" />
        <Setter Property="BorderThickness" Value="{StaticResource CellBorderThickness}" />
        <Setter Property="BorderBrush" Value="{StaticResource CellVPBorderBrush}" />
    </Style>

    <!--  ********************************** DataRecordPresenter Style **********************************  -->
    <Style TargetType="{x:Type igDP:DataRecordPresenter}">
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="HeaderAreaBackground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelBackground}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="NestedContentBackground" Value="{StaticResource TransparentBrush}" />
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource TransparentBrush}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:DataRecordPresenter}">
                    <Border x:Name="baseGrid" 
                            RenderTransform="{TemplateBinding FixedNearElementTransform}" 
                            Background="{TemplateBinding Background}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            BorderBrush="{TemplateBinding BorderBrush}">
                        <igWindows:CardPanel>
                            <Border x:Name="addRowFooter" 
                                    Background="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, AddRowBackground}}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Visibility="Collapsed"/>
                            <Grid RenderTransform="{TemplateBinding ScrollableElementTransform}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Border x:Name="OrientationHorizontalSep" 
                                        Grid.ColumnSpan="6" 
                                        Background="#FFFAFAFA" 
                                        BorderBrush="#FFE7E7E7" 
                                        BorderThickness="0,0,1,0" 
                                        Visibility="Collapsed"/>
                                <igWindows:ExpansionIndicator x:Name="ExpansionIndicator" 
                                                              Grid.Column="1" 
                                                              Grid.Row="3" 
                                                              Panel.ZIndex="1" 
                                                              Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}" 
                                                              CommandParameter="{TemplateBinding Record}" 
                                                              IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                              RenderTransform="{TemplateBinding FixedNearElementTransform}" 
                                                              ToggleMode="Manual"
                                                              Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <Border x:Name="SpacerFill" 
                                        Grid.Column="1" 
                                        Grid.ColumnSpan="6" 
                                        Grid.Row="1"
                                        RenderTransform="{TemplateBinding FixedNearElementTransform}" 
                                        Background="{TemplateBinding HeaderAreaBackground}"/>
                                <ContentPresenter x:Name="PART_HeaderContentSite" 
                                                  Grid.Column="3" 
                                                  Grid.Row="1" 
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                                  Content="{TemplateBinding HeaderContent}" 
                                                  Visibility="Visible"/>
                                <Border x:Name="RecordSeparator" 
                                        Grid.Column="1" 
                                        Grid.ColumnSpan="6" 
                                        Grid.Row="2" 
                                        RenderTransform="{TemplateBinding FixedNearElementTransform}" 
                                        Style="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, RecordSeparatorStyle}}" 
                                        Height="3" Visibility="Collapsed" 
                                        Background="{DynamicResource FilterCellValuePresenterStrokeActive}" 
                                        BorderBrush="{DynamicResource FilterCellValuePresenterStrokeActive}"/>
                                <ContentPresenter x:Name="PART_RecordContentSite" 
                                                  Grid.Column="3" 
                                                  Grid.Row="3" 
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                                  Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}" 
                                                  ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"/>
                                <!-- Nested Content -->
                                <Border x:Name="PART_NestedContentSite" 
                                        Grid.Column="3" 
                                        Grid.Row="5" 
                                        HorizontalAlignment="Left" 
                                        VerticalAlignment="Top" 
                                        Background="{TemplateBinding NestedContentBackground}" 
                                        RenderTransform="{TemplateBinding FixedNearElementTransform}" 
                                        Visibility="Visible">
                                    <ContentControl x:Name="contentControl" 
                                                    Content="{TemplateBinding NestedContent}" 
                                                    RenderTransform="{TemplateBinding ScrollableElementTransform}"/>
                                </Border>
                            </Grid>
                        </igWindows:CardPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.AutoFitToWidth}" Value="True" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.ColumnSpan" Value="3" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.ColumnSpan" Value="3" />
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        </MultiDataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical" />
                                <Condition Property="IsHeaderRecord" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="SpacerFill" Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelPresenterOuterBorderBrush}}" />
                            <Setter TargetName="SpacerFill" Property="BorderThickness" Value="0,0,0,2" />
                            <Setter TargetName="SpacerFill" Property="Margin" Value="0" />
                        </MultiTrigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="3" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Column" Value="1" />
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="3" />
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="5" />
                            <Setter TargetName="PART_RecordContentSite" Property="VerticalAlignment" Value="Top" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1" />
                            <Setter TargetName="ExpansionIndicator" Property="Margin" Value="0,2" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="3" />
                            <Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="6" />
                            <Setter TargetName="RecordSeparator" Property="Width" Value="1" />
                            <Setter TargetName="RecordSeparator" Property="Height" Value="Auto" />
                            <Setter TargetName="RecordSeparator" Property="BorderThickness" Value="1,0" />
                            <Setter TargetName="OrientationHorizontalSep" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ShouldDisplayRecordContent" Value="False">
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShouldDisplayRecordContent" Value="False" />
                                <Condition Property="IsHeaderRecord" Value="False" />
                                <Condition Property="ExpansionIndicatorVisibility" Value="Visible" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Horizontal" />
                                <Condition Property="ShouldDisplayRecordContent" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="4" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical" />
                                <Condition Property="ShouldDisplayRecordContent" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="4" />
                        </MultiTrigger>
                        <Trigger Property="IsHeaderRecord" Value="True">
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHeaderRecord" Value="True" />
                                <Condition Property="ExpansionIndicatorVisibility" Value="Visible" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />
                        </MultiTrigger>
                        <Trigger Property="HasHeaderContent" Value="False">
                            <Setter TargetName="SpacerFill" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasNestedContent" Value="true">
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible" />
                            <Setter TargetName="baseGrid" Property="Background" Value="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="HasNestedContent" Value="False">
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSpecialRecord}" Value="true" />
                                <Condition Binding="{Binding Path=IsFixedOnTop, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="addRowFooter" Property="Visibility" Value="Visible" />
                            <Setter TargetName="addRowFooter" Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, FixedRecord}}" />
                            <Setter TargetName="addRowFooter" Property="BorderThickness" Value="0,0,0,1" />
                            <Setter Property="Margin" Value="0,0,0,0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsSpecialRecord}" Value="true" />
                                <Condition Binding="{Binding Path=IsFixedOnBottom, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="addRowFooter" Property="Visibility" Value="Visible" />
                            <Setter TargetName="addRowFooter" Property="BorderThickness" Value="0,1,0,0" />
                            <Setter TargetName="addRowFooter" Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, FixedRecord}}" />
                            <Setter Property="Margin" Value="0,1,0,0" />
                        </MultiDataTrigger>
                        <Trigger Property="HasSeparatorBefore" Value="true">
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSeparatorAfter" Value="true" />
                                <Condition Property="Orientation" Value="Vertical" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible" />
                            <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="4" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSeparatorAfter" Value="true" />
                                <Condition Property="Orientation" Value="Horizontal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible" />
                            <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="4" />
                            <Setter TargetName="RecordSeparator" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="1" />
                            <Setter TargetName="RecordSeparator" Property="Grid.RowSpan" Value="6" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasSeparatorBefore" Value="true" />
                                <Condition Property="Orientation" Value="Horizontal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="2" />
                            <Setter TargetName="RecordSeparator" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="1" />
                            <Setter TargetName="RecordSeparator" Property="Grid.RowSpan" Value="6" />
                        </MultiTrigger>
                        <Trigger Property="IsOpacityReduced" Value="True">
                            <Setter TargetName="PART_RecordContentSite" Property="Opacity" Value="0.35" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="0" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TemplateCardView">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:DataRecordPresenter}">
                    <igWindows:CardPanel x:Name="baseGrid" Background="{TemplateBinding Background}">
                        <!--  Record Content  -->
                        <Rectangle Fill="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, CardBackground}}" />
                        <ContentPresenter x:Name="PART_RecordContentSite"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"
                                          ContentTemplate="{TemplateBinding RecordContentAreaTemplate}" />
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsInCard" Value="True">
                            <Setter Property="VerticalContentAlignment" Value="Top" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** DataRecordCellArea Style **********************************  -->
    <Style BasedOn="{x:Static themes:DataPresenterGeneric.DataRecordCellArea}" TargetType="{x:Type igDP:DataRecordCellArea}">
        <Setter Property="Background" Value="{StaticResource DataRecordCellAreaBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource DataRecordCellAreaBorderBrush}" />
        <Setter Property="BackgroundHover" Value="{StaticResource DataRecordCellAreaBgHover}" />
        <Setter Property="BorderHoverBrush" Value="{StaticResource DataRecordCellAreaBorderHoverBrush}" />
        <Setter Property="BackgroundActive" Value="{StaticResource DataRecordCellAreaBackgroundActive}" />
        <Setter Property="BorderActiveBrush" Value="{StaticResource DataRecordCellAreaBorderActiveBrush}" />
        <Setter Property="BackgroundAlternate" Value="{StaticResource DataRecordCellAreaBackgroundAlternate}" />
        <Setter Property="BorderAlternateBrush" Value="{StaticResource DataRecordCellAreaBorderAlternateBrush}" />
        <Setter Property="BackgroundSelected" Value="{StaticResource DataRecordCellAreaBgSelected}" />
        <Setter Property="BorderSelectedBrush" Value="{StaticResource DataRecordCellAreaBorderSelectedBrush}" />
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="BorderThickness" Value="{StaticResource CellBorderThickness}" />
        <Setter Property="Foreground" Value="{StaticResource CellVPForegroundBrush}" />
        <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, WhiteForegroundStyle}}" />
        <Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:DataRecordCellArea}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="timelineIsActive">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Active" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="timelineIsActive_off">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Active" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="timelineIsSelected">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Selected" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="timelineIsSelected_off">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Selected" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="timelineHover">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="timelineHover_off">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <igWindows:CardPanel>
                           <Border x:Name="Background" 
                                   Background="{TemplateBinding Background}" 
                                   BorderBrush="{TemplateBinding BorderBrush}"
                                   BorderThickness="{TemplateBinding BorderThickness}" 
                                   CornerRadius="{TemplateBinding CornerRadius}"/>
                          <Border x:Name="Alternate" 
                                  Background="{TemplateBinding BackgroundAlternate}" 
                                  BorderBrush="{TemplateBinding BorderAlternateBrush}" 
                                  BorderThickness="{TemplateBinding BorderThickness}" 
                                  CornerRadius="{TemplateBinding CornerRadius}" 
                                  Opacity="1" 
                                  Visibility="Collapsed" />
                        <Border x:Name="Selected" 
                                Background="{TemplateBinding BackgroundSelected}" 
                                BorderBrush="{TemplateBinding BorderSelectedBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                CornerRadius="{TemplateBinding CornerRadius}" 
                                Opacity="0" 
                                Visibility="Visible" />
                        <Border x:Name="Hover" 
                                Background="{TemplateBinding BackgroundHover}" 
                                BorderBrush="{TemplateBinding BorderHoverBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                CornerRadius="{TemplateBinding CornerRadius}" 
                                Opacity="0" 
                                Visibility="Visible" />
                        <Border x:Name="Active" 
                                Background="{TemplateBinding BackgroundActive}" 
                                BorderBrush="{TemplateBinding BorderActiveBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                CornerRadius="{TemplateBinding CornerRadius}"
                                Visibility="Collapsed" />
                        <ContentPresenter x:Name="CellContent" Style="{TemplateBinding ForegroundStyle}" />

                        <!-- JM 12-28-15 TFS211627 - Added. -->
                        <Rectangle
							x:Name="DynamicDataPendingOverlay"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							SnapsToDevicePixels="True"
							Opacity="1"
                            Margin="5,2"
							Visibility="Collapsed"/>
                    </igWindows:CardPanel>
                    <ControlTemplate.Triggers>                     
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsAlternate" Value="True" />
                                <Condition Property="IsFilterRecord" Value="False" />
                                <Condition Property="IsAddRecord" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Alternate" Property="Visibility" Value="Visible" />
                            <Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsActive" Value="True" />
                                <Condition Property="IsFilterRecord" Value="False" />
                                <!--<Condition Property="IsAlternate" Value="False" />-->
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Active" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <EventTrigger RoutedEvent="igDP:DataRecordCellArea.HoverBegin">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource timelineHover}" />
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:DataRecordCellArea.HoverEnd">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource timelineHover_off}" />
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:DataRecordCellArea.Selected">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource timelineIsSelected}" />
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:DataRecordCellArea.Deselected">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource timelineIsSelected_off}" />
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <Trigger Property="IsAddRecord" Value="True">
                            <Setter TargetName="Hover" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsFilterRecord" Value="True">
                            <Setter TargetName="Hover" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Selected" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsActive" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsActive" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                            <!--<Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />-->
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                            <!--<Setter TargetName="CellContent" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />-->
                        </MultiTrigger>
                        <!-- JM 12-28-15 TFS211627 - Added. -->
                        <Trigger Property="IsDynamicDataPending" Value="true">
                            <Setter Property="Visibility" TargetName="DynamicDataPendingOverlay" Value="Visible"/>
                            <Setter Property="Fill" TargetName="DynamicDataPendingOverlay" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.DataPendingOverlayBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsDynamicDataPending" Value="false">
                            <Setter Property="Visibility" TargetName="DynamicDataPendingOverlay" Value="Collapsed"/>
                            <Setter Property="Fill" TargetName="DynamicDataPendingOverlay" Value="{x:Null}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** GroupByAreaFieldLabel Style **********************************  -->
    <Style TargetType="{x:Type igDP:GroupByAreaFieldLabel}">
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource GroupByAreaFieldLabelStroke}" />
        <Setter Property="Background" Value="{DynamicResource GroupByAreaFieldLabelBackground}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="6,3,6,3.5" />
        <Setter Property="Margin" Value="0,0,1,0" />
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1" ScaleY="1" />
            </Setter.Value>
        </Setter>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1" ScaleY="1" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:GroupByAreaFieldLabel}">
                    <Grid x:Name="outerGrid"
                          RenderTransformOrigin="0.5,0.5"
                          SnapsToDevicePixels="True">
                        <Rectangle x:Name="Bd"
                                   Fill="{TemplateBinding Background}"
                                   Stroke="{TemplateBinding BorderBrush}" />
                        <ContentPresenter Margin="{TemplateBinding Padding}" Content="{Binding Path=(igDP:GroupByAreaFieldLabel.Field).Label, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.RemovedFromAvailableList">
                            <BeginStoryboard x:Name="CollapseLabel_BeginStoryboard" Storyboard="{StaticResource CollapseLabel}" />
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.AddedToAvailableList">
                            <BeginStoryboard x:Name="AddLabelToList_BeginStoryboard" Storyboard="{StaticResource ExpandLabel}" />
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.AddedToGroupedList">
                            <BeginStoryboard x:Name="AddLabelToGroup_BeginStoryboard" Storyboard="{StaticResource ExpandLabel}" />
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GroupByLabelHighlight}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GroupByLabelHighlightBorder}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  ********************************** RowSummaryOkButton Style **********************************  -->
    <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, RowSummaryOkButton}" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Path x:Name="path"
                              Width="9"
                              Height="8"
                              HorizontalAlignment="Stretch"
                              VerticalAlignment="Stretch"
                              Data="{StaticResource CheckBoxCheck}"
                              Fill="{TemplateBinding Background}"
                              Opacity="1"
                              Stretch="Fill" />
                        <!--<Path HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="10" Width="10" Stretch="Fill" Opacity="1"
                              Data="M 11.44970703125,-0.32843017578125 C11.44970703125,-0.32843017578125 5.0858154296875,6.0355224609375 5.0858154296875,6.0355224609375 5.0858154296875,6.0355224609375 2.55023193359375,3.5 2.55023193359375,3.5 2.55023193359375,3.5 0.13604736328125,5.914215087890625 0.13604736328125,5.914215087890625 0.13604736328125,5.914215087890625 5.0858154296875,10.86395263671875 5.0858154296875,10.86395263671875 5.0858154296875,10.86395263671875 13.86395263671875,2.085784912109375 13.86395263671875,2.085784912109375 13.86395263671875,2.085784912109375 11.44970703125,-0.32843017578125 11.44970703125,-0.32843017578125 z"
                              x:Name="path" Fill="{TemplateBinding Background}"/>-->
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True" />
                        <Trigger Property="IsDefaulted" Value="True" />
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="path" Property="Fill" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackgroundHover}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="path" Property="Fill" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackgroundHover}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{x:Null}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBorder}}" />
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackground}}" />
    </Style>

    <!--  ********************************** RowSummaryCancelButton Style **********************************  -->
    <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, RowSummaryCancelButton}" BasedOn="{x:Null}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackground}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBorder}}" />
        <Setter Property="Foreground" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle Fill="{StaticResource TransparentBrush}" />
                        <Path x:Name="path"
                              Width="8"
                              Height="8"
                              HorizontalAlignment="Stretch"
                              VerticalAlignment="Stretch"
                              Data="{StaticResource ClearFilterIcon}"
                              Fill="{TemplateBinding Background}"
                              Opacity="1"
                              Stretch="Fill" />
                        <!--<Path HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="10" Width="10" Stretch="Fill" Opacity="1"
							Data="M8.4446707,-0.6250003 L10.625006,1.5604857 L7.1956725,4.9880161 L10.625,8.4285631 L8.5070467,10.625005 L5.0209293,7.1613607 L1.5554626,10.625 L-0.62499386,8.4862156 L2.8442898,5.0018182 L-0.625,1.5548685 L1.602536,-0.62499505 L5.0254283,2.8090899 z"
							Fill="{TemplateBinding Background}"
							x:Name="path"/>-->
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True" />
                        <Trigger Property="IsDefaulted" Value="True" />
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="path" Property="Fill" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackgroundHover}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="path" Property="Fill" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackgroundHover}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** LabelPresenter Style **********************************  -->
    <Style TargetType="{x:Type igDP:LabelPresenter}">
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelBackground}}" />
        <Setter Property="LabelHighlight" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelHighlight}}" />
        <Setter Property="BorderThickness" Value="{StaticResource HeaderCellBorderThickness}" />
        <!--<Setter Property="InnerBorderBrush" Value="{StaticResource LabelPresenterInnerBorderBrush}"/>-->
		<Setter Property="OuterBorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelPresenterOuterBorderBrush}}"/>
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="6 0 6 1" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelForeground}}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=Field.LabelTextAlignmentResolved, Converter={StaticResource textAlignmentToHorizontalAlignmentConverter}, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="ToolTip" Value="{Binding Path=Field.ToolTip, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:LabelPresenter}">
                    <ControlTemplate.Resources>
                        <!--<Storyboard x:Key="SigmaFadeInFilterButton">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeOutFilterButton">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" FillBehavior="Stop" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>-->
                    </ControlTemplate.Resources>
                    <Grid x:Name="labelCntr">
                        <Border x:Name="background"
                                Background="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding OuterBorderBrush}"
                                CornerRadius="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid},LabelCornerRadius}}"
                                RenderTransformOrigin="0.5,0.5"
                                SnapsToDevicePixels="True" />
                        <!--<Border x:Name="lineInner" BorderBrush="{TemplateBinding InnerBorderBrush}" BorderThickness="0" SnapsToDevicePixels="True"/>
						</Border>-->
                        <!--<Border x:Name="lineOuter"  BorderBrush="{TemplateBinding OuterBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True"/>-->
                        <Grid x:Name="sortIndicatorAndLabel"
                              MinHeight="22"
                              Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="LabelContent"
                                              Margin="{TemplateBinding Padding}"
                                              VerticalAlignment="Center"
                                              Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                              Focusable="False" />
                            <igWindows:SortIndicator x:Name="SortIndicator"
                                                     Grid.Column="1"
                                                     Width="24"
                                                     HorizontalAlignment="Right"
                                                     VerticalAlignment="Center"
                                                     SortStatus="{TemplateBinding SortStatus}"
                                                     Visibility="Collapsed"/>
                            <igDP:SummaryButton x:Name="SummaryButton"
                                                Grid.Column="2"
                                                Width="24"
                                                HorizontalAlignment="Right"
                                                Field="{TemplateBinding Field}"
                                                Visibility="{Binding Path=Field.AllowSummariesResolved, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                            <igDP:FilterButton x:Name="FilterButton"
                                               Grid.Column="3"
                                               Width="24"
                                               HorizontalAlignment="Left"
                                               Field="{TemplateBinding Field}"
                                               Visibility="{TemplateBinding FilterButtonVisibility}" />
                            <igDP:FixedFieldButton x:Name="FixedButton"
                                                   Grid.Column="4"
                                                   Width="24"
                                                   HorizontalAlignment="Left"
                                                   Field="{TemplateBinding Field}"
                                                   Visibility="{TemplateBinding FixedButtonVisibility}" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter TargetName="background" Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelPresenterHighlightasPrimaryBackground}}" />
                            <Setter TargetName="background" Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelPresenterHighlightasPrimaryBorderBrush}}" />
                        </Trigger>
                        <Trigger Property="HorizontalAlignment" Value="Center">
                            <Setter TargetName="SortIndicator" Property="VerticalAlignment" Value="Top" />
                            <Setter TargetName="SortIndicator" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="SortIndicator" Property="Margin" Value="0,5,0,0" />
                        </Trigger>
                        <Trigger Property="SortStatus" Value="Ascending">
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible" />
                            <Setter Property="OuterBorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CheckBoxFocusedBorderBrush}}"/>
                            <Setter TargetName="SortIndicator" Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CheckBoxFocusedBorderBrush}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
                        </Trigger>
                        <Trigger Property="SortStatus" Value="Descending">
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible" />
                            <Setter Property="OuterBorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CheckBoxFocusedBorderBrush}}"/>
                            <Setter TargetName="SortIndicator" Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CheckBoxFocusedBorderBrush}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
                        </Trigger>
                        <!--NOTE: styles for group by area label -->
                        <DataTrigger Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="background" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalCenterBrush}}" />
                            <Setter Property="BorderThickness" Value="0" />
                        </DataTrigger>
                        <Trigger Property="IsInFieldChooser" Value="True">
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="FilterButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="background" Property="Background" Value="{StaticResource TransparentBrush}" />
                            <Setter Property="BorderThickness" Value="0" />
                        </Trigger>
                           <!--NOTE: styles for field chooser label -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsInFieldChooser" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="FilterButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="labelCntr" Property="Margin" Value="0,0,0,0" />
                            <!--<Setter Property="InnerBorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverOuterBorderBrush}}" />
                            <Setter Property="OuterBorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverOuterBorderBrush}}" />-->
                            <Setter TargetName="background" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalCenterBrush}}" />
                            <!--<Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />-->
                        </MultiTrigger>

                        <Trigger Property="IsDragIndicator" Value="True">
                            <Setter Property="Padding" Value="6,2" />
                            <!--<Setter TargetName="labelCntr" Property="Margin" Value="2,4"/>-->
                            <Setter Property="BorderThickness" Value="1" />
                            <Setter Property="Margin" Value="0" />
                        </Trigger>
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition SourceName="FilterButton" Property="HasActiveFilters" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="background" Property="Background" Value="{StaticResource HeaderHoverBackgroundBrush}" />
                        </MultiTrigger>-->
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition SourceName="FilterButton" Property="HasActiveFilters" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="background" Property="Background" Value="{StaticResource HeaderHoverBackgroundBrush}" />
                            <Setter TargetName="FilterButton" Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackgroundHover}}" />
                            <Setter TargetName="FilterButton" Property="Opacity" Value="1" />
                        </MultiTrigger>-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="FilterButton" Property="HasActiveFilters" Value="True" />
                                <Condition Property="IsMouseOver" Value="False" />
                            </MultiTrigger.Conditions>
                            <!--<Setter TargetName="FilterButton" Property="Opacity" Value="1" />-->
                            <Setter TargetName="FilterButton" Property="Background" Value="{StaticResource FilterActiveBackgroundBrush}" />
                        </MultiTrigger>
                        <!--<Trigger SourceName="FilterButton" Property="HasActiveFilters" Value="True">
                            <Setter TargetName="FilterButton" Property="Opacity" Value="1" />
                        </Trigger>-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
                            <Setter Property="OuterBorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, CheckBoxHoverBorderBrush}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--  ********************************** Field Group LabelPresenter Style **********************************  -->
	<Style TargetType="{x:Type igDP:FieldGroupLabelPresenter}">
		<Setter Property="Padding" Value="7,4"/>
        <Setter Property="BorderThickness" Value="{StaticResource FieldGroupBorderThickness}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelBackgroundKey}}"/>
        <!--<Setter Property="InnerBorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelInnerBorderKey}}"/>-->
        <Setter Property="OuterBorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelOuterBorderKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelForegroundKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=FieldGroup.LabelTextAlignmentResolved, Converter={StaticResource textAlignmentToHorizontalAlignmentConverter}, RelativeSource={x:Static RelativeSource.Self}}"/>
		<Setter Property="ToolTip" Value="{Binding Path=FieldGroup.ToolTip, RelativeSource={x:Static RelativeSource.Self}}" />
		<Setter Property="Template">
			<Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:FieldGroupLabelPresenter}">
                    <Grid x:Name="labelCntr" Background="{StaticResource TransparentBrush}">
                        <!-- Background Bar -->
                        <Border
							Width="Auto"
							Height="Auto"
							RenderTransformOrigin="0.5,0.5"
                            BorderBrush="{TemplateBinding OuterBorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldGroupLabelCornerRadiusKey}}"
							SnapsToDevicePixels="True"
							Background="{TemplateBinding Background}"
							x:Name="background"/>
     
                        <Grid
							Margin="{TemplateBinding Padding}"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							x:Name="labelAndFixedButton">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <igWindows:ExpansionIndicator
								x:Name="ExpansionIndicator"
								Grid.Column="0"
								Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
                                Command="{x:Static igDP:DataPresenterCommands.ToggleFieldGroupIsCollapsed}"
                                CommandParameter="{TemplateBinding FieldGroup}"
                                ToggleMode="Manual"
								IsChecked="{Binding Path=FieldGroup.IsCollapsed, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}"/>
                            <ContentPresenter
								x:Name="LabelContent"
								Focusable="False"
								Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
								ContentTemplate="{TemplateBinding ContentTemplate}"
								ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
								Grid.Column="1"
								d:LayoutOverrides="Width, Height"
								VerticalAlignment="Center"/>
                            <!-- JM 1/14/09 - Fixed Fields Functionality -->
                            <igDP:FixedFieldButton
								x:Name="FixedButton"
								Field="{TemplateBinding FieldGroup}"
								Visibility="{TemplateBinding FixedButtonVisibility}"
								HorizontalAlignment="Left"
								VerticalAlignment="Center"
								Width="Auto"
								Grid.Column="2"
								Margin="2,0,2,0"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>

						<!--SSP 6/23/09 - NAS9.2 Field Chooser
							If the label is in a field chooser then hide the sort indicator, filter button and
							summary button. Note that the fixed button is collapsed in code in label presenter
							by coercing the FixedButtonVisibility property to be Collapsed.-->
						<Trigger Property="IsInFieldChooser" Value="true">
							<Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="labelCntr" Property="Margin" Value="0,0,0,0"/>
						</Trigger>

						<Trigger Property="IsDragIndicator" Value="True">
							<Setter Property="Padding" Value="7,4"/>
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

    
       <!--  ********************************** SummaryRecordContentArea Style **********************************  -->
	<Style TargetType="{x:Type igDP:SummaryRecordContentArea}">
        <Setter Property="Margin" Value="8 0 0 0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:SummaryRecordContentArea}">
					<Border BorderBrush="{x:Null}" BorderThickness="{StaticResource CellBorderThickness}" Background="{x:Null}">
						<StackPanel>
							<!--Position the summary record header-->
							<igDP:SummaryRecordHeaderPresenter
                                x:Name="SummaryRecordHeaderPresenter"
                                SummaryRecord="{TemplateBinding SummaryRecord}"
                                RenderTransform="{Binding Path=FixedNearElementTransform, RelativeSource={RelativeSource AncestorType={x:Type igDP:RecordPresenter}}}"
                                Visibility="{TemplateBinding SummaryRecordHeaderVisibility}"/>
							<igDP:SummaryRecordCellArea x:Name="cellArea" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
							<Border BorderBrush="{x:Null}">
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="*"/>
										<ColumnDefinition Width="*"/>
										<ColumnDefinition Width="*"/>
									</Grid.ColumnDefinitions>
									<Grid.RowDefinitions>
										<RowDefinition/>
									</Grid.RowDefinitions>
									<igDP:SummaryResultsPresenter Grid.Column="0" SummaryResults="{TemplateBinding SummaryResultsLeft}"/>
									<igDP:SummaryResultsPresenter Grid.Column="1" SummaryResults="{TemplateBinding SummaryResultsCenter}"/>
									<igDP:SummaryResultsPresenter Grid.Column="2" SummaryResults="{TemplateBinding SummaryResultsRight}"/>
								</Grid>
							</Border>
						</StackPanel>
					</Border>
					<ControlTemplate.Triggers>
						<!-- SSP 1/6/10 TFS25633 - Added HasSummariesInCellArea property. We should not display
											the summary record cell area if there are no summaries displayed inside it - that is
											all the visible summaries are free-form (left, center and right) summaries.
										-->
						<Trigger Property="HasSummariesInCellArea" Value="false">
							<Setter TargetName="cellArea" Property="Height" Value="0" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

    <!--  ********************************** SummaryRecordPresenter Style **********************************  -->
    <Style TargetType="{x:Type igDP:SummaryRecordPresenter}">
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
        <Setter Property="Margin" Value="0"/>     
    </Style>

    <!--  ********************************** SummaryRecordPrefixArea Style **********************************  -->
    <Style TargetType="{x:Type igDP:SummaryRecordPrefixArea}" />
    
    <!--  ********************************** SummaryResultPresenter Style **********************************  -->  
 	<Style TargetType="{x:Type igDP:SummaryResultPresenter}">
		<Setter Property="Padding" Value="1,1"/>
      	<Setter Property="Margin" Value="0,3,0,2"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:SummaryResultPresenter}">
					<Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1"
                            Padding="{TemplateBinding Padding}"
                            ToolTip="{Binding Path=SummaryResult.ToolTipResolved, RelativeSource={RelativeSource TemplatedParent}}">
                        <TextBlock Text="{Binding Path=SummaryResult.DisplayTextAsync, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>	
	</Style>

    <!--  ********************************** RecordListControl Style **********************************  -->
    <Style TargetType="{x:Type igDP:RecordListControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:RecordListControl}">
                    <ScrollViewer CanContentScroll="true"
                                  Focusable="false"
                                  HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
                                  RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                  Style="{DynamicResource ScrollViewerStyle}"
                                  VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}">
                        <ItemsPresenter RenderTransform="{TemplateBinding ScrollableElementTransform}" />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** RecordSelector Style **********************************  -->
    <Style TargetType="{x:Type igDP:RecordSelector}">
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelBackground}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource GroupByAreaFieldLabelStroke}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="BorderThickness" Value="{StaticResource CellBorderThickness}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="MinHeight" Value="22" />
        <!--<Setter Property="MinWidth" Value="22" />-->
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:RecordSelector}">
                    <ControlTemplate.Resources>             
                        <Storyboard x:Key="MouseEnter">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="selectorArrow" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                              <DoubleAnimationUsingKeyFrames Storyboard.TargetName="adornerIndicator" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="backgroundIndicator" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="MouseLeave">
                          <DoubleAnimationUsingKeyFrames Storyboard.TargetName="adornerIndicator" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="backgroundIndicator" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="selectorArrow" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="RecordActiveTrue">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="selectorArrow_Active" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                            </DoubleAnimationUsingKeyFrames>   
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="adornerIndicatorActive" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <!--<DoubleAnimationUsingKeyFrames Storyboard.TargetName="backgroundIndicatorActive" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>-->
                             <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FixedRecordBtn" Storyboard.TargetProperty="Foreground">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource GlyphHoverBackgroundBrush }" />
                             </ObjectAnimationUsingKeyFrames>           
                        </Storyboard>
                        <Storyboard x:Key="RecordActiveFalse">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="selectorArrow_Active" Storyboard.TargetProperty="(UIElement.Opacity)">
                                  <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                             <DoubleAnimationUsingKeyFrames Storyboard.TargetName="adornerIndicatorActive" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <!--<DoubleAnimationUsingKeyFrames Storyboard.TargetName="backgroundIndicatorActive" Storyboard.TargetProperty="(UIElement.Opacity)">
                             <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>-->
                             <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FixedRecordBtn" Storyboard.TargetProperty="Foreground">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource FilterClearButtonBackgroundBrush}" />
                             </ObjectAnimationUsingKeyFrames> 
                        </Storyboard>
                        <Storyboard x:Key="HideSelector">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="selectors" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid x:Name="MainBorder"
                          Background="{StaticResource TransparentBrush}"
                          Cursor="{TemplateBinding Cursor}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="1"
                                HorizontalAlignment="Right"
                                BorderBrush="{StaticResource CellVPBorderBrush}"
                                BorderThickness="{StaticResource CellBorderThickness}" />
                        <Border Grid.ColumnSpan="4"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <Border x:Name="backgroundIndicator"
                                Grid.ColumnSpan="4"
                                Background="{StaticResource CellVPBackgroundPrimary}"
                                Opacity="0"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <!--<Border x:Name="backgroundIndicatorActive"
                                Grid.ColumnSpan="4"
                                Background="{StaticResource CellVPBackgroundActive}"
                                Opacity="0"
                                 BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />-->
                        <Border x:Name="adornerIndicator"
                                Grid.Column="1"
                                HorizontalAlignment="Right"
                                BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}"
                                BorderThickness="0 0 2 0"
                                Margin="0 0 0 1"
                                Opacity="0" />
                        <Border x:Name="adornerIndicatorActive"
                                Grid.Column="1"
                                HorizontalAlignment="Right"
                                BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}"
                                BorderThickness="0 0 2 0"
                                Margin="0 0 0 1"
                                Opacity="0" />
                        <!--  iDataErrorInfo  -->
                        <Border x:Name="errorBd"
                                Grid.ColumnSpan="4"
                                Width="2"
                                HorizontalAlignment="Right"
                                Visibility="Collapsed" />

                        <!--  Selector Arrows  -->
                        <Grid x:Name="selectors"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Opacity="1">
                            <Grid Margin="14 0 0 0">
                                <Path x:Name="selectorArrow" 
                                      RenderTransformOrigin="0.5,0.5" 
                                      Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}" 
                                      Stretch="Fill" 
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  
                                      Width="5" Height="8" Cursor="{TemplateBinding Cursor}" 
                                      Data="M60,40L60,20 70,30z"
                                      Opacity="0"/>
                            <Path x:Name="selectorDataChanged" 
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  
                                  Width="5" 
                                  Height="8" 
                                  Stretch="Fill" 
                                  Opacity="1" 
                                  Data="M60,40L60,20 70,30z" 
                                  Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}"
							Visibility="Collapsed"/>
                            <Path x:Name="selectorAddRecord" 
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"   
                                  Width="5" 
                                  Height="8"  
                                  Stretch="Fill" 
                                  Opacity="1" 
                                  Data="M60,40L60,20 70,30z" 
                                  Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}"
                                  Visibility="Collapsed" 
                                  RenderTransformOrigin="0.5,0.5"/>
                            <Path x:Name="selectorArrow_Active" 
                                  RenderTransformOrigin="0.5,0.5" 
                                  Fill="{StaticResource GlyphHoverBackgroundBrush}" 
                                  Stretch="Fill" 
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  
                                  Width="5" 
                                  Height="8" 
                                  Cursor="{TemplateBinding Cursor}" 
                                  Data="M60,40L60,20 70,30z"
                                  Opacity="0"/>
                                <!--  AS 7/9/10 TFS35642 - Moved the Command into the trigger  -->
                                <Button x:Name="ClearButton"
                                        Margin="12 0 0 0"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Style="{DynamicResource {x:Static igDP:DataPresenterBase.FilterRecordClearButtonStyleKey}}"
                                        Visibility="{TemplateBinding FilterClearButtonVisibility}" />
                            </Grid>
                        </Grid>

                        <!--  IsAddRecord and IsDataChanged Icons (with mini-selectors)  -->
                        <Grid x:Name="icons"
                              Width="10"
                              Height="10"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Center">
                            <Path x:Name="addRecordOuter"
                                  Width="8"
                                  Height="8"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  Data="{StaticResource PlusIcon}"
                                  Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}"
                                  Opacity="1"
                                  SnapsToDevicePixels="True"
                                  Stretch="Fill"
                                  Visibility="Collapsed" />
                            <Path x:Name="addRecordInner"
                                  Width="8"
                                  Height="8"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  Data="{StaticResource PlusIcon}"
                                  Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}"
                                  Opacity="1"
                                  SnapsToDevicePixels="True"
                                  Stretch="Fill"
                                  Visibility="Collapsed" />
                            <Path x:Name="dataChangedActive"
                                  Width="8"
                                  Height="8"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  Data="{StaticResource DataChangedIcon}"
                                  Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}"
                                  Opacity="1"
                                  Stretch="Fill"
                                  Visibility="Collapsed" />
                            <Path x:Name="dataChanged"
                                  Width="8"
                                  Height="8"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  Data="{StaticResource DataChangedIcon}"
                                  Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}"
                                  Opacity="1"
                                  SnapsToDevicePixels="True"
                                  Stretch="Fill"
                                  Visibility="Collapsed" />
                            <Path x:Name="addRecordActiveOuter"
                                  Width="8"
                                  Height="8"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  Data="{StaticResource PlusIcon}"
                                  Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}"
                                  Opacity="1"
                                  SnapsToDevicePixels="True"
                                  Stretch="Fill"
                                  Visibility="Collapsed" />
                            <Path x:Name="addRecordActiveInner"
                                  Width="8"
                                  Height="8"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  Data="{StaticResource PlusIcon}"
                                  Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}"
                                  Opacity="1"
                                  SnapsToDevicePixels="True"
                                  Stretch="Fill"
                                  Visibility="Collapsed" />
                        </Grid>
                        <!--  JJD 11/26/13 NA 2014 Vol 1 - Record Number  -->
                        <igDP:RecordSelectorNumber x:Name="RecordNumber"
                                                   Grid.Column="1"
                                                   Margin="0 0 4 0"
                                                   Visibility="{Binding Path=RecordNumber, RelativeSource={RelativeSource Self}, Converter={StaticResource emptyToCollapsed}}"
                                                   />          

                        <igDP:FixedRecordButton x:Name="FixedRecordBtn"
                                                Grid.Column="2"
                                                VerticalAlignment="Center"
                                                IsFixedOnBottomAllowed="{TemplateBinding IsFixedOnBottomAllowed}"
                                                IsFixedOnTopAllowed="{TemplateBinding IsFixedOnTopAllowed}"
                                                Opacity="1"
                                                Visibility="{TemplateBinding FixedButtonVisibility}" />
                        <Rectangle x:Name="OrientationHorizontalSep"
                                   Grid.ColumnSpan="4"
                                   Width="1"
                                   HorizontalAlignment="Right"
                                   Fill="#FFE7E7E7"
                                   Visibility="Collapsed" />
                        <igWindows:AutomationControl x:Name="errorIcon"
                                                     Grid.Column="3"
                                                     Margin="2,0,4,0"
                                                     Style="{DynamicResource {x:Static igDP:DataPresenterBase.DataErrorIconStyleKey}}"
                                                     Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="UIElement.MouseEnter">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource MouseEnter}" />                               
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="UIElement.MouseLeave">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource MouseLeave}" />                              
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:RecordSelector.Activated">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource RecordActiveTrue}" />
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:RecordSelector.Deactivated">
                            <EventTrigger.Actions>
                                <BeginStoryboard Storyboard="{StaticResource RecordActiveFalse}" />
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <Trigger Property="IsFilterRecord" Value="True">
                            <Setter Property="Visibility" TargetName="selectorArrow" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="selectorArrow_Active" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="FilterClearButtonVisibility" Value="Visible">
                            <Setter TargetName="ClearButton" Property="Command" Value="{x:Static igDP:DataPresenterCommands.ClearActiveRecordCellFilters}" />
                        </Trigger>
                        <Trigger Property="IsAddRecord" Value="True">
                            <Setter TargetName="addRecordOuter" Property="Visibility" Value="Visible" />
                            <Setter TargetName="addRecordInner" Property="Visibility" Value="Visible" />
                            <Setter Property="Visibility" TargetName="selectorAddRecord" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="selectorArrow" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="selectorArrow_Active" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsDataChanged" Value="True" />
                                <Condition Property="IsFilterRecord" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="dataChanged" Property="Visibility" Value="Visible" />
                            <Setter Property="Visibility" TargetName="selectorDataChanged" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="selectorArrow" Value="Collapsed"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsAddRecord" Value="True" />
                                <Condition Property="IsDataChanged" Value="True" />
                                <Condition Property="IsFilterRecord" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="dataChanged" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="dataChangedActive" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                        <Trigger Property="IsFilterRecord" Value="True">
                            <Setter TargetName="adornerIndicatorActive" Property="BorderBrush" Value="{StaticResource GroupByRecordCellValuePresenterBg}" />
                            <Setter TargetName="adornerIndicator" Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}" />
                            <!--<Setter TargetName="backgroundIndicatorActive" Property="Background" Value="{StaticResource GroupByRecordCellValuePresenterBg}" />-->
                            <Setter TargetName="backgroundIndicator" Property="Background" Value="{StaticResource GroupByRecordCellValuePresenterBg}" />                
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasDataError" Value="True" />
                                <Condition Property="IsDataErrorDisplayModeIcon" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="errorIcon" Property="Visibility" Value="Visible" />
                            <Setter TargetName="errorIcon" Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=DataError}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasDataError" Value="True" />
                                <Condition Property="IsDataErrorDisplayModeHighlight" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="errorBd" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.DataErrorHighlightBorderBrushKey}}" />
                            <Setter TargetName="errorBd" Property="CornerRadius" Value="0" />
                            <Setter TargetName="errorBd" Property="Visibility" Value="Visible" />
                            <Setter TargetName="MainBorder" Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=DataError}" />
                        </MultiTrigger>
                        
                        <Trigger Property="Location" Value="AboveCellArea">
                            <Setter TargetName="selectors" Property="Grid.Column" Value="1" />
                            <Setter TargetName="selectors" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="selectors" Property="Margin" Value="0,0,21,0" />
                            <Setter TargetName="icons" Property="Grid.Column" Value="1" />
                            <Setter TargetName="icons" Property="HorizontalAlignment" Value="Left" />
                            <Setter TargetName="errorIcon" Property="Grid.Column" Value="1" />
                            <!--  JJD 11/26/13 NA 2014 Vol 1 - Record Number  -->
                            <Setter TargetName="RecordNumber" Property="Grid.Column" Value="0" />
                            <Setter TargetName="errorIcon" Property="HorizontalAlignment" Value="Left" />
                            <Setter TargetName="FixedRecordBtn" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="FixedRecordBtn" Property="Margin" Value="21,0,0,0" />
                            <Setter TargetName="MainBorder" Property="Background" Value="#00FFFFFF" />
                            <Setter TargetName="OrientationHorizontalSep" Property="Visibility" Value="Visible" />
                            <Setter TargetName="errorBd" Property="Width" Value="Auto" />
                            <Setter TargetName="errorBd" Property="Height" Value="2" />
                            <Setter TargetName="errorBd" Property="HorizontalAlignment" Value="Stretch" />
                            <Setter TargetName="errorBd" Property="VerticalAlignment" Value="Bottom" />
                            <Setter TargetName="addRecordActiveOuter" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="addRecordActiveInner" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="addRecordOuter" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="addRecordInner" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="icons" Property="Grid.Column" Value="1" />
                            <Setter TargetName="icons" Property="HorizontalAlignment" Value="Center" />
                        </Trigger>
                        
                        <Trigger Property="Location" Value="BelowCellArea">
                            <Setter TargetName="selectors" Property="Grid.Column" Value="1" />
                            <Setter TargetName="selectors" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="selectors" Property="Margin" Value="0,0,21,0" />
                            <Setter TargetName="icons" Property="Grid.Column" Value="1" />
                            <!--  JJD 11/26/13 NA 2014 Vol 1 - Record Number  -->
                            <Setter TargetName="RecordNumber" Property="Grid.Column" Value="0" />
                            <Setter TargetName="icons" Property="HorizontalAlignment" Value="Left" />
                            <Setter TargetName="errorIcon" Property="Grid.Column" Value="1" />
                            <Setter TargetName="errorIcon" Property="HorizontalAlignment" Value="Left" />
                            <Setter TargetName="FixedRecordBtn" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="FixedRecordBtn" Property="Margin" Value="21,0,0,0" />
                            <Setter TargetName="MainBorder" Property="Background" Value="{StaticResource TransparentBrush}" />
                            <Setter TargetName="OrientationHorizontalSep" Property="Visibility" Value="Visible" />
                            <Setter TargetName="errorBd" Property="Width" Value="Auto" />
                            <Setter TargetName="errorBd" Property="Height" Value="2" />
                            <Setter TargetName="errorBd" Property="HorizontalAlignment" Value="Stretch" />
                            <Setter TargetName="errorBd" Property="VerticalAlignment" Value="Top" />
                            <Setter TargetName="addRecordActiveOuter" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="addRecordActiveInner" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="addRecordOuter" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="addRecordInner" Property="HorizontalAlignment" Value="Center" />
                            <Setter TargetName="icons" Property="Grid.Column" Value="1" />
                            <Setter TargetName="icons" Property="HorizontalAlignment" Value="Center" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="FixedButtonVisibility" Value="Collapsed" />
                                <Condition Property="Location" Value="AboveCellArea" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="selectors" Property="Margin" Value="0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="FixedButtonVisibility" Value="Collapsed" />
                                <Condition Property="Location" Value="BelowCellArea" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="selectors" Property="Margin" Value="0" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  JJD 11/26/13 NA 2014 Vol 1 - Record Number  -->
    <!--  ************************* RecordSelectorNumber Style **********************************  -->
    <Style TargetType="{x:Type igDP:RecordSelectorNumber}">
        <Setter Property="Margin" Value="1,1,2,2" />
    </Style>


    <!--  ********************************** ExpanderBar Style **********************************  -->
    <Style BasedOn="{x:Static igThemes:PrimitivesGeneric.ExpanderBar}" TargetType="{x:Type igWindows:ExpanderBar}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ExpanderBarBackgroundKey}}" />
        <Setter Property="BackgroundHover" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ExpanderBarBackgroundHoverKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ExpanderBarBorderKey}}" />
        <Setter Property="BorderHoverBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ExpanderBarBorderHoverKey}}" />
        <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Focusable" Value="False" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type igDP:GroupByAreaMulti}}, Path=IsExpanded}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ExpanderBarBackgroundPressedKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ExpanderBarBorderPressedKey}}" />
            </DataTrigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="BackgroundHover" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ExpanderBarBackgroundPressedKey}}" />
                <Setter Property="BorderHoverBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ExpanderBarBorderPressedKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  ********************************** CheckBox Style **********************************  -->
    <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
        <Setter Property="Background" Value="{StaticResource CheckBoxBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource CheckBoxBorderBrush}" />
        <Setter Property="FontSize" Value="{StaticResource FontSize}" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="6,0,0,0" />
        <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator VerticalAlignment="Center"
                                     Background="{StaticResource TransparentBrush}"
                                     SnapsToDevicePixels="true">
                        <BulletDecorator.Bullet>
                            <Grid x:Name="grid">
                                <Rectangle x:Name="normal"
                                           Width="15"
                                           Height="15"
                                           Fill="{TemplateBinding Background}"
                                           Opacity="1"
                                           Stroke="{TemplateBinding BorderBrush}"
                                           StrokeThickness="1" />
                                <Path x:Name="checkBox"
                                      Width="9"
                                      Height="8"
                                      Data="{StaticResource CheckBoxCheck}"
                                      Fill="{StaticResource CheckBoxCheckBackgroundBrush}"
                                      Stretch="Fill"
                                      Visibility="Collapsed" />
                                <Rectangle x:Name="IndeterminateCheck"
                                           Width="7"
                                           Height="7"
                                           Fill="{StaticResource CheckBoxCheckBackgroundBrush}"
                                           Opacity="0" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="grid" Property="Opacity" Value="0.3" />
                            <!--<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
							<Setter Property="Background" Value="{StaticResource DisabledBackgroundBrush}"/>
							<Setter Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}"/>-->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource CheckBoxHoverBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, CheckBoxHoverBorderBrush}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource CheckBoxPressedBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{StaticResource CheckBoxPressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="checkBox" Property="Visibility" Value="Visible" />
                            <Setter Property="Background" Value="{StaticResource CheckBoxPressedBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="IndeterminateCheck" Property="Opacity" Value="1" />
                            <Setter Property="Background" Value="{StaticResource CheckBoxPressedBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{StaticResource CheckBoxPressedBorderBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{StaticResource CheckBoxPressedBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{StaticResource CheckBoxPressedBorderBrush}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** SummaryCalculatorSelectionControl Style **********************************  -->
    <Style TargetType="{x:Type igDP:SummaryCalculatorSelectionControl}">
        <Style.Resources>
            <DataTemplate DataType="{x:Type igDP:SummaryCalculatorHolder}">
                <igWindows:CardPanel x:Name="mainPanel">
                    <Grid Margin="0,0,0,5">
                        <CheckBox x:Name="checkBox"
                                  AutomationProperties.AutomationId="{Binding Path=Calculator.Name, Converter={StaticResource stringFormatConverter}, ConverterParameter=\{0\}_CheckBox}"
                                  FocusVisualStyle="{x:Null}"
                                  IsChecked="{Binding Path=IsChecked, Mode=TwoWay}"
                                  Style="{StaticResource CheckBoxStyle}">
                            <StackPanel>
                                <Image Margin="5,0,0,0" Source="{Binding Path=Calculator.Image}" />
                                <TextBlock Margin="5,0"
                                           Foreground="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid},
                                                                                              SummaryCSCItemForeground}}"
                                           Text="{Binding Path=Calculator.DisplayName}" />
                            </StackPanel>
                        </CheckBox>
                    </Grid>
                    <Grid Margin="0,0,0,10">
                        <RadioButton x:Name="radioButton"
                                     AutomationProperties.AutomationId="{Binding Path=Calculator.Name, Converter={StaticResource stringFormatConverter}, ConverterParameter=\{0\}_RadioButton}"
                                     FocusVisualStyle="{x:Null}"
                                     IsChecked="{Binding Path=IsChecked, Mode=TwoWay}"
                                     Visibility="Collapsed">
                            <StackPanel>
                                <Image Margin="5,0,0,0" Source="{Binding Path=Calculator.Image}" />
                                <TextBlock Margin="5,0"
                                           Foreground="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid},
                                                                                              SummaryCSCItemForeground}}"
                                           Text="{Binding Path=Calculator.DisplayName}" />
                            </StackPanel>
                        </RadioButton>
                    </Grid>
                    <Rectangle Margin="17,0,0,3"
                               Stroke="#D0000000"
                               StrokeDashArray="0"
                               StrokeThickness="0"
                               Visibility="{Binding Path=IsKeyboardFocusWithin, ElementName=mainPanel, Converter={StaticResource BoolToVisConverter}}" />
                </igWindows:CardPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Path=SelectionControl.AllowMultipleSummaries}" Value="False">
                        <Setter TargetName="checkBox" Property="Visibility" Value="Collapsed" />
                        <Setter TargetName="radioButton" Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
        </Style.Resources>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:SummaryCalculatorSelectionControl}">
                    <ItemsControl Margin="{TemplateBinding Padding}"
                                  Focusable="False"
                                  Foreground="{TemplateBinding Foreground}"
                                  ItemsSource="{TemplateBinding SummaryCalculatorHolders}"
                                  KeyboardNavigation.DirectionalNavigation="Contained" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="1,1,1,1" />
        <Setter Property="Padding" Value="3,3,3,5" />
    </Style>

    <!--  **********************************  LabelContent Style **********************************  -->
    <Style x:Key="LabelContentStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="FontSize" Value="{StaticResource FontSize}" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="Padding" Value="10,3,10,3" />
        <!--<Setter Property="FontWeight" Value="Bold" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ContentPresenter Margin="{TemplateBinding Padding}"
                                      Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
                                      ContentTemplate="{TemplateBinding ContentTemplate}"
                                      ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--  ********************************** SummaryButton Style **********************************  -->
    <Style TargetType="{x:Type igDP:SummaryButton}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Padding" Value="3,0" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBorder}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:SummaryButton}">
                    <Grid Background="{StaticResource TransparentBrush}">
                        <Grid>
                            <Path x:Name="path"
                                  Width="7"
                                  Height="9"
                                  Margin="{TemplateBinding Padding}"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="{StaticResource SummarySigmaIcon}"
                                  Fill="{TemplateBinding Foreground}"
                                  Stretch="Fill" />
                        </Grid>
                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="True"
                               HorizontalOffset="0"
                               IsOpen="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                               Placement="Bottom"
                               PopupAnimation="None"
                               SnapsToDevicePixels="True"
                               StaysOpen="False"
                               VerticalOffset="0">
                            <Border x:Name="border"
                                    Background="{StaticResource SummaryDropDownBackground}"
                                    BorderBrush="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid},SummaryButtonPopupBorder}}"
                                    BorderThickness="1"
                                    FocusManager.IsFocusScope="True"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    KeyboardNavigation.TabNavigation="Contained">
                                <Grid>
                                    <StackPanel Margin="5,5,5,0">
                                        <igDP:SummaryCalculatorSelectionControl x:Name="CalculatorSelectionControl" Field="{TemplateBinding Field}" />
                                        <StackPanel Margin="2"
                                                    HorizontalAlignment="Right"
                                                    Orientation="Horizontal">
                                            <Button x:Name="RowSummaryOkButton"
                                                    Width="24"
                                                    Height="24"
                                                    Margin="0,0,5,0"
                                                    Content="Ok"
                                                    IsDefault="True"
                                                    Style="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid},RowSummaryOkButton}}" />
                                            <Button x:Name="RowSummaryCancelButton"
                                                    Width="24"
                                                    Height="24"
                                                    Content="Cancel"
                                                    IsCancel="True"
                                                    Style="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid},RowSummaryCancelButton}}" />
                                        </StackPanel>
                                    </StackPanel>
                                </Grid>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<DataTrigger Binding="{Binding Visibility, ElementName=PART_RecordContentSite}"  Value="true"> Property="ShouldDisplayRecordContent" Value="False">
                            
							<Setter TargetName="" Property="Visibility" Value="Collapsed"/>
							--><!--JJD 9/4/07 - BR26153 -->
							<!--Only set ExpansionIndicator Visibility to Hidden if is was Visible (see new MultiTrigger below) -->
							<!--<Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />--><!--
						</DataTrigger>-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackgroundHover}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackgroundPressed}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** String Template **********************************  -->
    <DataTemplate x:Key="stringTemplate" DataType="{x:Type System:String}">
        <TextBlock Text="{Binding}" />
    </DataTemplate>

    <!--  ********************************** RecordFilterTreeItem Template **********************************  -->
    <HierarchicalDataTemplate DataType="{x:Type igDP:RecordFilterTreeItem}" ItemsSource="{Binding Items}">
        <CheckBox Content="{Binding DisplayText}"
                  ContentTemplate="{StaticResource stringTemplate}"
                  Focusable="False"
                  Foreground="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type TreeViewItem}}}"
                  IsChecked="{Binding IsChecked, Mode=TwoWay}"
                  Style="{StaticResource CheckBoxStyle}" />
    </HierarchicalDataTemplate>

    <!--  ********************************** GroupByRecordPresenter Style **********************************  -->
    <Style TargetType="{x:Type igDP:GroupByRecordPresenter}">
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelForeground}}" />
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource CellBorderThickness}" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:GroupByRecordPresenter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="sbDisplayNested">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" FillBehavior="HoldEnd" Storyboard.TargetName="ncpVisual" Storyboard.TargetProperty="Opacity">
                                <DiscreteDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                <DiscreteDoubleKeyFrame KeyTime="00:00:00.25" Value="0" />
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5"
                                                      KeyTime="00:00:0.75"
                                                      Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpVisual" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}" />
                                <DiscreteObjectKeyFrame KeyTime="00:00:0.75" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpMask" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}" />
                                <DiscreteObjectKeyFrame KeyTime="00:00:0.75" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="sbHideNested">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" FillBehavior="HoldEnd" Storyboard.TargetName="NestedContentPresenter" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5"
                                                      KeyTime="00:00:00.15"
                                                      Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="row0" Height="Auto" />
                            <RowDefinition x:Name="row1" Height="Auto" />
                            <RowDefinition x:Name="row2" Height="*" />
                        </Grid.RowDefinitions>
                        <Border x:Name="ExpansionIndicatorBorder"
                                Grid.Row="1"
                                Background="{StaticResource TransparentBrush}">
                            <igWindows:ExpansionIndicator x:Name="ExpansionIndicator"
                                                          Panel.ZIndex="1"
                                                          Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}"
                                                          CommandParameter="{TemplateBinding Record}"
                                                          IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                          RenderTransform="{TemplateBinding FixedNearElementTransform}"
                                                          ToggleMode="Manual"
                                                          Visibility="{TemplateBinding ExpansionIndicatorVisibility}" />
                        </Border>
                        	<Rectangle 	x:Name="HeaderContentBackground"
                                        Fill="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelBackground}}"
                                        Grid.Row="0"
                                        Grid.Column="0"				
                                        Grid.ColumnSpan="2"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Stretch"/>
                        <ContentPresenter x:Name="PART_HeaderContentSite"
                                          Grid.Row="0"
                                          Grid.Column="1"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          d:IsHidden="True"
                                          Content="{TemplateBinding HeaderContent}"
                                          Visibility="{Binding Path=HasHeaderContent, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                        <!--  Record content site  -->
                        <Grid x:Name="PART_RecordContentSite"
                              Grid.Row="1"
                              Grid.Column="1"
                              Margin="0"
                              RenderTransform="{TemplateBinding FixedNearElementTransform}"
                              Visibility="Collapsed">
                            <Border Width="Auto"
                                    Height="Auto"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Background="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid},LabelBackground}}"
                                    RenderTransformOrigin="0.5,0.5"
                                    SnapsToDevicePixels="True"
                                    BorderThickness="{StaticResource CellBorderThickness}"
                                    BorderBrush="{StaticResource GroupByAreaFieldLabelStroke}">
                                <!--<Grid Width="Auto"
                                      Height="Auto"
                                      Margin="0,0,0,0">
                                    <Rectangle Fill="{StaticResource TransparentBrush}"
                                               Stroke="#44000000"
                                               StrokeThickness="0" />
                                </Grid>-->
                            </Border>
                            <Border x:Name="highlight"
                                    Width="Auto"
                                    Height="Auto"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                   	Background="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid},LabelBackground}}"
                                    BorderThickness="{StaticResource CellBorderThickness}"
                                    BorderBrush="{StaticResource GroupByAreaFieldLabelStroke}">
                                <!--<Grid Width="Auto"
                                      Height="Auto"
                                      Margin="0,0,0,0">
                                    <Rectangle Fill="{StaticResource TransparentBrush}"
                                               Stroke="#44000000"
                                               StrokeThickness="0" />
                                </Grid>-->
                            </Border>
                            <StackPanel Orientation="Vertical">
                                <ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                Content="{Binding Path=Description, RelativeSource={RelativeSource TemplatedParent}}"
                                                Style="{StaticResource LabelContentStyle}" />
                                <igDP:GroupBySummariesPresenter x:Name="GroupBySummariesPresenter"
                                                                HorizontalAlignment="Left"
                                                                GroupByRecord="{TemplateBinding Record}"
                                                                RenderTransform="{TemplateBinding ScrollableElementTransform}"
                                                                Visibility="Collapsed" />
                            </StackPanel>
                        </Grid>
                        <!--  Nested Content  -->
                        <Grid x:Name="PART_NestedContentSite"
                              Grid.Row="2"
                              Grid.Column="1"
                              Visibility="Collapsed">
                            <Border Background="{StaticResource TransparentBrush}"
                                    BorderBrush="#44102975"
                                    BorderThickness="0"
                                    RenderTransform="{TemplateBinding FixedNearElementTransform}">
                                <ContentControl x:Name="NestedContentPresenter"
                                                Margin="0,0,0,5"
                                                Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}"
                                                RenderTransform="{TemplateBinding ScrollableElementTransform}" />
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.AutoFitToWidth, RelativeSource={RelativeSource Self}}" Value="True" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.ColumnSpan" Value="2" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.ColumnSpan" Value="2" />
                            <Setter TargetName="GroupBySummariesPresenter" Property="HorizontalAlignment" Value="Stretch" />
                            <Setter TargetName="PART_HeaderContentSite" Property="HorizontalAlignment" Value="Stretch" />
                        </MultiDataTrigger>
                        <Trigger Property="ShouldDisplayGroupByRecordContent" Value="true">
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Visible" />
                            <!--<Setter TargetName="ExpansionIndicatorBorder" Property="Background" Value="{StaticResource GroupByRecordCellValuePresenterBg}" />-->
                        </Trigger>
                        <Trigger Property="ShouldDisplayGroupByRecordContent" Value="false">
                            <Setter TargetName="ExpansionIndicatorBorder" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="ShouldDisplaySummaryCells" Value="true">
                            <Setter TargetName="GroupBySummariesPresenter" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical" />
                                <Condition Property="ShouldDisplayGroupByRecordContent" Value="false" />
                            </MultiTrigger.Conditions>
                            <!--<Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="2"/>-->
                            <Setter TargetName="ExpansionIndicatorBorder" Property="Grid.Row" Value="2" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Horizontal" />
                                <Condition Property="ShouldDisplayGroupByRecordContent" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <Trigger Property="HasNestedContent" Value="true">
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="1" />
                            <!--<Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="2" />-->
                            <Setter TargetName="ExpansionIndicatorBorder" Property="Grid.Row" Value="2" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="2" />
                            <Setter TargetName="row0" Property="Height" Value="*" />
                            <Setter TargetName="row2" Property="Height" Value="Auto" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="1" />
                            <!--<Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="2" />-->
                            <Setter TargetName="ExpansionIndicatorBorder" Property="Grid.Row" Value="2" />
                            <Setter TargetName="PART_RecordContentSite" Property="Grid.Row" Value="2" />
                            <Setter TargetName="row0" Property="Height" Value="*" />
                            <Setter TargetName="row2" Property="Height" Value="Auto" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TemplateCardView">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:GroupByRecordPresenter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="sbDisplayNested">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" FillBehavior="HoldEnd" Storyboard.TargetName="ncpVisual" Storyboard.TargetProperty="Opacity">
                                <DiscreteDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                <DiscreteDoubleKeyFrame KeyTime="00:00:00.25" Value="0" />
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5"
                                                      KeyTime="00:00:0.75"
                                                      Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpVisual" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}" />
                                <DiscreteObjectKeyFrame KeyTime="00:00:0.75" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ncpMask" Storyboard.TargetProperty="(UIElement.Visibility)">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}" />
                                <DiscreteObjectKeyFrame KeyTime="00:00:0.75" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="sbHideNested">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" FillBehavior="HoldEnd" Storyboard.TargetName="NestedContentPresenter" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeySpline="0.5,0.5,0.5,0.5"
                                                      KeyTime="00:00:00.15"
                                                      Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" MinWidth="20" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <!--  Row for nested content  -->
                        <!--  Record content site  -->
                        <Grid x:Name="PART_RecordContentSite"
                              Grid.Row="1"
                              Grid.Column="0"
                              Margin="0"
                              Visibility="Collapsed"
                              d:LayoutOverrides="GridBox">
                            <!--  Background Bar  -->
                            <Border Width="Auto"
                                    Height="Auto"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Background="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid},LabelBackground}}"
                                    RenderTransformOrigin="0.5,0.5"
                                    SnapsToDevicePixels="True">
                                <Grid Width="Auto"
                                      Height="Auto"
                                      Margin="0,0,0,0">
                                    <Rectangle Fill="{StaticResource TransparentBrush}"
                                               Stroke="#44000000"
                                               StrokeThickness="1" />
                                    <Rectangle Margin="1"
                                               Fill="{StaticResource TransparentBrush}"
                                               Stroke="#44FFFFFF"
                                               StrokeThickness="1" />
                                </Grid>
                            </Border>
                            <!--  End Background Bar  -->
                            <Border x:Name="highlight"
                                    Width="Auto"
                                    Height="Auto"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Background="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid},LabelHighlight}}">
                                <Grid Width="Auto"
                                      Height="Auto"
                                      Margin="0,0,0,0">
                                    <Rectangle Fill="{StaticResource TransparentBrush}"
                                               Stroke="#44000000"
                                               StrokeThickness="1" />
                                    <Rectangle Margin="1"
                                               Fill="{StaticResource TransparentBrush}"
                                               Stroke="#44FFFFFF"
                                               StrokeThickness="1" />
                                </Grid>
                            </Border>
                            <!--  Label Text  -->
                            <StackPanel Orientation="Vertical">
                                <ContentControl HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                Content="{Binding Path=Description, RelativeSource={RelativeSource TemplatedParent}}"
                                                Style="{StaticResource LabelContentStyle}" />
                                <igDP:GroupBySummariesPresenter x:Name="GroupBySummariesPresenter"
                                                                Grid.Row="1"
                                                                HorizontalAlignment="Left"
                                                                GroupByRecord="{TemplateBinding Record}"
                                                                Visibility="Collapsed" />
                            </StackPanel>
                        </Grid>
                        <!--  Nested Content  -->
                        <Grid x:Name="PART_NestedContentSite"
                              Grid.Row="1"
                              Grid.Column="0"
                              Visibility="Collapsed">
                            <Border BorderThickness="1">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset="0.25" Color="#FFFFFFFF" />
                                        <GradientStop Offset="1.2" Color="#FFEEEEEE" />
                                    </LinearGradientBrush>
                                </Border.Background>
                                <ContentControl x:Name="NestedContentPresenter"
                                                Margin="0,0,0,5"
                                                Content="{Binding Path=NestedContent, RelativeSource={RelativeSource TemplatedParent}}" />
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ShouldDisplayGroupByRecordContent" Value="true">
                            <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_RecordContentSite" Property="TextBlock.Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
                        </Trigger>
                        <Trigger Property="ShouldDisplaySummaryCells" Value="true">
                            <Setter TargetName="GroupBySummariesPresenter" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="HasNestedContent" Value="true">
                            <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** GroupByArea Style **********************************  -->
    <Style TargetType="{x:Type igDP:GroupByArea}">
        <Setter Property="Prompt1" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.GroupByAreaPrompt1}}" />
        <Setter Property="Prompt2" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.GroupByAreaPrompt2}}" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelForeground}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.GroupByAreaMultiBackgroundBrush}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:GroupByArea}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="TurnOnInsertionPoint">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_InsertionPoint" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="TurnOffInsertionPoint">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PART_InsertionPoint" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="ShowPrompts">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HidePrompts">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <igWindows:ExpanderBar x:Name="ExpanderBarButton"/>   
                        <igWindows:ExpanderDecorator Grid.Row="1"
                                                     HorizontalAlignment="Stretch"
                                                     IsExpanded="{Binding Path=IsExpanded, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                     Orientation="Vertical">
                            <Grid x:Name="outerGrid" SnapsToDevicePixels="True">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid Grid.Row="0" Grid.RowSpan="2">
                                    <Rectangle x:Name="Rectangle"
                                               Fill="{TemplateBinding Background}"
                                               RenderTransformOrigin="0.5,0.5" />
                                    <Border x:Name="Border"
                                            Width="Auto"
                                            Margin="0"
                                            HorizontalAlignment="Stretch"
                                            Background="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid},GroupByAreaBackgroundHighlight}}"
                                            CornerRadius="0"
                                            RenderTransformOrigin="0.5,0.5" />
                                </Grid>
                                <StackPanel Margin="6 12 6 0" Orientation="Horizontal">
                                    <ContentControl x:Name="prompt1"
                                                    Margin="1,1,10,1"
                                                    Content="{TemplateBinding Prompt1}"
                                                    ContentTemplate="{TemplateBinding Prompt1Template}"
                                                    Foreground="{StaticResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonBackground}}"/>
                                    <ContentControl x:Name="prompt2"
                                                    Content="{TemplateBinding Prompt2}"
                                                    ContentTemplate="{TemplateBinding Prompt2Template}"
                                                    />
                                </StackPanel>
                                <Grid x:Name="PART_GroupedFieldLabelsArea"
                                      Margin="0,12,0,0"
                                      VerticalAlignment="Top">
                                    <!-- JM 02-13-18 TFS248336 - Remove the binding on the Height property. -->
                                    <!--<igDP:GroupByAreaFieldListBox x:Name="GroupedFieldList"
                                                                  Height="{Binding Path=ActualHeight, ElementName=AvailableFieldList}"
                                                                  MinHeight="22"
                                                                  AutomationProperties.Name="GroupedFieldsList"
                                                                  ItemsSource="{TemplateBinding GroupedFieldLabels}" />-->
                                    <igDP:GroupByAreaFieldListBox x:Name="GroupedFieldList"
                                                                  MinHeight="22"
                                                                  AutomationProperties.Name="GroupedFieldsList"
                                                                  ItemsSource="{TemplateBinding GroupedFieldLabels}" />
                                </Grid>
                                <StackPanel Grid.Row="1" Orientation="Vertical">
                                    <Grid x:Name="PART_AvailableFieldLabelsArea"
                                          Margin="0,4,0,3"
                                          Visibility="Visible">
                                        <igDP:GroupByAreaFieldListBox x:Name="AvailableFieldList"
                                                                      AutomationProperties.Name="AvailableFieldsList"
                                                                      ItemsSource="{TemplateBinding AvailableFieldLabels}" />
                                    </Grid>
                                    <igWindows:ExpanderBar x:Name="ExpanderBarButtonBottom" Height="5" />
                                </StackPanel>
                                <!--  Insertion Point  -->
                                <Polygon x:Name="PART_InsertionPoint"
                                         Margin="12"
                                         HorizontalAlignment="Left"
                                         VerticalAlignment="Top"
                                         Fill="#FF151C55"
                                         Opacity="0"
                                         Points="0,0 10,0 5,6"
                                         StrokeEndLineCap="Round"
                                         StrokeLineJoin="Round"
                                         StrokeStartLineCap="Round" />
                            </Grid>
                        </igWindows:ExpanderDecorator>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="igDP:GroupByArea.ShowInsertionPoint">
                            <BeginStoryboard x:Name="TurnOnInsertionPoint_BeginStoryboard" Storyboard="{StaticResource TurnOnInsertionPoint}" />
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:GroupByArea.HideInsertionPoint">
                            <BeginStoryboard x:Name="TurnOffInsertionPoint_BeginStoryboard" Storyboard="{StaticResource TurnOffInsertionPoint}" />
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:GroupByArea.ShowPrompts">
                            <BeginStoryboard x:Name="ShowPrompts_BeginStoryboard" Storyboard="{StaticResource ShowPrompts}" />
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:GroupByArea.HidePrompts">
                            <BeginStoryboard x:Name="HidePrompts_BeginStoryboard" Storyboard="{StaticResource HidePrompts}" />
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** GroupByAreaMulti Style **********************************  -->
    <Style TargetType="{x:Type igDP:GroupByAreaMulti}">
        <Style.Resources>
            <DataTemplate DataType="{x:Type igDP:Field}">
                <igDP:LabelPresenter Margin="{Binding Path=(igDP:GroupByAreaMulti.Offset)}"
                                     VerticalAlignment="Top"
                                     Field="{Binding}"
                                     IsInGroupByArea="true" />
            </DataTemplate>
        </Style.Resources>
        <Setter Property="Prompt1" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.GroupByAreaPrompt1}}" />
        <Setter Property="Prompt2" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.GroupByAreaPrompt2}}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.GroupByAreaMultiBackgroundBrush}}" />
        <Setter Property="BorderThickness" Value="{StaticResource CellBorderThickness}" />
        <Setter Property="BorderBrush" Value="{StaticResource GroupByAreaMultiBackgroundStroke}" />
        <Setter Property="Padding" Value="0,5" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelForeground}}" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="FieldLayoutDescriptionTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border>
                        <TextBlock Margin="4,2,4,2"
                                   VerticalAlignment="Center"
                                   igDP:GroupByAreaMulti.IsConnectorLineTarget="False"
                                   Foreground="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelForeground}}"
                                   Text="{Binding Description}" />
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ConnectorLinePen" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ConnectorLinePen}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:GroupByAreaMulti}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="ShowPrompts">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HidePrompts">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="prompt1" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="prompt2" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="0" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <igWindows:ExpanderBar x:Name="ExpanderBarButton" Height="10" />
                        <igWindows:ExpanderDecorator Grid.Row="1"
                                                     IsExpanded="{Binding Path=IsExpanded, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                     Orientation="Vertical">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Border Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        SnapsToDevicePixels="True">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition MaxHeight="13" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <igWindows:CardPanel Grid.RowSpan="2" Margin="{TemplateBinding Padding}">
                                            <StackPanel Margin="6"
                                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                        Orientation="Horizontal">
                                                <ContentControl x:Name="prompt1"
                                                                Margin="1,1,10,1"
                                                                VerticalAlignment="Center"
                                                                Content="{TemplateBinding Prompt1}"
                                                                ContentTemplate="{TemplateBinding Prompt1Template}" />
                                                <ContentControl x:Name="prompt2"
                                                                VerticalAlignment="Center"
                                                                Content="{TemplateBinding Prompt2}"
                                                                ContentTemplate="{TemplateBinding Prompt2Template}" />
                                            </StackPanel>
                                            <ItemsControl VerticalAlignment="Center" ItemsSource="{Binding Path=FieldLayoutGroupByInfos, RelativeSource={RelativeSource TemplatedParent}}">
                                                <ItemsControl.Template>
                                                    <ControlTemplate>
                                                        <ScrollViewer CanContentScroll="False" Style="{StaticResource customScrollViewer}">
                                                            <igDP:GroupByAreaMultiPanel ConnectorLinePen="{Binding Path=ConnectorLinePen, RelativeSource={RelativeSource AncestorType={x:Type igDP:GroupByAreaMulti}}}"
                                                                                        IsItemsHost="True"
                                                                                        Orientation="{Binding Path=FieldLayoutOrientation, RelativeSource={RelativeSource AncestorType={x:Type igDP:GroupByAreaMulti}}}" />
                                                        </ScrollViewer>
                                                    </ControlTemplate>
                                                </ItemsControl.Template>
                                            </ItemsControl>
                                        </igWindows:CardPanel>
                                    </Grid>
                                </Border>
                            </Grid>
                        </igWindows:ExpanderDecorator>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="igDP:GroupByAreaMulti.ShowPrompts">
                            <BeginStoryboard x:Name="ShowPrompts_BeginStoryboard" Storyboard="{StaticResource ShowPrompts}" />
                            <StopStoryboard BeginStoryboardName="HidePrompts_BeginStoryboard" />
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igDP:GroupByAreaMulti.HidePrompts">
                            <BeginStoryboard x:Name="HidePrompts_BeginStoryboard" Storyboard="{StaticResource HidePrompts}" />
                            <StopStoryboard BeginStoryboardName="ShowPrompts_BeginStoryboard" />
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="FieldLayoutOrientation" Value="Horizontal">
                <Setter Property="ConnectorLinePen" Value="{x:Null}" />
                <Setter Property="FieldLayoutOffsetY" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  ********************************** FieldChooser Style **********************************  -->
     <Style TargetType="{x:Type igDP:FieldChooser}">
        <Style.Resources>
            <!--  Represents a field in the field chooser.  -->
                <DataTemplate DataType="{x:Type igDP:FieldChooserEntry}">
                <DockPanel>
                    <editors:XamCheckEditor x:Name="checkBox" 
                                            DockPanel.Dock="Left" 
                                            IsThreeState="false" 
                                            IsEnabled="{Binding Path=IsParentFieldGroupVisible}"
                                            Margin="{Binding Path=LabelIndent}"
                                            Value="{Binding Path=IsVisible, Mode=TwoWay}"/>
                    <igWindows:CardPanel x:Name="labelArea" DockPanel.Dock="Left">
                        <igDP:LabelPresenter x:Name="label" 
                                             IsInFieldChooser="true" 
                                             Visibility="Collapsed"
                                             IsEnabled="{Binding Path=IsParentFieldGroupVisible}"
                                             HorizontalContentAlignment="Left" 
                                             VerticalContentAlignment="Center" 
                                             BorderThickness="0"
                                             IsSelectedInFieldChooser="{Binding Path=IsSelected}" 
                                             Margin="5,0,0,0"
                                             Background="{StaticResource TransparentBrush}">
                            <!--This is for toggling the visibility of a field by double clicking on it in
						the field chooser.-->
                            <igDP:LabelPresenter.InputBindings>
                                <MouseBinding MouseAction="LeftDoubleClick" Command="{x:Static igDP:FieldChooserCommands.ToggleVisibility}"/>
                            </igDP:LabelPresenter.InputBindings>
                        </igDP:LabelPresenter>
                        <igDP:FieldGroupLabelPresenter	x:Name="grouplabel"
                                                       IsInFieldChooser="true"
                                                       IsEnabled="{Binding Path=IsParentFieldGroupVisible}"
                                                       Visibility="Collapsed"
                                                       HorizontalContentAlignment="Left"
                                                       VerticalContentAlignment="Center"
                                                       IsSelectedInFieldChooser="{Binding Path=IsSelected}"
                                                       Margin="5,0,0,0"
                                                       BorderThickness="0">

                            <!--This is for toggling the visibility of a field by double clicking on it in
						the field chooser.-->
                            <igDP:FieldGroupLabelPresenter.InputBindings>
                                <MouseBinding MouseAction="LeftDoubleClick"
                                              Command="{x:Static igDP:FieldChooserCommands.ToggleVisibility}"	/>
                            </igDP:FieldGroupLabelPresenter.InputBindings>
                        </igDP:FieldGroupLabelPresenter>
                    </igWindows:CardPanel>
                </DockPanel>
                <DataTemplate.Triggers>
                    <!--When DisplayHiddenFieldsOnly is true, we display only the fields that are currently hidden in
						the data presenter. In this mode we shouldn't display checkboxes next to them because they all
						would be unchecked to begin with (since all fields being displayed are hidden) and checking a
						checkbox will make the field disappear from the field chooser since it would not longer be hidden
						in the data presenter.-->
                    <DataTrigger Binding="{Binding Path=DisplayHiddenFieldsOnly, RelativeSource={RelativeSource AncestorType={x:Type igDP:FieldChooser}}}" Value="true">
                        <Setter TargetName="checkBox" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=IsFieldGroup}" Value="false">
                        <Setter TargetName="label" Property="Visibility" Value="Visible" />
                        <Setter TargetName="label" Property="Field" Value="{Binding Path=Field}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=IsFieldGroup}" Value="true">
                        <Setter TargetName="grouplabel" Property="Visibility" Value="Visible" />
                        <Setter TargetName="grouplabel" Property="FieldGroup" Value="{Binding Path=FieldGroup}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=IsParentFieldGroupVisible}" Value="false">
                        <Setter TargetName="labelArea" Property="Opacity" Value=".35" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
            <!--Template that re
                Template that represents field groups displayed in the combo editor's drop-down list
                as well as its edit area.
            -->
            <DataTemplate DataType="{x:Type igDP:FieldChooserGroup}">
                <StackPanel x:Name="panel" ToolTip="{Binding FieldLayout.ToolTip}">
                    <TextBlock x:Name="fieldLayoutDescription" Text="{Binding Path=FieldLayout.Description}" />
                    <StackPanel x:Name="filterPanel"
                                Orientation="Horizontal"
                                Visibility="Collapsed">
                        <!--  This rectangle is for indenting the filter description.  -->
                        <Rectangle Width="20" />
                        <TextBlock Text="{Binding Path=FieldFilter.Description}" />
                    </StackPanel>
                </StackPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Path=HasFieldFilter}" Value="true">
                        <Setter TargetName="panel" Property="ToolTip" Value="{Binding FieldFilter.ToolTip}" />
                        <Setter TargetName="filterPanel" Property="Visibility" Value="Visible" />
                        <Setter TargetName="fieldLayoutDescription" Property="Visibility" Value="Collapsed" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
        </Style.Resources>
        <Setter Property="AllFieldsPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.AllFieldsPrompt}}"/>
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource FontSize}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemPopupFillBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:FieldChooser}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{StaticResource CellBorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true"
                            Margin="0 0 0 -1">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <!--<DockPanel Visibility="{TemplateBinding FieldGroupSelectorVisibilityResolved}">-->
                         <Border BorderBrush="{StaticResource ListboxBorderBrush}" BorderThickness="0 0 0 1" >
                             <DockPanel Margin="0 4 2 2">
                              <editors:XamCheckEditor x:Name="toggleAllCheckBox" 
                                                      DockPanel.Dock="Left" 
                                                      IsThreeState="false" 
                                                      Value="{Binding Path=AllCurrentFieldsVisible, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}" 
                                                      Visibility="{Binding Path=DisplayHiddenFieldsOnly, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource NotBoolToVisConverter}, Mode=OneWay}" 
                                                      Margin="5,0,0,0"/>
                                 <!-- JJD 05/11/16 - TFS219295  
                                    Added a label for when there is only one FieldLayout and the XamComboEditor below is collapsed-->
                             <Label x:Name="allFieldsPrompt" DockPanel.Dock="Left" 
                                    Target="{Binding ElementName=toggleAllCheckBox}"
                                    Padding="3,5,5,5"
                                    Content="{Binding Path=AllFieldsPrompt, RelativeSource={RelativeSource TemplatedParent}}"
                                    Foreground="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldLayoutForeground}}"
                                    Visibility="Collapsed"/>
                                <!--  Combo editor that has list of field layouts in its drop-down.  -->
                                <editors:XamComboEditor x:Name="fieldGroupSelector"
                                                        Margin="2 2 2 4"
                                                        HorizontalAlignment="Stretch"
                                                        DisplayValueSource="Value"
                                                        DockPanel.Dock="Right"
                                                        ItemsSource="{TemplateBinding FieldGroups}"
                                                        ValueType="{x:Type igDP:FieldChooserGroup}"
                                                        Value="{Binding Path=CurrentFieldGroup, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}"
                                                        Visibility="{TemplateBinding FieldGroupSelectorVisibilityResolved}" />
                            </DockPanel>
                          </Border>                   
                            <igWindows:CardPanel Grid.Row="1" Margin="0">
                                <!--  List box that displays the fields  -->
                                <ListBox x:Name="fieldsListBox"
                                         HorizontalContentAlignment="Stretch"
                                         BorderThickness="0"
                                         ItemsSource="{TemplateBinding CurrentFields}"
                                         SelectedItem="{Binding Path=SelectedField, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}"
                                         SelectionMode="Single"
                                         Style="{DynamicResource ListBoxStyle}">
                                    <!--
                                        Since the LabelPresenter elements are rendering the selected state, make the listbox item
                                        from rendering selected state itself. Also prevent it from drawing the dashed focus rect.
                                    -->
                                    <ListBox.ItemContainerStyle>
                                        <Style TargetType="{x:Type ListBoxItem}">
                                            <Setter Property="BorderBrush" Value="{StaticResource ListboxBorderBrush}" />
                                            <Setter Property="BorderThickness" Value="{StaticResource CellBorderThickness}" />                                            
                                            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                        <Border Background="{TemplateBinding Background}"
                                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                                BorderThickness="{TemplateBinding BorderThickness}"
                                                                Padding="{TemplateBinding Padding}">
                                                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ListBox.ItemContainerStyle>
                                    <ListBox.InputBindings>
                                        <!--
                                            This is for toggling the visibility of the field in the data presenter (essentially the
                                            checkbox next to the field label).
                                        -->
                                        <KeyBinding Key="Space" Command="{x:Static igDP:FieldChooserCommands.ToggleVisibility}" />
                                    </ListBox.InputBindings>
                                </ListBox>
                                <Border x:Name="highlightBorder"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Stretch"
                                        BorderBrush="{StaticResource TransparentBrush}"
                                        BorderThickness="1" />
                            </igWindows:CardPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- JJD 05/11/16 - TFS219295  
                             When there is only one FieldLayout the FieldGroupSelectorVisibilityResolved will be collapsed.
                             In this case we want to bind the new Label's visibility to the XamCheckBox's-->
                      <Trigger Property="FieldGroupSelectorVisibilityResolved" Value="Collapsed">
                            <Setter TargetName="allFieldsPrompt" Property="Visibility" Value="{Binding ElementName=toggleAllCheckBox, Path=Visibility}" />
                        </Trigger>
                        <!--
                            NOTE: The following trigger can be used to highlight the field chooser
                            when a field from it is being dragged.
                        -->
                        <Trigger Property="IsDraggingItem" Value="true">
                            <Setter TargetName="highlightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldChooserDragBorderBrushKey}}" />
                        </Trigger>
                        <!--
                            NOTE: The following trigger can be used to highlight the field chooser
                            when a field from the associated data presenter is being dragged.
                        -->
                        <Trigger Property="IsDraggingItemFromDataPresenter" Value="true">
                            <Setter TargetName="highlightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldChooserDragBorderBrushKey}}" />
                        </Trigger>
                        <!--
                            NOTE: The following trigger can be used to highlight the field chooser
                            when a field from the associated data presenter is being dragged over the
                            field chooser.
                        -->
                        <Trigger Property="IsDragItemOver" Value="true">
                            <Setter TargetName="highlightBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldChooserDragBorderBrushKey}}" />
                        </Trigger>
                        <!--
                            SSP 10/21/09 TFS22726 - Added the following DataTrigger to hide the toggleAllCheckBox
                            when there are no fields in the field chooser.
                        -->
                        <DataTrigger Binding="{Binding Path=CurrentFields.Count, RelativeSource={RelativeSource Self}}" Value="0">
                            <Setter TargetName="toggleAllCheckBox" Property="IsEnabled" Value="false" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** RecordScrollTipInfo Template **********************************  -->
    <HierarchicalDataTemplate DataType="{x:Type igDP:RecordScrollTipInfo}" ItemsSource="{Binding Path=Children}">
        <HierarchicalDataTemplate.Resources>
            <DataTemplate DataType="{x:Type igDP:DataRecord}">
                <StackPanel Orientation="Horizontal">
                    <ContentControl Margin="3"
                                    VerticalAlignment="Top"
                                    Content="{Binding Path=FieldLayout.ScrollTipField.Label}"
                                    FontFamily="{StaticResource FontFamily}"
                                    FontWeight="{StaticResource FontSemiBold}"                                    
                                    Foreground="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid},LabelForeground}}" />
                    <TextBlock Margin="1,2,2,0"
                               VerticalAlignment="Top"
                               Foreground="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid},LabelForeground}}"
                               Text=":"
                               Visibility="{Binding Path=FieldLayout.ScrollTipField.HasLabel, Converter={StaticResource BoolToVisConverter}}" />
                    <!--
                        JJD 09/09/15 - TFS206086
                        For tree fields we need a TreeCellValuePresenter in case a style was supplied that targets
                        that type so place both elements in the template and set their visibility to 'Collapsed' then
                        use triggers below to make one or the other visible and bind its Field property
                    -->
                    <!--<igDP:CellValuePresenter Padding="0" Margin="0" Field="{Binding Path=FieldLayout.ScrollTipField}" VerticalAlignment="Top" BorderThickness="0"/>-->
                    <igDP:CellValuePresenter x:Name="Cvp"
                                             Margin="0"
                                             VerticalAlignment="Top"
                                             BorderThickness="0"
                                             Padding="0"
                                             Visibility="Collapsed"
                                             Foreground="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldLayoutForeground}}" />
                    <igDP:TreeCellValuePresenter x:Name="Tcvp"
                                                 Margin="0"
                                                 VerticalAlignment="Top"
                                                 BorderThickness="0"
                                                 Padding="0"
                                                 Visibility="Collapsed"
                                                 Foreground="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FieldLayoutForeground}}" />
                </StackPanel>
                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding Path=FieldLayout.ScrollTipField.IsTreeField}" Value="True">
                        <Setter TargetName="Tcvp" Property="Visibility" Value="Visible" />
                        <Setter TargetName="Tcvp" Property="Field" Value="{Binding Path=FieldLayout.ScrollTipField}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=FieldLayout.ScrollTipField.IsTreeField}" Value="False">
                        <Setter TargetName="Cvp" Property="Visibility" Value="Visible" />
                        <Setter TargetName="Cvp" Property="Field" Value="{Binding Path=FieldLayout.ScrollTipField}" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>
            <DataTemplate DataType="{x:Type igDP:GroupByRecord}">
                <TextBlock Margin="0,3" Text="{Binding Path=Description}" Foreground="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelForeground}}"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type igDP:ExpandableFieldRecord}">
                <TextBlock Margin="0,3" Text="{Binding Path=Description}" Foreground="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelForeground}}"/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type igDP:SummaryRecord}">
                <TextBlock Margin="0,3" Text="{Binding Path=Description}" Foreground="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, LabelForeground}}"/>
            </DataTemplate>
        </HierarchicalDataTemplate.Resources>
        <ContentControl Content="{Binding Path=Record}" />
    </HierarchicalDataTemplate>

    <!--  ********************************** RecordScrollTip **********************************  -->
    <Style TargetType="{x:Type igDP:RecordScrollTip}">
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="Background" Value="{StaticResource RecordScrollTipBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource RecordScrollTipStroke}" />
        <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:RecordScrollTip}">
                    <Grid SnapsToDevicePixels="True">
                        <Border x:Name="outerBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter Margin="5" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TreeView ItemsSource="{Binding}">
                        <TreeView.Style>
                            <Style TargetType="{x:Type TreeView}">
                                <Setter Property="Background" Value="{StaticResource TreeViewBackground}" />
                                <Setter Property="BorderThickness" Value="0" />
                                <Setter Property="VerticalContentAlignment" Value="Top" />
                                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
                            </Style>
                        </TreeView.Style>
                        <TreeView.ItemContainerStyle>
                            <Style TargetType="{x:Type TreeViewItem}">
                                <Setter Property="IsExpanded" Value="true" />
                                <Setter Property="Focusable" Value="false" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <StackPanel Orientation="Vertical">
                                                <ContentPresenter x:Name="PART_Header"
                                                                  Grid.ColumnSpan="2"
                                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                                  Content="{TemplateBinding HeaderedContentControl.Header}"
                                                                  ContentSource="Header"
                                                                  ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}" />
                                                <StackPanel x:Name="ItemsHostPanel" Orientation="Horizontal">
                                                    <FrameworkElement Height="0" MinWidth="10" />
                                                    <ItemsPresenter x:Name="ItemsHost"
                                                                    Grid.Row="1"
                                                                    Grid.Column="1"
                                                                    Grid.ColumnSpan="2" />
                                                </StackPanel>
                                            </StackPanel>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </TreeView.ItemContainerStyle>
                    </TreeView>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** FilterCellValuePresenter Style **********************************  -->
    <Style BasedOn="{x:Static themes:DataPresenterGeneric.FilterCellValuePresenter}" TargetType="{x:Type igDP:FilterCellValuePresenter}">
        <Setter Property="Background" Value="{DynamicResource FilterCellValuePresenterBg}" />
        <Setter Property="BorderBrush" Value="{DynamicResource FilterCellValuePresenterStroke}" />
        <Setter Property="BorderThickness" Value="{StaticResource CellBorderThickness}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="BackgroundHover" Value="{DynamicResource FilterCellValuePresenterBgHover}" />
        <Setter Property="BorderHoverBrush" Value="{DynamicResource FilterCellValuePresenterStrokeHover}" />
        <Setter Property="BackgroundActive" Value="{DynamicResource FilterCellValuePresenterBgActive}" />
        <Setter Property="BorderActiveBrush" Value="{DynamicResource FilterCellValuePresenterStrokeActive}" />
        <Setter Property="BackgroundSelected" Value="{DynamicResource FilterCellValuePresenterBgSelected}" />
        <Setter Property="BorderSelectedBrush" Value="{DynamicResource FilterCellValuePresenterStrokeSelected}" />
        <Setter Property="BackgroundFieldSelected" Value="{DynamicResource FilterCellValuePresenterBgFieldSelected}" />
        <Setter Property="BorderFieldSelectedBrush" Value="{DynamicResource FilterCellValuePresenterStrokeFieldSelected}" />
        <Setter Property="BackgroundPrimary" Value="{DynamicResource FilterCellValuePresenterBgPrimary}" />
        <Setter Property="BorderPrimaryBrush" Value="{DynamicResource FilterCellValuePresenterStrokePrimary}" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="ForegroundStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundPrimaryStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundSelectedStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundFieldSelectedStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}}" />
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="Padding" Value="6 0 6 1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:FilterCellValuePresenter}">
                    <igWindows:CardPanel>
                        <Border x:Name="MainBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding CornerRadius}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <igWindows:ComparisonOperatorSelector Grid.Column="0"
                                                                  AllowableOperators="{Binding Path=Field.FilterOperatorDropDownItemsResolved, RelativeSource={RelativeSource TemplatedParent}}"
                                                                  Foreground="{TemplateBinding Foreground}"
                                                                  IsDropDownOpen="{Binding Path=IsOperatorDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                                  SelectedOperator="{Binding Path=Operator, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                                  Visibility="{Binding Path=Field.FilterOperatorVisibilityResolved, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Button Grid.Column="3"
                                    Margin="0"
                                    Command="{x:Static igDP:DataPresenterCommands.ClearActiveCellFilters}"
                                    Style="{DynamicResource {x:Static igDP:DataPresenterBase.FilterCellClearButtonStyleKey}}"
                                    Visibility="{Binding Path=Field.FilterClearButtonVisibilityResolved, RelativeSource={RelativeSource TemplatedParent}}" />
                            <igDP:ExcelStyleFilterButton x:Name="ExcelStyleFilterButton"
                                                         Grid.Column="2"
                                                         Width="Auto"
                                                         Field="{TemplateBinding Field}" />
                            <ContentPresenter x:Name="PART_EditorSite"
                                              Grid.Column="1"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Style="{TemplateBinding ForegroundStyle}" />
                        </Grid>
                    </igWindows:CardPanel>
                    <!--  SS 05/27/2015 TFS194609 Change RelativeSource to Self TargetName is not set  -->
                    <ControlTemplate.Triggers>
                        <!--  HighlightAsPrimary  -->
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundPrimary, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderPrimaryBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundPrimaryStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <!--  IsFieldSelected  -->
                        <Trigger Property="IsFieldSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundFieldSelected, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderFieldSelectedBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundFieldSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <!--  IsSelected  -->
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{Binding Path=BackgroundSelected, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderSelectedBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <!--  IsActive  -->
                        <Trigger Property="IsActive" Value="true">
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Background" Value="{Binding Path=BackgroundActive, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderActiveBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
                        </Trigger>
                        <!--  IsMouseOver  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                                <Condition Property="IsFieldSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}" />
                            <Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}" />
                            <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                            <!--<Setter Property="BorderThickness" Value="0 0 1 1" />-->
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** FixedFieldSplitter Style **********************************  -->
    <Style BasedOn="{StaticResource FixedFieldSplitterBaseStyle}" TargetType="{x:Type igDP:FixedFieldSplitter}">
        <Setter Property="Background" Value="{StaticResource FixedFieldsSplitterBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterStrokeBrush}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:FixedFieldSplitter}">
                    <Grid Background="{StaticResource TransparentBrush}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Border x:Name="splitterMainBd"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border x:Name="splitterHoverBd"
                                Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterVerticalHottrackFillBrush}}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Opacity="0"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Grid x:Name="gripperLinesVertical"
                              Margin="-1,0,0,0"
                              HorizontalAlignment="Center"
                              Visibility="Collapsed">
                            <StackPanel HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Orientation="Vertical">
                                <Rectangle Width="2"
                                           Height="2"
                                           Margin="1"
                                           Fill="{StaticResource IndicatorsFill}"
                                           StrokeThickness="0" />
                                <Rectangle Width="2"
                                           Height="2"
                                           Margin="1"
                                           Fill="{StaticResource IndicatorsFill}"
                                           StrokeThickness="0" />
                                <Rectangle Width="2"
                                           Height="2"
                                           Margin="1"
                                           Fill="{StaticResource IndicatorsFill}"
                                           StrokeThickness="0" />
                                <Rectangle Width="2"
                                           Height="2"
                                           Margin="1"
                                           Fill="{StaticResource IndicatorsFill}"
                                           StrokeThickness="0" />
                            </StackPanel>
                        </Grid>
                        <Grid x:Name="gripperLinesHorizontal"
                              Margin="0,-1,0,0"
                              VerticalAlignment="Center"
                              Visibility="Collapsed">
                            <StackPanel HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Orientation="Horizontal">
                                <Rectangle Width="2"
                                           Height="2"
                                           Margin="1"
                                           Fill="{StaticResource IndicatorsFill}"
                                           StrokeThickness="0" />
                                <Rectangle Width="2"
                                           Height="2"
                                           Margin="1"
                                           Fill="{StaticResource IndicatorsFill}"
                                           StrokeThickness="0" />
                                <Rectangle Width="2"
                                           Height="2"
                                           Margin="1"
                                           Fill="{StaticResource IndicatorsFill}"
                                           StrokeThickness="0" />
                                <Rectangle Width="2"
                                           Height="2"
                                           Margin="1"
                                           Fill="{StaticResource IndicatorsFill}"
                                           StrokeThickness="0" />
                            </StackPanel>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Vertical" />
                                <Condition Property="IsInHeader" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="gripperLinesVertical" Property="Visibility" Value="Visible" />
                            <!--<Setter TargetName="splitterMainBd" Property="Visibility" Value="Collapsed"/>-->
                            <Setter Property="BorderThickness" Value="1,0" />
                            <Setter Property="Margin" Value="0,1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Orientation" Value="Horizontal" />
                                <Condition Property="IsInHeader" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="gripperLinesHorizontal" Property="Visibility" Value="Visible" />
                            <!--<Setter TargetName="splitterMainBd" Property="Visibility" Value="Collapsed"/>-->
                            <Setter Property="BorderThickness" Value="0,1" />
                            <Setter Property="Margin" Value="1,0" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsHighlighted" Value="True" />
                                <!--<Condition Property="IsInHeader" Value="False"/>-->
                            </MultiTrigger.Conditions>
                            <Setter TargetName="splitterHoverBd" Property="Opacity" Value="1" />

                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="MinWidth" Value="8" />
                <!--<Setter Property="BorderThickness" Value="1,0,1,0"/>-->
                <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterVerticalFillBrush}}" />
                <Setter Property="Cursor" Value="{Binding Path=VerticalCursor, RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="MinHeight" Value="8" />
                <!--<Setter Property="BorderThickness" Value="0,1,0,1"/>-->
                <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedFieldsSplitterHorizontalFillBrush}}" />
                <Setter Property="Cursor" Value="{Binding Path=HorizontalCursor, RelativeSource={RelativeSource Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  ********************************** FilterRecordClearButton Style **********************************  -->
    <Style x:Key="{x:Static igDP:DataPresenterBase.FilterRecordClearButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Background" Value="{StaticResource FilterClearButtonBackgroundBrush}" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="MinWidth" Value="22" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{StaticResource TransparentBrush}">
                        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Path x:Name="FilterGlyphStroke"
                                  Width="10"
                                  Height="8"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="{StaticResource FilterIcon}"
                                  Fill="{TemplateBinding Background}"
                                  Stretch="Fill" />
                            <Path x:Name="clearFilterGlyphStroke"
                                  Width="16"
                                  Height="12"
                                  Margin="-4,0,0,0"
                                  Data="{StaticResource RemoveFilterIcon}"
                                  Fill="{TemplateBinding Background}"
                                  Stretch="Fill"
                                  Visibility="Collapsed" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter TargetName="clearFilterGlyphStroke" Property="Visibility" Value="Visible" />
                            <Setter TargetName="FilterGlyphStroke" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="clearFilterGlyphStroke" Property="Fill" Value="{StaticResource FilterClearButtonBackgroundHoverBrush}" />
                            <Setter TargetName="FilterGlyphStroke" Property="Fill" Value="{StaticResource FilterClearButtonBackgroundHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="clearFilterGlyphStroke" Property="Fill" Value="{StaticResource FilterClearButtonBackgroundPressedBrush}" />
                            <Setter TargetName="FilterGlyphStroke" Property="Fill" Value="{StaticResource FilterClearButtonBackgroundPressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  SS 05/28/2015 TFS194623 Show filter clear button disabled when no active filter  -->
    <!--  ********************************** FilterCellClearButton Style **********************************  -->
    <Style x:Key="{x:Static igDP:DataPresenterBase.FilterCellClearButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Background" Value="{StaticResource FilterClearButtonBackgroundBrush}" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="MinWidth" Value="22" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{StaticResource TransparentBrush}" x:Name="grid">
                        <Grid HorizontalAlignment="Center" VerticalAlignment="Center" >
                            <Path x:Name="clearFilterGlyphStroke"
                                  Width="16"
                                  Height="12"
                                  Margin="-4,0,0,0"
                                  Data="{StaticResource RemoveFilterIcon}"
                                  Fill="{TemplateBinding Background}"
                                  Opacity=".5"
                                  Stretch="Fill" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsEnabled" Value="True">
                            <Setter TargetName="clearFilterGlyphStroke" Property="Visibility" Value="Visible"/>
                        </Trigger>-->
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter TargetName="clearFilterGlyphStroke" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="clearFilterGlyphStroke" Property="Fill" Value="{StaticResource FilterClearButtonBackgroundHoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="clearFilterGlyphStroke" Property="Fill" Value="{StaticResource FilterClearButtonBackgroundPressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** ClearSearchButton Style **********************************  -->
    <Style x:Key="clearSearchButtonStyle" TargetType="Button">
        <Setter Property="BorderBrush" Value="{StaticResource TransparentBrush}" />
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="MinHeight" Value="24" />
        <Setter Property="MinWidth" Value="24" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                                x:Name="border">
                        <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Path x:Name="CloseIcon"
                                  Width="8"
                                  Height="8"
                                  Data="{StaticResource ClearFilterIcon}"
                                  Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}"
                                  Stretch="Fill" />
                            <!--<Path x:Name="CloseIcon" Data="M8.4446707,-0.6250003 L10.625006,1.5604857 L7.1956725,4.9880161 L10.625,8.4285631 L8.5070467,10.625005 L5.0209293,7.1613607 L1.5554626,10.625 L-0.62499386,8.4862156 L2.8442898,5.0018182 L-0.625,1.5548685 L1.602536,-0.62499505 L5.0254283,2.8090899 z"
							Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}" Width="8" Height="8" Stretch="Fill" />-->
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="CloseIcon" Property="Fill" Value="{StaticResource GlyphHoverBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="CloseIcon" Property="Fill" Value="{StaticResource GlyphPressedBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** Button Style **********************************  -->
    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
        <Setter Property="FontSize" Value="{StaticResource FontSize}" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="Padding" Value="7,0,7,2" />
        <Setter Property="MinHeight" Value="24" />
        <Setter Property="MinWidth" Value="24" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalCenterBrush}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalOuterBorderBrush}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Grid">
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="True">
                            <ContentControl x:Name="Content"
                                            Margin="{TemplateBinding Padding}"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Content="{TemplateBinding Content}" />
                        </Border>
                        <Border x:Name="innerStroke"
                                Margin="1,1,1,1"
                                BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalInnerBorderBrush}}"
                                BorderThickness="1"
                                SnapsToDevicePixels="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverCenterBrush}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverOuterBorderBrush}}" />
                            <Setter TargetName="innerStroke" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverInnerBorderBrush}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedCenterBrush}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedOuterBorderBrush}}" />
                            <Setter TargetName="innerStroke" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedInnerBorderBrush}}" />
                            <Setter TargetName="Content" Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonDisabledCenterBrush}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonDisabledOuterBorderBrush}}" />
                            <Setter TargetName="innerStroke" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonDisabledInnerBorderBrush}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** RecordExportStatusControl Style **********************************  -->
    <Style TargetType="igDP:RecordExportStatusControl">
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="0,2,5,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igDP:RecordExportStatusControl">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <StackPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Orientation="Horizontal"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <TextBlock x:Name="message" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <ProgressBar x:Name="progress"
                                         Margin="5,0,0,0"
                                         IsIndeterminate="True"
                                         Style="{DynamicResource {x:Static igDP:RecordExportStatusControl.IndeterminateProgressBarStyleKey}}" />
                            <Button x:Name="cancel"
                                    Margin="8,0,0,0"
                                    Command="{x:Static igDP:DataPresenterCommands.CancelExport}"
                                    CommandTarget="{Binding DataPresenter, RelativeSource={RelativeSource TemplatedParent}}"
                                    Focusable="False"
                                    Style="{DynamicResource {x:Static igDP:RecordExportStatusControl.CancelExportButtonStyleKey}}"
                                    ToolTip="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.CancelExportToolTip}}" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="True" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Exporting" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource stringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusExportingMessage}" />
                                        <Binding Path="ExportInfo.FileNameWithoutPath" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ExportedRecordCount" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Exporting" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource stringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusExportingMessage}" />
                                        <Binding Path="ExportInfo.ExportType" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="ExportedRecordCount" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="True" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Initializing" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource stringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusInitializingMessage}" />
                                        <Binding Path="ExportInfo.FileNameWithoutPath" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Initializing" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource stringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusInitializingMessage}" />
                                        <Binding Path="ExportInfo.ExportType" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="True" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Pending" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource stringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusPendingMessage}" />
                                        <Binding Path="ExportInfo.FileNameWithoutPath" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=ExportInfo.FileName, RelativeSource={RelativeSource Self}, Converter={StaticResource nullToFalseConverter}}" Value="False" />
                                <Condition Binding="{Binding Path=Status, RelativeSource={RelativeSource Self}}" Value="Pending" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="message" Property="Text">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource stringFormatConverter}">
                                        <Binding Path="Value" Source="{x:Static igDP:ResourcesDataPresenter.ExportStatusPendingMessage}" />
                                        <Binding Path="ExportInfo.ExportType" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <Trigger Property="Status" Value="NotExporting">
                            <Setter TargetName="progress" Property="IsIndeterminate" Value="false" />
                            <Setter TargetName="progress" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** CancelExportButton Style **********************************  -->
    <Style x:Key="{x:Static igDP:RecordExportStatusControl.CancelExportButtonStyleKey}" TargetType="Button">
        <Setter Property="MinHeight" Value="24" />
        <Setter Property="MinWidth" Value="24" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid HorizontalAlignment="Center"
                          VerticalAlignment="Center"
                          Background="{StaticResource TransparentBrush}">
                        <Path x:Name="CloseIcon"
                              Width="10"
                              Height="10"
                              Data="{StaticResource CloseIcon}"
                              Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}"
                              Stretch="Fill" />
                        <!--<Path HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Height="12" Width="12" Stretch="Fill" Opacity="1"
							Data="M8.4446707,-0.6250003 L10.625006,1.5604857 L7.1956725,4.9880161 L10.625,8.4285631 L8.5070467,10.625005 L5.0209293,7.1613607 L1.5554626,10.625 L-0.62499386,8.4862156 L2.8442898,5.0018182 L-0.625,1.5548685 L1.602536,-0.62499505 L5.0254283,2.8090899 z"
							Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}" x:Name="CloseIcon"/>-->
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="CloseIcon" Property="Fill" Value="{StaticResource GlyphHoverBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="CloseIcon" Property="Fill" Value="{StaticResource GlyphPressedBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="CloseIcon" Property="Fill" Value="{StaticResource GlyphDisabledBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** IndeterminateProgressBar Style **********************************  -->
    <Style x:Key="{x:Static igDP:RecordExportStatusControl.IndeterminateProgressBarStyleKey}" TargetType="ProgressBar">
        <Setter Property="Height" Value="14" />
        <Setter Property="Width" Value="90" />
        <Setter Property="BorderBrush" Value="{StaticResource ProgressBarBorderBrush}" />
        <Setter Property="Background" Value="{StaticResource ProgressBarBackgroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ProgressBarForegroundBrush}" />
    </Style>

    <!--  ********************************** FilterTreeScopesComboToggleButton Style **********************************  -->
    <Style x:Key="filterTreeScopesComboToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="Width" Value="22" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border x:Name="outerBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Path x:Name="glyph"
                              Width="6"
                              Height="4"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z "
                              Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}"
                              Stretch="Fill" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="glyph" Property="Fill" Value="{StaticResource GlyphPressedBackgroundBrush}" />
                            <Setter TargetName="outerBorder" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedCenterBrush}}" />
                            <Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedCenterBrush}}" />

                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="glyph" Property="Fill" Value="{StaticResource GlyphHoverBackgroundBrush}" />
                            <Setter TargetName="outerBorder" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverCenterBrush}}" />
                            <Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverOuterBorderBrush}}" />

                        </MultiTrigger>
                        <!--  when not dropped down but the combo has the keyboard focus the button should appear as it does when hottracked  -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" Value="False" />
                                <Condition Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="glyph" Property="Fill" Value="{StaticResource GlyphHoverBackgroundBrush}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** FilterTreeScopesCombo Style **********************************  -->
    <Style x:Key="filterTreeScopesComboStyle" TargetType="ComboBox">
        <Setter Property="Background" Value="{StaticResource PopupBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource PopupBorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid Background="{StaticResource TransparentBrush}">
                        <ToggleButton x:Name="PART_DropDownButton"
                                      Grid.ColumnSpan="3"
                                      HorizontalContentAlignment="Right"
                                      Background="{StaticResource TransparentBrush}"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      BorderThickness="{TemplateBinding BorderThickness}"
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      Style="{StaticResource filterTreeScopesComboToggleButtonStyle}" />
                        <Popup x:Name="PART_Popup"
                               MaxHeight="{TemplateBinding MaxDropDownHeight}"
                               AllowsTransparency="True"
                               Focusable="False"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               Placement="Bottom"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                            <Border Background="{StaticResource PopupBackgroundBrush}"
                                    BorderBrush="{StaticResource PopupBorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                <ScrollViewer x:Name="ScrollViewer" Style="{DynamicResource ScrollViewerStyle}">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** RecordFilterTreeControl Style **********************************  -->
    <Style TargetType="igDP:RecordFilterTreeControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igDP:RecordFilterTreeControl">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="True">
                        <igWindows:CardPanel>
                            <Grid x:Name="gridContent" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Border Grid.Row="0"
                                        Margin="0,10,0,10"
                                        BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.RecordFilterTreeSearchBorderBrushKey}}"
                                        BorderThickness="0">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition />
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>

                                        <Rectangle x:Name="searchBoxBorder"
                                                   Grid.ColumnSpan="2"
                                                   Fill="{StaticResource TransparentBrush}"
                                                   Stroke="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalOuterBorderBrush}}"
                                                   StrokeThickness="{StaticResource DefaultStrokeThickness}"
                                                   RadiusX="{StaticResource RadiusXY}"
                                                   RadiusY="{StaticResource RadiusXY}"/>

                                        <TextBox x:Name="PART_SearchTextBox"
                                                 Grid.Column="0"
                                                 Margin="1 1 0 1"
                                                 BorderThickness="0"
                                                 Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}"
                                                 Padding="5 3 0 0"
                                                 Text="{Binding Path=SearchText, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                 Background="{StaticResource TransparentBrush}"
                                                 CaretBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}"/>

                                        <TextBlock x:Name="txtSearchPrompt"
                                                   Grid.Column="0"
                                                   Margin="5 3 0 0"
                                                   Foreground="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemForegroundBrushKey}}"
                                                   IsHitTestVisible="False"
                                                   Text="{TemplateBinding SearchTextPrompt}"
                                                   Visibility="Collapsed"
                                                   Background="{StaticResource TransparentBrush}"/>
                                        <Grid Grid.Column="1">
                                            <Border x:Name="MagnifyingGlass"
                                                    Width="24"
                                                    Height="24"
                                                    HorizontalAlignment="Right"
                                                    VerticalAlignment="Center">
                                                <Path Width="12"
                                                      Height="13"
                                                      Data="{StaticResource SearchIcon}"
                                                      Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GlyphBackgroundBrush}}"
                                                      Stretch="Fill"
                                                      UseLayoutRounding="False" />
                                            </Border>
                                            <Button x:Name="btnClearSearchText"
                                                    Command="{Binding ClearSearchTextCommand, RelativeSource={RelativeSource TemplatedParent}}"                                                   
                                                    Style="{StaticResource clearSearchButtonStyle}"
                                                    Visibility="Hidden" />                                             
                                        </Grid>
                                        <ComboBox x:Name="PART_SearchScopeCombo"
                                                  Grid.Column="2"
                                                  Margin="5 0 0 0"
                                                  Background="{StaticResource TransparentBrush}"
                                                  IsEditable="False"
                                                  ItemContainerStyle="{DynamicResource ComboBoxItemStyle}"
                                                  ItemsSource="{Binding Path=AvailableSearchScopes, RelativeSource={RelativeSource TemplatedParent}}"
                                                  SelectedValue="{Binding Path=SearchScope, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                  SelectedValuePath="Value"
                                                  Style="{StaticResource filterTreeScopesComboStyle}"
                                                  Visibility="Collapsed" />
                                    </Grid>
                                </Border>
                                <TreeView x:Name="PART_Tree"
                                          Grid.Row="1"
                                          ItemContainerStyle="{DynamicResource TreeViewItemStyle}"
                                          ItemsSource="{Binding Nodes, RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{DynamicResource TreeViewStyle}" />
                                <TextBlock x:Name="txtNoMatch"
                                           Grid.Row="1"
                                           VerticalAlignment="Center"
                                           Text="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.RecordFilterTreeNoSearchMatches}}"
                                           TextAlignment="Center"
                                           TextWrapping="Wrap"
                                           Visibility="Collapsed" />
                                <StackPanel Grid.Row="2"
                                            Height="24"
                                            Margin="0,15,0,12"
                                            HorizontalAlignment="Right"
                                            Orientation="Horizontal">
                                    <Button MinWidth="73"
                                            MinHeight="0"
                                            Margin="0,0,11,0"
                                            Command="{Binding UpdateRecordFilterCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                            Content="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.CustomFilterSelectionControlOkButtonLabel}}"
                                            Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ButtonStyle}}" />
                                    <Button MinWidth="73"
                                            MinHeight="0"
                                            Command="{Binding CancelChangesCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                            Content="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.CustomFilterSelectionControlCancelButtonLabel}}"
                                            Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ButtonStyle}}" />
                                </StackPanel>
                            </Grid>
                            <ContentControl x:Name="LoadingIndicator"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Visibility="Collapsed" />
                        </igWindows:CardPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsLoadingItems" Value="True">
                            <Setter TargetName="LoadingIndicator" Property="ContentTemplate" Value="{StaticResource BaseFilterDropDownLoadingTemplate}" />
                            <Setter TargetName="LoadingIndicator" Property="Visibility" Value="Visible" />
                            <Setter TargetName="gridContent" Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="HasSearchText" Value="True">
                            <Setter TargetName="btnClearSearchText" Property="Visibility" Value="Visible" />
                            <Setter TargetName="MagnifyingGlass" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="HasEmptySearchResults" Value="True">
                            <Setter TargetName="PART_Tree" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="txtNoMatch" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="HasMultipleSearchScopes" Value="True">
                            <Setter TargetName="PART_SearchScopeCombo" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger SourceName="PART_SearchTextBox" Property="IsMouseOver" Value="True">
                            <Setter TargetName="searchBoxBorder" Property="Stroke" Value="{StaticResource AccentForegroundBrush}" />
                            <Setter TargetName="searchBoxBorder" Property="StrokeThickness" Value="1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_SearchTextBox" Property="IsFocused" Value="False" />
                                <Condition Property="HasSearchText" Value="False" />
                            </MultiTrigger.Conditions>
                            <!--  Show the watermark when there is no search text and the textbox isn't focused  -->
                            <Setter TargetName="txtSearchPrompt" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** TreeView Style **********************************  -->
    <Style x:Key="TreeViewStyle" TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemSeparatorBrushKey}}" />
        <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border x:Name="Bd"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="_tv_scrollviewer_"
                                      Background="{TemplateBinding Background}"
                                      CanContentScroll="false"
                                      Focusable="false"
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                      Padding="{TemplateBinding Padding}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      Style="{DynamicResource ScrollViewerStyle}"
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                            <Setter TargetName="_tv_scrollviewer_" Property="CanContentScroll" Value="true" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  ********************************** TreeViewItem Style **********************************  -->
    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>-->

    <!--  ********************************** ExpandCollapseToggle Style **********************************  -->
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Width" Value="22" />
        <Setter Property="Height" Value="22" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{StaticResource TransparentBrush}" Padding="0">
                        <Grid>
                            <Path x:Name="ExpansionIndicatorCollapsed"
                                  Width="5"
                                  Height="8"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="M60,40L60,20 70,30z"
                                  Fill="{StaticResource ExpansionIndicatorGlyphBackgroundBrush}"
                                  RenderTransformOrigin="0.5,0.5"
                                  Stretch="Fill"
                                  Stroke="{StaticResource ExpansionIndicatorGlyphBorderBrush}"
                                  StrokeThickness="1"
                                  UseLayoutRounding="False" />
                            <Path x:Name="ExpansionIndicatorExpanded"
                                  Width="6"
                                  Height="6"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="M0.5,6.4997156 L3.3283137,3.6714226 3.6714667,3.6714429 3.6714465,3.3282926 6.4997594,0.50000001 6.500113,6.5000692 z"
                                  Fill="{StaticResource ExpansionIndicatorGlyphExpandedBackgroundBrush}"
                                  RenderTransformOrigin="0.5,0.5"
                                  Stretch="Fill"
                                  Stroke="{StaticResource ExpansionIndicatorGlyphBorderBrush}"
                                  StrokeThickness="1"
                                  UseLayoutRounding="False"
                                  Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ExpansionIndicatorCollapsed" Property="Stroke" Value="{StaticResource ExpansionIndicatorGlyphHoverBackgroundBrush}" />
                            <Setter TargetName="ExpansionIndicatorCollapsed" Property="Fill" Value="{StaticResource ExpansionIndicatorGlyphHoverBackgroundBrush}" />
                            <Setter TargetName="ExpansionIndicatorExpanded" Property="Stroke" Value="{StaticResource ExpansionIndicatorGlyphHoverBackgroundBrush}" />
                            <Setter TargetName="ExpansionIndicatorExpanded" Property="Fill" Value="{StaticResource ExpansionIndicatorGlyphHoverBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ExpansionIndicatorExpanded" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ExpansionIndicatorCollapsed" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************** TreeViewItem Style **********************************  -->
    <Style x:Key="TreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Padding" Value="6 1" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
        <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
        <Setter Property="BorderBrush" Value="{StaticResource TransparentBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" MinWidth="22" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander"
                                      ClickMode="Press"
                                      IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                      Style="{StaticResource ExpandCollapseToggleStyle}" />
                        <Border x:Name="Bd"
                                Grid.Column="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="PART_Header"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              ContentSource="Header"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost"
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        Grid.ColumnSpan="2" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource CellVPBackgroundSelected}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource CellVPBorderSelectedBrush}" />
                            <!--<Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}"/>-->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="IsSelectionActive" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource CellVPBackgroundSelected}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource CellVPBorderSelectedBrush}" />
                            <!--<Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}"/>-->
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>