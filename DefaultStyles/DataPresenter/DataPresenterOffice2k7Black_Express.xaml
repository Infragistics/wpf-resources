<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:d="http://schemas.microsoft.com/expression/interactivedesigner/2006"
	mc:Ignorable="d"
	xmlns:igWindows="http://infragistics.com/Windows"
	xmlns:editors="http://infragistics.com/Editors"
	xmlns:igDP="http://infragistics.com/DataPresenter"
	xmlns:themes="http://infragistics.com/Themes"
	xmlns:igThemes="http://infragistics.com/Themes"
	xmlns:System="clr-namespace:System;assembly=mscorlib">

  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="DataPresenterGeneric_Express.xaml"/>
    <ResourceDictionary Source="DataPresenterGeneric.xaml"/>
    <ResourceDictionary Source="DataPresenterOffice2k7Black_Brushes.xaml"/>
  </ResourceDictionary.MergedDictionaries>

  <!--SSP 10/16/09 TFS19525 - Added StringFormatConverter-->
  <igWindows:StringFormatConverter x:Key="stringFormatConverter" />

  <!-- *********************************  ScrollBars  ********************************* -->
  <Style x:Key="VerticalScrollBarButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="Focusable" Value="false"/>
    <Setter Property="IsTabStop" Value="false"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid Background="Transparent">
            <Border Visibility="Collapsed" x:Name="ButtonBackground" Background="{StaticResource RepeatBtnHoverBackgroundBrush}" BorderBrush="{StaticResource RepeatBtnHoverBorderBrush}" BorderThickness="1" CornerRadius="1"/>
            <ContentPresenter/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Visibility" TargetName="ButtonBackground" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter Property="Visibility" TargetName="ButtonBackground" Value="Visible"/>
              <Setter Property="Background" TargetName="ButtonBackground" Value="{StaticResource RepeatBtnPressedBackgroundBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="HorizScrollBarButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="Focusable" Value="false"/>
    <Setter Property="IsTabStop" Value="false"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid Background="Transparent">
            <Border Visibility="Collapsed" x:Name="ButtonBackground" Background="{StaticResource HorizRepeatBtnHoverBackgroundBrush}" BorderBrush="{StaticResource HorizRepeatBtnHoverBorderBrush}" BorderThickness="1" CornerRadius="1"/>
            <ContentPresenter/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Visibility" TargetName="ButtonBackground" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter Property="Visibility" TargetName="ButtonBackground" Value="Visible"/>
              <Setter Property="Background" TargetName="ButtonBackground" Value="{StaticResource HorizRepeatBtnPressedBackgroundBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="VerticalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Focusable" Value="false"/>
    <Setter Property="IsTabStop" Value="false"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="HorizontalScrollBarThumb" TargetType="{x:Type Thumb}">
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="IsTabStop" Value="false"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid Width="Auto" Height="Auto">
            <Rectangle x:Name="ThumbBackground" Stroke="{StaticResource RepeatBtnBorderBrush}" Fill="{StaticResource HorizRepeatBtnNormalBackgroundBrush}" RadiusX="1" RadiusY="1" Margin="0"/>
            <Path Width="7" x:Name="ThumbLines" Height="8" Data="M 0,6 C0,6 0,7 0,7 0,7 8,7 8,7 8,7 8,6 8,6 8,6 0,6 0,6 zM 0,4 C0,4 0,5 0,5 0,5 8,5 8,5 8,5 8,4 8,4 8,4 0,4 0,4 zM 0,2 C0,2 0,3 0,3 0,3 8,3 8,3 8,3 8,2 8,2 8,2 0,2 0,2 zM 0,0 C0,0 0,1 0,1 0,1 8,1 8,1 8,1 8,0 8,0 8,0 0,0 0,0 z" Fill="{StaticResource ScrollBarThumbGlyphDarkBrush}" RenderTransformOrigin="0.5,0.5" Stretch="Uniform">
              <Path.RenderTransform>
                <TransformGroup>
                  <ScaleTransform/>
                  <SkewTransform/>
                  <RotateTransform Angle="90"/>
                  <TranslateTransform/>
                </TransformGroup>
              </Path.RenderTransform>
            </Path>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Fill" TargetName="ThumbBackground" Value="{StaticResource HorizRepeatBtnHoverBackgroundBrush}"/>
              <Setter Property="Stroke" TargetName="ThumbBackground" Value="{StaticResource HorizRepeatBtnHoverBorderBrush}"/>
              <Setter Property="Fill" TargetName="ThumbLines" Value="{StaticResource ScrollBarTrackBrush}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
              <Setter Property="Fill" TargetName="ThumbBackground" Value="{StaticResource HorizRepeatBtnPressedBackgroundBrush}"/>
              <Setter Property="Stroke" TargetName="ThumbBackground" Value="{StaticResource HorizRepeatBtnHoverBorderBrush}"/>
              <Setter Property="Fill" TargetName="ThumbLines" Value="{StaticResource ScrollBarTrackBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="VerticalScrollBarThumb" TargetType="{x:Type Thumb}">
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="IsTabStop" Value="false"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid Width="Auto" Height="Auto">
            <Rectangle x:Name="ThumbBackground" Stroke="{StaticResource RepeatBtnBorderBrush}" Fill="{StaticResource RepeatBtnNormalBackgroundBrush}" RadiusX="1" RadiusY="1" Margin="0"/>
            <Path x:Name="ThumbLines" Width="7" Height="8" Data="M 0,6 C0,6 0,7 0,7 0,7 8,7 8,7 8,7 8,6 8,6 8,6 0,6 0,6 zM 0,4 C0,4 0,5 0,5 0,5 8,5 8,5 8,5 8,4 8,4 8,4 0,4 0,4 zM 0,2 C0,2 0,3 0,3 0,3 8,3 8,3 8,3 8,2 8,2 8,2 0,2 0,2 zM 0,0 C0,0 0,1 0,1 0,1 8,1 8,1 8,1 8,0 8,0 8,0 0,0 0,0 z" Fill="{StaticResource ScrollBarThumbGlyphDarkBrush}" RenderTransformOrigin="0.5,0.5" Stretch="Uniform">
            </Path>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Fill" TargetName="ThumbBackground" Value="{StaticResource RepeatBtnHoverBackgroundBrush}"/>
              <Setter Property="Stroke" TargetName="ThumbBackground" Value="{StaticResource RepeatBtnHoverBorderBrush}"/>
              <Setter Property="Fill" TargetName="ThumbLines" Value="{StaticResource ScrollBarTrackBrush}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
              <Setter Property="Fill" TargetName="ThumbBackground" Value="{StaticResource RepeatBtnPressedBackgroundBrush}"/>
              <Setter Property="Stroke" TargetName="ThumbBackground" Value="{StaticResource RepeatBtnHoverBorderBrush}"/>
              <Setter Property="Fill" TargetName="ThumbLines" Value="{StaticResource ScrollBarTrackBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="HorizontalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
    <Setter Property="OverridesDefaultStyle" Value="true"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Focusable" Value="false"/>
    <Setter Property="IsTabStop" Value="false"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="Office2k7BlackScrollbar" TargetType="{x:Type ScrollBar}">
    <Setter Property="Background" Value="{StaticResource ScrollBarTrackBrush}"/>
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
    <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
    <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid x:Name="Bg" SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
              <RowDefinition Height="0.00001*"/>
              <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
            </Grid.RowDefinitions>
            <Rectangle Grid.RowSpan="3" StrokeThickness="1" Fill="{StaticResource ScrollBarTrackBrush}" Stroke="{StaticResource ScrollBarTrackBorderBrush}" Margin="0"/>
            <RepeatButton Style="{StaticResource VerticalScrollBarButton}" IsEnabled="{TemplateBinding IsMouseOver}" Command="{x:Static ScrollBar.LineUpCommand}">
              <Path Width="8" Height="4" Data="M 0,3 C0,3 0,4 0,4 0,4 8,4 8,4 8,4 8,3 8,3 8,3 7,3 7,3 7,3 7,2 7,2 7,2 6,2 6,2 6,2 6,1 6,1 6,1 5,1 5,1 5,1 5,0 5,0 5,0 3,0 3,0 3,0 3,1 3,1 3,1 2,1 2,1 2,1 2,2 2,2 2,2 1,2 1,2 1,2 1,3 1,3 1,3 0,3 0,3 z" Fill="{StaticResource ScrollBarGlyphFillBrush}"/>
            </RepeatButton>
            <Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1" IsDirectionReversed="true">
              <Track.DecreaseRepeatButton>
                <RepeatButton Style="{StaticResource VerticalScrollBarPageButton}" Command="{x:Static ScrollBar.PageUpCommand}"/>
              </Track.DecreaseRepeatButton>
              <Track.IncreaseRepeatButton>
                <RepeatButton Style="{StaticResource VerticalScrollBarPageButton}" Command="{x:Static ScrollBar.PageDownCommand}"/>
              </Track.IncreaseRepeatButton>
              <Track.Thumb>
                <Thumb Style="{StaticResource VerticalScrollBarThumb}"/>
              </Track.Thumb>
            </Track>
            <RepeatButton Style="{StaticResource VerticalScrollBarButton}" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2" Command="{x:Static ScrollBar.LineDownCommand}">
              <Path Width="8" Height="4" Data="M 0,0 C0,0 0,1 0,1 0,1 1,1 1,1 1,1 1,2 1,2 1,2 2,2 2,2 2,2 2,3 2,3 2,3 3,3 3,3 3,3 3,4 3,4 3,4 5,4 5,4 5,4 5,3 5,3 5,3 6,3 6,3 6,3 6,2 6,2 6,2 7,2 7,2 7,2 7,1 7,1 7,1 8,1 8,1 8,1 8,0 8,0 8,0 0,0 0,0 z" Fill="{StaticResource ScrollBarGlyphFillBrush}"/>
            </RepeatButton>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
        <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
        <Setter Property="Background" Value="{StaticResource HorizontalScrollBarTrackBrush}"/>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollBar}">
              <Grid x:Name="Bg" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                  <ColumnDefinition Width="0.00001*"/>
                  <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                </Grid.ColumnDefinitions>
                <Rectangle StrokeThickness="1" Fill="{StaticResource ScrollBarTrackBrush}" Stroke="{StaticResource ScrollBarTrackBorderBrush}" Margin="0" Grid.ColumnSpan="3"/>
                <RepeatButton Style="{StaticResource HorizScrollBarButton}" IsEnabled="{TemplateBinding IsMouseOver}" Command="{x:Static ScrollBar.LineLeftCommand}">
                  <Path Width="4" Height="8" Data="M 4,0 C4,0 3,0 3,0 3,0 3,1 3,1 3,1 2,1 2,1 2,1 2,2 2,2 2,2 1,2 1,2 1,2 1,3 1,3 1,3 0,3 0,3 0,3 0,5 0,5 0,5 1,5 1,5 1,5 1,6 1,6 1,6 2,6 2,6 2,6 2,7 2,7 2,7 3,7 3,7 3,7 3,8 3,8 3,8 4,8 4,8 4,8 4,0 4,0 z" Fill="{StaticResource ScrollBarGlyphFillBrush}" Stretch="Fill"/>
                </RepeatButton>
                <Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Column="1">
                  <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource HorizontalScrollBarPageButton}" Command="{x:Static ScrollBar.PageLeftCommand}"/>
                  </Track.DecreaseRepeatButton>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource HorizontalScrollBarPageButton}" Command="{x:Static ScrollBar.PageRightCommand}"/>
                  </Track.IncreaseRepeatButton>
                  <Track.Thumb>
                    <Thumb Style="{StaticResource HorizontalScrollBarThumb}"/>
                  </Track.Thumb>
                </Track>
                <RepeatButton Style="{StaticResource HorizScrollBarButton}" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}">
                  <Path Width="4" Height="8" Fill="{StaticResource ScrollBarGlyphFillBrush}" Stretch="Fill" Data="M 0,0 C0,0 1,0 1,0 1,0 1,1 1,1 1,1 2,1 2,1 2,1 2,2 2,2 2,2 3,2 3,2 3,2 3,3 3,3 3,3 4,3 4,3 4,3 4,5 4,5 4,5 3,5 3,5 3,5 3,6 3,6 3,6 2,6 2,6 2,6 2,7 2,7 2,7 1,7 1,7 1,7 1,8 1,8 1,8 0,8 0,8 0,8 0,0 0,0 z"/>
                </RepeatButton>
              </Grid>
              <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="false">
                  <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}"/>
                </Trigger>
              </ControlTemplate.Triggers>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <!--<Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource Office2k7BlackScrollbar}"/>-->

  <Style x:Key="Office2k7BlackScrollViewer" TargetType="{x:Type ScrollViewer}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid x:Name="Grid" Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Rectangle x:Name="Corner" Grid.Column="1" Fill="{StaticResource HorizontalScrollBarTrackBrush}" Grid.Row="1"/>
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
            <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Style="{StaticResource Office2k7BlackScrollbar}"/>
            <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Style="{StaticResource Office2k7BlackScrollbar}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <!--<Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource Office2k7BlackScrollViewer}"/>-->

  <!-- _________________________ DarkGrayForegroundStyle ______________________________________ -->
  <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, GrayForegroundStyle}">
    <Setter Property="TextBlock.Foreground" Value="#FF333333" />
  </Style>
  <Style x:Key="CellForegroundActiveStyle">
    <Setter Property="TextBlock.Foreground" Value="#FF333333"/>
  </Style>

  <!-- _________________________ LabelContent Style______________________________________ -->
  <Style x:Key="LabelContentStyle" TargetType="{x:Type ContentControl}">
    <Setter Property="Padding" Value="0,3,0,3"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContentControl}">
          <ContentPresenter
  Margin="{TemplateBinding Padding}"
  Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"
  ContentTemplate="{TemplateBinding ContentTemplate}"
  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- _________________________ ExpanderBar __________________________________________ -->
  <Style TargetType="{x:Type igWindows:ExpanderBar}" BasedOn="{x:Static igThemes:PrimitivesGeneric.ExpanderBar}">
    <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ExpanderBarBackgroundKey}}"/>
    <Setter Property="BackgroundHover" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ExpanderBarBackgroundHoverKey}}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.GroupByNavBorderBrushKey}}"/>
    <Setter Property="BorderHoverBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ExpanderBarBorderHoverKey}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="MinHeight" Value="10"/>
    <Setter Property="Cursor" Value="Hand"/>
    <Setter Property="Focusable" Value="False"/>
  </Style>

  <!-- RecordSeparatorStyle-->
  <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, RecordSeparatorStyle}" TargetType="{x:Type Border}">
    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}"/>
    <Setter Property="HorizontalAlignment" Value="Stretch"/>
    <Setter Property="VerticalAlignment" Value="Stretch"/>
    <Setter Property="Height" Value="6"/>
    <Setter Property="BorderThickness" Value="0,1,0,1"/>
    <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelOuterBorder}}"/>
  </Style>

  <!-- _________________________ CellValuePresenter __________________________________________ -->
  <Style TargetType="{x:Type igDP:CellValuePresenter}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="#FFD0D7E5"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="BackgroundHover" Value="Transparent"/>
    <Setter Property="BorderHoverBrush" Value="Transparent"/>
    <Setter Property="BackgroundActive" Value="#FFFFFFFF"/>
    <Setter Property="BorderActiveBrush" Value="#FF000000"/>
    <Setter Property="BackgroundSelected" Value="#FFEAECF5"/>
    <Setter Property="BorderSelectedBrush" Value="#FFD0D7E5"/>
    <Setter Property="BackgroundFieldSelected" Value="#FFEDEDED"/>
    <Setter Property="BorderFieldSelectedBrush" Value="#FF666666"/>
    <Setter Property="BackgroundPrimary" Value="#7FE9E9E9"/>
    <Setter Property="BorderPrimaryBrush" Value="#FFE9E9E9"/>
    <Setter Property="CornerRadius" Value="0"/>
    <Setter Property="Padding" Value="2,0,2,0"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <!-- AS 5/23/07 BR23120 -->
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:CellValuePresenter}">
          <igWindows:CardPanel>
            <!-- [JM 06-06-07] This element is not being used so I am commenting it out.  Its Visibility property is initialized to Collapsed and the IsSelected
                               trigger below has commented out the line that sets the Visibility to Visible. Checked with Grant on this and he feels it is left over
                               from early styling efforts and can be removed. -->
            <!--<Rectangle x:Name="LeftBorder"
							Fill="#FFBBBBBB"
							Width="1"
							Margin="0,1,0,0"
							HorizontalAlignment="Left"
							VerticalAlignment="Stretch"
							Visibility="Collapsed" />-->
            <Border
  x:Name="MainBorder"
  Margin="0,0,0,0"
  CornerRadius="{TemplateBinding CornerRadius}"
  BorderThickness="{TemplateBinding BorderThickness}"
  BorderBrush="{TemplateBinding BorderBrush}"
  Background="{TemplateBinding Background}"/>
            <Rectangle
  x:Name="Active"
  Fill="{TemplateBinding BackgroundActive}"
  HorizontalAlignment="Stretch"
  VerticalAlignment="Stretch"
  Width="Auto"
  Height="Auto"
  SnapsToDevicePixels="True"
  Opacity="1"
  Visibility="Collapsed"
  StrokeThickness="1"
  Stroke="{TemplateBinding BorderActiveBrush}"/>
            <ContentPresenter
  x:Name="PART_EditorSite"
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
  Margin="{TemplateBinding Padding}"
  Style="{TemplateBinding ForegroundStyle}"/>
          </igWindows:CardPanel>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsAlternate, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=Record.RecordType, RelativeSource={RelativeSource Self}}" Value="DataRecord"/>
                    <Condition Binding="{Binding Path=Record.IsAddRecord, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundAlternateStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
            </MultiDataTrigger>
                        
            <!-- HighlightAsPrimary -->
            <Trigger Property="HighlightAsPrimary" Value="true">
              <Setter Property="Background" Value="{Binding Path=BackgroundPrimary, RelativeSource={RelativeSource Self}}"/>
              <Setter Property="BorderBrush" Value="{Binding Path=BorderPrimaryBrush, RelativeSource={RelativeSource Self}}"/>
              <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundPrimaryStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <!-- IsFieldSelected -->
            <Trigger Property="IsFieldSelected" Value="true">
              <Setter Property="Background" Value="{Binding Path=BackgroundFieldSelected, RelativeSource={RelativeSource Self}}"/>
              <Setter Property="BorderBrush" Value="{Binding Path=BorderFieldSelectedBrush, RelativeSource={RelativeSource Self}}"/>
              <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundFieldSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <!-- IsSelected -->
            <Trigger Property="IsSelected" Value="true">
              <Setter Property="BorderThickness" Value="1,0,1,1"/>
              <Setter Property="Margin" Value="0,0,-1,0"/>
              <Setter Property="Background" Value="{Binding Path=BackgroundSelected, RelativeSource={RelativeSource Self}}"/>
              <Setter Property="BorderBrush" Value="{Binding Path=BorderSelectedBrush, RelativeSource={RelativeSource Self}}"/>
              <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
              <!--<Setter Property="Visibility" Value="Visible" TargetName="LeftBorder" />-->
            </Trigger>
            <!-- IsActive -->
            <Trigger Property="IsActive" Value="true">
              <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
              <Setter Property="Visibility" TargetName="Active" Value="Visible"/>
              <Setter Property="StrokeThickness" TargetName="Active" Value="2"/>
              <!-- SS 10/23/15 TFS208100 Set the Background to Transparent, so only the ActiveBackground color could be applied when the cell is active-->
              <Setter Property="Background" Value="Transparent"/>
            </Trigger>
            <!-- IsMouseOver -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True"/>
                <Condition Property="IsSelected" Value="False"/>
                <Condition Property="IsFieldSelected" Value="False"/>
              </MultiTrigger.Conditions>
              <Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}"/>
              <Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}"/>
              <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
            </MultiTrigger>
            <!-- Field.IsFixedStateChanging    JM 01-22-09 NA 9.1 FixedFields   -->
            <DataTrigger Binding="{Binding Path=Field.IsFixedStateChanging, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter Property="Background" Value="#AA8DBAEB"/>
              <Setter Property="BorderBrush" Value="#AA8DBAEB"/>
            </DataTrigger>
            <!--SSP 5/27/09 NAS9.2 IDataErrorInfo Support-->
            <Trigger Property="IsDataErrorTemplateActive" Value="true">
              <Setter TargetName="PART_EditorSite" Property="ContentTemplate" Value="{DynamicResource {x:Static igDP:DataPresenterBase.DataErrorContentTemplateKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- _________________________ TreeCellValuePresenter __________________________________________ -->
  <Style TargetType="{x:Type igDP:TreeCellValuePresenter}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderBrush" Value="#FFD0D7E5"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="BackgroundHover" Value="Transparent"/>
    <Setter Property="BorderHoverBrush" Value="Transparent"/>
    <Setter Property="BackgroundActive" Value="#FFFFFFFF"/>
    <Setter Property="BorderActiveBrush" Value="#FF000000"/>
    <Setter Property="BackgroundSelected" Value="#FFEAECF5"/>
    <Setter Property="BorderSelectedBrush" Value="#FFD0D7E5"/>
    <Setter Property="BackgroundFieldSelected" Value="#FFEDEDED"/>
    <Setter Property="BorderFieldSelectedBrush" Value="#FF666666"/>
    <Setter Property="BackgroundPrimary" Value="#7FE9E9E9"/>
    <Setter Property="BorderPrimaryBrush" Value="#FFE9E9E9"/>
    <Setter Property="CornerRadius" Value="0"/>
    <Setter Property="Padding" Value="2,0,2,0"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <!-- AS 5/23/07 BR23120 -->
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:TreeCellValuePresenter}">
          <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding Path=Indent, RelativeSource={RelativeSource TemplatedParent}}"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border
                  x:Name="MainBorder"
                  Grid.ColumnSpan="3"
                  Margin="0,0,0,0"
                  CornerRadius="{TemplateBinding CornerRadius}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  Background="{TemplateBinding Background}"/>
            <Rectangle
                  x:Name="Active"
                  Grid.ColumnSpan="3"
                  Fill="{TemplateBinding BackgroundActive}"
                  HorizontalAlignment="Stretch"
                  VerticalAlignment="Stretch"
                  Width="Auto"
                  Height="Auto"
                  SnapsToDevicePixels="True"
                  Opacity="1"
                  Visibility="Collapsed"
                  StrokeThickness="1"
                  Stroke="{TemplateBinding BorderActiveBrush}"/>
            <igWindows:ExpansionIndicator
					x:Name="PART_Expander"
                    Panel.ZIndex="1"
					Grid.Column="1"
					Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
					Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}"
					CommandParameter="{TemplateBinding Record}"
                    VerticalAlignment="Center"
					ToggleMode="Manual"
					IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
            <ContentPresenter
                    x:Name="PART_EditorSite"
 					Grid.Column="2"
                    IsEnabled="{TemplateBinding IsContentEnabled}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Margin="{TemplateBinding Padding}"
                    Style="{TemplateBinding ForegroundStyle}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsAlternate, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=Record.RecordType, RelativeSource={RelativeSource Self}}" Value="DataRecord"/>
                    <Condition Binding="{Binding Path=Record.IsAddRecord, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundAlternateStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
            </MultiDataTrigger>
                        
            <!-- HighlightAsPrimary -->
            <Trigger Property="HighlightAsPrimary" Value="true">
              <Setter Property="Background" Value="{Binding Path=BackgroundPrimary, RelativeSource={RelativeSource Self}}"/>
              <Setter Property="BorderBrush" Value="{Binding Path=BorderPrimaryBrush, RelativeSource={RelativeSource Self}}"/>
              <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundPrimaryStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <!-- IsFieldSelected -->
            <Trigger Property="IsFieldSelected" Value="true">
              <Setter Property="Background" Value="{Binding Path=BackgroundFieldSelected, RelativeSource={RelativeSource Self}}"/>
              <Setter Property="BorderBrush" Value="{Binding Path=BorderFieldSelectedBrush, RelativeSource={RelativeSource Self}}"/>
              <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundFieldSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <!-- IsSelected -->
            <Trigger Property="IsSelected" Value="true">
              <Setter Property="BorderThickness" Value="1,0,1,1"/>
              <Setter Property="Margin" Value="0,0,-1,0"/>
              <Setter Property="Background" Value="{Binding Path=BackgroundSelected, RelativeSource={RelativeSource Self}}"/>
              <Setter Property="BorderBrush" Value="{Binding Path=BorderSelectedBrush, RelativeSource={RelativeSource Self}}"/>
              <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundSelectedStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
              <!--<Setter Property="Visibility" Value="Visible" TargetName="LeftBorder" />-->
            </Trigger>
            <!-- IsActive -->
            <Trigger Property="IsActive" Value="true">
              <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundActiveStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
              <Setter Property="Visibility" TargetName="Active" Value="Visible"/>
              <Setter Property="StrokeThickness" TargetName="Active" Value="2"/>
            </Trigger>
            <!-- IsMouseOver -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True"/>
                <Condition Property="IsSelected" Value="False"/>
                <Condition Property="IsFieldSelected" Value="False"/>
              </MultiTrigger.Conditions>
              <Setter Property="Background" Value="{Binding Path=BackgroundHover, RelativeSource={RelativeSource Self}}"/>
              <Setter Property="BorderBrush" Value="{Binding Path=BorderHoverBrush, RelativeSource={RelativeSource Self}}"/>
              <Setter TargetName="PART_EditorSite" Property="Style" Value="{Binding Path=ForegroundHoverStyle, RelativeSource={RelativeSource TemplatedParent}}"/>
            </MultiTrigger>
            <!-- Field.IsFixedStateChanging    JM 01-22-09 NA 9.1 FixedFields   -->
            <DataTrigger Binding="{Binding Path=Field.IsFixedStateChanging, RelativeSource={RelativeSource Self}}" Value="True">
              <Setter Property="Background" Value="#AA8DBAEB"/>
              <Setter Property="BorderBrush" Value="#AA8DBAEB"/>
            </DataTrigger>
            <!--SSP 5/27/09 NAS9.2 IDataErrorInfo Support-->
            <Trigger Property="IsDataErrorTemplateActive" Value="true">
              <Setter TargetName="PART_EditorSite" Property="ContentTemplate" Value="{DynamicResource {x:Static igDP:DataPresenterBase.DataErrorContentTemplateKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- _________________________ DataRecordPresenter __________________________________________ -->
  <Style TargetType="{x:Type igDP:DataRecordPresenter}">
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="HeaderAreaBackground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}"/>
    <Setter Property="NestedContentBackground" Value="Transparent"/>
    <Setter Property="Background" Value="#00FFFFFF"/>
    <Setter Property="Margin" Value="0,0,0,0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:DataRecordPresenter}">
          <igWindows:CardPanel x:Name="baseGrid" RenderTransform="{TemplateBinding FixedNearElementTransform}" Background="{TemplateBinding Background}">
            <Border
  Visibility="Collapsed"
  Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=AddRowBackground}}"
  BorderBrush="#FFD0D7E5"
  HorizontalAlignment="Stretch"
  x:Name="addRowFooter"
  VerticalAlignment="Stretch"
  Width="Auto"
  Height="Auto"
  BorderThickness="0,0,0,1"/>
            <Grid Margin="0" RenderTransform="{TemplateBinding ScrollableElementTransform}">
              <Grid.ColumnDefinitions>
                <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - added 1 column definition-->
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <!-- SSP 5/6/08 - Record Separators - Added two col defs-->
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - added 1 row definition-->
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <!-- SSP 5/6/08 - Record Separators - Added two row defs-->
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <Border x:Name="OrientationHorizontalSep" BorderThickness="0,0,1,0" Grid.ColumnSpan="6" Background="#FFFAFAFA" BorderBrush="#FFE7E7E7"  Visibility="Collapsed"/>
              <!-- Expansion Checkbox -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.row to 2 from 1-->
              <!-- AS 1/27/09 NA 2009 Vol 1 - Set ZIndex and RenderTransform for fixed fields -->
              <!-- AS 6/3/09 NA 2009 Vol 2 - Added Command(Parameter) & ToggleMode to support undo/redo -->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <igWindows:ExpansionIndicator
  x:Name="ExpansionIndicator"
                  Panel.ZIndex="1"
                  RenderTransform="{TemplateBinding FixedNearElementTransform}"
  Grid.Row="3"
  Grid.Column="1"
  Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
                  Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}"
                  CommandParameter="{TemplateBinding Record}"
                  ToggleMode="Manual"
  IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
              <!-- Header Background -->
              <!-- Added 8/2/2006 GH -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.colspan to 5 from 3-->
              <!-- AS 2/10/09 TFS13798 - Set RenderTransform for fixed fields -->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <igWindows:CardPanel
  x:Name="SpacerFill"
                  RenderTransform="{TemplateBinding FixedNearElementTransform}"
  Grid.Row="1"
  Grid.Column="1"
  Grid.ColumnSpan="6"
  Visibility="Visible">
                <Border
  x:Name="fill"
  Margin="0,0,0,0"
  Background="{TemplateBinding HeaderAreaBackground}"
  BorderThickness="0,0,0,1"
  BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelOuterBorder}}"/>
              </igWindows:CardPanel>
              <!-- End Added 8/2/2006 GH -->
              <!-- Header Content -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.col to 2 from 1-->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <ContentPresenter
  x:Name="PART_HeaderContentSite"
  Grid.Row="1"
  Grid.Column="3"
  Content="{TemplateBinding HeaderContent}"
  Visibility="Visible"
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
  d:IsHidden="True"/>
              <!-- SSP 5/6/08 - Record Separators - Added separator rectangle -->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <Border
  x:Name="RecordSeparator"
  Grid.Row="2"
  Grid.Column="1"
  Grid.ColumnSpan="6"
  Visibility="Collapsed"
                  RenderTransform="{TemplateBinding FixedNearElementTransform}"
  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=RecordSeparatorStyle}}"/>
              <!-- Record Content -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.row to 2 from 1 and grid.col to 2 from 1-->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <ContentPresenter
  x:Name="PART_RecordContentSite"
  Grid.Row="3"
  Grid.Column="3"
  Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"
  ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
              <!-- Nested Content -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.row to 4 from 2 and grid.col to 2 from 1-->
              <!-- AS 3/25/09 TFS15801 - Set RenderTransform for fixed fields -->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <Border
  x:Name="PART_NestedContentSite"
  Grid.Row="5"
  Grid.Column="3"
  Visibility="Visible"
  HorizontalAlignment="Left"
  VerticalAlignment="Top"
                  RenderTransform="{TemplateBinding FixedNearElementTransform}"
  Background="{TemplateBinding NestedContentBackground}">
                <!-- AS 11/14/07 BR26035
								The namescope was broken because the recordlistcontrol was not in the logical tree. We
								need to use a ContentControl instead so the content	is made a logical child. -->
                <ContentControl
                    RenderTransform="{TemplateBinding ScrollableElementTransform}"
                    Content="{TemplateBinding NestedContent}"
                    Margin="2,2,0,0"/>
                <!--Margin="10,10,0,0" />-->
              </Border>
            </Grid>
          </igWindows:CardPanel>
          <ControlTemplate.Triggers>
            <!-- AS 11/8/11 TFS88111 -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=FieldLayout.AutoFitToWidth, RelativeSource={RelativeSource Self}}" Value="True" />
                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_HeaderContentSite" Property="Grid.ColumnSpan" Value="3"/>
              <Setter TargetName="PART_RecordContentSite" Property="Grid.ColumnSpan" Value="3"/>
              <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            </MultiDataTrigger>

            <Trigger Property="Orientation" Value="Horizontal">
              <!-- START SSP 5/6/08 - Record Separators
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_HeaderContentSite" Property="Grid.Column" Value="0" />
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="1" />
                            <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="2" />
                            <Setter TargetName="PART_RecordContentSite" Property="VerticalAlignment" Value="Top" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="1" />
                            <Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="3" />
														-->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="3"/>
              <Setter TargetName="PART_HeaderContentSite" Property="Grid.Column" Value="1"/>
              <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="3"/>
              <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="5"/>
              <Setter TargetName="PART_RecordContentSite" Property="VerticalAlignment" Value="Top"/>
              <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1"/>
              <Setter TargetName="ExpansionIndicator" Property="Margin" Value="0,2"/>
              <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="3"/>
              <Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1"/>
              <Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="6"/>
              <!--<Setter TargetName="RecordSeparator" Property="Grid.Row" Value="2"/>
							<Setter TargetName="RecordSeparator" Property="Grid.Column" Value="1"/>-->
              <Setter TargetName="RecordSeparator" Property="Width" Value="10"/>
              <Setter TargetName="RecordSeparator" Property="Height" Value="Auto"/>
              <Setter TargetName="RecordSeparator" Property="BorderThickness" Value="1,0"/>
              <Setter TargetName="OrientationHorizontalSep" Property="Visibility" Value="Visible"/>
              <!-- END SSP 5/6/08 - Record Separators -->
            </Trigger>
            <Trigger Property="ShouldDisplayRecordContent" Value="False">
              <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Collapsed"/>
              <!--JJD 9/4/07 - BR26153 -->
              <!--Only set ExpansionIndicator Visibility to Hidden if is was Visible (see new MultiTrigger below) -->
              <!--<Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />-->
            </Trigger>
            <!--JJD 9/4/07 - BR26153 -->
            <!--Only set ExpansionIndicator Visibility to Hidden if is was Visible -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
                <Condition Property="IsHeaderRecord" Value="False"/>
                <Condition Property="ExpansionIndicatorVisibility" Value="Visible"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Orientation" Value="Horizontal"/>
                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
              </MultiTrigger.Conditions>
              <!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <!-- JJD 1/24/11 TFS63831 the value should be 5 to match up with the nested content-->
              <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="5"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Orientation" Value="Vertical"/>
                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
              </MultiTrigger.Conditions>
              <!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <!-- JJD 1/24/11 TFS63831 the value should be 5 to match up with the nested content-->
              <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="5"/>
            </MultiTrigger>
            <Trigger Property="IsHeaderRecord" Value="True">
              <!--JJD 9/4/07 - BR26153 -->
              <!--Only set ExpansionIndicator Visibility to Hidden if is was Visible (see new MultiTrigger below) -->
              <!--<Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />-->
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="1"/>
              <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="1"/>
            </Trigger>
            <!--JJD 9/4/07 - BR26153 -->
            <!--Only set ExpansionIndicator Visibility to Hidden if is was Visible -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsHeaderRecord" Value="True"/>
                <Condition Property="ExpansionIndicatorVisibility" Value="Visible"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden"/>
            </MultiTrigger>
            <Trigger Property="HasHeaderContent" Value="False">
              <Setter Property="Visibility" TargetName="SpacerFill" Value="Collapsed"/>
              <Setter Property="Visibility" TargetName="PART_HeaderContentSite" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasNestedContent" Value="true">
              <Setter TargetName="PART_NestedContentSite" Property="Visibility" Value="Visible"/>
              <Setter TargetName="baseGrid" Property="Background" Value="{Binding Path=Background, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
            <Trigger Property="HasNestedContent" Value="False">
              <Setter Property="Visibility" TargetName="PART_NestedContentSite" Value="Collapsed"/>
            </Trigger>
            <!--SSP 8/5/09 - NAS9.2 Enhanced grid view
							Changed the IsFixedOnTop trigger to MultiDataTrigger since we needed to add IsSpecialRecord
							condition. This was done because previously we were showing separator after each fixed record
							however we should not display the separator between each fixed data record if there are multiple
							fixed data records. The same change was applied to IsFixedOnBottom.
						-->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsSpecialRecord}" Value="true" />
                <Condition Binding="{Binding Path=IsFixedOnTop, RelativeSource={RelativeSource Self}}" Value="true" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Visibility" TargetName="addRowFooter" Value="Visible"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=IsSpecialRecord}" Value="true" />
                <Condition Binding="{Binding Path=IsFixedOnBottom, RelativeSource={RelativeSource Self}}" Value="true" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Margin" Value="0,2,0,0"/>
              <Setter Property="Visibility" TargetName="addRowFooter" Value="Visible"/>
            </MultiDataTrigger>
            <!-- START SSP 5/6/08 - Record Separators -->
            <!-- For HasSeparatorBefore, default grid.row and grid.column settings are fine as setup
							when declaring the record separator (and for horizontal orientation as setup in the
							orientation=horizontal trigger above).
						-->
            <Trigger Property="HasSeparatorBefore" Value="true">
              <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
            </Trigger>
            <!-- For HasSeparatorAfter, we have to set grid.row and grid.col based on the orientation-->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasSeparatorAfter" Value="true"/>
                <Condition Property="Orientation" Value="Vertical"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="4"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasSeparatorAfter" Value="true"/>
                <Condition Property="Orientation" Value="Horizontal"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="4"/>
              <Setter TargetName="RecordSeparator" Property="Grid.ColumnSpan" Value="1"/>
              <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="1"/>
              <Setter TargetName="RecordSeparator" Property="Grid.RowSpan" Value="6"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasSeparatorBefore" Value="true"/>
                <Condition Property="Orientation" Value="Horizontal"/>
              </MultiTrigger.Conditions>
              <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature - Shifted all columns and rows down and over by 1 and increased spans by 1-->
              <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="2"/>
              <Setter TargetName="RecordSeparator" Property="Grid.ColumnSpan" Value="1"/>
              <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="1"/>
              <Setter TargetName="RecordSeparator" Property="Grid.RowSpan" Value="6"/>
            </MultiTrigger>
            <!-- END SSP 5/6/08 - Record Separators -->
            <!-- Changing opacity of Content to differentiate between filtered records with IsFilteredOut trigger property -->
			<!-- JJD 1/10/13 - TFS130325 
				Use new IsOpacityReduced property instead
			<Trigger Property="IsFilteredOut" Value="True">-->
			<Trigger Property="IsOpacityReduced" Value="True">
				<Setter TargetName="PART_RecordContentSite" Property="Opacity" Value="0.35"/>
			</Trigger>

            <!-- MD 6/10/10 - ChildRecordsDisplayOrder feature -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent"/>
                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParent"/>
                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="0"/>
            </MultiDataTrigger>

            <!-- MD 8/3/10 - TFS35609 -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached"/>
                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_NestedContentSite" Property="Grid.Row" Value="0"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=FieldLayout.ChildRecordsDisplayOrderResolved}" Value="BeforeParentHeadersAttached"/>
                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Horizontal"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_NestedContentSite" Property="Grid.Column" Value="0"/>
            </MultiDataTrigger>

          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="TemplateCardView">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:DataRecordPresenter}">
          <igWindows:CardPanel x:Name="baseGrid" Background="{TemplateBinding Background}">
            <!-- Record Content -->
            <Rectangle Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CardBackground}}"/>
            <ContentPresenter
  x:Name="PART_RecordContentSite"
  Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"
  ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </igWindows:CardPanel>
          <ControlTemplate.Triggers>
            <!-- JM NA 10.1 CardView -->
            <Trigger Property="IsInCard" Value="True">
              <Setter Property="VerticalContentAlignment" Value="Top"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- _________________________ DataRecordCellArea __________________________________________ -->
  <Style TargetType="{x:Type igDP:DataRecordCellArea}" BasedOn="{x:Static themes:DataPresenterGeneric.DataRecordCellArea}">
    <Setter Property="BackgroundHover">
      <Setter.Value>
        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
          <GradientStop Color="#FFfffce5" Offset="0"/>
          <GradientStop Color="#FFffeca0" Offset="0.49900001287460327"/>
          <GradientStop Color="#FFffd641" Offset="0.5"/>
          <GradientStop Color="#FFffdf63" Offset="1"/>
        </LinearGradientBrush>
      </Setter.Value>
    </Setter>
    <Setter Property="BorderHoverBrush" Value="#FFC0A776"/>
    <Setter Property="BackgroundActive">
      <Setter.Value>
        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
          <GradientStop Color="#FFFBDBB5" Offset="0"/>
          <GradientStop Color="#FFFEC778" Offset="0.49900001287460327"/>
          <GradientStop Color="#FEB456" Offset="0.5"/>
          <GradientStop Color="#FFFDEB9F" Offset="1"/>
        </LinearGradientBrush>
      </Setter.Value>
    </Setter>
    <Setter Property="BorderActiveBrush" Value="#FFC0A776"/>
    <Setter Property="BackgroundAlternate" Value="#FFD7D7D7"/>
    <Setter Property="BackgroundSelected">
      <Setter.Value>
        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
          <GradientStop Offset="0" Color="#FFFEFEFE"/>
          <GradientStop Offset="0.5" Color="#FFE7E7E7"/>
          <GradientStop Offset="0.52" Color="#FFE7E7E7"/>
          <GradientStop Offset="1" Color="#FFE7E7E7"/>
        </LinearGradientBrush>
      </Setter.Value>
    </Setter>
    <Setter Property="ForegroundActiveStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
    <Setter Property="ForegroundSelectedStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
    <Setter Property="ForegroundAlternateStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
    <Setter Property="ForegroundHoverStyle" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GrayForegroundStyle}}" />
    <Setter Property="BorderThickness" Value="0,0,0,1"/>
    <Setter Property="BorderBrush" Value="#FFD0D7E5"/>
    <Setter Property="CornerRadius" Value="0,0,0,0"/>
  </Style>

  <!-- _________________________ GroupByArea __________________________________________ -->
  <Style TargetType="{x:Type igDP:GroupByArea}" BasedOn="{x:Static themes:DataPresenterGeneric.GroupByArea}">
    <Setter Property="Foreground" Value="#FF575A61"/>
    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=GroupByAreaBackground}}"/>
  </Style>

  <!-- _________________________ GroupByAreaFieldLabel __________________________________________ -->
  <Style TargetType="{x:Type igDP:GroupByAreaFieldLabel}">
    <Setter Property="MinHeight" Value="22"/>
    <Setter Property="Cursor" Value="Hand"/>
    <Setter Property="Foreground" Value="#FF202820"/>
    <Setter Property="BorderBrush" Value="#FF4A565D"/>
    <Setter Property="Background">
      <Setter.Value>
        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
          <GradientStop Offset="0.000000" Color="#FFFCFDFD"/>
          <GradientStop Offset="0.5" Color="#FFDCDFE0"/>
          <GradientStop Offset="0.5" Color="#FFB8C2CB"/>
          <GradientStop Offset="1.000000" Color="#FFDAEBEB"/>
        </LinearGradientBrush>
      </Setter.Value>
    </Setter>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Padding" Value="6,3,6,3.5"/>
    <Setter Property="Margin" Value="0,0,1,0"/>
    <Setter Property="LayoutTransform">
      <Setter.Value>
        <ScaleTransform ScaleX="1" ScaleY="1"/>
      </Setter.Value>
    </Setter>
    <Setter Property="RenderTransform">
      <Setter.Value>
        <ScaleTransform ScaleX="1" ScaleY="1"/>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:GroupByAreaFieldLabel}">
          <Grid HorizontalAlignment="Stretch" x:Name="ButtonGroupLeftMost" VerticalAlignment="Stretch">
            <Border SnapsToDevicePixels="True" Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ButtonGroupNormalBorderFill}}" CornerRadius="3,3,3,3"/>
            <Rectangle
  Opacity="0"
  Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ButtonGroupPressedBorderFill}}"
  x:Name="ButtonGroupLeftMostPressBorder"
  Width="Auto"
  Height="Auto"
  SnapsToDevicePixels="True"
  Margin="1,0,1,0"
  RadiusX="2"
  RadiusY="2"/>
            <Border
  HorizontalAlignment="Stretch"
  VerticalAlignment="Stretch"
  Width="Auto"
  Height="Auto"
  Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ButtonGroupNormalInnerBorderFill}}"
  x:Name="ButtonGroupLeftMostBorder"
  CornerRadius="2,2,2,2"
  Margin="1,1,1,1"
  SnapsToDevicePixels="True"/>
            <Border
  SnapsToDevicePixels="True"
  HorizontalAlignment="Stretch"
  Margin="2,2,2,2"
  VerticalAlignment="Stretch"
  Width="Auto"
  Height="Auto"
  x:Name="ButtonGroupLeftMostMiddleFill"
  Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ButtonGroupNormalCenterFill}}"/>
            <ContentPresenter Margin="{TemplateBinding Padding}" Content="{Binding Path=(igDP:GroupByAreaFieldLabel.Field).Label, RelativeSource={RelativeSource TemplatedParent}}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" TargetName="ButtonGroupLeftMostBorder" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ButtonGroupHoverBorderFill}}"/>
              <Setter Property="Background" TargetName="ButtonGroupLeftMostMiddleFill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ButtonGroupHoverCenterFill}}"/>
              <Setter Property="Width" TargetName="ButtonGroupLeftMostMiddleFill" Value="Auto"/>
              <Setter Property="Margin" TargetName="ButtonGroupLeftMostMiddleFill" Value="2,2,2,2"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" TargetName="ButtonGroupLeftMostPressBorder" Value="1"/>
              <Setter Property="Visibility" TargetName="ButtonGroupLeftMostMiddleFill" Value="Collapsed"/>
              <Setter Property="Margin" TargetName="ButtonGroupLeftMostPressBorder" Value="2,0,1,1"/>
              <Setter Property="Fill" TargetName="ButtonGroupLeftMostPressBorder" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ButtonGroupCheckedBorderFill}}"/>
              <Setter Property="Background" TargetName="ButtonGroupLeftMostBorder" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ButtonGroupCheckedCenterFill}}"/>
            </Trigger>
            <EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.RemovedFromAvailableList">
              <BeginStoryboard x:Name="CollapseLabel_BeginStoryboard" Storyboard="{StaticResource CollapseLabel}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.AddedToAvailableList">
              <BeginStoryboard x:Name="AddLabelToList_BeginStoryboard" Storyboard="{StaticResource ExpandLabel}"/>
            </EventTrigger>
            <EventTrigger RoutedEvent="igDP:GroupByAreaFieldLabel.AddedToGroupedList">
              <BeginStoryboard x:Name="AddLabelToGroup_BeginStoryboard" Storyboard="{StaticResource ExpandLabel}"/>
            </EventTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

    <!-- _________________________ LabelPresenter __________________________________________ -->
    <Style x:Key="OfficeLabelPresenter" TargetType="{x:Type igDP:LabelPresenter}">
        <Setter Property="InnerBorderBrush">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Offset="0" Color="#FFfffffb"/>
                            <GradientStop Offset="0.5" Color="#FFfff2c9"/>
                            <GradientStop Offset="1" Color="#FFfff8b5"/>
                        </GradientStopCollection>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="OuterBorderBrush">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStopCollection>
                            <GradientStop Offset="0" Color="#FFdbce99"/>
                            <GradientStop Offset="0.5" Color="#FFc0a776"/>
                            <GradientStop Offset="1" Color="#FFd7d0b3"/>
                        </GradientStopCollection>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0,0,-1,0"/>
        <Setter Property="Panel.ZIndex" Value="100"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:LabelPresenter}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="SigmaFadeIn">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeOut">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SummaryButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FixedButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeInFilterButton">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="SigmaFadeOutFilterButton">
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="FilterButton" Storyboard.TargetProperty="(UIElement.Opacity)" FillBehavior="Stop">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1"/>
                                <SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="0.4"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid
    RenderTransformOrigin="0.5,0.5"
    SnapsToDevicePixels="True"
    x:Name="background"
    Background="#00000000"
    Margin="{TemplateBinding Padding}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition x:Name="fishColumn" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Border
    Margin="0,0,0,0"
    BorderThickness="{TemplateBinding BorderThickness}"
    Background="{TemplateBinding Background}"
    BorderBrush="{TemplateBinding BorderBrush}"
    x:Name="Labelbase"/>
                        <Border
    x:Name="lineInner"
    BorderBrush="{TemplateBinding InnerBorderBrush}"
    BorderThickness="1,1,0,1"
    CornerRadius="2,0,0,2"
    Visibility="Collapsed"/>
                        <Path x:Name="fishHeadOuterStroke" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{TemplateBinding OuterBorderBrush}" Grid.Column="1" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z" />
                        <Path x:Name="fishHead" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{TemplateBinding Background}" Grid.Column="1" Margin="0,1,1,1" Stretch="Fill" Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,20 0,20 z" />
                        <Path
    x:Name="fishHeadInnerStroke"
    Visibility="Collapsed"
    Stretch="Fill"
    Data="M 0,20 C0,20 8,12 8,12 9,11 9,9 8,8 8,8 0,0 0,0 0,0 0,1 0,1 0,1 7,8 7,8 8,9 8,11 7,12 7,12 0,19 0,19 0,19 0,20 0,20 z"
    Fill="{TemplateBinding InnerBorderBrush}"
    Grid.Column="1"
    Margin="-1,1,1,1"
    SnapsToDevicePixels="True"/>
                        <Grid
  x:Name="sortIndicatorAndLabel"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
  Margin="4,1,4,1"
  MinHeight="20">
                            <!-- HorizontalAlignment="{Binding Path=Field.LabelTextAlignmentResolved, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource textAlignmentToHorizontalAlignmentConverter}}"  -->
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <!-- Label Text -->
                            <ContentControl
  x:Name="LabelContent"
  Style="{StaticResource LabelContentStyle}"
  Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"
  ContentTemplate="{TemplateBinding ContentTemplate}"
  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
  Height="Auto"
  d:LayoutOverrides="Width"
  Grid.ColumnSpan="1"/>
                            <!-- End Label Text -->
                            <igWindows:SortIndicator
  x:Name="SortIndicator"
  SortStatus="{TemplateBinding SortStatus}"
  Visibility="Collapsed"
  Width="10"
  Height="Auto"
  Grid.Column="1"
  HorizontalAlignment="Right"
  VerticalAlignment="Center"
  Margin="5,0,0,0"/>
                            <!-- SSP 3/31/08 - Summaries Functionality -->
                            <igDP:SummaryButton
  x:Name="SummaryButton"
  Field="{TemplateBinding Field}"
  Visibility="{Binding Path=Field.AllowSummariesResolved, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource TemplatedParent}}"
  HorizontalAlignment="Right"
  VerticalAlignment="Stretch"
  Width="Auto"
  Grid.Column="2"
  Margin="5,0,0,0"
  Grid.Row="0"
  Opacity="0.4"/>
                            <!-- JJD 1/06/09 - Filtering Functionality -->
                            <igDP:FilterButton
  x:Name="FilterButton"
  Field="{TemplateBinding Field}"
  Visibility="{TemplateBinding FilterButtonVisibility}"
  HorizontalAlignment="Left"
  VerticalAlignment="Center"
  Width="Auto"
  Grid.Column="3"
                  Opacity="0.4"
  Margin="5,0,0,0"/>
                            <!-- JM 1/14/09 - Fixed Fields Functionality -->
                            <igDP:FixedFieldButton
  x:Name="FixedButton"
  Field="{TemplateBinding Field}"
  Visibility="{TemplateBinding FixedButtonVisibility}"
  HorizontalAlignment="Left"
  VerticalAlignment="Center"
  Width="Auto"
  Grid.Column="4"
  Margin="2,0,2,0"
  Opacity="0.6"/>
                        </Grid>
                        <!-- End Highlight -->
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HorizontalAlignment" Value="Right" SourceName="sortIndicatorAndLabel">
                            <Setter Property="Margin" TargetName="sortIndicatorAndLabel" Value="4,0,6,0"/>
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsDragSource, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Margin" Value="1,0,0,0"/>
                            <Setter Property="BorderBrush" Value="#FFFFFFFF"/>
                            <Setter Property="Margin" TargetName="LabelContent" Value="-1,0,0,0"/>
                            <Setter Property="Margin" TargetName="SortIndicator" Value="5,0,-1,0"/>
                            <Setter Property="Margin" TargetName="SummaryButton" Value="5,0,-1,-1"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Margin" Value="1,0,0,0"/>
                            <Setter Property="BorderBrush" Value="#FFFFFFFF"/>
                            <Setter Property="Margin" TargetName="LabelContent" Value="-1,0,0,0"/>
                            <Setter Property="Margin" TargetName="SortIndicator" Value="5,0,-1,0"/>
                            <Setter Property="Margin" TargetName="SummaryButton" Value="5,0,-1,-1"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <!--SSP 6/24/09 - NAS9.2 Field Chooser - We don't want to loose the selected highlight when mouse
								is hovered over a field in the field chooser. Especially this causes the field label to not
								appear selected when mouse is clicked over it while the mouse is still over the field label.-->
                                <Condition Binding="{Binding Path=IsSelectedInFieldChooser, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource SigmaFadeOut}" x:Name="SigmaFadeOut"/>
                            </MultiDataTrigger.ExitActions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource SigmaFadeIn}" x:Name="SigmaFadeIn"/>
                            </MultiDataTrigger.EnterActions>
                            <Setter Property="Panel.ZIndex" Value="200"/>
                            <Setter Property="Background" TargetName="Labelbase" Value="{Binding Path=LabelHighlight, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiDataTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="FilterButton" Property="HasActiveFilters" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <!-- JM 04-09-09 Comment these animations out for now to address TFS 16564.  This bug was discovered as we were getting ready to release
											 the April 2009 9.1 Hotfix and is caused by a bug in the WPF framework that we will need to work around by
											 replacing this MultiTrigger with a MultiDataTrigger. -->
                            <!--<MultiTrigger.EnterActions>
                                <BeginStoryboard x:Name="SigmaFadeIn_FB_BeginStoryboard" Storyboard="{StaticResource SigmaFadeInFilterButton}"/>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource SigmaFadeOutFilterButton}" x:Name="SigmaFadeOut_FB_BeginStoryboard"/>
                                <RemoveStoryboard BeginStoryboardName="SigmaFadeIn_FB_BeginStoryboard"/>
                            </MultiTrigger.ExitActions>-->
                            <Setter TargetName="FilterButton" Property="Opacity" Value="1"/>
                            <Setter TargetName="background" Property="Background" Value="{Binding Path=LabelHighlight, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                      
                        <MultiTrigger>
                          <MultiTrigger.Conditions>
                              <Condition Property="IsInGroupByArea" Value="True"/>
                              <Condition Property="IsMouseOver" Value="True"/>
                          </MultiTrigger.Conditions>
                            <Setter TargetName="background" Property="Background" Value="Transparent" />
                        </MultiTrigger>

                        <Trigger SourceName="FilterButton" Property="HasActiveFilters" Value="True">
                            <Setter TargetName="FilterButton" Property="Opacity" Value="1"/>
                        </Trigger>
                        <!-- HighlightPrimary -->
                        <Trigger Property="HighlightAsPrimary" Value="true">
                            <Setter Property="Background" Value="{Binding Path=LabelHighlight, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="SortStatus" Value="Ascending">
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>
                            <Setter Property="Background" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="SortStatus" Value="Descending">
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Visible"/>
                            <Setter Property="Background" Value="Transparent"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Labelbase" Property="CornerRadius" Value="2,0,0,2"/>
                            <Setter TargetName="lineInner" Property="CornerRadius" Value="2,0,0,2"/>
                            <Setter TargetName="Labelbase" Property="BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="lineInner" Property="BorderThickness" Value="1,1,0,1"/>
                            <Setter TargetName="fishHeadOuterStroke" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="fishHead" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="fishHeadInnerStroke" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="fishColumn" Property="Width" Value="14"/>
                            <Setter TargetName="Labelbase" Property="BorderBrush">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Offset="0" Color="#FFdbce99"/>
                                                <GradientStop Offset="0.5" Color="#FFc0a776"/>
                                                <GradientStop Offset="1" Color="#FFd7d0b3"/>
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,-0.05" EndPoint="0,1.05">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStopCollection>
                                                <GradientStop Offset="0" Color="#FFfffdeb"/>
                                                <GradientStop Offset="0.5" Color="#FFffebb0"/>
                                                <GradientStop Offset="0.500" Color="#FFffd669"/>
                                                <GradientStop Offset="1" Color="#FFffe59a"/>
                                            </GradientStopCollection>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.HasOffsetY), RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="background" Property="Margin" Value="-24,0,0,0"/>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.HasOffsetY), RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding Path=IsInGroupByArea, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.IsFirstInList), RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="sortIndicatorAndLabel" Property="Margin" Value="24,1,4,1"/>
                        </MultiDataTrigger>

                        <DataTrigger Binding="{Binding Path=(Field).(igDP:GroupByAreaMulti.IsFirstInList), RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="background" Property="Margin" Value="0"/>
                        </DataTrigger>

                        <!--SSP 6/23/09 - NAS9.2 Field Chooser
							If the label is in a field chooser then hide the sort indicator, filter button and
							summary button. Note that the fixed button is collapsed in code in label presenter
							by coercing the FixedButtonVisibility property to be Collapsed.-->
                        <Trigger Property="IsInFieldChooser" Value="true">
                            <Setter TargetName="SortIndicator" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="FilterButton" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="FixedButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="SummaryButton" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="IsDragIndicator" Value="True">
                            <Setter TargetName="sortIndicatorAndLabel" Property="Margin" Value="4,1"/>
                            <Setter TargetName="background" Property="Margin" Value="0"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelOuterBorder}}"/>
        <Setter Property="BorderThickness" Value="1,0,1,1"/>
        <Setter Property="LabelHighlight" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelHighlight}}"/>
        <!--SSP 7/6/09 - Field Chooser - Added ToolTip property on the field.-->
        <Setter Property="ToolTip" Value="{Binding Path=Field.ToolTip, RelativeSource={x:Static RelativeSource.Self}}" />
    </Style>

    <Style BasedOn="{StaticResource OfficeLabelPresenter}" TargetType="{x:Type igDP:LabelPresenter}" />

    <!-- SSP 3/27/09 - Summaries Functionality
				Added style for summaries related elements
	-->
  <!-- _________________________ SummaryRecordPresenter ______________________________________ -->
  <Style TargetType="{x:Type igDP:SummaryRecordPresenter}">
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="HeaderAreaBackground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelBackground}}"/>
    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryRecordPresenterBackground}}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryRecordPresenterBorder}}"/>
    <Setter Property="Margin" Value="0,0,0,0"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:SummaryRecordPresenter}">
          <igWindows:CardPanel x:Name="baseGrid">
            <Border
  BorderBrush="{TemplateBinding BorderBrush}"
  BorderThickness="0,1,0,1"
  Background="{TemplateBinding Background}"
                RenderTransform="{TemplateBinding FixedNearElementTransform}"
  x:Name="Background"/>
            <Grid Margin="0">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <!-- SSP 5/6/08 - Record Separators - Added two col defs-->
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <!-- SSP 5/6/08 - Record Separators - Added two row defs-->
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <!-- Expansion Checkbox -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.row to 2 from 1-->
              <!-- AS 6/3/09 NA 2009 Vol 2 - Added Command(Parameter) & ToggleMode to support undo/redo -->
              <igWindows:ExpansionIndicator
  x:Name="ExpansionIndicator"
  Grid.Row="2"
  Grid.Column="0"
  Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}"
                  Command="{x:Static igDP:DataPresenterCommands.ToggleRecordIsExpanded}"
                  CommandParameter="{TemplateBinding Record}"
                  ToggleMode="Manual"
  IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
              <!-- Header Background -->
              <!-- Added 8/2/2006 GH -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.colspan to 5 from 3-->
              <!-- AS 2/10/09 TFS13798 - Set RenderTransform for fixed fields -->
              <igWindows:CardPanel
  x:Name="SpacerFill"
                  RenderTransform="{TemplateBinding FixedNearElementTransform}"
  Grid.Row="0"
  Grid.Column="0"
  Grid.ColumnSpan="5"
  Visibility="Visible">
                <Rectangle x:Name="fill" Margin="0,0,0,0" Fill="{TemplateBinding HeaderAreaBackground}"/>
              </igWindows:CardPanel>
              <!-- End Added 8/2/2006 GH -->
              <!-- Header Content -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.col to 2 from 1-->
              <ContentPresenter
  x:Name="PART_HeaderContentSite"
  Grid.Row="0"
  Grid.Column="2"
  Content="{TemplateBinding HeaderContent}"
  Visibility="Visible"
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
  d:IsHidden="True"/>
              <!-- SSP 5/6/08 - Record Separators - Added separator rectangle -->
              <Border
  x:Name="RecordSeparator"
  Grid.Row="1"
  Grid.Column="0"
  Grid.ColumnSpan="5"
  Visibility="Collapsed"
                  RenderTransform="{TemplateBinding FixedNearElementTransform}"
  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=RecordSeparatorStyle}}"/>
              <!-- Record Content -->
              <!-- SSP 5/6/08 - Record Separators - changed grid.row to 2 from 1 and grid.col to 2 from 1-->
              <ContentPresenter
  x:Name="PART_RecordContentSite"
  Grid.Row="2"
  Grid.Column="2"
  Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"
  ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
  Margin="{TemplateBinding ContentAreaMargins}"/>
            </Grid>
          </igWindows:CardPanel>
          <ControlTemplate.Triggers>
            <!-- AS 11/8/11 TFS88111 -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Path=FieldLayout.AutoFitToWidth, RelativeSource={RelativeSource Self}}" Value="True" />
                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Self}}" Value="Vertical" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="PART_HeaderContentSite" Property="Grid.ColumnSpan" Value="3"/>
              <Setter TargetName="PART_RecordContentSite" Property="Grid.ColumnSpan" Value="3"/>
              <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            </MultiDataTrigger>

            <Trigger Property="Orientation" Value="Horizontal">
              <!-- START SSP 5/6/08 - Record Separators
                             <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0" />
                            <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="1" />
                            <Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1" />
                            <Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="3" />
														-->
              <Setter TargetName="PART_HeaderContentSite" Property="Grid.Row" Value="2"/>
              <Setter TargetName="PART_HeaderContentSite" Property="Grid.Column" Value="0"/>
              <Setter TargetName="PART_RecordContentSite" Property="VerticalAlignment" Value="Top"/>
              <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0"/>
              <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="2"/>
              <Setter TargetName="SpacerFill" Property="Grid.ColumnSpan" Value="1"/>
              <Setter TargetName="SpacerFill" Property="Grid.RowSpan" Value="5"/>
              <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="2"/>
              <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="1"/>
              <Setter TargetName="RecordSeparator" Property="Width" Value="10"/>
              <Setter TargetName="RecordSeparator" Property="Height" Value="Auto"/>
              <!-- END SSP 5/6/08 - Record Separators -->
            </Trigger>
            <Trigger Property="ShouldDisplayRecordContent" Value="False">
              <Setter TargetName="PART_RecordContentSite" Property="Visibility" Value="Collapsed"/>
              <!--JJD 9/4/07 - BR26153 -->
              <!--Only set ExpansionIndicator Visibility to Hidden if is was Visible (see new MultiTrigger below) -->
              <!--<Setter TargetName="ExpansionIndicator" Property="Visibility" Value="Hidden" />-->
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Orientation" Value="Horizontal"/>
                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
              </MultiTrigger.Conditions>
              <!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
              <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="3"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Orientation" Value="Vertical"/>
                <Condition Property="ShouldDisplayRecordContent" Value="False"/>
              </MultiTrigger.Conditions>
              <!-- START SSP 5/6/08 - Record Separators - Changed Value to 3 from 2-->
              <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="3"/>
            </MultiTrigger>
            <Trigger Property="IsHeaderRecord" Value="True">
              <Setter TargetName="ExpansionIndicator" Property="Grid.Row" Value="0"/>
              <Setter TargetName="ExpansionIndicator" Property="Grid.Column" Value="0"/>
            </Trigger>
            <Trigger Property="HasHeaderContent" Value="False">
              <Setter Property="Visibility" TargetName="SpacerFill" Value="Collapsed"/>
              <Setter Property="Visibility" TargetName="PART_HeaderContentSite" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsFixedOnBottom" Value="true">
              <Setter Property="Margin" Value="0,2,0,0"/>
              <!-- JJD 2/3/09 - shouldn't step on Margin property of PART_RecordContentSite since
                                 it is bound to the ContentAreaMargins property -->
              <!--<Setter Property="Margin" TargetName="PART_RecordContentSite" Value="0,2,0,2"/>-->
              <Setter Property="BorderThickness" TargetName="Background" Value="0,1,0,0"/>
            </Trigger>
            <!-- START SSP 5/6/08 - Record Separators -->
            <!-- For HasSeparatorBefore, default grid.row and grid.column settings are fine as setup
												when declaring the record separator (and for horizontal orientation as setup in the
												orientation=horizontal trigger above).
											-->
            <Trigger Property="HasSeparatorBefore" Value="true">
              <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
            </Trigger>
            <!-- For HasSeparatorAfter, we have to set grid.row and grid.col based on the orientation-->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasSeparatorAfter" Value="true"/>
                <Condition Property="Orientation" Value="Vertical"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
              <Setter TargetName="RecordSeparator" Property="Grid.Row" Value="3"/>
            </MultiTrigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="HasSeparatorAfter" Value="true"/>
                <Condition Property="Orientation" Value="Horizontal"/>
              </MultiTrigger.Conditions>
              <Setter TargetName="RecordSeparator" Property="Visibility" Value="Visible"/>
              <Setter TargetName="RecordSeparator" Property="Grid.Column" Value="3"/>
            </MultiTrigger>
            <!-- END SSP 5/6/08 - Record Separators -->
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="TemplateCardView">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:SummaryRecordPresenter}">
          <igWindows:CardPanel x:Name="baseGrid" Background="{TemplateBinding Background}">
            <!-- Record Content -->
            <Rectangle Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CardBackground}}"/>
            <ContentPresenter
  x:Name="PART_RecordContentSite"
  Content="{Binding Path=DataContext, RelativeSource={RelativeSource TemplatedParent}}"
  ContentTemplate="{TemplateBinding RecordContentAreaTemplate}"
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </igWindows:CardPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- _________________________ SummaryRecordPrefixArea __________________________________________ -->
  <Style TargetType="{x:Type igDP:SummaryRecordPrefixArea}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:SummaryRecordPrefixArea}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter
  Content="{TemplateBinding Content}"
  ContentTemplate="{TemplateBinding ContentTemplate}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- _________________________ SummaryRecordCellArea __________________________________________ -->
  <Style TargetType="{x:Type igDP:SummaryRecordCellArea}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:SummaryRecordCellArea}">
          <igWindows:CardPanel>
            <Border BorderThickness="0,1,0,1">
              <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
            </Border>
          </igWindows:CardPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Margin" Value="0,0,0,0"/>
  </Style>

  <!-- _________________________ SummaryResultsPresenter ______________________________________ -->
  <Style TargetType="{x:Type igDP:SummaryResultsPresenter}">
    <Style.Resources>
      <!-- SSP 4/10/12 - Optimizations - Note that this is no longer being used as a result of the change below. -->
      <DataTemplate DataType="{x:Type igDP:SummaryResult}">
        <igDP:SummaryResultPresenter SummaryResult="{Binding}"/>
      </DataTemplate>
      <!-- SSP 4/10/12 - Optimizations - Added SummaryResultEntry template. -->
      <DataTemplate DataType="{x:Type igDP:SummaryResultEntry}">
        <igDP:SummaryResultPresenter SummaryResult="{Binding Path=SummaryResult}"/>
      </DataTemplate>
    </Style.Resources>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:SummaryResultsPresenter}">
          <Border
  Background="{TemplateBinding Background}"
  BorderBrush="{TemplateBinding BorderBrush}"
  BorderThickness="{TemplateBinding BorderThickness}"
  Padding="{TemplateBinding Padding}"
  SnapsToDevicePixels="true">
            <!-- SSP 4/10/12 - Optimizations - Changed ItemsSource="{TemplateBinding SummaryResults}" to ItemsSource="{TemplateBinding SummaryResultEntries}". -->
                        <ItemsControl ItemsSource="{TemplateBinding SummaryResultEntries}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding TreeLineOffset}">
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <StackPanel CanHorizontallyScroll="false" CanVerticallyScroll="false"/>
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
            </ItemsControl>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- _________________________ SummaryResultPresenter ______________________________________ -->
  <Style TargetType="{x:Type igDP:SummaryResultPresenter}">
    <Setter Property="Padding" Value="1,1"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:SummaryResultPresenter}">
          <Border
  Background="{TemplateBinding Background}"
  BorderBrush="{TemplateBinding BorderBrush}"
  BorderThickness="1"
  Padding="{TemplateBinding Padding}"
  ToolTip="{Binding Path=SummaryResult.ToolTipResolved, RelativeSource={RelativeSource TemplatedParent}}">
            <!-- SSP 3/19/10 - Optimizations
                            Changed the binding to bind to the new DisplayTextAsync instead of the DisplayText so we
                            don't force synchronous calculation of the summary if it's dirty.
                        -->
            <TextBlock Text="{Binding Path=SummaryResult.DisplayTextAsync, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Margin" Value="0,0,0,2"/>
  </Style>

  <!-- _________________________ SummaryCellPresenter ______________________________________ -->
  <Style TargetType="{x:Type igDP:SummaryCellPresenter}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:SummaryCellPresenter}">
          <igDP:SummaryCellPresenterLayoutElement/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- _________________________ SummaryButton ______________________________________ -->
  <Style TargetType="{x:Type igDP:SummaryButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:SummaryButton}">
          <Grid Visibility="Visible" x:Name="grid">
            <StackPanel
  HorizontalAlignment="Center"
  VerticalAlignment="Stretch"
  Orientation="Horizontal"
  Margin="0,0,3,0"
  Background="#00FFFFFF"
  x:Name="stackPanel"
  Visibility="Visible">
              <Border
  Width="1"
  Margin="0,1,5,2"
  BorderThickness="1,0,0,0"
  Height="Auto"
  x:Name="border1"
  BorderBrush="#FF909192"/>
              <Path
  Stretch="Fill"
  Data="M 0,0 C0,0 5,0 5,0 5,0 5,1 5,1 5,1 2,1 2,1 2,1 4,3.5 4,3.5 4,3.5 2,6 2,6 2,6 5,6 5,6 5,6 5,7 5,7 5,7 0,7 0,7 0,7 0,6 0,6 0,6 2,3.5625 2,3.5625 2,3.5625 0,1 0,1 0,1 0,0 0,0 z"
  Fill="{TemplateBinding Foreground}"
  Width="5"
  Height="7"
  d:LayoutOverrides="Width, Height"
  x:Name="path"
  Stroke="{x:Null}"
  HorizontalAlignment="Stretch"
  StrokeThickness="0"/>
            </StackPanel>
            <Popup
  x:Name="PART_Popup"
  AllowsTransparency="True"
  Placement="Bottom"
  VerticalOffset="2"
  HorizontalOffset="0"
  IsOpen="{Binding Path=IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
  StaysOpen="False"
  PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
  SnapsToDevicePixels="True">
              <!-- JJD 3/5/09 - TFS5971/BR32606 - set focus scope to true and navigation settings-->
              <Border
  BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupBorder}}"
  x:Name="border"
  Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupBackground}}"
                  KeyboardNavigation.DirectionalNavigation="Contained"
                  KeyboardNavigation.TabNavigation="Contained"
                  FocusManager.IsFocusScope="True"
  BorderThickness="1,1,1,1"
  CornerRadius="3,3,3,3">
                <Grid Width="Auto" Height="Auto">
                  <Border
  Width="28"
  HorizontalAlignment="Left"
  BorderThickness="0,0,1,0"
  Background="#FFE9EEEE"
  BorderBrush="#FFC5C5C5"
  CornerRadius="3,0,0,0"/>
                  <StackPanel Margin="5,5,5,5">
                    <igDP:SummaryCalculatorSelectionControl x:Name="CalculatorSelectionControl" Field="{TemplateBinding Field}"/>
                    <Grid Width="Auto" Height="Auto">
                      <Border Margin="-5,0,-5,-5" Background="#FFFFFFFF" CornerRadius="0,0,3,3"/>
                      <Rectangle
  Fill="#FFE0E0E0"
  Stroke="{x:Null}"
  Width="Auto"
  Height="1"
  x:Name="rectangle1"
  Margin="-5,1,-5,0"
  VerticalAlignment="Top"/>
                      <StackPanel
  Orientation="Horizontal"
  HorizontalAlignment="Right"
  Margin="0,5,0,0"
  d:LayoutOverrides="Width">
                        <Button
  x:Name="RowSummaryOkButton"
  Content="Ok"
  IsDefault="True"
  Height="12"
  Margin="0,0,5,0"
  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=RowSummaryOkButton}}"
  Width="13"/>
                        <!-- JJD 3/5/09 - TFS5971/BR32606 - set IsCancel to True-->
                        <Button
  x:Name="RowSummaryCancelButton"
  Content="Cancel"
                            IsCancel="True"
  Height="12"
  Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=RowSummaryCancelButton}}"
  Width="13"/>
                      </StackPanel>
                    </Grid>
                  </StackPanel>
                </Grid>
              </Border>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Background" Value="{x:Null}"/>
    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"/>
    <Setter Property="SnapsToDevicePixels" Value="True"/>
  </Style>

  <!-- _________________________ SummaryCalculatorSelectionControl ______________________________________ -->
  <Style TargetType="{x:Type igDP:SummaryCalculatorSelectionControl}">
    <Style.Resources>
      <!-- SSP 9/21/09 TFS15959 - Instead of setting ItemTemplate on the ItemsControl, add the
							data template to the style resources.-->
      <DataTemplate DataType="{x:Type igDP:SummaryCalculatorHolder}">
        <igWindows:CardPanel x:Name="mainPanel">
          <Grid Margin="0,0,0,5">
            <!-- JJD 3/5/09 - TFS5971/BR32606 - set FocusVisualStyle to null-->
            <!-- SSP 10/16/09 TFS19525 - Added line that sets AutomationProperties.AutomationId -->
            <CheckBox
  x:Name="checkBox"
  AutomationProperties.AutomationId="{Binding Path=Calculator.Name, Converter={StaticResource stringFormatConverter}, ConverterParameter=\{0\}_CheckBox}"
  Style="{DynamicResource OfficeCheckBox}"
  Visibility="Visible"
  Grid.Column="0"
                        FocusVisualStyle="{x:Null}"
  IsChecked="{Binding Path=IsChecked, Mode=TwoWay}">
              <StackPanel Margin="5,0,0,0">
                <Image Source="{Binding Path=Calculator.Image}" Margin="5,0,0,0"/>
                <TextBlock Text="{Binding Path=Calculator.DisplayName}" Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCSCItemForeground}}" Margin="5,0"/>
              </StackPanel>
            </CheckBox>
          </Grid>
          <Grid Margin="0,0,0,5">
            <!-- JJD 3/5/09 - TFS5971/BR32606 - set FocusVisualStyle to null-->
            <!-- SSP 10/16/09 TFS19525 - Added line that sets AutomationProperties.AutomationId -->
            <RadioButton
  x:Name="radioButton"
  AutomationProperties.AutomationId="{Binding Path=Calculator.Name, Converter={StaticResource stringFormatConverter}, ConverterParameter=\{0\}_RadioButton}"
  Visibility="Collapsed"
  Grid.Column="0"
                        FocusVisualStyle="{x:Null}"
  IsChecked="{Binding Path=IsChecked, Mode=TwoWay}">
              <StackPanel Margin="5,0,0,0">
                <Image Source="{Binding Path=Calculator.Image}" Margin="5,0,0,0"/>
                <TextBlock Text="{Binding Path=Calculator.DisplayName}" Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCSCItemForeground}}" Margin="5,0"/>
              </StackPanel>
            </RadioButton>
          </Grid>
          <!-- JJD 3/5/09 - TFS5971/BR32606 - added focus rect-->
          <Rectangle Visibility="{Binding Path=IsKeyboardFocusWithin, ElementName=mainPanel, Converter={StaticResource BoolToVisConverter}}" Margin="17,0,0,3" Stroke="#D0000000" StrokeThickness="1" StrokeDashArray="1 2"/>
        </igWindows:CardPanel>
        <DataTemplate.Triggers>
          <DataTrigger Binding="{Binding Path=SelectionControl.AllowMultipleSummaries}" Value="False">
            <Setter TargetName="checkBox" Property="Visibility" Value="Collapsed"/>
            <Setter TargetName="radioButton" Property="Visibility" Value="Visible"/>
          </DataTrigger>
        </DataTemplate.Triggers>
      </DataTemplate>
    </Style.Resources>
    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:SummaryCalculatorSelectionControl}">
          <!-- JJD 3/5/09 - TFS5971/BR32606 - set focusable to false-->
          <ItemsControl
  ItemsSource="{TemplateBinding SummaryCalculatorHolders}"
  KeyboardNavigation.DirectionalNavigation="Contained"
              Focusable="False"
  Margin="{TemplateBinding Padding}"
  Foreground="{TemplateBinding Foreground}"
					/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="BorderThickness" Value="1,1,1,1"/>
    <Setter Property="Padding" Value="3,3,3,5"/>
  </Style>

  <!-- _________________________ GroupBySummariesPresenter ______________________________________ -->
  <Style TargetType="{x:Type igDP:GroupBySummariesPresenter}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:GroupBySummariesPresenter}">
          <Border Margin="{TemplateBinding ContentAreaMargins}" Background="{TemplateBinding Background}">
            <igDP:SummaryRecordContentArea/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, RowSummaryOkButton}" BasedOn="{x:Null}" TargetType="{x:Type Button}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Path
  Opacity="1"
  Stretch="Fill"
  Stroke="{TemplateBinding BorderBrush}"
  StrokeThickness="0.5"
  Data="M 11.44970703125,-0.32843017578125 C11.44970703125,-0.32843017578125 5.0858154296875,6.0355224609375 5.0858154296875,6.0355224609375 5.0858154296875,6.0355224609375 2.55023193359375,3.5 2.55023193359375,3.5 2.55023193359375,3.5 0.13604736328125,5.914215087890625 0.13604736328125,5.914215087890625 0.13604736328125,5.914215087890625 5.0858154296875,10.86395263671875 5.0858154296875,10.86395263671875 5.0858154296875,10.86395263671875 13.86395263671875,2.085784912109375 13.86395263671875,2.085784912109375 13.86395263671875,2.085784912109375 11.44970703125,-0.32843017578125 11.44970703125,-0.32843017578125 z"
  x:Name="path"
  Fill="{TemplateBinding Background}"/>
            <ContentPresenter
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
  RecognizesAccessKey="True"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True"/>
            <Trigger Property="IsDefaulted" Value="True"/>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Fill" TargetName="path">
                <Setter.Value>
                  <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FF99FF00" Offset="0"/>
                    <GradientStop Color="#FF0A9F00" Offset="1"/>
                  </LinearGradientBrush>
                </Setter.Value>
              </Setter>
              <Setter Property="Stroke" TargetName="path" Value="#FF336C03"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True"/>
            <Trigger Property="IsEnabled" Value="False"/>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Foreground" Value="{x:Null}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCommandButtonsBorder}}"/>
    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCommandButtonsBackground}}"/>
  </Style>

  <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, RowSummaryCancelButton}" BasedOn="{x:Null}" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCommandButtonsBackground}}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryCommandButtonsBorder}}"/>
    <Setter Property="Foreground" Value="{x:Null}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid>
            <Path
  HorizontalAlignment="Stretch"
  VerticalAlignment="Stretch"
  Height="Auto"
  Width="Auto"
  Stretch="Fill"
  Opacity="1"
  Data="M 561.3890991210938,474.9895935058594 C561.3890991210938,474.9895935058594 557.5,478.8799743652344 557.5,478.8799743652344 557.5,478.8799743652344 553.6109008789062,474.9895935058594 553.6109008789062,474.9895935058594 553.6109008789062,474.9895935058594 551.4895629882812,477.11090087890625 551.4895629882812,477.11090087890625 551.4895629882812,477.11090087890625 555.3800048828125,481 555.3800048828125,481 555.3800048828125,481 551.4895629882812,484.88909912109375 551.4895629882812,484.88909912109375 551.4895629882812,484.88909912109375 553.6109008789062,487.0104064941406 553.6109008789062,487.0104064941406 553.6109008789062,487.0104064941406 557.5,483.1199951171875 557.5,483.1199951171875 557.5,483.1199951171875 561.3890991210938,487.0104064941406 561.3890991210938,487.0104064941406 561.3890991210938,487.0104064941406 563.5104370117188,484.88909912109375 563.5104370117188,484.88909912109375 563.5104370117188,484.88909912109375 559.6199951171875,481 559.6199951171875,481 559.6199951171875,481 563.5104370117188,477.11090087890625 563.5104370117188,477.11090087890625 563.5104370117188,477.11090087890625 561.3890991210938,474.9895935058594 561.3890991210938,474.9895935058594 z"
  Stroke="{TemplateBinding BorderBrush}"
  StrokeThickness=".5"
  Fill="{TemplateBinding Background}"
  x:Name="path"/>
            <ContentPresenter
  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
  RecognizesAccessKey="True"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True"/>
            <Trigger Property="IsDefaulted" Value="True"/>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Stroke" TargetName="path" Value="#FFA41818"/>
              <Setter Property="Fill" TargetName="path" Value="#FFF83737"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True"/>
            <Trigger Property="IsEnabled" Value="False"/>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="OfficeCheckBox" TargetType="{x:Type CheckBox}">
    <Setter Property="SnapsToDevicePixels" Value="true"/>

    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CheckBoxNormalInnerBoxBorderFill}}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CheckBoxNormalOuterBoxBorderFill}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
          <BulletDecorator Background="Transparent">
            <BulletDecorator.Bullet>
              <StackPanel Width="Auto" Height="Auto" Orientation="Horizontal">
                <Grid Width="13" Height="13">
                  <Border
  x:Name="OuterBox"
  BorderBrush="{TemplateBinding BorderBrush}"
  BorderThickness="{TemplateBinding BorderThickness}"
  Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CheckBoxNormalOuterBoxCenterFill}}"/>
                  <Border
  Margin="2,2,2,2"
  BorderThickness="1,1,1,1"
  BorderBrush="{TemplateBinding Background}"
  Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CheckBoxNormalInnerBoxCenterFill}}"
  x:Name="InnerBox"/>
                  <Grid Visibility="Collapsed" Margin="0,0,0,0" x:Name="CheckMark">
                    <Path
  Height="9.661"
  Width="10.137"
  Stretch="Fill"
  Opacity="0.8"
  Data="M2.6673452,7.8617508 C2.6673452,7.8617508 5.817048,10.192734 5.817048,10.192734 5.817048,10.192734 9.5967099,4.4942121 9.5967099,4.4942121"
  Stroke="#FFFFFFFF"
  StrokeThickness="3"
  SnapsToDevicePixels="True"
  HorizontalAlignment="Left"
  Margin="1.138,0.965,0,0"
  x:Name="Background"
  VerticalAlignment="Top"/>
                    <Path
  Height="8.915"
  Width="8.66"
  Stretch="Fill"
  Opacity="1"
  Data="M1.6839831,7.7438574 C1.6839831,7.7438574 5.8697866,10.85053 5.8697866,10.85053 5.8697866,10.85053 10.540217,1.6301305 10.540217,1.6301305"
  Stroke="#FF4C6D97"
  StrokeThickness="2"
  SnapsToDevicePixels="True"
  HorizontalAlignment="Left"
  Margin="1.855,1.465,0,0"
  x:Name="Foreground"
  VerticalAlignment="Top"/>
                  </Grid>
                </Grid>
                <ContentPresenter
  RecognizesAccessKey="True"
  Margin="4,0,0,0"
  Width="Auto"
  Height="Auto"/>
              </StackPanel>
            </BulletDecorator.Bullet>
          </BulletDecorator>
          <!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsThreeState" Value="True"/>
                <Condition Property="IsChecked" Value="False"/>
              </MultiTrigger.Conditions>
              <Setter Property="Visibility" TargetName="CheckMark" Value="Collapsed"/>
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter Property="Visibility" TargetName="CheckMark" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CheckBoxHoverInnerBoxBorderFill}}"/>
              <Setter Property="Background" TargetName="InnerBox" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CheckBoxHoverInnerBoxCenterFill}}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CheckBoxPressedInnerBoxCenterFill}}" TargetName="InnerBox"/>
              <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=CheckBoxPressedInnerBoxBorderFill}}" TargetName="InnerBox"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=DisabledBackgroundBrush}}" TargetName="OuterBox"/>
              <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=DisabledBorderBrush}}" TargetName="OuterBox"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="BorderThickness" Value="1,1,1,1"/>
  </Style>

  <Style BasedOn="{StaticResource OfficeAeroSharedFieldSplitterStyle}" TargetType="{x:Type igDP:FixedFieldSplitter}">
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="MinWidth" Value="9"/>
      </Trigger>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="MinHeight" Value="9"/>
      </Trigger>
    </Style.Triggers>
  </Style>

    <Style TargetType="{x:Type igDP:XamDataCarousel}">
        <Style.Resources>
            <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource Office2k7BlackScrollViewer}"/>
            <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource Office2k7BlackScrollbar}"/>
        </Style.Resources>
    </Style>
    <Style TargetType="{x:Type igDP:XamDataPresenter}">
        <Style.Resources>
            <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource Office2k7BlackScrollViewer}"/>
            <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource Office2k7BlackScrollbar}"/>
        </Style.Resources>
    </Style>
    <Style TargetType="{x:Type igDP:XamDataCards}">
        <Style.Resources>
            <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource Office2k7BlackScrollViewer}"/>
            <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource Office2k7BlackScrollbar}"/>
        </Style.Resources>
    </Style>
    <Style TargetType="{x:Type igDP:XamDataGrid}">
        <Style.Resources>
            <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource Office2k7BlackScrollViewer}"/>
            <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource Office2k7BlackScrollbar}"/>
        </Style.Resources>
    </Style>
    <Style TargetType="{x:Type igDP:XamTreeGrid}">
        <Style.Resources>
            <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource Office2k7BlackScrollViewer}"/>
            <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource Office2k7BlackScrollbar}"/>
        </Style.Resources>
    </Style>

            
	   <Style x:Key="EmbeddedMenuStyle" TargetType="{x:Type Menu}">
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="BorderThickness" Value="0"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Menu}">
							<Grid Grid.IsSharedSizeScope="True">
								<StackPanel IsItemsHost="True" ClipToBounds="True"/>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
        
			<Style x:Key="EmbeddedMenuItemStyle" TargetType="{x:Type MenuItem}">
				<Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightBackgroundBrushFillKey}}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightOuterBorderBrushFillKey}}"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="Padding" Value="3,2,3,2"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type MenuItem}">
							<ControlTemplate.Resources>
								<Storyboard x:Key="Hover">
									<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
										<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
									</DoubleAnimationUsingKeyFrames>
								</Storyboard>
								<Storyboard x:Key="HoverOff">
									<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
										<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
									</DoubleAnimationUsingKeyFrames>
								</Storyboard>
							</ControlTemplate.Resources>
							<Grid Background="Transparent">
								<Border x:Name="Hover" Opacity="0"  Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0"/>
								<Grid Margin="{TemplateBinding Padding}">
									<!-- JM 03-06-09 TFS15005 - Cannot use 3.5 SP1 feature ContentStringFormat!!  (plus, there is no need to use this here anyway since ContentSource is being set) -->
									<!--<ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Header}" ContentSource="Header" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" RecognizesAccessKey="True"/>-->
									<ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Header}" ContentSource="Header" RecognizesAccessKey="True"/>
									<Popup x:Name="PART_Popup" AllowsTransparency="True" HorizontalOffset="-2" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Focusable="False">
										<Border x:Name="SubMenuBorder" Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupBackground}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupBorder}}" BorderThickness="1" CornerRadius="0">
											<ScrollViewer Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}" CanContentScroll="True" Margin="1">
												<ItemsPresenter Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"/>
											</ScrollViewer>
										</Border>
									</Popup>
								</Grid>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsSuspendingPopupAnimation" Value="True">
									<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="Role" Value="SubmenuItem"/>
										<Condition Property="IsHighlighted" Value="True"/>
									</MultiTrigger.Conditions>
									<MultiTrigger.EnterActions>
										<BeginStoryboard x:Name="Hover_BeginStoryboard" Storyboard="{StaticResource Hover}"/>
									</MultiTrigger.EnterActions>
									<MultiTrigger.ExitActions>
										<BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
									</MultiTrigger.ExitActions>
									<Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightTextBrushFillKey}}"/>
								</MultiTrigger>
								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
    
    <!--JM 1/14/09 FixedFields Feature -->
    <!--HC 1/19/09 Theme-Specific Addition -->
    <!-- _________________________ FixedButton ______________________________________ -->
    <Style TargetType="{x:Type igDP:FixedFieldButton}">
        <Style.Resources>
            <Style TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <igWindows:CardPanel Background="{TemplateBinding Background}">
                                <ContentPresenter />
                            </igWindows:CardPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
              <!-- JJD 04/18/16 - Cross Field Record Filtering
                      Moved Menu and MenuItem style definitions outside of this element so they can be used by FixedFieldButton, FixedRecordButton and HeaderPrefixArea   -->
            <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource EmbeddedMenuStyle}"/>
            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource EmbeddedMenuItemStyle}"/>
        </Style.Resources>
        <Setter Property="FixToFarEdgePrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.FieldFixToFarEdgePrompt}}"/>
        <Setter Property="FixToNearEdgePrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.FieldFixToNearEdgePrompt}}"/>
        <Setter Property="UnfixPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.FieldUnfixPrompt}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"/>
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:FixedFieldButton}">
					<Border Background="Transparent">
						<igWindows:CardPanel>
							<!-- JM 01-29-09 TFS13209 - Set the background to transparent so it is Hit Testable.  This will ensure that the button receives mouse clicks and the associated command is executed even when the user does not click directly on the embedded Path elements. -->
              <!-- JJD 3/16/11 - TFS24163
                      instead of using routed commands set in triggers that incur quite a bit of overhead,
                      bind to the new CurrentCommand property that
                      returns a non-routed command that is much more efficient -->
              <ToggleButton x:Name="toggleButton"
                            Focusable="False"
                            Command="{TemplateBinding CurrentCommand}"
                            CommandParameter="{TemplateBinding Field}"
                            Background="Transparent">
								<Grid Width="12" Height="12">
									<Path
										x:Name="btnFixedGlyph"
										Visibility="Collapsed"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Height="10"
										Width="7"
										Stretch="Fill"
										Opacity="1"
										Data="M 6,4 C6,4 8,4 8,4 8,4 8,9 8,9 8,9 6,9 6,9 6,9 6,4 6,4 zM 5,3 C5,3 5,9 5,9 5,9 4,9 4,9 4,9 4,10 4,10 4,10 7,10 7,10 7,10 7,13 7,13 7,13 8,13 8,13 8,13 8,10 8,10 8,10 11,10 11,10 11,10 11,9 11,9 11,9 10,9 10,9 10,9 10,3 10,3 10,3 5,3 5,3 z"
										Fill="{TemplateBinding Foreground}" />
									<Path
										x:Name="btnUnfixedGlyph"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Height="7"
										Width="10"
										Stretch="Fill"
										Opacity="1"
										Data="M 12,7 C12,7 12,9 12,9 12,9 7,9 7,9 7,9 7,7 7,7 7,7 12,7 12,7 zM 13,6 C13,6 7,6 7,6 7,6 7,5 7,5 7,5 6,5 6,5 6,5 6,8 6,8 6,8 3,8 3,8 3,8 3,9 3,9 3,9 6,9 6,9 6,9 6,12 6,12 6,12 7,12 7,12 7,12 7,11 7,11 7,11 13,11 13,11 13,11 13,6 13,6 z"
										Fill="{TemplateBinding Foreground}" />
								</Grid>
							</ToggleButton>

							<Menu x:Name="menu" Visibility="Collapsed" IsMainMenu="False">
								<MenuItem Padding="0">
									<MenuItem.Header>
										<igWindows:CardPanel>
											<Grid Width="12" Height="12">
												<Path
													x:Name="menuFixedGlyph"
													Visibility="Collapsed"
													HorizontalAlignment="Center"
													VerticalAlignment="Center"
													Height="10"
													Width="7"
													Stretch="Fill"
													Opacity="1"
													Data="M 6,4 C6,4 8,4 8,4 8,4 8,9 8,9 8,9 6,9 6,9 6,9 6,4 6,4 zM 5,3 C5,3 5,9 5,9 5,9 4,9 4,9 4,9 4,10 4,10 4,10 7,10 7,10 7,10 7,13 7,13 7,13 8,13 8,13 8,13 8,10 8,10 8,10 11,10 11,10 11,10 11,9 11,9 11,9 10,9 10,9 10,9 10,3 10,3 10,3 5,3 5,3 z"
													Fill="{TemplateBinding Foreground}" />
												<Path
													x:Name="MenuUnfixedGlyph"
													HorizontalAlignment="Center"
													VerticalAlignment="Center"
													Height="7"
													Width="10"
													Stretch="Fill"
													Opacity="1"
													Data="M 12,7 C12,7 12,9 12,9 12,9 7,9 7,9 7,9 7,7 7,7 7,7 12,7 12,7 zM 13,6 C13,6 7,6 7,6 7,6 7,5 7,5 7,5 6,5 6,5 6,5 6,8 6,8 6,8 3,8 3,8 3,8 3,9 3,9 3,9 6,9 6,9 6,9 6,12 6,12 6,12 7,12 7,12 7,12 7,11 7,11 7,11 13,11 13,11 13,11 13,6 13,6 z"
													Fill="{TemplateBinding Foreground}" />
											</Grid>
										</igWindows:CardPanel>
									</MenuItem.Header>
                  <!-- JJD 3/16/11 - TFS24163
                      instead of using routed commands that incur quite a bit of overhead, bind to the new command properties that
                      return non-routed commands that are much more efficient
									<MenuItem x:Name="unfix"   Header="{TemplateBinding UnfixPrompt}"			Command="igDP:DataPresenterCommands.UnfixField" CommandParameter="{TemplateBinding Field}"/>
									<MenuItem x:Name="fixNear" Header="{TemplateBinding FixToNearEdgePrompt}"	Command="igDP:DataPresenterCommands.FixFieldNear" CommandParameter="{TemplateBinding Field}"/>
									<MenuItem x:Name="fixFar"  Header="{TemplateBinding FixToFarEdgePrompt}"	Command="igDP:DataPresenterCommands.FixFieldFar" CommandParameter="{TemplateBinding Field}"/> -->
                  <MenuItem x:Name="unfix"   Header="{TemplateBinding UnfixPrompt}"			Command="{TemplateBinding UnfixCommand}" CommandParameter="{TemplateBinding Field}"/>
                  <MenuItem x:Name="fixNear" Header="{TemplateBinding FixToNearEdgePrompt}"	Command="{TemplateBinding FixToNearEdgeCommand}" CommandParameter="{TemplateBinding Field}"/>
                  <MenuItem x:Name="fixFar"  Header="{TemplateBinding FixToFarEdgePrompt}"	Command="{TemplateBinding FixToFarEdgeCommand}" CommandParameter="{TemplateBinding Field}"/>
                </MenuItem>
							</Menu>
						</igWindows:CardPanel>
					</Border>
					<ControlTemplate.Triggers>
						<!-- Set the correct image depending on the FixedLocation-->
                        <DataTrigger Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToNearEdge">
							<Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>
                        <DataTrigger Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToFarEdge">
							<Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>

						<!-- Show/hide the menu and the toggleButton -->
                        <DataTrigger Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="NearOrFar">
							<Setter TargetName="menu" Property="Visibility" Value="Visible"/>
							<Setter TargetName="toggleButton" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>

            <!-- JJD 3/16/11 - TFS24163
                      instead of using routed commands set in triggers that incur quite a bit of overhead,
                      bind to the new command properties that
                      returns a non-routed command that is much more efficient -->
            <!-- If AllowFixingResolved is set to Near or set to Far, set the appropriate command on the toggleButton depending on the current FixedLocation -->
						<!--<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource TemplatedParent}}" Value="Near"/>
								<Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="Scrollable" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixFieldNear"/>
						</MultiDataTrigger>
						<DataTrigger Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="FixedToNearEdge">
							<Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixField"/>
						</DataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource TemplatedParent}}" Value="Far"/>
								<Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="Scrollable" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixFieldFar"/>
						</MultiDataTrigger>
						<DataTrigger Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="FixedToFarEdge">
							<Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixField"/>
						</DataTrigger>-->

						<!-- If AllowFixingResolved is set to NearOrFar, hide/show the appropriate menu items depending on the current FixedLocation -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="NearOrFar"/>
                                <Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="Scrollable" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="unfix" Property="Visibility" Value="Collapsed"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="NearOrFar"/>
                                <Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToNearEdge" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="fixNear" Property="Visibility" Value="Collapsed"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="NearOrFar"/>
                                <Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToFarEdge" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="fixFar" Property="Visibility" Value="Collapsed"/>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
    
     <!--JJD 6/10/09 - NA 2009 Vol 2 - Record fixing feature -->
	<!-- _________________________ FixedRecordButton ______________________________________ -->
	<Style TargetType="{x:Type igDP:FixedRecordButton}">
		<Style.Resources>
			<Style TargetType="{x:Type ToggleButton}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<igWindows:CardPanel Background="{TemplateBinding Background}">
								<ContentPresenter/>
							</igWindows:CardPanel>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
            <!-- JJD 04/18/16 - Cross Field Record Filtering
                      Moved Menu and MenuItem style definitions outside of this element so they can be used by FixedFieldButton, FixedRecordButton and HeaderPrefixArea   -->
            <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource EmbeddedMenuStyle}"/>
            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource EmbeddedMenuItemStyle}"/>
        </Style.Resources>
        <Setter Property="FixToBottomPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.RecordFixToBottomPrompt}}"/>
        <Setter Property="FixToTopPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.RecordFixToTopPrompt}}"/>
        <Setter Property="UnfixPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.RecordUnfixPrompt}}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedRecordGlyphBrush}}"/>
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:FixedRecordButton}">
					<Border Background="Transparent">
						<igWindows:CardPanel>
							
              <ToggleButton x:Name="toggleButton"
                            Focusable="False"
                            Command="{TemplateBinding CurrentCommand}"
                            CommandParameter="{Binding}"
                            Background="Transparent">
								<Grid Width="12" Height="12">
									<Path
										x:Name="btnFixedGlyph"
										Visibility="Collapsed"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Height="10"
										Width="7"
										Stretch="Fill"
										Opacity="1"
										Data="M 6,4 C6,4 8,4 8,4 8,4 8,9 8,9 8,9 6,9 6,9 6,9 6,4 6,4 zM 5,3 C5,3 5,9 5,9 5,9 4,9 4,9 4,9 4,10 4,10 4,10 7,10 7,10 7,10 7,13 7,13 7,13 8,13 8,13 8,13 8,10 8,10 8,10 11,10 11,10 11,10 11,9 11,9 11,9 10,9 10,9 10,9 10,3 10,3 10,3 5,3 5,3 z"
										Fill="{TemplateBinding Foreground}" />
									<Path
										x:Name="btnUnfixedGlyph"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Height="7"
										Width="10"
										Stretch="Fill"
										Opacity="1"
										Data="M 12,7 C12,7 12,9 12,9 12,9 7,9 7,9 7,9 7,7 7,7 7,7 12,7 12,7 zM 13,6 C13,6 7,6 7,6 7,6 7,5 7,5 7,5 6,5 6,5 6,5 6,8 6,8 6,8 3,8 3,8 3,8 3,9 3,9 3,9 6,9 6,9 6,9 6,12 6,12 6,12 7,12 7,12 7,12 7,11 7,11 7,11 13,11 13,11 13,11 13,6 13,6 z"
										Fill="{TemplateBinding Foreground}" />
								</Grid>
							</ToggleButton>

							<Menu x:Name="menu" Visibility="Collapsed" IsMainMenu="False">
								<MenuItem Padding="0">
									<MenuItem.Header>
										<igWindows:CardPanel>
											<Grid Width="12" Height="12">
												<Path
													x:Name="menuFixedGlyph"
													Visibility="Collapsed"
													HorizontalAlignment="Center"
													VerticalAlignment="Center"
													Height="10"
													Width="7"
													Stretch="Fill"
													Opacity="1"
													Data="M 6,4 C6,4 8,4 8,4 8,4 8,9 8,9 8,9 6,9 6,9 6,9 6,4 6,4 zM 5,3 C5,3 5,9 5,9 5,9 4,9 4,9 4,9 4,10 4,10 4,10 7,10 7,10 7,10 7,13 7,13 7,13 8,13 8,13 8,13 8,10 8,10 8,10 11,10 11,10 11,10 11,9 11,9 11,9 10,9 10,9 10,9 10,3 10,3 10,3 5,3 5,3 z"
													Fill="{TemplateBinding Foreground}" />
												<Path
													x:Name="MenuUnfixedGlyph"
													HorizontalAlignment="Center"
													VerticalAlignment="Center"
													Height="7"
													Width="10"
													Stretch="Fill"
													Opacity="1"
													Data="M 12,7 C12,7 12,9 12,9 12,9 7,9 7,9 7,9 7,7 7,7 7,7 12,7 12,7 zM 13,6 C13,6 7,6 7,6 7,6 7,5 7,5 7,5 6,5 6,5 6,5 6,8 6,8 6,8 3,8 3,8 3,8 3,9 3,9 3,9 6,9 6,9 6,9 6,12 6,12 6,12 7,12 7,12 7,12 7,11 7,11 7,11 13,11 13,11 13,11 13,6 13,6 z"
													Fill="{TemplateBinding Foreground}" />
											</Grid>
										</igWindows:CardPanel>
									</MenuItem.Header>
									<MenuItem x:Name="unfix"   Header="{TemplateBinding UnfixPrompt}"		Command="{TemplateBinding UnfixCommand}" CommandParameter="{Binding}"/>
									<MenuItem x:Name="fixTop" Header="{TemplateBinding FixToTopPrompt}"	Command="{TemplateBinding FixToTopCommand}" CommandParameter="{Binding}"/>
									<MenuItem x:Name="fixBottom"  Header="{TemplateBinding FixToBottomPrompt}"	Command="{TemplateBinding FixToBottomCommand}" CommandParameter="{Binding}"/>
								</MenuItem>
							</Menu>
						</igWindows:CardPanel>
					</Border>
					<ControlTemplate.Triggers>
						<!-- Set the correct image depending on the FixedLocation-->
						<DataTrigger Binding="{Binding Path=FixedLocation}" Value="FixedToTop">
							<Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>
						<DataTrigger Binding="{Binding Path=FixedLocation}" Value="FixedToBottom">
							<Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>

						<!-- Show/hide the menu and the toggleButton -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFixedOnTopAllowed" Value ="True"/>
                                <Condition Property="IsFixedOnBottomAllowed" Value ="True"/>
                            </MultiTrigger.Conditions>
							<Setter TargetName="menu" Property="Visibility" Value="Visible"/>
							<Setter TargetName="toggleButton" Property="Visibility" Value="Collapsed"/>
                        </MultiTrigger>

						<!-- If AllowRecordFixingResolved is set to TopOrBottom, hide/show the appropriate menu items depending on the current FixedLocation -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=FixedLocation}" Value="Scrollable" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="unfix" Property="Visibility" Value="Collapsed"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=FixedLocation}" Value="FixedToTop" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="fixTop" Property="Visibility" Value="Collapsed"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=FixedLocation}" Value="FixedToBottom" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="fixBottom" Property="Visibility" Value="Collapsed"/>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
    
    <!-- _________________________ HeaderPrefixArea__________________________________________ -->
    <Style TargetType="{x:Type igDP:HeaderPrefixArea}">
        <Style.Resources>
            <!-- JJD 04/18/16 - Cross Field Record Filtering
                      Moved Menu and MenuItem style definitions outside of this element so they can be used by FixedFieldButton, FixedRecordButton and HeaderPrefixArea   -->
            <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource EmbeddedMenuStyle}"/>
            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource EmbeddedMenuItemStyle}"/>
        </Style.Resources>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <!-- JM 10-17-08 [TFS7039] -->
        <!--<Setter Property="Visibility" Value="Hidden"/>-->
        <Setter Property="Visibility" Value="Visible"/>
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"/>
        <Setter Property="ShowFieldChooserPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.ShowFieldChooserPrompt}}"/>
        <Setter Property="ShowCrossFieldRecordFiltersPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.ShowCrossFieldRecordFiltersPrompt}}"/>
        <Setter Property="ClearCrossFieldRecordFiltersPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.ClearCrossFieldRecordFiltersPrompt}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:HeaderPrefixArea}">
                    <!--SSP 6/18/09 - NAS9.2 Field Chooser - Added field chooser button in the below grid.-->
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
                        <!--Button that displays field chooser-->
                        <!-- AS 2/25/11 TFS67071 -->
                        <Button
							x:Name="fieldChooserButton"
							Style="{DynamicResource {x:Static igDP:DataPresenterBase.FieldChooserButtonStyleKey}}"
							CommandParameter="{TemplateBinding FieldLayout}"
							Visibility="Collapsed"/>
                        <!-- JJD 04/15/16 - NA 2016 Vol 2 - Cross Field Filtering-->
                        <Menu
							x:Name="Menu"
                            IsMainMenu="False"
							Visibility="Collapsed">
                            <MenuItem Padding="0" ToolTip="{TemplateBinding ActiveFiltersDescription}">
                                <MenuItem.Header>
                                    <igWindows:CardPanel>
                                        <Grid Width="12" Height="12">
                                            <Path
													x:Name="menuActiveFilters"
													Visibility="Collapsed"
													HorizontalAlignment="Center"
													VerticalAlignment="Center"
													Height="12"
													Width="12"
													Stretch="Fill"
													Opacity="0.6"
                                                    Data="M 1 7 L 6 7 L 6 8 L 5 8 L 5 9 L 4 9 L 4 11 L 3 11 L 3 9 L 2 9 L 2 8 L 1 8 L 1 7 ZM 2 0 L 2 1 L 2 6 L 0 6 L 0 12 L 7 12 L 7 9 L 11 9 L 12 9 L 12 1 L 12 0 L 11 0 L 3 0 L 2 0 ZM 7 7 L 10 7 L 10 6 L 7 6 L 3 6 L 3 1 L 11 1 L 11 8 L 7 8 L 7 7 ZM 4 4 L 4 5 L 10 5 L 10 4 L 4 4 ZM 4 2 L 4 3 L 10 3 L 10 2 L 4 2 Z"
                                                    Fill="{TemplateBinding Foreground}" />
                                            <Path
													x:Name="menuNoActiveFilters"
													HorizontalAlignment="Right"
													VerticalAlignment="Top"
													Height="9"
													Width="10"
													Stretch="Fill"
													Opacity="0.6"
                                                    Data="M 1 8 L 1 1 L 9 1 L 9 8 L 1 8 ZM 0 0 L 0 1 L 0 8 L 0 9 L 1 9 L 9 9 L 10 9 L 10 1 L 10 0 L 9 0 L 1 0 L 0 0 ZM 2 6 L 2 7 L 8 7 L 8 6 L 2 6 ZM 2 4 L 2 5 L 8 5 L 8 4 L 2 4 ZM 2 2 L 2 3 L 8 3 L 8 2 L 2 2 Z"
                                                    Fill="{TemplateBinding Foreground}" />
                                        </Grid>
                                    </igWindows:CardPanel>
                                </MenuItem.Header>


                                <MenuItem x:Name="ShowFieldChooser" Header="{TemplateBinding ShowFieldChooserPrompt}" Command="igDP:DataPresenterCommands.ShowFieldChooser" Visibility="{TemplateBinding ShowFieldChooserVisibility}" CommandParameter="{TemplateBinding FieldLayout}"/>
                                <MenuItem x:Name="ShowCrossFieldRecordFilters" Header="{TemplateBinding ShowCrossFieldRecordFiltersPrompt}" Command="igDP:DataPresenterCommands.ShowCrossFieldRecordFilters" Visibility="{TemplateBinding ShowCrossFieldRecordFiltersVisibility}" CommandParameter="{Binding Path=DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igDP:HeaderPresenter}}}"/>
                                <MenuItem x:Name="ClearCrossFieldRecordFilters" Header="{TemplateBinding ClearCrossFieldRecordFiltersPrompt}" Command="igDP:DataPresenterCommands.ClearCrossFieldRecordFilters" Visibility="{TemplateBinding ClearCrossFieldRecordFiltersVisibility}" CommandParameter="{Binding Path=DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igDP:HeaderPresenter}}}"/>
                            </MenuItem>
                        </Menu>
                        
                        <ContentPresenter
							Content="{TemplateBinding Content}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <!--SSP 6/18/09 - NAS9.2 Field Chooser - Added field chooser button-->
                        <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=FieldLayout.HeaderPrefixAreaDisplayModeResolved}" Value="FieldChooserButton">
                            <Setter TargetName="fieldChooserButton" Property="Visibility" Value="Visible" />
                            <!-- AS 2/25/11 TFS67071 - Don't set the Command until we show the element so the
								button will not query the canexecute state which results in a routed event. -->
                            <Setter TargetName="fieldChooserButton" Property="Command" Value="{x:Static igDP:DataPresenterCommands.ShowFieldChooser}" />
                        </DataTrigger>
                        <!-- JJD 04/15/16 - NA 2016 Vol 2 - Cross Field Filtering-->
                        <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=FieldLayout.HeaderPrefixAreaDisplayModeResolved}" Value="Menu">
                            <Setter TargetName="Menu" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <Trigger Property="HasActiveFilters" Value="True">
                            <Setter TargetName="menuActiveFilters" Property="Visibility" Value="Visible" />
                            <Setter TargetName="menuNoActiveFilters" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                         <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="menuActiveFilters" Property="Opacity" Value="1" />
                            <Setter TargetName="menuNoActiveFilters" Property="Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

	<!-- _____________ CardHeaderPresenter [JM NA 10.1 CardView] _____________ -->
	<Style TargetType="{x:Type igDP:CardHeaderPresenter}">
		<Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.SmallCaptionHeightKey}}"/>
		<Setter Property="TextBlock.TextTrimming" Value="CharacterEllipsis"/>
		<Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundNormalBrushKey}}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardBorderBrushKey}}"/>
		<Setter Property="BorderThickness" Value="0,1"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextNormalBrushKey}}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:CardHeaderPresenter}">
					<Grid>
						<Border x:Name="Bd" Background="{TemplateBinding Background}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="Auto"/>
									<ColumnDefinition Width="Auto"/>
								</Grid.ColumnDefinitions>
								<ContentPresenter
									x:Name="CardHeader"
									HorizontalAlignment="Stretch"
									Margin="2,0"
									VerticalAlignment="Center"/>
								<Border Grid.ColumnSpan="3" BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBorderNormalBrushKey}}" BorderThickness="{TemplateBinding BorderThickness}"/>
								<!-- Button to Collapse/Uncollapse Empty Cells -->
								<Button
									x:Name="ToggleEmptyCellsCollapsedStateButton"
									Grid.Column="1"
									Margin="2,0"
									Command="{x:Static igDP:DataPresenterCommands.ToggleEmptyCardCellsCollapsedState}"
									CommandParameter="{Binding}"
									Style="{DynamicResource {x:Static igDP:CardHeaderPresenter.CollapseEmptyCellsButtonStyleKey}}"
									Visibility="{Binding Path=Card.CollapseEmptyCellsButtonVisibility, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=OneWay}"/>
								<!-- Button to Collapse/Uncollapse the Card -->
								<Button
									x:Name="ToggleCollapsedStateButton"
									Grid.Column="2"
									Margin="2,0"
									Command="{x:Static igDP:DataPresenterCommands.ToggleCardCollapsedState}"
									CommandParameter="{Binding}"
									Style="{DynamicResource {x:Static igDP:CardHeaderPresenter.CollapseCardButtonStyleKey}}"
									Visibility="{Binding Path=Card.CollapseCardButtonVisibility, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=OneWay}"/>
							</Grid>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<DataTrigger Binding="{Binding Path=IsActive, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
				<Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundActiveBrushKey}}"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextActiveBrushKey}}"/>
				<Setter Property="BorderThickness" Value="0"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
				<Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundActiveBrushKey}}"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextActiveBrushKey}}"/>
				<Setter Property="BorderThickness" Value="0"/>
			</DataTrigger>
		</Style.Triggers>
	</Style>

	<!-- _________________________ CardViewCard [JM NA 10.1 CardView] __________________________________________ -->
	<Style TargetType="{x:Type igDP:CardViewCard}">
		<Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardBackgroundBrushKey}}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardBorderBrushKey}}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Visibility" Value="{Binding Path=Visibility}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:CardViewCard}">
					<Border
						x:Name="border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>
							<!-- Element to simulate CardHeaderPresenter when HeaderVisibilty=Hidden -->
							<Border x:Name="HeaderBgWhenVisHidden" Background="{Binding ElementName=CardHeaderPresenter,Path=Background}" Visibility="Collapsed"/>
							<!-- Card Header -->
							<igDP:CardHeaderPresenter
								x:Name="CardHeaderPresenter"
								Card="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}}"
								Content="{TemplateBinding Header}"
								ContentTemplate="{TemplateBinding HeaderTemplate}"
								ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
								Visibility="{Binding Path=HeaderVisibility, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
							<Border
								x:Name="innerBd"
								Height="1"
								Grid.Row="1"
								Background="{TemplateBinding BorderBrush}"/>
							<!-- Card Content -->
							<ScrollViewer
								x:Name="CardContentScrollViewer"
								Grid.Row="2"
								Margin="8"
								CanContentScroll="False"
								Focusable="False"
								HorizontalScrollBarVisibility="Auto"
								VerticalScrollBarVisibility="Auto">
								<ContentControl x:Name="CardContent" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
							</ScrollViewer>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsCollapsed" Value="True">
							<Setter TargetName="CardContentScrollViewer" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="innerBd" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="border" Property="VerticalAlignment" Value="Top"/>
						</Trigger>
						<Trigger Property="HeaderVisibility" Value="Collapsed">
							<Setter TargetName="innerBd" Property="Visibility" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="HeaderVisibility" Value="Hidden">
							<Setter TargetName="HeaderBgWhenVisHidden" Property="Visibility" Value="Visible"/>
						</Trigger>
						<Trigger Property="IsSelected" Value="True"/>
						<Trigger Property="IsActive" Value="True"/>
						<Trigger Property="IsAddRecord" Value="True">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowCardChromeBrushKey}}"/>
							<Setter TargetName="innerBd" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowCardChromeBrushKey}}"/>
							<Setter TargetName="CardHeaderPresenter" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowHeaderBrushKey}}"/>
						</Trigger>
						<Trigger Property="IsFilterRecord" Value="True">
							<Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderFilterRecordCardChromeBrushKey}}"/>
							<Setter TargetName="innerBd" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderFilterRecordCardChromeBrushKey}}"/>
							<Setter TargetName="CardHeaderPresenter" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderFilterRecordHeaderBrushKey}}"/>
						</Trigger>

                        <!-- JM 03-26-13 TFS134433 -->
                        <Trigger Property="IsOpacityReduced" Value="True">
                            <Setter TargetName="border" Property="Opacity" Value="0.35"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>