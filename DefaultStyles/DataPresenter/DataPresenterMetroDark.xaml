<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:igWindows="http://infragistics.com/Windows" xmlns:editors="http://infragistics.com/Editors" xmlns:igDP="http://infragistics.com/DataPresenter" xmlns:themes="http://infragistics.com/Themes" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" mc:Ignorable="d" xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="DataPresenterGeneric.xaml" />
        <ResourceDictionary Source="DataPresenterMetroDark_Express.xaml" />
        <ResourceDictionary Source="DataPresenterMetroDark_Brushes.xaml" />
    </ResourceDictionary.MergedDictionaries>
    
    <!-- ********************************* XamDataCarousel ********************************* -->
    <Style TargetType="{x:Type igDP:XamDataCarousel}">
        <Setter Property="FontSize" Value="14.667" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid},ListboxBackgroundBrush}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:XamDataCarousel}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="PART_ContentSiteGrid" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}" />
            <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarStyle}" />
        </Style.Resources>
    </Style>
    <!--********************************* XamDataPresenter *********************************-->
    <Style TargetType="{x:Type igDP:XamDataPresenter}">
        <Setter Property="RecordSelectorErrorIconExtent" Value="30" />
        <Setter Property="RecordSelectorExtent" Value="30" />
        <Setter Property="RecordSelectorFixButtonExtent" Value="30" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="FontSize" Value="14.667" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Style.Resources>
            <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}" />
            <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarStyle}" />
        </Style.Resources>
    </Style>
    <!-- ********************************* XamDataGrid ********************************* -->
    <Style TargetType="{x:Type igDP:XamDataGrid}">
        <Setter Property="RecordSelectorExtent" Value="30" />
        <Setter Property="RecordSelectorFixButtonExtent" Value="20" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="FontSize" Value="14.667" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Style.Resources>
            <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}" />
            <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarStyle}" />
        </Style.Resources>
    </Style>
    <Style x:Key="IconButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="TextElement.Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="FontSize" Value="14.667" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalCenterBrush}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalOuterBorderBrush}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <ContentPresenter x:Name="Image" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="5,0,5,0" Content="{TemplateBinding Content}" MinWidth="16" MinHeight="16" />
                                <TextBlock x:Name="text" Text="{TemplateBinding Tag}" Grid.Column="1" HorizontalAlignment="Stretch" Margin="8,5,8,5" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" />
                            </Grid>
                        </Border>
                        <Border x:Name="innerStroke" SnapsToDevicePixels="True" Margin="1" BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalInnerBorderBrush}}" BorderThickness="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverCenterBrush}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverOuterBorderBrush}}" />
                            <Setter Property="BorderBrush" TargetName="innerStroke" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverInnerBorderBrush}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedCenterBrush}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedOuterBorderBrush}}" />
                            <Setter Property="BorderBrush" TargetName="innerStroke" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedInnerBorderBrush}}" />
                            <Setter Property="Foreground" TargetName="text" Value="{StaticResource LightForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="text" Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                            <Setter TargetName="Image" Property="Opacity" Value="0.3" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonDisabledCenterBrush}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonDisabledOuterBorderBrush}}" />
                            <Setter Property="BorderBrush" TargetName="innerStroke" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonDisabledInnerBorderBrush}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
    </Style>
    <!-- ********************************** ButtonStyle **********************************-->
    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="TextElement.Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="FontSize" Value="14.667" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Padding" Value="10,0,10,2" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalCenterBrush}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalOuterBorderBrush}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="Grid">
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
                            <ContentControl x:Name="Content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center" />
                        </Border>
                        <Border x:Name="innerStroke" SnapsToDevicePixels="True" Margin="1,1,1,1" BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalInnerBorderBrush}}" BorderThickness="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverCenterBrush}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverOuterBorderBrush}}" />
                            <Setter Property="BorderBrush" TargetName="innerStroke" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverInnerBorderBrush}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedCenterBrush}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedOuterBorderBrush}}" />
                            <Setter Property="BorderBrush" TargetName="innerStroke" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedInnerBorderBrush}}" />
                            <Setter Property="Foreground" TargetName="Content" Value="{StaticResource LightForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonDisabledCenterBrush}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonDisabledOuterBorderBrush}}" />
                            <Setter Property="BorderBrush" TargetName="innerStroke" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonDisabledInnerBorderBrush}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource ButtonStyle}" x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, ButtonStyle}" TargetType="{x:Type Button}" />

    <Style x:Key="EmbeddedMenuStyle" TargetType="{x:Type Menu}">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Menu}">
                        <Grid x:Name="Bd" Grid.IsSharedSizeScope="True">
                            <StackPanel IsItemsHost="True" ClipToBounds="True" VerticalAlignment="Center" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    <Style x:Key="EmbeddedMenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="14.667" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackFillBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackOuterBorderBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="3,2,3,2" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid Background="Transparent">
                        <Border x:Name="Hover" Visibility="Collapsed" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
                        <Grid Margin="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Header}" ContentSource="Header" RecognizesAccessKey="True" />
                            <Popup x:Name="PART_Popup" AllowsTransparency="True" HorizontalOffset="-2" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Focusable="False">
                                <Border x:Name="SubMenuBorder" Background="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonPopupBackground}}" BorderBrush="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonPopupBorder}}" BorderThickness="1">
                                    <Border>
                                        <ScrollViewer CanContentScroll="True" Margin="1" Style="{StaticResource ScrollViewerStyle}">
                                            <ItemsPresenter Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle" />
                                        </ScrollViewer>
                                    </Border>
                                </Border>
                            </Popup>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role" Value="SubmenuItem" />
                                <Condition Property="IsHighlighted" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hover" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackForegroundBrushKey}}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- ********************************** FixedButton **********************************-->
    <Style TargetType="{x:Type igDP:FixedFieldButton}">
        <Style.Resources>
            <Style TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <igWindows:CardPanel Background="{TemplateBinding Background}">
                                <ContentPresenter />
                            </igWindows:CardPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!-- JJD 04/18/16 - Cross Field Record Filtering
                      Moved Menu and MenuItem style definitions outside of this element so they can be used by FixedFieldButton, FixedRecordButton and HeaderPrefixArea   -->
            <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource EmbeddedMenuStyle}"/>
            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource EmbeddedMenuItemStyle}"/>
        </Style.Resources>
        <Setter Property="FixToFarEdgePrompt" Value="{Binding Value, Source={x:Static igDP:ResourcesDataPresenter.FieldFixToFarEdgePrompt}}" />
        <Setter Property="FixToNearEdgePrompt" Value="{Binding Value, Source={x:Static igDP:ResourcesDataPresenter.FieldFixToNearEdgePrompt}}" />
        <Setter Property="UnfixPrompt" Value="{Binding Value, Source={x:Static igDP:ResourcesDataPresenter.FieldUnfixPrompt}}" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackground}}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:FixedFieldButton}">
                    <Border x:Name="bd" Background="Transparent">
                        <igWindows:CardPanel>
                            <ToggleButton x:Name="toggleButton" Focusable="False" CommandParameter="{TemplateBinding Field}" Background="Transparent" d:IsHidden="True">
                                <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <Path x:Name="btnFixedGlyph" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center" Height="14" Width="10" Stretch="Fill" Opacity="1" Data="M1.9999808,0 L7.9999809,0 L7.9999809,8.0000019 L10,8.0000019 L10,10.000002 L6.0000005,10.000002 L6.0000005,14.000002 L4.0000005,14.000002 L4.0000005,10.000002 L0,10.000002 L0,8.0000019 L1.9999808,8.0000019 z" Fill="{TemplateBinding Foreground}" />
                                    <Path x:Name="btnUnfixedGlyph" HorizontalAlignment="Center" VerticalAlignment="Center" Height="10" Width="14" Stretch="Fill" Opacity="1" Data="M4,0 L6,0 L6,1.9999999 L14,1.9999999 L14,8 L6,8 L6,10 L4,10 L4,8 L4,6 L0,6 L0,4 L4,4 L4,1.9999999 z" Fill="{TemplateBinding Foreground}" />
                                </Grid>
                            </ToggleButton>
                            <Menu x:Name="menu" Visibility="Collapsed" IsMainMenu="False">
                                <MenuItem Padding="0" VerticalAlignment="Center">
                                    <MenuItem.Header>
                                        <igWindows:CardPanel>
                                            <Grid Margin="3,0" VerticalAlignment="Center">
                                                <Path x:Name="menuFixedGlyph" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center" Height="14" Width="10" Stretch="Fill" Opacity="1" Data="M1.9999808,0 L7.9999809,0 L7.9999809,8.0000019 L10,8.0000019 L10,10.000002 L6.0000005,10.000002 L6.0000005,14.000002 L4.0000005,14.000002 L4.0000005,10.000002 L0,10.000002 L0,8.0000019 L1.9999808,8.0000019 z" Fill="{TemplateBinding Foreground}" />
                                                <Path x:Name="MenuUnfixedGlyph" HorizontalAlignment="Center" VerticalAlignment="Center" Height="10" Width="14" Stretch="Fill" Opacity="1" Data="M4,0 L6,0 L6,1.9999999 L14,1.9999999 L14,8 L6,8 L6,10 L4,10 L4,8 L4,6 L0,6 L0,4 L4,4 L4,1.9999999 z" Fill="{TemplateBinding Foreground}" />
                                            </Grid>
                                        </igWindows:CardPanel>
                                    </MenuItem.Header>
                                    <MenuItem x:Name="unfix" Header="{TemplateBinding UnfixPrompt}" Command="igDP:DataPresenterCommands.UnfixField" CommandParameter="{TemplateBinding Field}" />
                                    <MenuItem x:Name="fixNear" Header="{TemplateBinding FixToNearEdgePrompt}" Command="igDP:DataPresenterCommands.FixFieldNear" CommandParameter="{TemplateBinding Field}" />
                                    <MenuItem x:Name="fixFar" Header="{TemplateBinding FixToFarEdgePrompt}" Command="igDP:DataPresenterCommands.FixFieldFar" CommandParameter="{TemplateBinding Field}" />
                                </MenuItem>
                            </Menu>
                        </igWindows:CardPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonBackgroundHover}}" />
                        </Trigger>
                        <!-- Set the correct image depending on the FixedLocation-->
                        <DataTrigger Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToNearEdge">
                            <Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible" />
                            <Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible" />
                            <Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToFarEdge">
                            <Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible" />
                            <Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible" />
                            <Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <!-- Show/hide the menu and the toggleButton -->
                        <DataTrigger Binding="{Binding Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="NearOrFar">
                            <Setter TargetName="menu" Property="Visibility" Value="Visible" />
                            <Setter TargetName="toggleButton" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <!-- If AllowFixingResolved is set to Near or set to Far, set the appropriate command on the toggleButton depending on the current FixedLocation -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="Near" />
                                <Condition Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="Scrollable" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixFieldNear" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToNearEdge">
                            <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixField" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="Far" />
                                <Condition Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="Scrollable" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixFieldFar" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToFarEdge">
                            <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixField" />
                        </DataTrigger>
                        <!-- If AllowFixingResolved is set to NearOrFar, hide/show the appropriate menu items depending on the current FixedLocation -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="NearOrFar" />
                                <Condition Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="Scrollable" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="unfix" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="NearOrFar" />
                                <Condition Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToNearEdge" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="fixNear" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="NearOrFar" />
                                <Condition Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToFarEdge" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="fixFar" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ********************************** FixedRecordButton **********************************-->
    <Style TargetType="{x:Type igDP:FixedRecordButton}">
        <Style.Resources>
            <Style TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <igWindows:CardPanel Background="{TemplateBinding Background}">
                                <ContentPresenter />
                            </igWindows:CardPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!-- JJD 04/18/16 - Cross Field Record Filtering
                      Moved Menu and MenuItem style definitions outside of this element so they can be used by FixedFieldButton, FixedRecordButton and HeaderPrefixArea   -->
            <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource EmbeddedMenuStyle}"/>
            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource EmbeddedMenuItemStyle}"/>
        </Style.Resources>
        <Setter Property="FixToBottomPrompt" Value="{Binding Value, Source={x:Static igDP:ResourcesDataPresenter.RecordFixToBottomPrompt}}" />
        <Setter Property="FixToTopPrompt" Value="{Binding Value, Source={x:Static igDP:ResourcesDataPresenter.RecordFixToTopPrompt}}" />
        <Setter Property="UnfixPrompt" Value="{Binding Value, Source={x:Static igDP:ResourcesDataPresenter.RecordUnfixPrompt}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedRecordGlyphBrush}}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:FixedRecordButton}">
                    <Border Background="Transparent">
                        <igWindows:CardPanel>
                            <!-- Set the background to transparent so it is Hit Testable.  This will ensure that the button receives mouse clicks and the associated command is executed even when the user does not click directly on the embedded Path elements. -->
                            <Rectangle x:Name="rectangle" Fill="{StaticResource TransparentBrush}" />
                            <ToggleButton x:Name="toggleButton" Focusable="False" CommandParameter="{Binding}" Background="Transparent">
                                <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
                                    <Path x:Name="btnFixedGlyph" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center" Height="14" Width="10" Stretch="Fill" Opacity="1" Data="M1.9999808,0 L7.9999809,0 L7.9999809,8.0000019 L10,8.0000019 L10,10.000002 L6.0000005,10.000002 L6.0000005,14.000002 L4.0000005,14.000002 L4.0000005,10.000002 L0,10.000002 L0,8.0000019 L1.9999808,8.0000019 z" Fill="{TemplateBinding Foreground}" />
                                    <Path x:Name="btnUnfixedGlyph" HorizontalAlignment="Center" VerticalAlignment="Center" Height="10" Width="14" Stretch="Fill" Opacity="1" Data="M4,0 L6,0 L6,1.9999999 L14,1.9999999 L14,8 L6,8 L6,10 L4,10 L4,8 L4,6 L0,6 L0,4 L4,4 L4,1.9999999 z" Fill="{TemplateBinding Foreground}" />
                                </Grid>
                            </ToggleButton>
                            <Menu x:Name="menu" Visibility="Collapsed" IsMainMenu="False">
                                <MenuItem Padding="0">
                                    <MenuItem.Header>
                                        <igWindows:CardPanel>
                                            <Grid Width="12" Height="12">
                                                <Path x:Name="menuFixedGlyph" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center" Height="14" Width="10" Stretch="Fill" Opacity="1" Data="M1.9999808,0 L7.9999809,0 L7.9999809,8.0000019 L10,8.0000019 L10,10.000002 L6.0000005,10.000002 L6.0000005,14.000002 L4.0000005,14.000002 L4.0000005,10.000002 L0,10.000002 L0,8.0000019 L1.9999808,8.0000019 z" Fill="{TemplateBinding Foreground}" />
                                                <Path x:Name="MenuUnfixedGlyph" HorizontalAlignment="Center" VerticalAlignment="Center" Height="10" Width="14" Stretch="Fill" Opacity="1" Data="M4,0 L6,0 L6,1.9999999 L14,1.9999999 L14,8 L6,8 L6,10 L4,10 L4,8 L4,6 L0,6 L0,4 L4,4 L4,1.9999999 z" Fill="{TemplateBinding Foreground}" />
                                            </Grid>
                                        </igWindows:CardPanel>
                                    </MenuItem.Header>
                                    <MenuItem x:Name="unfix" Header="{TemplateBinding UnfixPrompt}" Command="igDP:DataPresenterCommands.UnfixRecord" CommandParameter="{Binding}" />
                                    <MenuItem x:Name="fixTop" Header="{TemplateBinding FixToTopPrompt}" Command="igDP:DataPresenterCommands.FixRecordTop" CommandParameter="{Binding}" />
                                    <MenuItem x:Name="fixBottom" Header="{TemplateBinding FixToBottomPrompt}" Command="igDP:DataPresenterCommands.FixRecordBottom" CommandParameter="{Binding}" />
                                </MenuItem>
                            </Menu>
                        </igWindows:CardPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Set the correct image depending on the FixedLocation-->
                        <DataTrigger Binding="{Binding FixedLocation}" Value="FixedToTop">
                            <Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible" />
                            <Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible" />
                            <Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding FixedLocation}" Value="FixedToBottom">
                            <Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible" />
                            <Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible" />
                            <Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <!-- Show/hide the menu and the toggleButton -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFixedOnTopAllowed" Value="True" />
                                <Condition Property="IsFixedOnBottomAllowed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="menu" Property="Visibility" Value="Visible" />
                            <Setter TargetName="toggleButton" Property="Visibility" Value="Collapsed" />
                        </MultiTrigger>
                        <!-- If AllowRecordFixingResolved is set to Top or set to Bottom, set the appropriate command on the toggleButton depending on the current FixedLocation -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                <Condition Binding="{Binding IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                                <Condition Binding="{Binding FixedLocation}" Value="Scrollable" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixRecordTop" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding FixedLocation}" Value="FixedToTop">
                            <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixRecord" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding FixedLocation}" Value="FixedToBottom">
                            <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixRecord" />
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                                <Condition Binding="{Binding IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                <Condition Binding="{Binding FixedLocation}" Value="Scrollable" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixRecordBottom" />
                        </MultiDataTrigger>
                        <!-- If AllowRecordFixingResolved is set to TopOrBottom, hide/show the appropriate menu items depending on the current FixedLocation -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                <Condition Binding="{Binding IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                <Condition Binding="{Binding FixedLocation}" Value="Scrollable" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="unfix" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                <Condition Binding="{Binding IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                <Condition Binding="{Binding FixedLocation}" Value="FixedToTop" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="fixTop" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                <Condition Binding="{Binding IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                                <Condition Binding="{Binding FixedLocation}" Value="FixedToBottom" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="fixBottom" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************* HeaderPrefixArea ********************************* -->
    <Style TargetType="{x:Type igDP:HeaderPrefixArea}">
        <Style.Resources>
            <!-- JJD 04/18/16 - Cross Field Record Filtering
                      Moved Menu and MenuItem style definitions outside of this element so they can be used by FixedFieldButton, FixedRecordButton and HeaderPrefixArea   -->
            <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource EmbeddedMenuStyle}"/>
            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource EmbeddedMenuItemStyle}"/>
        </Style.Resources>
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Visibility" Value="Visible" />
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"/>
        <Setter Property="ShowFieldChooserPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.ShowFieldChooserPrompt}}"/>
        <Setter Property="ShowCrossFieldRecordFiltersPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.ShowCrossFieldRecordFiltersPrompt}}"/>
        <Setter Property="ClearCrossFieldRecordFiltersPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.ClearCrossFieldRecordFiltersPrompt}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:HeaderPrefixArea}">
                    <Border BorderThickness="0 0 0 0" BorderBrush="{StaticResource CellVPBorderBrush}" VerticalAlignment="Stretch" MinHeight="30" >
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
                            <Button MinWidth="30" x:Name="fieldChooserButton" Style="{DynamicResource {x:Static igDP:DataPresenterBase.FieldChooserButtonStyleKey}}" CommandParameter="{TemplateBinding FieldLayout}" Visibility="Collapsed" />

                            <!-- JJD 04/15/16 - NA 2016 Vol 2 - Cross Field Filtering-->
                            <Menu
							x:Name="Menu"
                            IsMainMenu="False"
							Visibility="Collapsed">
                                <MenuItem Padding="0" ToolTip="{TemplateBinding ActiveFiltersDescription}">
                                    <MenuItem.Header>
                                        <igWindows:CardPanel>
                                            <Grid Width="14" Height="14" SnapsToDevicePixels="True">

                                                <Path
													x:Name="menuActiveFilters"
													Visibility="Collapsed"
													HorizontalAlignment="Center"
													VerticalAlignment="Center"
													Height="14"
													Width="14"
													Stretch="Fill"
													Opacity="0.6"
                                                    Data="M 8 7 L 8 7.8571 L 5.375 10.4286 L 5.375 13 L 3.625 13 L 3.625 10.4286 L 1 7.8571 L 1 7 L 8 7 ZM 14 0 L 2 0 L 2 6 L 0 6 L 0 14 L 9 14 L 9 11 L 14 11 L 14 0 ZM 12 2 L 12 9 L 9 9 L 9 8 L 11 8 L 11 7 L 9 7 L 9 6 L 11 6 L 11 5 L 5 5 L 5 6 L 4 6 L 4 2 L 12 2 ZM 5 3 L 5 4 L 11 4 L 11 3 L 5 3 Z"
                                                    Fill="{TemplateBinding Foreground}" />
                                                <Path
													x:Name="menuNoActiveFilters"
													HorizontalAlignment="Right"
													VerticalAlignment="Top"
													Height="11"
													Width="12"
													Stretch="Fill"
													Opacity="0.6"
                                                    Data="M 12 0 L 0 0 L 0 11 L 12 11 L 12 0 ZM 10 2 L 10 9 L 2 9 L 2 2 L 10 2 ZM 3 8 L 9 8 L 9 7 L 3 7 L 3 8 ZM 3 6 L 9 6 L 9 5 L 3 5 L 3 6 ZM 3 3 L 3 4 L 9 4 L 9 3 L 3 3 Z"
                                                    Fill="{TemplateBinding Foreground}" />
                                            </Grid>
                                        </igWindows:CardPanel>
                                    </MenuItem.Header>


                                    <MenuItem x:Name="ShowFieldChooser" Header="{TemplateBinding ShowFieldChooserPrompt}" Command="igDP:DataPresenterCommands.ShowFieldChooser" Visibility="{TemplateBinding ShowFieldChooserVisibility}" CommandParameter="{TemplateBinding FieldLayout}"/>
                                    <MenuItem x:Name="ShowCrossFieldRecordFilters" Header="{TemplateBinding ShowCrossFieldRecordFiltersPrompt}" Command="igDP:DataPresenterCommands.ShowCrossFieldRecordFilters" Visibility="{TemplateBinding ShowCrossFieldRecordFiltersVisibility}" CommandParameter="{Binding Path=DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igDP:HeaderPresenter}}}"/>
                                    <MenuItem x:Name="ClearCrossFieldRecordFilters" Header="{TemplateBinding ClearCrossFieldRecordFiltersPrompt}" Command="igDP:DataPresenterCommands.ClearCrossFieldRecordFilters" Visibility="{TemplateBinding ClearCrossFieldRecordFiltersVisibility}" CommandParameter="{Binding Path=DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igDP:HeaderPresenter}}}"/>
                                </MenuItem>
                            </Menu>

                            <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=FieldLayout.HeaderPrefixAreaDisplayModeResolved}" Value="FieldChooserButton">
                            <Setter TargetName="fieldChooserButton" Property="Visibility" Value="Visible" />
                            <Setter TargetName="fieldChooserButton" Property="Command" Value="{x:Static igDP:DataPresenterCommands.ShowFieldChooser}" />
                        </DataTrigger>
                        <!-- JJD 04/15/16 - NA 2016 Vol 2 - Cross Field Filtering-->
                        <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=FieldLayout.HeaderPrefixAreaDisplayModeResolved}" Value="Menu">
                            <Setter TargetName="Menu" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <Trigger Property="HasActiveFilters" Value="True">
                            <Setter TargetName="menuActiveFilters" Property="Visibility" Value="Visible" />
                            <Setter TargetName="menuNoActiveFilters" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="menuActiveFilters" Property="Opacity" Value="1" />
                            <Setter TargetName="menuNoActiveFilters" Property="Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type igDP:CustomFilterSelectionControl}">
        <Style.Resources>
            <Style TargetType="{x:Type igWindows:ComparisonOperatorSelector}">
                <Setter Property="DropDownButtonStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="OverridesDefaultStyle" Value="True" />
                            <Setter Property="MinWidth" Value="0" />
                            <Setter Property="MinHeight" Value="0" />
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="Focusable" Value="False" />
                            <Setter Property="Padding" Value="2" />
                            <Setter Property="ClickMode" Value="Press" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" igWindows:Utilities.SnapElementToDevicePixels="True">
                                            <StackPanel Orientation="Horizontal">
                                              <!-- JJD 10/07/14 TFS182586 
                                                Replaced FindAncestor binding with new attached (inherits) property ComparisonOperatorSelector.Selector -->
                                              <!--<igWindows:AutoDisabledImage Margin="{TemplateBinding Padding}" MinHeight="14" MinWidth="14" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center" Source="{Binding SelectedOperatorInfo.Image, RelativeSource={RelativeSource FindAncestor, {x:Type igWindows:ComparisonOperatorSelector}, 1}}" />
                                                <TextBlock VerticalAlignment="Center" Margin="6,0,0,0" Text="{Binding SelectedOperatorInfo.Description, RelativeSource={RelativeSource FindAncestor, {x:Type igWindows:ComparisonOperatorSelector}, 1}}" />-->
                                              <igWindows:AutoDisabledImage Margin="{TemplateBinding Padding}" 
                                                                           MinHeight="14" MinWidth="14" 
                                                                           Stretch="None" 
                                                                           HorizontalAlignment="Center" 
                                                                           VerticalAlignment="Center" 
                                                                           Source="{Binding Path=(igWindows:ComparisonOperatorSelector.Selector).SelectedOperatorInfo.Image, RelativeSource={RelativeSource Self}}" />
                                                <TextBlock VerticalAlignment="Center" Margin="6,0,0,0" 
                                                           Text="{Binding Path=(igWindows:ComparisonOperatorSelector.Selector).SelectedOperatorInfo.Description, RelativeSource={RelativeSource Self}}" />
                                            </StackPanel>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="MinHeight" Value="240" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CustomFilterControlToolbarBrush}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CustomFilterControlHeaderBrush}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CustomFilterControlTextblockBrush}}" />
        <Setter Property="AndLogicalOperatorBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.AndLogicalOperatorBrush}}" />
        <Setter Property="OrLogicalOperatorBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.OrLogicalOperatorBrush}}" />
        <Setter Property="LogicalOperatorColumnWidth" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:CustomFilterSelectionControl}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Border Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CustomFilterControlHeaderBrush}}">
                                <TextBlock FontSize="20" Text="{TemplateBinding FieldDescription}" Margin="6,4" Foreground="{StaticResource LightForegroundBrush}" />
                            </Border>
                            <Border Grid.Row="1" SnapsToDevicePixels="True" BorderBrush="{StaticResource FilterDescriptionStroke}" BorderThickness="0,1" Background="{TemplateBinding Background}">
                                <Grid x:Name="toolbar">
                                    <StackPanel Orientation="Horizontal" Margin="12" VerticalAlignment="Top">
                                        <Button Command="{x:Static igDP:CustomFilterSelectionControl.AddConditionCommand}" Tag="{TemplateBinding AddConditionLabel}" Style="{StaticResource IconButtonStyle}" Margin="0,0,8,0">
                                            <Path Width="11" Height="11" Data="M4,0 L7,0 7,4 11,4 11,7 7,7 7,11 4,11 4,7 0,7 0,4 4,4 z" Fill="{StaticResource CustomFilterButtonGlyph}" Stretch="Fill" />
                                        </Button>
                                        <Button Command="{x:Static igDP:CustomFilterSelectionControl.RemoveSelectedConditionsCommand}" Margin="0,0,12,0" Tag="{TemplateBinding RemoveSelectedConditionsLabel}" Style="{StaticResource IconButtonStyle}">
                                            <Rectangle Width="11" Height="3" HorizontalAlignment="Left" Margin="2,0,0,0" Fill="{StaticResource CustomFilterButtonGlyph}" />
                                        </Button>
                                        <TextBlock x:Name="GroupSelected" Text="{TemplateBinding GroupSelectedLabel}" TextWrapping="Wrap" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" Margin="8,0" />
                                        <Button Command="{x:Static igDP:CustomFilterSelectionControl.GroupSelectedConditionsAsAndGroupCommand}" Margin="0,0,8,0" Tag="{TemplateBinding GroupSelectedConditionsAsAndGroupLabel}" Style="{StaticResource IconButtonStyle}">
                                            <Path Width="14" Height="14" Margin="1,0,0,0" Data="M10.00,6 L10.00,10 L6,10 L6,12 L12,12 L12,6 z M2,2 L2,8 L4,8 L4.00,4 L8,4 L8,2 z M0,0 L10,0 L10,2 L10,4 L14,4 L14,5 L14,6 L14,12 L14,14 L12,14 L6,14 L4,14 L4,12 L4,10 L2,10 L0,10 L0,8 L0,2 L0,0.99 z" Fill="{StaticResource CustomFilterButtonGlyph}" Stretch="Fill" StrokeThickness="2" />
                                        </Button>
                                        <Button Command="{x:Static igDP:CustomFilterSelectionControl.GroupSelectedConditionsAsOrGroupCommand}" Margin="0,0,8,0" Tag="{TemplateBinding GroupSelectedConditionsAsOrGroupLabel}" Style="{StaticResource IconButtonStyle}">
                                            <Path Width="14" Height="14" Margin="1,0,0,0" Data="M2,2 L2,8 L4,8 L6,8 L6,10 L6,12 L12,12 L12,6 L10,6 L8,6 L8,4 L8,2 z M0,0 L10,0 L10,2 L10,4 L14,4 L14,5 L14,6 L14,12 L14,14 L12,14 L6,14 L4,14 L4,12 L4,10 L2,10 L0,10 L0,8 L0,2 L0,1 z" Fill="{StaticResource CustomFilterButtonGlyph}" Stretch="Fill" StrokeThickness="2" />
                                        </Button>
                                        <Button Command="{x:Static igDP:CustomFilterSelectionControl.ToggleSelectedGroupLogicalOperatorCommand}" Margin="0,0,8,0" Tag="{TemplateBinding ToggleOperatorOfSelectedConditionsLabel}" Style="{StaticResource IconButtonStyle}">
                                            <Path Width="14" Height="14" HorizontalAlignment="Left" Margin="2,0,0,0" Data="M10.81,3.13 C10.81,3.13 6.35,3.15 6.35,3.15 6.35,3.15 7.12,3.92 7.83,4.63 L7.90,4.70 6.29,6.27 6.29,6.27 6.31,6.25 7.66,7.60 9.24,6.04 9.31,6.11 C10.02,6.82 10.79,7.59 10.79,7.59 10.79,7.59 10.81,3.13 10.81,3.13 z M2.00,1.99 L2.00,12 12,12 7.63,7.63 6.05,9.17 6.12,9.24 C6.83,9.95 7.59,10.72 7.59,10.72 7.59,10.72 3.13,10.74 3.13,10.74 3.13,10.74 3.16,6.29 3.16,6.29 3.16,6.29 3.93,7.05 4.64,7.76 L4.70,7.83 6.28,6.28 z M6.25E-07,0 L2.00,0 12,0 13.99,0 14,1.99 14,13.99 0,14 0,12 6.25E-07,1.99 z" Fill="{StaticResource CustomFilterButtonGlyph}" Stretch="Fill" />
                                        </Button>
                                        <Button Command="{x:Static igDP:CustomFilterSelectionControl.UngroupSelectedConditionsCommand}" Margin="0" Tag="{TemplateBinding UngroupSelectedConditionsLabel}" Style="{StaticResource IconButtonStyle}">
                                            <Path Width="14" Height="14" Margin="1,0,0,0" Data="M12,12 L14,12 L14,14 L12,14 z M9,12 L11,12 L11,14 L9,14 z M6,12 L8,12 L8,14 L6,14 z M3.00,12 L5,12 L5,14 L3.00,14 z M12,9 L14,9 L14,11 L12,11 z M0,9 L1.99,9 L1.99,11 L0,11 z M12,6 L14,6 L14,8 L12,8 z M0,6 L1.99,6 L1.99,8 L0,8 z M9,3.00 L11,3.00 L11,5 L10,5 L10,10 L5,10 L5,11 L3,11 L3,9 L4,9 L4,4 L9,4 z M0,3.00 L1.99,3.00 L1.99,5 L0,5 z M12,3 L14,3 L14,5 L12,5 z M9,0 L11,0 L11,1.99 L9,1.99 z M6,0 L8,0 L8,1.99 L6,1.99 z M3,0 L5,0 L5,1.99 L3,1.99 z M0,0 L1.99,0 L1.99,1.99 L0,1.99 z" Fill="{StaticResource CustomFilterButtonGlyph}" Stretch="Fill" StrokeThickness="1.5" />
                                        </Button>
                                    </StackPanel>
                                </Grid>
                            </Border>
                            <Grid Grid.Row="2">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height=".3*" />
                                </Grid.RowDefinitions>
                                <Border>
                                    <igDP:XamDataGrid x:Name="PART_ConditionsGrid" GroupByAreaLocation="None">
                                        <igDP:XamDataGrid.Resources>
                                            <Style TargetType="{x:Type igDP:DataRecordPresenter}">
                                                <Setter Property="Margin" Value="0" />
                                            </Style>
                                        </igDP:XamDataGrid.Resources>
                                    </igDP:XamDataGrid>
                                </Border>
                                <Border Background="{StaticResource FilterDescriptionBackground}" BorderBrush="{StaticResource FilterDescriptionStroke}" BorderThickness="0,1" Grid.Row="1">
                                    <ScrollViewer Margin="0" VerticalScrollBarVisibility="Auto" Style="{StaticResource ScrollViewerStyle}">
                                        <TextBlock TextWrapping="Wrap" Text="{TemplateBinding FilterSummaryDescription}" Margin="12" />
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                            <Border x:Name="FooterBackground" Grid.Row="3" Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CustomFilterControlToolbarBrush}}">
                                <DockPanel KeyboardNavigation.TabNavigation="Local" Margin="12" LastChildFill="False" VerticalAlignment="Top">
                                    <Button TabIndex="1" DockPanel.Dock="Right" MinWidth="100" Command="{x:Static igDP:CustomFilterSelectionControl.CancelChangesCommand}" Margin="0,0,8,0" IsCancel="true" Content="{TemplateBinding CancelButtonLabel}" Style="{StaticResource ButtonStyle}" />
                                    <Button TabIndex="0" DockPanel.Dock="Right" MinWidth="100" Command="{x:Static igDP:CustomFilterSelectionControl.CommitChangesCommand}" Margin="0,0,8,0" IsDefault="true" Content="{TemplateBinding OkButtonLabel}" Style="{StaticResource ButtonStyle}" />
                                    <Border x:Name="groupContainer">
                                        <StackPanel Orientation="Horizontal">
                                            <StackPanel Orientation="Horizontal">
                                                <Rectangle Width="16" Height="16" VerticalAlignment="Center" Fill="{TemplateBinding AndLogicalOperatorBrush}" Margin="0,0,8,0" />
                                                <TextBlock Text="{TemplateBinding AndGroupLegendDescription}" VerticalAlignment="Center" Margin="0,0,20,0" />
                                            </StackPanel>
                                            <StackPanel Orientation="Horizontal">
                                                <Rectangle Width="16" Height="16" VerticalAlignment="Center" Fill="{TemplateBinding OrLogicalOperatorBrush}" Stroke="{StaticResource CustomFilterButtonGlyph}" Margin="0,0,8,0" />
                                                <TextBlock Text="{TemplateBinding OrGroupLegendDescription}" VerticalAlignment="Center" Margin="0,0,20,0" />
                                            </StackPanel>
                                        </StackPanel>
                                    </Border>
                                </DockPanel>
                            </Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- ********************************* BreadcrumbControl ********************************* -->
    <Style TargetType="{x:Type igDP:CarouselBreadcrumbControl}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Padding" Value="6,4" />
        <Setter Property="Background" Value="{StaticResource CarouselBreadcrumbControlBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource CarouselBreadcrumbControlBorderBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:CarouselBreadcrumbControl}">
                    <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, BreadcrumbCornerRadius}}" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <Grid>
                            <ItemsControl ItemsSource="{Binding Path=Breadcrumbs, RelativeSource={RelativeSource TemplatedParent}}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="{Binding Path=Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igDP:CarouselBreadcrumbControl}}}" />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasCrumbs" Value="false">
                            <Setter TargetName="Border" Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ********************************* Breadcrumb ********************************* -->
    <Style TargetType="{x:Type igDP:CarouselBreadcrumb}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Foreground" Value="{StaticResource BreadcrumbForegroundBrush}" />
        <Setter Property="Background" Value="{StaticResource BreadcrumbBackgroundBrush}" />
        <Setter Property="Padding" Value="6 2 6 4" />
        <Setter Property="BorderBrush" Value="{StaticResource BreadcrumbBorderBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform X="0" Y="0" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:CarouselBreadcrumb}">
                    <StackPanel x:Name="itemContainer" Orientation="Horizontal" Opacity=".7">
                        <Border x:Name="itemBG" CornerRadius="0" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Cursor="{TemplateBinding Cursor}" Background="{TemplateBinding Background}" Margin="0,0,4,0">
                            <ContentPresenter Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <Path x:Name="separator" Stretch="Fill" Fill="{StaticResource BreadcrumbSeparatorFillBrush}" Data="F1 M51.411503,29.262499 C49.336216,29.34656 47.952686,31.512136 42.20528,36.971252 C35.217281,43.704453 26.3262,53.349899 19.2195,59.935299 C14.8568,64.2686 7.2060499,63.963299 3.1127901,59.429901 C-1.34058,54.963299 -0.91650403,47.283199 3.65942,43.056599 C16.736799,29.883301 29.872801,16.763201 43.031502,3.66992 C47.432701,-1.22339 55.764801,-1.22339 60.151402,3.66992 C73.111504,16.523199 85.964798,29.483299 98.898201,42.3633 C102.685,45.789902 104.711,51.601898 102.151,56.3367 C99.431503,62.883301 90.098099,65.283203 84.698097,60.536598 C77.218102,53.896599 68.232216,43.891151 60.992218,36.98455 C56.023273,31.512136 53.48679,29.178438 51.411503,29.262499 z" RenderTransformOrigin="0.5,0.5" Width="14" Height="7.882" VerticalAlignment="Center" HorizontalAlignment="Left">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform Angle="90" />
                                    <TranslateTransform />
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="itemBG" Property="IsMouseOver" Value="True">
                            <Setter TargetName="itemContainer" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsLastBreadcrumb" Value="true">
                            <Setter TargetName="separator" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            <BeginStoryboard>
                                <Storyboard Duration="0:0:0.5">
                                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" From="50" To="0" BeginTime="0:0:0" Duration="0:0:00.35" FillBehavior="HoldEnd" />
                                    <DoubleAnimation Storyboard.TargetProperty="(UIElement.Opacity)" From="0" To="1" BeginTime="0:0:0" Duration="0:0:00.5" FillBehavior="HoldEnd" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ********************************* CarouselItem ********************************* -->
    <Style TargetType="{x:Type igDP:CarouselItem}">
        <Setter Property="Width" Value="400" />
        <Setter Property="ItemDisappearingStoryboard" Value="{StaticResource ItemDisappearing}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:CarouselItem}">
                    <Grid x:Name="root">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="{Binding Path=(igWindows:XamCarouselPanel.ViewSettings).(igWindows:CarouselViewSettings.ItemSize).Height, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igDP:CarouselViewPanel}}}" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <ScrollViewer x:Name="ScrollViewer" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ItemHorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ItemVerticalScrollBarVisibility}" VerticalAlignment="Bottom" Style="{StaticResource ScrollViewerStyle}">
                            <Viewbox x:Name="ViewBox" VerticalAlignment="Bottom" HorizontalAlignment="Center">
                                <Grid x:Name="itemContentHolder">
                                    <Border x:Name="itemContentHolderBackground" BorderThickness="1" CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" />
                                    <!-- The item's content -->
                                    <ContentControl x:Name="itemContent" Focusable="false" Grid.Row="0" Content="{TemplateBinding Content}" />
                                </Grid>
                            </Viewbox>
                        </ScrollViewer>
                        <!-- Glyphs for manipulating the record -->
                        <Grid x:Name="glyphCanvas" Grid.Row="0">
                            <!--  Note that this button is intentionally being placed outside the item so as not to interfere with the item sizing -->
                            <igWindows:ExpansionIndicator x:Name="ExpansionIndicator" Margin="0 0 -11 0" Canvas.Left="{Binding Path=ActualWidth, ElementName=glyphCanvas}" HorizontalAlignment="Right" VerticalAlignment="Bottom" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Background="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, CarouselItemExpansionIndicator}}" Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}">
                                <igWindows:ExpansionIndicator.Template>
                                    <ControlTemplate TargetType="{x:Type igWindows:ExpansionIndicator}">
                                        <Grid Background="Transparent" Width="30" Height="30">
                                            <Path x:Name="selectorArrow" RenderTransformOrigin="0.5,0.5" Fill="{TemplateBinding Background}" Stretch="Fill" Stroke="#00FFFFFF" StrokeThickness="1" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="{TemplateBinding Padding}" Width="10" Height="10" Cursor="{TemplateBinding Cursor}" Data="M10,0L10,10 0,10z" Visibility="Visible" />
                                        </Grid>
                                    </ControlTemplate>
                                </igWindows:ExpansionIndicator.Template>
                            </igWindows:ExpansionIndicator>
                        </Grid>
                        <!-- The reflection of the item's content -->
                        <Border Grid.Row="1" Visibility="{Binding Path=ReflectionVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igDP:CarouselViewPanel}}}" Height="{Binding Path=ActualHeight, ElementName=ScrollViewer}" Width="{Binding Path=ActualWidth, ElementName=ScrollViewer}" IsHitTestVisible="False" Margin="0,1,0,0" x:Name="reflection" VerticalAlignment="Top">
                            <Border.Background>
                                <VisualBrush Visual="{Binding ElementName=ScrollViewer}" Stretch="None" Opacity=".15" AlignmentX="Center" AlignmentY="Bottom">
                                    <VisualBrush.RelativeTransform>
                                        <TransformGroup>
                                            <MatrixTransform Matrix="1,0,0,-1,0,0" />
                                            <TranslateTransform Y="1" />
                                        </TransformGroup>
                                    </VisualBrush.RelativeTransform>
                                </VisualBrush>
                            </Border.Background>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="AutoScaleItemContentsToFit" Value="true">
                            <Setter TargetName="ScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                            <Setter TargetName="ScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
                            <Setter TargetName="ScrollViewer" Property="Focusable" Value="False" />
                            <Setter TargetName="ViewBox" Property="Stretch" Value="Uniform" />
                            <Setter TargetName="ViewBox" Property="StretchDirection" Value="Both" />
                        </Trigger>
                        <Trigger Property="IsOpacityReduced" Value="True">
                            <Setter TargetName="root" Property="Opacity" Value="0.35" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ********************************* CardButtonStyleBase ********************************* -->
    <!-- Base style for the buttons in the Card Header -->
    <Style x:Key="CardButtonStyleBase" TargetType="{x:Type ButtonBase}">
        <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Border.CornerRadius" Value="0" />
        <Setter Property="Width" Value="13" />
        <Setter Property="Height" Value="12" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CollapseCardGlyphNormalBrushKey}}" />
        <Style.Triggers>
            <!-- HotTracked Visual in an Active Card -->
            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardButtonBackgroundHottrackBrushKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardButtonBorderHottrackBrushKey}}" />
            </DataTrigger>
            <!-- IsPressed Visual -->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardButtonBackgroundPressedBrushKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardButtonBorderPressedBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CollapseCardGlyphPressedBrushKey}}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsActive}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CollapseCardGlyphActiveBrushKey}}" />
            </DataTrigger>
            <!-- IsEnabled Visual -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.35" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- ********************************* CardHeaderPresenter.CollapseCardButtonStyleKey ********************************* -->
    <Style x:Key="{x:Static igDP:CardHeaderPresenter.CollapseCardButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{StaticResource CardButtonStyleBase}">
        <Setter Property="ToolTip" Value="{StaticResource collapseCardToolTip}" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="ClickMode" Value="Release" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="Transparent" SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}">
                        <igWindows:CardPanel>
                            <Path x:Name="NotCollapsedImage" Width="12" Height="14" Data="M10.152689,7 L12,9.1923618 L5.9873667,15 L0,9.1927757 L1.8960046,7.0000067 L5.9755836,11.015704 z M10.152689,0 L12,2.1923614 L5.9873667,8 L0,2.1927762 L1.8960046,6.7055225E-06 L5.9755836,4.0157037 z" Fill="{TemplateBinding Foreground}" Visibility="Collapsed" Stretch="Fill" HorizontalAlignment="Center" VerticalAlignment="Center" />
                            <Path x:Name="CollapsedImage" Width="12" Height="14" Data="M5.9977837,6.5000005 L12.000001,11.849594 L10.15269,13.958994 L5.975584,10.25055 L1.8960054,13.959001 L6.2401591E-07,11.84998 z M5.9977832,0 L12,5.3495932 L10.152689,7.4589939 L5.9755836,3.7505503 L1.8960047,7.4590001 L0,5.3499799 z" Fill="{TemplateBinding Foreground}" Stretch="Fill" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </igWindows:CardPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=IsContainingCardCollapsedResolved}" Value="True">
                            <Setter TargetName="NotCollapsedImage" Property="Visibility" Value="Visible" />
                            <Setter TargetName="CollapsedImage" Property="Visibility" Value="Collapsed" />
                            <Setter Property="ToolTip" Value="{StaticResource unCollapseCardToolTip}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ********************************* CardHeaderPresenter.CollapseEmptyCellsButtonStyleKey ********************************* -->
    <Style x:Key="{x:Static igDP:CardHeaderPresenter.CollapseEmptyCellsButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{StaticResource CardButtonStyleBase}">
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="ToolTip" Value="{StaticResource collapseEmptyCellsToolTip}" />
        <Setter Property="ClickMode" Value="Release" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="Transparent" SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}">
                        <igWindows:CardPanel>
                            <Grid>
                                <Ellipse x:Name="glyphStroke" Width="18" Height="18" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" />
                                <Ellipse x:Name="glyphCenter" Width="10" Height="10" Fill="{TemplateBinding Foreground}" />
                            </Grid>
                        </igWindows:CardPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=ShouldCollapseEmptyCellsResolved}" Value="True">
                            <Setter TargetName="glyphCenter" Property="Fill" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CollapseCellGlyphCheckedBackgroundBrushKey}}" />
                            <Setter TargetName="glyphStroke" Property="Stroke" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CollapseCellGlyphCheckedBackgroundBrushKey}}" />
                            <Setter Property="ToolTip" Value="{StaticResource unCollapseEmptyCellsToolTip}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ********************************** CardHeaderPresenter Style **********************************-->
    <Style TargetType="{x:Type igDP:CardHeaderPresenter}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="TextBlock.TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundNormalBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardBorderBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextNormalBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:CardHeaderPresenter}">
                    <Grid>
                        <Border x:Name="Bd" Background="{TemplateBinding Background}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <ContentPresenter x:Name="CardHeader" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="5,0" />
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="3" SnapsToDevicePixels="true" />
                                <!-- Button to Collapse/Uncollapse Empty Cells -->
                                <Button x:Name="ToggleEmptyCellsCollapsedStateButton" Command="{x:Static igDP:DataPresenterCommands.ToggleEmptyCardCellsCollapsedState}" CommandParameter="{Binding}" Visibility="{Binding Card.CollapseEmptyCellsButtonVisibility, Mode=OneWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Margin="2,0" Grid.Column="1" Style="{DynamicResource {x:Static igDP:CardHeaderPresenter.CollapseEmptyCellsButtonStyleKey}}" />
                                <!-- Button to Collapse/Uncollapse the Card -->
                                <Button x:Name="ToggleCollapsedStateButton" Command="{x:Static igDP:DataPresenterCommands.ToggleCardCollapsedState}" CommandParameter="{Binding}" Visibility="{Binding Card.CollapseCardButtonVisibility, Mode=OneWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Margin="2,0,5,0" Grid.Column="2" Style="{DynamicResource {x:Static igDP:CardHeaderPresenter.CollapseCardButtonStyleKey}}" />
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsActive, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundActiveBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextActiveBrushKey}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundActiveBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextActiveBrushKey}}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsAddRecord, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                <Setter Property="FontFamily" Value="Segoe UI Semibold" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsFilterRecord, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                <Setter Property="FontFamily" Value="Segoe UI Semibold" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!-- ********************************** CardViewCard Style **********************************-->
    <Style TargetType="{x:Type igDP:CardViewCard}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardBackgroundBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardBorderBrushKey}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Visibility" Value="{Binding VisibilityResolved}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:CardViewCard}">
                    <Border x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <!-- Element to simulate CardHeaderPresenter when HeaderVisibilty=Hidden -->
                            <Border x:Name="HeaderBgWhenVisHidden" Background="{Binding Background, ElementName=CardHeaderPresenter}" Visibility="Collapsed" />
                            <!-- Card Header -->
                            <igDP:CardHeaderPresenter x:Name="CardHeaderPresenter" Content="{Binding Header, RelativeSource={x:Static RelativeSource.TemplatedParent}}" ContentTemplate="{Binding HeaderTemplate, RelativeSource={x:Static RelativeSource.TemplatedParent}}" ContentTemplateSelector="{Binding HeaderTemplateSelector, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Visibility="{Binding HeaderVisibility, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Card="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                            <Rectangle x:Name="captionStroke" Fill="{TemplateBinding BorderBrush}" Height="1" Grid.Row="1" />
                            <Rectangle x:Name="outerBd" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardChromeBorderBrushKey}}" Grid.Row="1" Grid.Column="1" />
                            <Border x:Name="innerBd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Grid.Row="2" Margin="0 1 0 0" SnapsToDevicePixels="true">
                                <!-- Card Content -->
                                <ScrollViewer x:Name="CardContentScrollViewer" Focusable="False" CanContentScroll="False" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Style="{StaticResource ScrollViewerStyle}">
                                    <ContentControl x:Name="CardContent" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                                </ScrollViewer>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsCollapsed" Value="True">
                            <Setter TargetName="innerBd" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Bd" Property="VerticalAlignment" Value="Top" />
                            <Setter TargetName="captionStroke" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HeaderVisibility" Value="Collapsed">
                            <Setter TargetName="captionStroke" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="innerBd" Property="Margin" Value="1" />
                            <Setter TargetName="innerBd" Property="BorderThickness" Value="1" />
                        </Trigger>
                        <Trigger Property="HeaderVisibility" Value="Hidden">
                            <Setter TargetName="HeaderBgWhenVisHidden" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True" />
                        <Trigger Property="IsActive" Value="True" />
                        <Trigger Property="IsAddRecord" Value="True">
                            <Setter TargetName="CardHeaderPresenter" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowHeaderBrushKey}}" />
                            <Setter TargetName="outerBd" Property="Fill" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowCardChromeBrushKey}}" />
                            <Setter TargetName="CardHeaderPresenter" Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowHeaderTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsFilterRecord" Value="True">
                            <Setter TargetName="CardHeaderPresenter" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderFilterRecordHeaderBrushKey}}" />
                            <Setter TargetName="outerBd" Property="Fill" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderFilterRecordCardChromeBrushKey}}" />
                            <Setter TargetName="CardHeaderPresenter" Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowHeaderTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsOpacityReduced" Value="True">
                            <Setter TargetName="Bd" Property="Opacity" Value="0.35" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ********************************** RootMenuStyle **********************************-->
    <Style x:Key="RootMenuStyle" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="IsMainMenu" Value="False" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <igWindows:CardPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ********************************** subMenuItemTemplate Style **********************************-->
    <ControlTemplate x:Key="subMenuItemTemplate" TargetType="{x:Type igDP:FieldMenuItem}">
        <igWindows:CardPanel Background="Transparent">
            <Border x:Name="Highlight" BorderThickness="1" BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackOuterBorderBrushKey}}" Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackInnerBorderBrushKey}}" SnapsToDevicePixels="True" Margin="1" Visibility="Collapsed">
                <Border x:Name="HighlightInner" Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackFillBrushKey}}" />
            </Border>
            <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconArea" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="30" />
                </Grid.ColumnDefinitions>
                <!-- Icon Area Background -->
                <Border x:Name="IconAreaBackground" Grid.Column="0" Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemIconAreaBrushKey}}" BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemIconAreaBorderBrushKey}}" BorderThickness="0,0,1,0" Margin="0" />
                <!-- Icon Area -->
                <Border x:Name="IconArea" Grid.Column="0" Margin="6">
                    <Border x:Name="OrangeCheckBox" SnapsToDevicePixels="True" BorderThickness="1" HorizontalAlignment="Center" VerticalAlignment="Center" Padding="1">
                        <igWindows:CardPanel Width="16" Height="16">
                            <!-- Small check mark -->
                            <igWindows:CardPanel x:Name="GlyphPanel" FlowDirection="LeftToRight" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed">
                                <igWindows:CardPanel SnapsToDevicePixels="True" HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Path Height="10" Width="12" Stretch="Fill" Data="M 1145.607177734375,430 C1145.607177734375,430 1141.449951171875,435.0772705078125 1141.449951171875,435.0772705078125 1141.449951171875,435.0772705078125 1139.232177734375,433.0999755859375 1139.232177734375,433.0999755859375 1139.232177734375,433.0999755859375 1138,434.5538330078125 1138,434.5538330078125 1138,434.5538330078125 1141.482177734375,438 1141.482177734375,438 1141.482177734375,438 1141.96875,437.9375 1141.96875,437.9375 1141.96875,437.9375 1147,431.34619140625 1147,431.34619140625 1147,431.34619140625 1145.607177734375,430 1145.607177734375,430 z" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemCheckMarkStrokeBrushKey}}" StrokeThickness="1" Margin="0.627,0.363,0,0" />
                                </igWindows:CardPanel>
                            </igWindows:CardPanel>
                            <!-- icon -->
                            <igWindows:AutoDisabledImage x:Name="Icon" HorizontalAlignment="Center" VerticalAlignment="Center" Source="{Binding ImageSource}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </igWindows:CardPanel>
                    </Border>
                </Border>
                <!-- Header -->
                <ContentPresenter x:Name="Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" Margin="7,0,0,0" Grid.Column="2" />
                <!-- Separator Line -->
                <Rectangle x:Name="Separator" SnapsToDevicePixels="True" Visibility="Collapsed" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemSeparatorBrushKey}}" Height="1" Grid.Column="2" Grid.ColumnSpan="2" />
                <!-- Glyph Arrow-->
                <Grid x:Name="Menu_Arrow" Width="30" Height="30" Margin="0" Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed">
                    <Path x:Name="Glyph_Arrow" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemDropDownArrowBrushKey}}" SnapsToDevicePixels="True" Stretch="None" Height="10" Width="6" Data="M0,0 L0,8 L4,4 z" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center" />
                </Grid>
            </Grid>
            <!-- Popup -->
            <Popup x:Name="PART_Popup" AllowsTransparency="true" Placement="Right" Focusable="false" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                <AdornerDecorator>
                    <Border BorderThickness="1" BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemPopupOuterBorderBrushKey}}" Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemPopupFillBrushKey}}">
                        <igWindows:PopupResizerDecorator x:Name="resizeDecorator" Grid.IsSharedSizeScope="true">
                            <igWindows:XamPager CanContentScroll="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                                <ItemsPresenter Grid.ColumnSpan="2" KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </igWindows:XamPager>
                        </igWindows:PopupResizerDecorator>
                    </Border>
                </AdornerDecorator>
            </Popup>
        </igWindows:CardPanel>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding HasResizableItems}" Value="True">
                <Setter TargetName="resizeDecorator" Property="ResizeMode" Value="Both" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsResizable}" Value="True">
                <Setter TargetName="IconArea" Property="VerticalAlignment" Value="Top" />
            </DataTrigger>
            <Trigger Property="IsSubmenuOpen" Value="False">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter TargetName="Menu_Arrow" Property="Visibility" Value="Visible" />
            </Trigger>
            <DataTrigger Binding="{Binding IsSeparator}" Value="True">
                <Setter TargetName="IconArea" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="Header" Property="Grid.Column" Value="2" />
                <Setter TargetName="Menu_Arrow" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="Separator" Property="Visibility" Value="Visible" />
                <Setter TargetName="Separator" Property="Margin" Value="3,0,0,0" />
            </DataTrigger>
            <Trigger Property="HasHeader" Value="False">
                <Setter TargetName="Separator" Property="Margin" Value="7,0,0,0" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsHighlighted, RelativeSource={RelativeSource Self}}" Value="True" />
                    <Condition Binding="{Binding IsControlHost}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="Highlight" Property="Visibility" Value="Visible" />
                <Setter TargetName="Glyph_Arrow" Property="Fill" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackDropDownArrowBrushKey}}" />
                <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush }" />
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                <Setter TargetName="Glyph_Arrow" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="Icon" Property="Source" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- ********************************** FieldMenuItem Style **********************************-->
    <Style TargetType="{x:Type igDP:FieldMenuItem}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemForegroundBrushKey}}" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="FontSize" Value="14.667" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="CommandParameter" Value="{Binding CommandParameter}" />
        <Setter Property="Command" Value="{Binding Command}" />
        <Setter Property="IsChecked" Value="{Binding IsChecked}" />
        <Setter Property="IsCheckable" Value="{Binding IsCheckable}" />
        <Setter Property="Header" Value="{Binding Header}" />
        <Setter Property="Icon" Value="{Binding ImageSource}" />
        <Setter Property="ItemsSource" Value="{Binding Items}" />
        <Setter Property="StaysOpenOnClick" Value="{Binding StaysOpenOnClick}" />
        <Setter Property="igWindows:PopupResizerStackPanel.IsResizable" Value="{Binding IsResizable}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Template" Value="{StaticResource subMenuItemTemplate}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <igWindows:PopupResizerStackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource topLevelMenuItemTemplate}" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource topLevelMenuItemTemplate}" />
            </Trigger>
            <DataTrigger Binding="{Binding IsSeparator}" Value="True">
                <Setter Property="IsEnabled" Value="False" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsResizable}" Value="True">
                <Setter Property="VerticalContentAlignment" Value="Stretch" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!-- ********************************** excelFilterButtonTemplate **********************************-->
    <ControlTemplate x:Key="excelFilterButtonTemplate" TargetType="{x:Type igDP:FilterButton}">
        <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent" SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}">
            <Menu SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{StaticResource RootMenuStyle}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                <igDP:FieldMenuItem x:Name="PART_FilterMenu" IsSubmenuOpen="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center">
                    <igDP:FieldMenuItem.DataContext>
                        <!-- This is a temporary item to avoid binding errors before its hooked up -->
                        <igDP:FieldMenuDataItem />
                    </igDP:FieldMenuItem.DataContext>
                    <igDP:FieldMenuItem.Header>
                        <Path Width="14" Height="10" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0,0 C0,0 11,0 11,0 11,0 7,4 7,4 7,4 7,8 7,8 7,8 4,8 4,8 4,8 4,4 4,4 4,4 0,0 0,0 z" Fill="{TemplateBinding Background}" Stretch="Fill" />
                    </igDP:FieldMenuItem.Header>
                </igDP:FieldMenuItem>
            </Menu>
        </Border>
    </ControlTemplate>
    <!--SS 06/26/15 xamDataGrid - Add Excel style filtering option to record filter-->
    <!-- ********************************** ExcelStyleFilterButton ********************************** -->
    <Style TargetType="{x:Type igDP:ExcelStyleFilterButton}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="MinWidth" Value="30"/>
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBorder}}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0,0,0,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:ExcelStyleFilterButton}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent" SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}">
                        <Menu SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{StaticResource RootMenuStyle}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <igDP:FieldMenuItem x:Name="PART_FilterMenu" IsSubmenuOpen="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center">
                                <igDP:FieldMenuItem.DataContext>
                                    <!-- This is a temporary item to avoid binding errors before its hooked up -->
                                    <igDP:FieldMenuDataItem/>
                                </igDP:FieldMenuItem.DataContext>
                                <igDP:FieldMenuItem.Header>
                                    <Path Width="14" Height="10" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0,0 C0,0 11,0 11,0 11,0 7,4 7,4 7,4 7,8 7,8 7,8 4,8 4,8 4,8 4,4 4,4 4,4 0,0 0,0 z" Fill="{TemplateBinding Background}" Stretch="Fill"/>
                                </igDP:FieldMenuItem.Header>
                            </igDP:FieldMenuItem>
                        </Menu>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- ********************************** FilterButtonStyleBase **********************************-->
    <Style x:Key="FilterButtonStyleBase" TargetType="{x:Type igDP:FilterButton}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="MinWidth" Value="30" />
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackground}}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:FilterButton}">
                    <Border x:Name="Border" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" IsHitTestVisible="True">
                        <igWindows:CardPanel IsHitTestVisible="False" Margin="{TemplateBinding Padding}">
                            <Path x:Name="btnPath" Fill="{TemplateBinding Background}" Width="14" Height="10" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0,0 C0,0 11,0 11,0 11,0 7,4 7,4 7,4 7,8 7,8 7,8 4,8 4,8 4,8 4,4 4,4 4,4 0,0 0,0 z" Stretch="Fill" />
                            <editors:XamComboEditor MinDropDownWidth="150" DropDownResizeMode="None" Opacity="0" ItemsSource="{Binding Operands, RelativeSource={RelativeSource TemplatedParent}}" SelectedItem="{Binding SelectedOperand, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsDropDownOpen="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" MaxWidth="1" Height="{Binding ActualHeight, ElementName=btnPath}" />
                        </igWindows:CardPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="DropDownType" Value="MultiSelectExcelStyle">
                <Setter Property="Template" Value="{StaticResource excelFilterButtonTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- ********************************** FilterButton **********************************-->
    <Style TargetType="{x:Type igDP:FilterButton}" BasedOn="{StaticResource FilterButtonStyleBase}">
        <Setter Property="Padding" Value="3,0" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonBackgroundHover}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- ********************************* XamDataCards ********************************* -->
    <Style TargetType="{x:Type igDP:XamDataCards}">
        <Setter Property="FontSize" Value="14.667" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardPanelBackgroundBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:XamDataCards}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid x:Name="PART_ContentSiteGrid" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}" />
            <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarStyle}" />
        </Style.Resources>
    </Style>
</ResourceDictionary>