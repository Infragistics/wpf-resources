<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:editors="http://infragistics.com/Editors"
                    xmlns:igDP="http://infragistics.com/DataPresenter"
                    xmlns:igWindows="http://infragistics.com/Windows"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:themes="http://infragistics.com/Themes"
                    mc:Ignorable="d">

  <!--  *********************************  RESOURCES  *********************************  -->
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="DataPresenterGeneric.xaml" />
    <ResourceDictionary Source="DataPresenterRoyalDark_Express.xaml" />
    <ResourceDictionary Source="DataPresenterRoyalDark_Brushes.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <!--  *********************************  ToolTip Style  *********************************  -->
  <Style x:Key="ToolTipStyle" TargetType="ContentControl">
    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
    <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource FontSize}" />
    <Setter Property="Background" Value="{StaticResource TooltipBackgroundBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource TooltipBorderBrush}" />
    <Setter Property="Padding" Value="{StaticResource ToolTipPadding}" />
    <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ContentControl">
          <Grid>
            <Grid>
              <Border Margin="-4"
                      Background="{StaticResource TooltipShadowBrush}"
                      CornerRadius="5"
                      Opacity="0.1" />
              <Border Margin="-3"
                      Background="{StaticResource TooltipShadowBrush}"
                      CornerRadius="4"
                      Opacity="0.3" />
              <Border Margin="-2"
                      Background="{StaticResource TooltipShadowBrush}"
                      CornerRadius="3"
                      Opacity="0.5" />
              <Border Margin="-1"
                      Background="{StaticResource TooltipShadowBrush}"
                      CornerRadius="2"
                      Opacity="0.7" />
              <Rectangle Fill="{TemplateBinding Background}"
                         Stroke="{TemplateBinding BorderBrush}"
                         StrokeThickness="{TemplateBinding BorderThickness}" />
              <ContentPresenter Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalAlignment}" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource ToolTipStyle}" TargetType="ToolTip" />

  <!--  *********************************  ScrollBarButton Style  *********************************  -->
  <Style x:Key="ScrollBarButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="Focusable" Value="false" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="MinHeight" Value="18" />
    <Setter Property="MinWidth" Value="18" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Grid x:Name="grid1">
            <!--<VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="Arrow" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource ScrollbarPageButtonArrowHoverBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="Arrow" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource ScrollbarPageButtonArrowPressedBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>-->
            <Rectangle Fill="{StaticResource TransparentBrush}" />
            <Path x:Name="Arrow"
                  Width="8"
                  Height="5"
                  Margin="{TemplateBinding Padding}"
                  Data="{StaticResource ScrollbarArrow}"
                  Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ScrollbarPageButtonArrowBackgroundBrush}}"
                  Stretch="Fill" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ScrollbarPageButtonArrowHoverBackgroundBrush}}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ScrollbarPageButtonArrowPressedBackgroundBrush}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Arrow" Property="Opacity" Value="0.3"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  *********************************  ScrollBarPageButton Style  *********************************  -->
  <Style x:Key="ScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
    <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
    <Setter Property="Focusable" Value="false" />
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
          <Rectangle Width="{TemplateBinding Width}"
                     Height="{TemplateBinding Height}"
                     Fill="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Rectangle>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  *********************************  Horizontal ScrollBarThumb Style  *********************************  -->
  <Style x:Key="HScrollBarThumbStyle" TargetType="{x:Type Thumb}">
    <Setter Property="IsTabStop" Value="false" />
    <Setter Property="MinHeight" Value="18" />
    <Setter Property="MinWidth" Value="10" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid Margin="0">
            <!--<VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="Thumb" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource HScrollbarThumbHoverBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="Thumb" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource HScrollbarThumbPressedBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Thumb" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>-->
            <Rectangle Fill="{StaticResource TransparentBrush}" />
            <Rectangle x:Name="Thumb" Height="6" Margin="1" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=HScrollbarThumbBackgroundBrush}}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Thumb" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=HScrollbarThumbHoverBackgroundBrush}}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
              <Setter TargetName="Thumb" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=HScrollbarThumbPressedBackgroundBrush}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Thumb" Property="Opacity" Value="0.3"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  *********************************  Vertical ScrollbarThumb Style  *********************************  -->
  <Style x:Key="VScrollBarThumbStyle" TargetType="{x:Type Thumb}">
    <Setter Property="MinHeight" Value="10" />
    <Setter Property="MinWidth" Value="18" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Grid x:Name="grid" Width="Auto" Height="Auto">
            <!--<VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="Thumb" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource VScrollbarThumbHoverBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="Thumb" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource VScrollbarThumbPressedBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Thumb" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>-->
            <Rectangle Fill="{StaticResource TransparentBrush}" />
            <Rectangle x:Name="Thumb" Width="6" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=VScrollbarThumbBackgroundBrush}}" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="Thumb" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=VScrollbarThumbHoverBackgroundBrush}}"/>
            </Trigger>
            <Trigger Property="IsDragging" Value="True">
              <Setter TargetName="Thumb" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=VScrollbarThumbPressedBackgroundBrush}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Thumb" Property="Opacity" Value="0.3"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  *********************************  ScrollBar Style  *********************************  -->
  <Style x:Key="ScrollBarStyle" TargetType="{x:Type ScrollBar}">
    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ScrollbarBackgroundBrush}}" />
    <Setter Property="MinWidth" Value="18" />
    <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
    <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
          <Grid x:Name="Bg" SnapsToDevicePixels="true">
            <Grid.RowDefinitions>
              <RowDefinition Height="16" />
              <RowDefinition Height="0.00001*" />
              <RowDefinition Height="16" />
            </Grid.RowDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.3" />
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <DoubleAnimation Duration="0" Storyboard.TargetName="Bg" Storyboard.TargetProperty="Opacity" To="0.3" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle Grid.RowSpan="3"
                       Margin="0"
                       Fill="{TemplateBinding Background}" />
            <RepeatButton x:Name="repeatButton"
                          HorizontalAlignment="Center"
                          Command="{x:Static ScrollBar.LineUpCommand}"
                          IsEnabled="True"
                          Style="{StaticResource ScrollBarButtonStyle}" />
            <Track x:Name="PART_Track"
                   Grid.Row="1"
                   IsDirectionReversed="true"
                   IsEnabled="True">
              <Track.DecreaseRepeatButton>
                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource ScrollBarPageButtonStyle}" />
              </Track.DecreaseRepeatButton>
              <Track.IncreaseRepeatButton>
                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource ScrollBarPageButtonStyle}" />
              </Track.IncreaseRepeatButton>
              <Track.Thumb>
                <Thumb x:Name="thumb"
                       Width="30"
                       HorizontalAlignment="Center"
                       Style="{StaticResource VScrollBarThumbStyle}" />
              </Track.Thumb>
            </Track>
            <RepeatButton x:Name="repeatButton1"
                          Grid.Row="2"
                          HorizontalAlignment="Center"
                          Command="{x:Static ScrollBar.LineDownCommand}"
                          IsEnabled="True"
                          RenderTransformOrigin="0.5,0.5"
                          Style="{StaticResource ScrollBarButtonStyle}">
              <RepeatButton.RenderTransform>
                <TransformGroup>
                  <ScaleTransform />
                  <SkewTransform />
                  <RotateTransform Angle="180" />
                  <TranslateTransform />
                </TransformGroup>
              </RepeatButton.RenderTransform>
            </RepeatButton>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Width" Value="18" />
    <Style.Triggers>
      <Trigger Property="Orientation" Value="Horizontal">
        <Setter Property="Height" Value="18" />
        <Setter Property="MinHeight" Value="18" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ScrollBar}">
              <Grid x:Name="Bg" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="16" />
                  <ColumnDefinition Width="0.00001*" />
                  <ColumnDefinition Width="16" />
                </Grid.ColumnDefinitions>
                <VisualStateManager.VisualStateGroups>
                  <VisualStateGroup x:Name="CommonStates">
                    <VisualStateGroup.Transitions>
                      <VisualTransition GeneratedDuration="0:0:0.3" />
                    </VisualStateGroup.Transitions>
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                      <Storyboard>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="repeatButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                          <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                        </DoubleAnimationUsingKeyFrames>
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="repeatButton1" Storyboard.TargetProperty="(UIElement.Opacity)">
                          <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                        </DoubleAnimationUsingKeyFrames>
                      </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                      <Storyboard>
                        <DoubleAnimation Duration="0" Storyboard.TargetName="Bg" Storyboard.TargetProperty="Opacity" To="0.3" />
                      </Storyboard>
                    </VisualState>
                  </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <Rectangle Grid.ColumnSpan="5" Fill="{TemplateBinding Background}" />
                <RepeatButton x:Name="repeatButton"
                              VerticalAlignment="Center"
                              Command="{x:Static ScrollBar.LineLeftCommand}"
                              IsEnabled="True"
                              Opacity="1"
                              RenderTransformOrigin="0.5,0.5"
                              Style="{DynamicResource ScrollBarButtonStyle}">
                  <RepeatButton.RenderTransform>
                    <TransformGroup>
                      <ScaleTransform />
                      <SkewTransform />
                      <RotateTransform Angle="-90" />
                      <TranslateTransform />
                    </TransformGroup>
                  </RepeatButton.RenderTransform>
                </RepeatButton>
                <Track x:Name="PART_Track"
                       Grid.Column="1"
                       IsEnabled="True">
                  <Track.DecreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource ScrollBarPageButtonStyle}" />
                  </Track.DecreaseRepeatButton>
                  <Track.IncreaseRepeatButton>
                    <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource ScrollBarPageButtonStyle}" />
                  </Track.IncreaseRepeatButton>
                  <Track.Thumb>
                    <Thumb Height="30"
                           VerticalAlignment="Center"
                           Style="{StaticResource HScrollBarThumbStyle}" />
                  </Track.Thumb>
                </Track>
                <RepeatButton x:Name="repeatButton1"
                              Grid.Column="2"
                              VerticalAlignment="Center"
                              Command="{x:Static ScrollBar.LineRightCommand}"
                              IsEnabled="True"
                              Opacity="1"
                              RenderTransformOrigin="0.5,0.5"
                              Style="{DynamicResource ScrollBarButtonStyle}">
                  <RepeatButton.RenderTransform>
                    <TransformGroup>
                      <ScaleTransform />
                      <SkewTransform />
                      <RotateTransform Angle="90" />
                      <TranslateTransform />
                    </TransformGroup>
                  </RepeatButton.RenderTransform>
                </RepeatButton>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="Auto" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!--  *********************************  ScrollViewer Style *********************************  -->
  <Style x:Key="ScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid x:Name="Grid">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                    Grid.Row="0"
                                    Grid.Column="0"
                                    Margin="{TemplateBinding Padding}"
                                    CanContentScroll="{TemplateBinding CanContentScroll}"
                                    CanHorizontallyScroll="False"
                                    CanVerticallyScroll="False"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}" />
            <ScrollBar x:Name="PART_VerticalScrollBar"
                       Grid.Row="0"
                       Grid.Column="1"
                       AutomationProperties.AutomationId="VerticalScrollBar"
                       Cursor="Arrow"
                       Maximum="{TemplateBinding ScrollableHeight}"
                       Minimum="0"
                       Style="{StaticResource ScrollBarStyle}"
                       ViewportSize="{TemplateBinding ViewportHeight}"
                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                       Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            <ScrollBar x:Name="PART_HorizontalScrollBar"
                       Grid.Row="1"
                       Grid.Column="0"
                       AutomationProperties.AutomationId="HorizontalScrollBar"
                       Cursor="Arrow"
                       Maximum="{TemplateBinding ScrollableWidth}"
                       Minimum="0"
                       Orientation="Horizontal"
                       Style="{StaticResource ScrollBarStyle}"
                       ViewportSize="{TemplateBinding ViewportWidth}"
                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                       Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  *********************************  XamDataCarousel Style *********************************  -->
  <Style TargetType="{x:Type igDP:XamDataCarousel}">
    <Setter Property="Background" Value="{StaticResource XamDataCarouselBackground}" />
    <Setter Property="FontSize" Value="{StaticResource FontSize}" />
    <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:XamDataCarousel}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Grid x:Name="PART_ContentSiteGrid" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Resources>
      <Style BasedOn="{StaticResource ScrollViewerStyle}" TargetType="{x:Type ScrollViewer}" />
      <Style BasedOn="{StaticResource ScrollBarStyle}" TargetType="{x:Type ScrollBar}" />
    </Style.Resources>
  </Style>

  <!--  *********************************  XamDataPresenter Style *********************************  -->
  <Style TargetType="{x:Type igDP:XamDataPresenter}">
    <Setter Property="RecordSelectorErrorIconExtent" Value="24" />
    <Setter Property="RecordSelectorExtent" Value="48" />
    <Setter Property="RecordSelectorFixButtonExtent" Value="24" />
    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
    <Setter Property="FontSize" Value="{StaticResource FontSize}" />
    <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
    <Style.Resources>
      <Style BasedOn="{StaticResource ScrollViewerStyle}" TargetType="{x:Type ScrollViewer}" />
      <Style BasedOn="{StaticResource ScrollBarStyle}" TargetType="{x:Type ScrollBar}" />
    </Style.Resources>
  </Style>

  <!--  *********************************  XamDataGrid Style *********************************  -->
  <Style TargetType="{x:Type igDP:XamDataGrid}">
    <Setter Property="RecordSelectorExtent" Value="48" />
    <Setter Property="RecordSelectorFixButtonExtent" Value="24" />
    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
    <Setter Property="FontSize" Value="{StaticResource FontSize}" />
    <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
    <Style.Resources>
      <Style BasedOn="{StaticResource ScrollViewerStyle}" TargetType="{x:Type ScrollViewer}" />
      <Style BasedOn="{StaticResource ScrollBarStyle}" TargetType="{x:Type ScrollBar}" />
    </Style.Resources>
  </Style>

  <!--  *********************************  IconButton Style *********************************  -->
  <Style x:Key="IconButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="TextElement.Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
    <Setter Property="FontSize" Value="{StaticResource FontSize}" />
    <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Height" Value="22" />
    <Setter Property="MinWidth" Value="22" />
    <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
    <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalCenterBrush}}" />
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalOuterBorderBrush}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid x:Name="Grid">
            <Border x:Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{StaticResource CornerRadius}"
                    Padding="{TemplateBinding Padding}"
                    SnapsToDevicePixels="True">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Image"
                                  MinWidth="16"
                                  MinHeight="16"
                                  Margin="5,0,5,0"
                                  HorizontalAlignment="Stretch"
                                  VerticalAlignment="Center"
                                  Content="{TemplateBinding Content}" />
                <TextBlock x:Name="text"
                           Grid.Column="1"
                           Margin="6 0 6 2"
                           HorizontalAlignment="Stretch"
                           VerticalAlignment="Center"
                           Foreground="{TemplateBinding Foreground}"
                           Text="{TemplateBinding Tag}"
                           FontSize="{TemplateBinding FontSize}"/>
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverCenterBrush}}" />
              <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverOuterBorderBrush}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedCenterBrush}}" />
              <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedOuterBorderBrush}}" />
              <Setter TargetName="text" Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <!--<Setter TargetName="text" Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>-->
              <Setter TargetName="Grid" Property="Opacity" Value="0.3" />
              <!--<Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonDisabledCenterBrush}}"/>
							<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonDisabledOuterBorderBrush}}"/>-->
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  ********************************** Button Style **********************************  -->
  <Style x:Key="{ComponentResourceKey {x:Type igDP:XamDataGrid}, ButtonStyle}" TargetType="{x:Type Button}">
    <Setter Property="TextElement.Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
    <Setter Property="FontSize" Value="{StaticResource FontSize}" />
    <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
    <Setter Property="Padding" Value="6,2" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="MinHeight" Value="22" />
    <Setter Property="MinWidth" Value="22" />
    <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
    <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalCenterBrush}}" />
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalOuterBorderBrush}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid x:Name="Grid">
            <Border x:Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    SnapsToDevicePixels="True"
                    CornerRadius="{StaticResource CornerRadius}">
              <ContentControl x:Name="Content"
                              Margin="{TemplateBinding Padding}"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Content="{TemplateBinding Content}" />
            </Border>
            <!--<Border x:Name="innerStroke"
                                Margin="1,1,1,1"
                                BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonNormalInnerBorderBrush}}"
                                BorderThickness="1"
                                SnapsToDevicePixels="True" />-->
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverCenterBrush}}" />
              <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverOuterBorderBrush}}" />
              <!--<Setter TargetName="innerStroke" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonHoverInnerBorderBrush}}" />-->
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedCenterBrush}}" />
              <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedOuterBorderBrush}}" />
              <!--<Setter TargetName="innerStroke" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonPressedInnerBorderBrush}}" />-->
              <Setter TargetName="Content" Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Grid" Property="Opacity" Value="0.3" />
              <!--<Setter TargetName="Content" Property="TextElement.Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                            <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonDisabledCenterBrush}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonDisabledOuterBorderBrush}}" />
                            <Setter TargetName="innerStroke" Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ButtonDisabledInnerBorderBrush}}" />-->
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="EmbeddedMenuStyle" TargetType="{x:Type Menu}">
    <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Menu}">
          <Grid Grid.IsSharedSizeScope="True">
            <StackPanel ClipToBounds="True" IsItemsHost="True" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="EmbeddedMenuItemStyle" TargetType="{x:Type MenuItem}">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemForegroundBrushKey}}" />
    <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightBackgroundBrushFillKey}}" />
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightOuterBorderBrushFillKey}}" />
    <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
    <Setter Property="Padding" Value="3,2,3,2" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Grid Background="{StaticResource TransparentBrush}">
            <Border x:Name="Hover"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="0"
                    Visibility="Collapsed" />
            <Grid Margin="{TemplateBinding Padding}">
              <ContentPresenter x:Name="Content"
                                Margin="{TemplateBinding Padding}"
                                Content="{TemplateBinding Header}"
                                ContentSource="Header"
                                RecognizesAccessKey="True"
                                TextElement.Foreground="{TemplateBinding Foreground}" />
              <Popup x:Name="PART_Popup"
                     AllowsTransparency="True"
                     Focusable="False"
                     HorizontalOffset="-2"
                     IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                     Placement="Bottom"
                     PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Border x:Name="SubMenuBorder"
                        Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid},ResourceId=SummaryButtonPopupBackground}}"
                        BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid},ResourceId=SummaryButtonPopupBorder}}"
                        BorderThickness="1"
                        CornerRadius="0">
                  <Border Margin="0"
                          Background="{StaticResource TransparentBrush}"
                          CornerRadius="0">
                    <ScrollViewer Margin="0"
                                  CanContentScroll="True"
                                  Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer,
                                                                                                    TypeInTargetAssembly={x:Type FrameworkElement}}}">
                      <ItemsPresenter Grid.IsSharedSizeScope="True"
                                      KeyboardNavigation.DirectionalNavigation="Cycle"
                                      KeyboardNavigation.TabNavigation="Cycle" />
                    </ScrollViewer>
                  </Border>
                </Border>
              </Popup>
            </Grid>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="True">
              <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="Role" Value="SubmenuItem" />
                <Condition Property="IsHighlighted" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="Hover" Property="Visibility" Value="Visible" />
              <Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightTextBrushFillKey}}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter TargetName="Content" Property="Opacity" Value="0.3" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ********************************** FixedFieldButton Style ********************************** -->
  <Style TargetType="{x:Type igDP:FixedFieldButton}">
    <Style.Resources>
      <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ToggleButton}">
              <igWindows:CardPanel Background="{TemplateBinding Background}">
                <ContentPresenter/>
              </igWindows:CardPanel>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource EmbeddedMenuStyle}"/>
      <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource EmbeddedMenuItemStyle}"/>
    </Style.Resources>
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="FixToFarEdgePrompt" Value="{Binding Value, Source={x:Static igDP:ResourcesDataPresenter.FieldFixToFarEdgePrompt}}"/>
    <Setter Property="FixToNearEdgePrompt" Value="{Binding Value, Source={x:Static igDP:ResourcesDataPresenter.FieldFixToNearEdgePrompt}}"/>
    <Setter Property="UnfixPrompt" Value="{Binding Value, Source={x:Static igDP:ResourcesDataPresenter.FieldUnfixPrompt}}"/>
    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBorder}}"/>
    <Setter Property="Cursor" Value="Hand"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:FixedFieldButton}">
          <Border x:Name="bd" Background="{StaticResource TransparentBrush}">
            <igWindows:CardPanel>
              <ToggleButton x:Name="toggleButton" Focusable="False" CommandParameter="{TemplateBinding Field}" HorizontalAlignment="Center" VerticalAlignment="Center" Background="{StaticResource TransparentBrush}">
                <Grid Width="22"
                      Height="22"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center">
                  <Path x:Name="btnFixedGlyph"
                        Width="7"
                        Height="9"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="{StaticResource PinnedIndicatorIcon}"
                        Fill="{TemplateBinding Foreground}"
                        Opacity="1"
                        Stretch="Fill"
                        Visibility="Collapsed" />
                  <Path x:Name="btnUnfixedGlyph"
                        Width="9"
                        Height="7"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="{StaticResource UnpinnedIndicatorIcon}"
                        Fill="{TemplateBinding Foreground}"
                        Opacity="1"
                        Stretch="Fill" />
                </Grid>
              </ToggleButton>
              <Menu x:Name="menu" Visibility="Collapsed" IsMainMenu="False">
                <MenuItem Padding="0" VerticalAlignment="Center">
                  <MenuItem.Header>
                    <igWindows:CardPanel>
                      <Grid Width="22"
                            Height="22"
                            Margin="0"
                            VerticalAlignment="Center"
                            Background="{StaticResource TransparentBrush}">
                        <Path x:Name="menuFixedGlyph"
                              Width="7"
                              Height="9"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Data="{StaticResource PinnedIndicatorIcon}"
                              Fill="{TemplateBinding Foreground}"
                              Opacity="1"
                              Stretch="Fill"
                              Visibility="Collapsed" />
                        <Path x:Name="MenuUnfixedGlyph"
                              Width="9"
                              Height="7"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Data="{StaticResource UnpinnedIndicatorIcon}"
                              Fill="{TemplateBinding Foreground}"
                              Opacity="1"
                              Stretch="Fill" />
                      </Grid>
                    </igWindows:CardPanel>
                  </MenuItem.Header>
                  <MenuItem x:Name="unfix" Header="{TemplateBinding UnfixPrompt}" Command="igDP:DataPresenterCommands.UnfixField" CommandParameter="{TemplateBinding Field}"/>
                  <MenuItem x:Name="fixNear" Header="{TemplateBinding FixToNearEdgePrompt}" Command="igDP:DataPresenterCommands.FixFieldNear" CommandParameter="{TemplateBinding Field}"/>
                  <MenuItem x:Name="fixFar" Header="{TemplateBinding FixToFarEdgePrompt}" Command="igDP:DataPresenterCommands.FixFieldFar" CommandParameter="{TemplateBinding Field}"/>
                </MenuItem>
              </Menu>
            </igWindows:CardPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonBackgroundHover}}"/>
            </Trigger>
            <!-- Set the correct image depending on the FixedLocation-->
            <DataTrigger Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToNearEdge">
              <Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible"/>
              <Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
              <Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible"/>
              <Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToFarEdge">
              <Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible"/>
              <Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
              <Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible"/>
              <Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <!-- Show/hide the menu and the toggleButton -->
            <DataTrigger Binding="{Binding Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="NearOrFar">
              <Setter TargetName="menu" Property="Visibility" Value="Visible"/>
              <Setter TargetName="toggleButton" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <!-- If AllowFixingResolved is set to Near or set to Far, set the appropriate command on the toggleButton depending on the current FixedLocation -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="Near"/>
                <Condition Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="Scrollable"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixFieldNear"/>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToNearEdge">
              <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixField"/>
            </DataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="Far"/>
                <Condition Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="Scrollable"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixFieldFar"/>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToFarEdge">
              <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixField"/>
            </DataTrigger>
            <!-- If AllowFixingResolved is set to NearOrFar, hide/show the appropriate menu items depending on the current FixedLocation -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="NearOrFar"/>
                <Condition Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="Scrollable"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="unfix" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="NearOrFar"/>
                <Condition Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToNearEdge"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="fixNear" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="NearOrFar"/>
                <Condition Binding="{Binding Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToFarEdge"/>
              </MultiDataTrigger.Conditions>
              <Setter TargetName="fixFar" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  ********************************** FixedRecordButton Style **********************************  -->
  <Style TargetType="{x:Type igDP:FixedRecordButton}">
    <Style.Resources>
      <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ToggleButton}">
              <igWindows:CardPanel Background="{TemplateBinding Background}">
                <ContentPresenter />
              </igWindows:CardPanel>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>
      <Style BasedOn="{StaticResource EmbeddedMenuStyle}" TargetType="{x:Type Menu}" />
      <Style BasedOn="{StaticResource EmbeddedMenuItemStyle}" TargetType="{x:Type MenuItem}" />
    </Style.Resources>
    <Setter Property="FixToBottomPrompt" Value="{Binding Value, Source={x:Static igDP:ResourcesDataPresenter.RecordFixToBottomPrompt}}" />
    <Setter Property="FixToTopPrompt" Value="{Binding Value, Source={x:Static igDP:ResourcesDataPresenter.RecordFixToTopPrompt}}" />
    <Setter Property="UnfixPrompt" Value="{Binding Value, Source={x:Static igDP:ResourcesDataPresenter.RecordUnfixPrompt}}" />
    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackground}}" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:FixedRecordButton}">
          <Border Margin="6 2" Background="{StaticResource TransparentBrush}">
            <igWindows:CardPanel>
              <!--  Set the background to transparent so it is Hit Testable. This will ensure that the button receives mouse clicks and the associated command is executed even when the user does not click directly on the embedded Path elements.  -->
              <Rectangle x:Name="rectangle" Fill="{StaticResource TransparentBrush}" />
              <ToggleButton x:Name="toggleButton"
                            Background="{StaticResource TransparentBrush}"
                            CommandParameter="{Binding}"
                            Focusable="False">
                <Grid HorizontalAlignment="Center" VerticalAlignment="Center" Height="16" Width="16">
                  <Path x:Name="btnFixedGlyph"
                        Width="7"
                        Height="9"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="{StaticResource PinnedIndicatorIcon}"
                        Fill="{TemplateBinding Foreground}"
                        Opacity="1"
                        Stretch="Fill"
                        Visibility="Collapsed" />
                  <Path x:Name="btnUnfixedGlyph"
                        Width="9"
                        Height="7"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="{StaticResource UnpinnedIndicatorIcon}"
                        Fill="{TemplateBinding Foreground}"
                        Stretch="Fill"/>
                </Grid>
              </ToggleButton>
              <Menu x:Name="menu"
                    IsMainMenu="False"
                    Visibility="Collapsed">
                <MenuItem Padding="0">
                  <MenuItem.Header>
                    <igWindows:CardPanel>
                      <Grid Width="12" Height="12">
                        <Path x:Name="menuFixedGlyph"
                              Width="7"
                              Height="9"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Data="{StaticResource PinnedIndicatorIcon}"
                              Fill="{TemplateBinding Foreground}"
                              Opacity="1"
                              Stretch="Fill"
                              Visibility="Collapsed" />
                        <Path x:Name="MenuUnfixedGlyph"
                              Width="9"
                              Height="7"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Data="{StaticResource UnpinnedIndicatorIcon}"
                              Fill="{TemplateBinding Foreground}"
                              Opacity="1"
                              Stretch="Fill" />
                      </Grid>
                    </igWindows:CardPanel>
                  </MenuItem.Header>
                  <MenuItem x:Name="unfix"
                            Command="igDP:DataPresenterCommands.UnfixRecord"
                            CommandParameter="{Binding}"
                            Header="{TemplateBinding UnfixPrompt}" />
                  <MenuItem x:Name="fixTop"
                            Command="igDP:DataPresenterCommands.FixRecordTop"
                            CommandParameter="{Binding}"
                            Header="{TemplateBinding FixToTopPrompt}" />
                  <MenuItem x:Name="fixBottom"
                            Command="igDP:DataPresenterCommands.FixRecordBottom"
                            CommandParameter="{Binding}"
                            Header="{TemplateBinding FixToBottomPrompt}" />
                </MenuItem>
              </Menu>
            </igWindows:CardPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackgroundHover}}" />
              <!--<Setter TargetName="btnFixedGlyph" Property="Fill" Value="{StaticResource FixedRecordButtonHoverBackgroundBrush}" />
                            <Setter TargetName="btnUnfixedGlyph" Property="Fill" Value="{StaticResource FixedRecordButtonHoverBackgroundBrush}" />-->
            </Trigger>
            <Trigger SourceName="toggleButton" Property="IsPressed" Value="True">
              <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackgroundHover}}" />
              <!--<Setter TargetName="btnFixedGlyph" Property="Fill" Value="{StaticResource FixedRecordButtonPressedBackgroundBrush}" />
                            <Setter TargetName="btnUnfixedGlyph" Property="Fill" Value="{StaticResource FixedRecordButtonPressedBackgroundBrush}" />-->
            </Trigger>
            <!--  Set the correct image depending on the FixedLocation  -->
            <DataTrigger Binding="{Binding FixedLocation}" Value="FixedToTop">
              <Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible" />
              <Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible" />
              <Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding FixedLocation}" Value="FixedToBottom">
              <Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible" />
              <Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible" />
              <Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed" />
            </DataTrigger>
            <!--  Show/hide the menu and the toggleButton  -->
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsFixedOnTopAllowed" Value="True" />
                <Condition Property="IsFixedOnBottomAllowed" Value="True" />
              </MultiTrigger.Conditions>
              <Setter TargetName="menu" Property="Visibility" Value="Visible" />
              <Setter TargetName="toggleButton" Property="Visibility" Value="Collapsed" />
            </MultiTrigger>
            <!--  If AllowRecordFixingResolved is set to Top or set to Bottom, set the appropriate command on the toggleButton depending on the current FixedLocation  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                <Condition Binding="{Binding IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                <Condition Binding="{Binding FixedLocation}" Value="Scrollable" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixRecordTop" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding FixedLocation}" Value="FixedToTop">
              <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixRecord" />
            </DataTrigger>
            <DataTrigger Binding="{Binding FixedLocation}" Value="FixedToBottom">
              <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixRecord" />
            </DataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                <Condition Binding="{Binding IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                <Condition Binding="{Binding FixedLocation}" Value="Scrollable" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixRecordBottom" />
            </MultiDataTrigger>
            <!--  If AllowRecordFixingResolved is set to TopOrBottom, hide/show the appropriate menu items depending on the current FixedLocation  -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                <Condition Binding="{Binding IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                <Condition Binding="{Binding FixedLocation}" Value="Scrollable" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="unfix" Property="Visibility" Value="Collapsed" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                <Condition Binding="{Binding IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                <Condition Binding="{Binding FixedLocation}" Value="FixedToTop" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="fixTop" Property="Visibility" Value="Collapsed" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                <Condition Binding="{Binding IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                <Condition Binding="{Binding FixedLocation}" Value="FixedToBottom" />
              </MultiDataTrigger.Conditions>
              <Setter TargetName="fixBottom" Property="Visibility" Value="Collapsed" />
            </MultiDataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ********************************** HeaderPrefixArea Style **********************************-->
  <Style TargetType="{x:Type igDP:HeaderPrefixArea}">
    <Style.Resources>
      <!-- JJD 04/18/16 - Cross Field Record Filtering
                      Moved Menu and MenuItem style definitions outside of this element so they can be used by FixedFieldButton, FixedRecordButton and HeaderPrefixArea   -->
      <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource EmbeddedMenuStyle}"/>
      <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource EmbeddedMenuItemStyle}"/>
    </Style.Resources>
    <Setter Property="HorizontalAlignment" Value="Center"/>
    <Setter Property="VerticalAlignment" Value="Center"/>
    <Setter Property="Visibility" Value="Visible"/>
    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"/>
    <Setter Property="ShowFieldChooserPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.ShowFieldChooserPrompt}}"/>
    <Setter Property="ShowCrossFieldRecordFiltersPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.ShowCrossFieldRecordFiltersPrompt}}"/>
    <Setter Property="ClearCrossFieldRecordFiltersPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.ClearCrossFieldRecordFiltersPrompt}}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:HeaderPrefixArea}">
          <Border BorderThickness="0 0 0 0" BorderBrush="{StaticResource CellVPBorderBrush}" VerticalAlignment="Stretch" MinHeight="24"  >
            <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
              <Button MinWidth="24"
                      x:Name="fieldChooserButton"
                      Style="{DynamicResource {x:Static igDP:DataPresenterBase.FieldChooserButtonStyleKey}}"
                      CommandParameter="{TemplateBinding FieldLayout}"
                      Visibility="Collapsed"/>

              <!-- JJD 04/15/16 - NA 2016 Vol 2 - Cross Field Filtering-->
              <Menu	x:Name="Menu"
                    IsMainMenu="False"
                    Visibility="Collapsed">
                <MenuItem Padding="0" ToolTip="{TemplateBinding ActiveFiltersDescription}">
                  <MenuItem.Header>
                    <igWindows:CardPanel>
                      <Grid Width="12" Height="12">
                        <Path x:Name="menuActiveFilters"
                              Visibility="Collapsed"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Height="12"
                              Width="12"
                              Stretch="Fill"
                              Opacity="1"
                              Data="M 1 7 L 6 7 L 6 8 L 5 8 L 5 9 L 4 9 L 4 11 L 3 11 L 3 9 L 2 9 L 2 8 L 1 8 L 1 7 ZM 2 0 L 2 1 L 2 6 L 0 6 L 0 12 L 7 12 L 7 9 L 11 9 L 12 9 L 12 1 L 12 0 L 11 0 L 3 0 L 2 0 ZM 7 7 L 10 7 L 10 6 L 7 6 L 3 6 L 3 1 L 11 1 L 11 8 L 7 8 L 7 7 ZM 4 4 L 4 5 L 10 5 L 10 4 L 4 4 ZM 4 2 L 4 3 L 10 3 L 10 2 L 4 2 Z"
                              Fill="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBorder}}" />
                        <Path x:Name="menuNoActiveFilters"
                              HorizontalAlignment="Right"
                              VerticalAlignment="Top"
                              Height="9"
                              Width="10"
                              Stretch="Fill"
                              Opacity="1"
                              Data="M 1 8 L 1 1 L 9 1 L 9 8 L 1 8 ZM 0 0 L 0 1 L 0 8 L 0 9 L 1 9 L 9 9 L 10 9 L 10 1 L 10 0 L 9 0 L 1 0 L 0 0 ZM 2 6 L 2 7 L 8 7 L 8 6 L 2 6 ZM 2 4 L 2 5 L 8 5 L 8 4 L 2 4 ZM 2 2 L 2 3 L 8 3 L 8 2 L 2 2 Z"
                              Fill="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBorder}}" />
                      </Grid>
                    </igWindows:CardPanel>
                  </MenuItem.Header>
                  <MenuItem x:Name="ShowFieldChooser" Header="{TemplateBinding ShowFieldChooserPrompt}" Command="igDP:DataPresenterCommands.ShowFieldChooser" Visibility="{TemplateBinding ShowFieldChooserVisibility}" CommandParameter="{TemplateBinding FieldLayout}"/>
                  <MenuItem x:Name="ShowCrossFieldRecordFilters" Header="{TemplateBinding ShowCrossFieldRecordFiltersPrompt}" Command="igDP:DataPresenterCommands.ShowCrossFieldRecordFilters" Visibility="{TemplateBinding ShowCrossFieldRecordFiltersVisibility}" CommandParameter="{Binding Path=DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igDP:HeaderPresenter}}}"/>
                  <MenuItem x:Name="ClearCrossFieldRecordFilters" Header="{TemplateBinding ClearCrossFieldRecordFiltersPrompt}" Command="igDP:DataPresenterCommands.ClearCrossFieldRecordFilters" Visibility="{TemplateBinding ClearCrossFieldRecordFiltersVisibility}" CommandParameter="{Binding Path=DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igDP:HeaderPresenter}}}"/>
                </MenuItem>
              </Menu>

              <ContentPresenter	Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
            </StackPanel>
          </Border>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=FieldLayout.HeaderPrefixAreaDisplayModeResolved}" Value="FieldChooserButton">
              <Setter TargetName="fieldChooserButton" Property="Visibility" Value="Visible" />
              <Setter TargetName="fieldChooserButton" Property="Command" Value="{x:Static igDP:DataPresenterCommands.ShowFieldChooser}" />
            </DataTrigger>
            <!-- JJD 04/15/16 - NA 2016 Vol 2 - Cross Field Filtering-->
            <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=FieldLayout.HeaderPrefixAreaDisplayModeResolved}" Value="Menu">
              <Setter TargetName="Menu" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <Trigger Property="HasActiveFilters" Value="True">
              <Setter TargetName="menuActiveFilters" Property="Visibility" Value="Visible" />
              <Setter TargetName="menuNoActiveFilters" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="menuActiveFilters" Property="Fill" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackgroundHover}}" />
              <Setter TargetName="menuNoActiveFilters" Property="Fill" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBackgroundHover}}"  />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  *********************************  CustomFilterSelectionControl Style *********************************  -->
  <Style TargetType="{x:Type igDP:CustomFilterSelectionControl}">
    <Style.Resources>
      <Style TargetType="{x:Type igWindows:ComparisonOperatorSelector}">
        <Setter Property="DropDownButtonStyle">
          <Setter.Value>
            <Style TargetType="{x:Type ToggleButton}">
              <Setter Property="OverridesDefaultStyle" Value="True" />
              <Setter Property="MinWidth" Value="0" />
              <Setter Property="MinHeight" Value="0" />
              <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
              <Setter Property="Focusable" Value="False" />
              <Setter Property="Padding" Value="2" />
              <Setter Property="ClickMode" Value="Press" />
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border igWindows:Utilities.SnapElementToDevicePixels="True"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                      <StackPanel Orientation="Horizontal">
                        <igWindows:AutoDisabledImage MinWidth="14"
                                                     MinHeight="14"
                                                     Margin="{TemplateBinding Padding}"
                                                     HorizontalAlignment="Center"
                                                     VerticalAlignment="Center"
                                                     Source="{Binding Path=(igWindows:ComparisonOperatorSelector.Selector).SelectedOperatorInfo.Image, RelativeSource={RelativeSource Self}}"
                                                     Stretch="None" />
                        <TextBlock Margin="6,0,0,0"
                                   VerticalAlignment="Center"
                                   Text="{Binding Path=(igWindows:ComparisonOperatorSelector.Selector).SelectedOperatorInfo.Description, RelativeSource={RelativeSource Self}}" />
                      </StackPanel>
                    </Border>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </Setter.Value>
        </Setter>
      </Style>
    </Style.Resources>
    <Setter Property="MinHeight" Value="240" />
    <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CustomFilterControlToolbarBrush}}" />
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CustomFilterControlHeaderBrush}}" />
    <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CustomFilterControlTextblockBrush}}" />
    <Setter Property="AndLogicalOperatorBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.AndLogicalOperatorBrush}}" />
    <Setter Property="OrLogicalOperatorBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.OrLogicalOperatorBrush}}" />
    <Setter Property="LogicalOperatorColumnWidth" Value="12" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:CustomFilterSelectionControl}">
          <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Border Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CustomFilterControlHeaderBrush}}">
                <TextBlock Margin="6,4"
                           FontSize="20"
                           Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ForegroundBrush}}"
                           Text="{TemplateBinding FieldDescription}" />
              </Border>
              <Border Grid.Row="1"
                      Background="{TemplateBinding Background}"
                      BorderBrush="{StaticResource FilterDescriptionBorderbrush}"
                      BorderThickness="0,1"
                      SnapsToDevicePixels="True">
                <Grid x:Name="toolbar">
                  <StackPanel Margin="12"
                              VerticalAlignment="Top"
                              Orientation="Horizontal">
                    <Button Margin="0,0,8,0"
                            Command="{x:Static igDP:CustomFilterSelectionControl.AddConditionCommand}"
                            Style="{StaticResource IconButtonStyle}"
                            Tag="{TemplateBinding AddConditionLabel}">
                      <Path Width="8"
                            Height="8"
                            Data="{StaticResource PlusIcon}"
                            Fill="{StaticResource CustomFilterButtonGlyph}"
                            Stretch="Fill" />
                    </Button>
                    <Button Margin="0,0,12,0"
                            Command="{x:Static igDP:CustomFilterSelectionControl.RemoveSelectedConditionsCommand}"
                            Style="{StaticResource IconButtonStyle}"
                            Tag="{TemplateBinding RemoveSelectedConditionsLabel}">
                      <Path Width="8"
                            Height="2"
                            Margin="2,0,0,0"
                            HorizontalAlignment="Left"
                            Data="{StaticResource MinusIcon}"
                            Stretch="Fill"
                            Fill="{StaticResource CustomFilterButtonGlyph}" />
                    </Button>
                    <TextBlock x:Name="GroupSelected"
                               Margin="8,0"
                               VerticalAlignment="Center"
                               Foreground="{TemplateBinding Foreground}"
                               Text="{TemplateBinding GroupSelectedLabel}"
                               TextWrapping="Wrap" />
                    <Button Margin="0,0,8,0"
                            Command="{x:Static igDP:CustomFilterSelectionControl.GroupSelectedConditionsAsAndGroupCommand}"
                            Style="{StaticResource IconButtonStyle}"
                            Tag="{TemplateBinding GroupSelectedConditionsAsAndGroupLabel}">
                      <Path Width="14"
                            Height="14"
                            Margin="1,0,0,0"
                            Data="{StaticResource CreateAndGroup}"
                            Fill="{StaticResource CustomFilterButtonGlyph}"
                            Stretch="Fill" />
                      <!--Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType=ContentPresenter}}"-->
                    </Button>
                    <Button Margin="0,0,8,0"
                            Command="{x:Static igDP:CustomFilterSelectionControl.GroupSelectedConditionsAsOrGroupCommand}"
                            Style="{StaticResource IconButtonStyle}"
                            Tag="{TemplateBinding GroupSelectedConditionsAsOrGroupLabel}">
                      <Path Width="14"
                            Height="14"
                            Margin="1,0,0,0"
                            Data="{StaticResource CreateOrGroup}"
                            Fill="{StaticResource CustomFilterButtonGlyph}"
                            Stretch="Fill" />
                    </Button>
                    <Button Margin="0,0,8,0"
                            Command="{x:Static igDP:CustomFilterSelectionControl.ToggleSelectedGroupLogicalOperatorCommand}"
                            Style="{StaticResource IconButtonStyle}"
                            Tag="{TemplateBinding ToggleOperatorOfSelectedConditionsLabel}">
                      <Path Width="14"
                            Height="14"
                            Margin="2,0,0,0"
                            HorizontalAlignment="Left"
                            Data="{StaticResource ToggleGroup}"
                            Fill="{StaticResource CustomFilterButtonGlyph}"
                            Stretch="Fill" />
                    </Button>
                    <Button Margin="0"
                            Command="{x:Static igDP:CustomFilterSelectionControl.UngroupSelectedConditionsCommand}"
                            Style="{StaticResource IconButtonStyle}"
                            Tag="{TemplateBinding UngroupSelectedConditionsLabel}">
                      <Path Width="14"
                            Height="14"
                            Margin="1,0,0,0"
                            Data="{StaticResource Ungroup}"
                            Fill="{StaticResource CustomFilterButtonGlyph}"
                            Stretch="Fill" />
                    </Button>
                  </StackPanel>
                </Grid>
              </Border>
              <Grid Grid.Row="2">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height=".3*" />
                </Grid.RowDefinitions>
                <Border>
                  <igDP:XamDataGrid x:Name="PART_ConditionsGrid" GroupByAreaLocation="None">
                    <igDP:XamDataGrid.Resources>
                      <Style TargetType="{x:Type igDP:DataRecordPresenter}">
                        <Setter Property="Margin" Value="0" />
                      </Style>
                    </igDP:XamDataGrid.Resources>
                  </igDP:XamDataGrid>
                </Border>
                <Border Grid.Row="1"
                        Background="{StaticResource FilterDescriptionBackgroundBrush}"
                        BorderBrush="{StaticResource FilterDescriptionBorderbrush}"
                        BorderThickness="0,1">
                  <ScrollViewer Margin="0"
                                Style="{StaticResource ScrollViewerStyle}"
                                VerticalScrollBarVisibility="Auto">
                    <TextBlock Margin="12"
                               Text="{TemplateBinding FilterSummaryDescription}"
                               TextWrapping="Wrap" />
                  </ScrollViewer>
                </Border>
              </Grid>
              <Border x:Name="FooterBackground"
                      Grid.Row="3"
                      Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CustomFilterControlToolbarBrush}}">
                <DockPanel Margin="12"
                           VerticalAlignment="Top"
                           KeyboardNavigation.TabNavigation="Local"
                           LastChildFill="False">
                  <Button MinWidth="100"
                          Margin="0,0,8,0"
                          Command="{x:Static igDP:CustomFilterSelectionControl.CancelChangesCommand}"
                          Content="{TemplateBinding CancelButtonLabel}"
                          DockPanel.Dock="Right"
                          IsCancel="true"
                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ButtonStyle}}"
                          TabIndex="1" />
                  <Button MinWidth="100"
                          Margin="0,0,8,0"
                          Command="{x:Static igDP:CustomFilterSelectionControl.CommitChangesCommand}"
                          Content="{TemplateBinding OkButtonLabel}"
                          DockPanel.Dock="Right"
                          IsDefault="true"
                          Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=ButtonStyle}}"
                          TabIndex="0" />
                  <Border x:Name="groupContainer">
                    <StackPanel Orientation="Horizontal">
                      <StackPanel Orientation="Horizontal">
                        <Rectangle Width="16"
                                   Height="16"
                                   Margin="0,0,8,0"
                                   VerticalAlignment="Center"
                                   Fill="{TemplateBinding AndLogicalOperatorBrush}" />
                        <TextBlock Margin="0,0,20,0"
                                   VerticalAlignment="Center"
                                   Text="{TemplateBinding AndGroupLegendDescription}" />
                      </StackPanel>
                      <StackPanel Orientation="Horizontal">
                        <Rectangle Width="16"
                                   Height="16"
                                   Margin="0,0,8,0"
                                   VerticalAlignment="Center"
                                   Fill="{TemplateBinding OrLogicalOperatorBrush}" />
                        <TextBlock Margin="0,0,20,0"
                                   VerticalAlignment="Center"
                                   Text="{TemplateBinding OrGroupLegendDescription}" />
                      </StackPanel>
                    </StackPanel>
                  </Border>
                </DockPanel>
              </Border>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  *********************************  CarouselBreadcrumbControl Style *********************************  -->
  <Style TargetType="{x:Type igDP:CarouselBreadcrumbControl}">
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="Padding" Value="6,4" />
    <Setter Property="Background" Value="{StaticResource CarouselBreadcrumbControlBackgroundBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource CarouselBreadcrumbControlBorderBrush}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:CarouselBreadcrumbControl}">
          <Border x:Name="Border"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  CornerRadius="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid},
                                                                                 BreadcrumbCornerRadius}}"
                  Padding="{TemplateBinding Padding}">
            <Grid>
              <ItemsControl ItemsSource="{Binding Path=Breadcrumbs, RelativeSource={RelativeSource TemplatedParent}}">
                <ItemsControl.ItemsPanel>
                  <ItemsPanelTemplate>
                    <StackPanel Orientation="{Binding Path=Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igDP:CarouselBreadcrumbControl}}}" />
                  </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
              </ItemsControl>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="HasCrumbs" Value="false">
              <Setter TargetName="Border" Property="Visibility" Value="Hidden" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  *********************************  CarouselBreadcrumb Style *********************************  -->
  <Style TargetType="{x:Type igDP:CarouselBreadcrumb}">
    <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
    <Setter Property="Foreground" Value="{StaticResource BreadcrumbForegroundBrush}" />
    <Setter Property="Background" Value="{StaticResource BreadcrumbBackgroundBrush}" />
    <Setter Property="Padding" Value="6 2 6 4" />
    <Setter Property="BorderBrush" Value="{StaticResource BreadcrumbBorderBrush}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="RenderTransform">
      <Setter.Value>
        <TranslateTransform X="0" Y="0" />
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:CarouselBreadcrumb}">
          <StackPanel x:Name="itemContainer"
                      Opacity=".7"
                      Orientation="Horizontal">
            <Border x:Name="itemBG"
                    Margin="0,0,4,0"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="0"
                    Cursor="{TemplateBinding Cursor}">
              <ContentPresenter Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}" />
            </Border>
            <Path x:Name="separator"
                  Width="10"
                  Height="6"
                  HorizontalAlignment="Left"
                  VerticalAlignment="Center"
                  Data="M 1.6118 6 L 0 4.5825 L 5 0 L 10 4.5825 L 8.511 5.9325 L 5.0245 2.7823 L 1.6118 6 Z"
                  Fill="{StaticResource BreadcrumbSeparatorFillBrush}"
                  RenderTransformOrigin="0.5,0.5"
                  Stretch="Fill">
              <Path.RenderTransform>
                <TransformGroup>
                  <ScaleTransform />
                  <SkewTransform />
                  <RotateTransform Angle="90" />
                  <TranslateTransform />
                </TransformGroup>
              </Path.RenderTransform>
            </Path>
          </StackPanel>
          <ControlTemplate.Triggers>
            <Trigger SourceName="itemBG" Property="IsMouseOver" Value="True">
              <Setter TargetName="itemContainer" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsLastBreadcrumb" Value="true">
              <Setter TargetName="separator" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
              <BeginStoryboard>
                <Storyboard Duration="0:0:0.5">
                  <DoubleAnimation BeginTime="0:0:0" Duration="0:0:00.35" FillBehavior="HoldEnd" From="50" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" To="0" />
                  <DoubleAnimation BeginTime="0:0:0" Duration="0:0:00.5" FillBehavior="HoldEnd" From="0" Storyboard.TargetProperty="(UIElement.Opacity)" To="1" />
                </Storyboard>
              </BeginStoryboard>
            </EventTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  *********************************  CarouselItem Style *********************************  -->
  <Style TargetType="{x:Type igDP:CarouselItem}">
    <Setter Property="Width" Value="400" />
    <Setter Property="ItemDisappearingStoryboard" Value="{StaticResource ItemDisappearing}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:CarouselItem}">
          <Grid x:Name="root">
            <Grid.RowDefinitions>
              <RowDefinition Height="{Binding Path=(igWindows:XamCarouselPanel.ViewSettings).(igWindows:CarouselViewSettings.ItemSize).Height, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igDP:CarouselViewPanel}}}" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <ScrollViewer x:Name="ScrollViewer"
                          VerticalAlignment="Bottom"
                          Focusable="false"
                          HorizontalScrollBarVisibility="{TemplateBinding ItemHorizontalScrollBarVisibility}"
                          VerticalScrollBarVisibility="{TemplateBinding ItemVerticalScrollBarVisibility}">
              <ScrollViewer.Resources>
                <Style BasedOn="{StaticResource ScrollViewerStyle}" TargetType="{x:Type ScrollViewer}">
                  <Setter Property="Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid x:Name="Grid">
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                          </Grid.ColumnDefinitions>
                          <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                          </Grid.RowDefinitions>
                          <Border Margin="0">
                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                                    Grid.Row="0"
                                                    Grid.Column="0"
                                                    Margin="{TemplateBinding Padding}"
                                                    CanContentScroll="{TemplateBinding CanContentScroll}"
                                                    CanHorizontallyScroll="False"
                                                    CanVerticallyScroll="False"
                                                    Content="{TemplateBinding Content}"
                                                    ContentTemplate="{TemplateBinding ContentTemplate}" />
                          </Border>
                          <ScrollBar x:Name="PART_VerticalScrollBar"
                                     Grid.Row="0"
                                     Grid.Column="1"
                                     AutomationProperties.AutomationId="VerticalScrollBar"
                                     Cursor="Arrow"
                                     Maximum="{TemplateBinding ScrollableHeight}"
                                     Minimum="0"
                                     Style="{StaticResource ScrollBarStyle}"
                                     ViewportSize="{TemplateBinding ViewportHeight}"
                                     Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                     Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                          <ScrollBar x:Name="PART_HorizontalScrollBar"
                                     Grid.Row="1"
                                     Grid.Column="0"
                                     AutomationProperties.AutomationId="HorizontalScrollBar"
                                     Cursor="Arrow"
                                     Maximum="{TemplateBinding ScrollableWidth}"
                                     Minimum="0"
                                     Orientation="Horizontal"
                                     Style="{StaticResource ScrollBarStyle}"
                                     ViewportSize="{TemplateBinding ViewportWidth}"
                                     Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                     Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Grid>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </ScrollViewer.Resources>
              <Viewbox x:Name="ViewBox"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Bottom">
                <Grid x:Name="itemContentHolder">
                  <!--  The item's content  -->
                    <ContentControl x:Name="itemContent"
                                    Grid.Row="0"
                                    Content="{TemplateBinding Content}"
                                    Focusable="false" />
                  <Border x:Name="itemContentHolderBackground"
                          CornerRadius="0"
                          BorderBrush="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, GroupByLabelHighlightBorder}}" 
                          BorderThickness="1"
                          IsHitTestVisible="False"/>
                </Grid>
              </Viewbox>
            </ScrollViewer>

            <!--  Glyphs for manipulating the record  -->
            <Grid x:Name="glyphCanvas" Grid.Row="0">
              <!--  Note that this button is intentionally being placed outside the item so as not to interfere with the item sizing  -->
              <igWindows:ExpansionIndicator x:Name="ExpansionIndicator"
                                            Canvas.Left="{Binding Path=ActualWidth, ElementName=glyphCanvas}"
                                            Margin="0 0 -15 -3"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Bottom"
                                            Background="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid},CarouselItemExpansionIndicator}}"
                                            IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                            Visibility="{Binding Path=ExpansionIndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}}">
                <igWindows:ExpansionIndicator.Template>
                  <ControlTemplate TargetType="{x:Type igWindows:ExpansionIndicator}">
                    <Grid Background="{StaticResource TransparentBrush}">
                      <Border Padding="5">
                        <Path x:Name="selectorArrow"
                              Width="6"
                              Height="6"
                              Margin="{TemplateBinding Padding}"
                              HorizontalAlignment="Right"
                              VerticalAlignment="Bottom"
                              Cursor="{TemplateBinding Cursor}"
                              Data="M10,0L10,10 0,10z"
                              Fill="{TemplateBinding Background}"
                              RenderTransformOrigin="0.5,0.5"
                              Stretch="Fill"
                              Visibility="Visible" />
                      </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                      <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="selectorArrow" Property="Fill" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackDropDownArrowBrushKey}}" />
                      </Trigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </igWindows:ExpansionIndicator.Template>
              </igWindows:ExpansionIndicator>
            </Grid>
            <!--  The reflection of the item's content  -->
            <Border x:Name="reflection"
                    Grid.Row="1"
                    Width="{Binding Path=ActualWidth, ElementName=ScrollViewer}"
                    Height="{Binding Path=ActualHeight, ElementName=ScrollViewer}"
                    Margin="0,1,0,0"
                    VerticalAlignment="Top"
                    IsHitTestVisible="False"
                    Visibility="{Binding Path=ReflectionVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igDP:CarouselViewPanel}}}">
              <Border.Background>
                <VisualBrush AlignmentX="Center"
                             AlignmentY="Bottom"
                             Opacity=".15"
                             Stretch="None"
                             Visual="{Binding ElementName=ScrollViewer}">
                  <VisualBrush.RelativeTransform>
                    <TransformGroup>
                      <MatrixTransform Matrix="1,0,0,-1,0,0" />
                      <TranslateTransform Y="1" />
                    </TransformGroup>
                  </VisualBrush.RelativeTransform>
                </VisualBrush>
              </Border.Background>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="AutoScaleItemContentsToFit" Value="true">
              <Setter TargetName="ScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
              <Setter TargetName="ScrollViewer" Property="VerticalScrollBarVisibility" Value="Disabled" />
              <Setter TargetName="ScrollViewer" Property="Focusable" Value="False" />
              <Setter TargetName="ViewBox" Property="Stretch" Value="Uniform" />
              <Setter TargetName="ViewBox" Property="StretchDirection" Value="Both" />
            </Trigger>
            <Trigger Property="IsOpacityReduced" Value="True">
              <Setter TargetName="root" Property="Opacity" Value="0.35" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  *********************************  ScrollViewer Style *********************************  -->
  <!--  Base style for the buttons in the Card Header  -->
  <Style x:Key="CardButtonStyleBase" TargetType="{x:Type ButtonBase}">
    <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
    <Setter Property="BorderBrush" Value="{StaticResource TransparentBrush}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Border.CornerRadius" Value="0" />
    <Setter Property="Width" Value="13" />
    <Setter Property="Height" Value="12" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CollapseCardGlyphNormalBrushKey}}" />
    <Style.Triggers>
      <!--  HotTracked Visual in an Active Card  -->
      <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={x:Static RelativeSource.Self}}" Value="True">
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardButtonBackgroundHottrackBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardButtonBorderHottrackBrushKey}}" />
      </DataTrigger>

      <!--  IsPressed Visual  -->
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardButtonBackgroundPressedBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardButtonBorderPressedBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CollapseCardGlyphPressedBrushKey}}" />
      </Trigger>

      <DataTrigger Binding="{Binding Path=IsActive}" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CollapseCardGlyphActiveBrushKey}}" />
      </DataTrigger>

      <!--  IsEnabled Visual  -->
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Opacity" Value="0.3" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!--  *********************************  CollapseCardButton Style *********************************  -->
  <Style x:Key="{x:Static igDP:CardHeaderPresenter.CollapseCardButtonStyleKey}" BasedOn="{StaticResource CardButtonStyleBase}" TargetType="{x:Type Button}">
    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonBackground}}"/>
    <Setter Property="ToolTip" Value="{StaticResource collapseCardToolTip}" />
    <Setter Property="MinWidth" Value="22" />
    <Setter Property="MinHeight" Value="22" />
    <Setter Property="ClickMode" Value="Release" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border x:Name="bg"
                  Background="{StaticResource TransparentBrush}"
                  BorderBrush="{StaticResource TransparentBrush}"
                  BorderThickness="1"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <igWindows:CardPanel>
              <Path x:Name="NotCollapsedImage"
                    Width="10"
                    Height="6"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{StaticResource VArrowDown}"
                    Fill="{TemplateBinding Foreground}"
                    Stretch="Fill"
                    Visibility="Collapsed" />
              <Path x:Name="CollapsedImage"
                    Width="10"
                    Height="6"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{StaticResource VArrowTop}"
                    Fill="{TemplateBinding Foreground}"
                    Stretch="Fill" />
            </igWindows:CardPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonBackgroundHover}}" />
              <!--<Setter TargetName="NotCollapsedImage" Property="Fill" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonBackgroundHover}}" />
                            <Setter TargetName="CollapsedImage" Property="Fill" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonBackgroundHover}}" />-->
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsContainingCardCollapsedResolved}" Value="True">
              <Setter TargetName="NotCollapsedImage" Property="Visibility" Value="Visible" />
              <Setter TargetName="CollapsedImage" Property="Visibility" Value="Collapsed" />
              <Setter Property="ToolTip" Value="{StaticResource unCollapseCardToolTip}" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  *********************************  CollapseEmptyCellsButton Style *********************************  -->
  <Style x:Key="{x:Static igDP:CardHeaderPresenter.CollapseEmptyCellsButtonStyleKey}" BasedOn="{StaticResource CardButtonStyleBase}" TargetType="{x:Type Button}">
    <Setter Property="MinWidth" Value="22" />
    <Setter Property="MinHeight" Value="22" />
    <Setter Property="ToolTip" Value="{StaticResource collapseEmptyCellsToolTip}" />
    <Setter Property="ClickMode" Value="Release" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{StaticResource TransparentBrush}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <igWindows:CardPanel>
              <Grid>
                <Ellipse x:Name="glyphStroke"
                         Width="10"
                         Height="10"
                         Stroke="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonBackground}}"
                         StrokeThickness="1" />
                <Ellipse x:Name="glyphCenter"
                         Width="6"
                         Height="6"
                         Fill="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonBackground}}" />
              </Grid>
            </igWindows:CardPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="glyphStroke" Property="Stroke" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CollapseCellGlyphCheckedStrokeBrushKey}}"/>
              <Setter TargetName="glyphCenter" Property="Fill" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CollapseCellGlyphCheckedBackgroundBrushKey}}"/>
            </Trigger>

            <DataTrigger Binding="{Binding Path=ShouldCollapseEmptyCellsResolved}" Value="True">
              <!--<Setter TargetName="glyphStroke" Property="Stroke" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonBackground}}"/>
							<Setter TargetName="glyphCenter" Property="Fill" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonBackground}}"/>-->
              <Setter TargetName="glyphCenter" Property="Width" Value="0"/>
              <Setter TargetName="glyphCenter" Property="Height" Value="0"/>
              <Setter Property="ToolTip" Value="{StaticResource unCollapseEmptyCellsToolTip}" />
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  ********************************** CardHeaderPresenter Style **********************************  -->
  <Style TargetType="{x:Type igDP:CardHeaderPresenter}">
    <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
    <Setter Property="MinHeight" Value="22" />
    <Setter Property="TextBlock.TextTrimming" Value="CharacterEllipsis" />
    <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundNormalBrushKey}}" />
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardBorderBrushKey}}" />
    <Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />
    <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextNormalBrushKey}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:CardHeaderPresenter}">
          <Grid>
            <Border x:Name="Bd" Background="{TemplateBinding Background}">
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="CardHeader"
                                  Margin="5,0"
                                  HorizontalAlignment="Stretch"
                                  VerticalAlignment="Center"
                                  Content="{TemplateBinding Content}"
                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                <Border Grid.ColumnSpan="3"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true" />
                <!--  Button to Collapse/Uncollapse Empty Cells  -->
                <Button x:Name="ToggleEmptyCellsCollapsedStateButton"
                        Grid.Column="1"
                        Margin="2,0"
                        Command="{x:Static igDP:DataPresenterCommands.ToggleEmptyCardCellsCollapsedState}"
                        CommandParameter="{Binding}"
                        Style="{DynamicResource {x:Static igDP:CardHeaderPresenter.CollapseEmptyCellsButtonStyleKey}}"
                        Visibility="{Binding Card.CollapseEmptyCellsButtonVisibility, Mode=OneWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                <!--  Button to Collapse/Uncollapse the Card  -->
                <Button x:Name="ToggleCollapsedStateButton"
                        Grid.Column="2"
                        Margin="2,0,5,0"
                        Command="{x:Static igDP:DataPresenterCommands.ToggleCardCollapsedState}"
                        CommandParameter="{Binding}"
                        Style="{DynamicResource {x:Static igDP:CardHeaderPresenter.CollapseCardButtonStyleKey}}"
                        Visibility="{Binding Card.CollapseCardButtonVisibility, Mode=OneWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
              </Grid>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding IsFilterRecord, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
              <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundActiveBrushKey}}" />
              <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundActiveBrushKey}}" />
              <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextActiveBrushKey}}" />
              <Setter TargetName="ToggleCollapsedStateButton" Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextActiveBrushKey}}" />
              <Setter TargetName="ToggleEmptyCellsCollapsedStateButton" Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextActiveBrushKey}}" />
            </DataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsActive, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True" />
                <Condition Binding="{Binding Path=IsAddRecord, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundActiveBrushKey}}" />
              <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundActiveBrushKey}}" />
              <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextNormalBrushKey}}" />
              <Setter TargetName="ToggleCollapsedStateButton" Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextNormalBrushKey}}" />
              <Setter TargetName="ToggleEmptyCellsCollapsedStateButton" Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextNormalBrushKey}}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsActive, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True" />
                <Condition Binding="{Binding Path=IsAddRecord, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False" />
                <Condition Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False" />
                <Condition Binding="{Binding IsFilterRecord, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundActiveBrushKey}}" />
              <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundActiveBrushKey}}" />
              <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextActiveBrushKey}}" />
              <Setter TargetName="ToggleCollapsedStateButton" Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextActiveBrushKey}}" />
              <Setter TargetName="ToggleEmptyCellsCollapsedStateButton" Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextActiveBrushKey}}" />
            </MultiDataTrigger>
            <Trigger SourceName="ToggleCollapsedStateButton" Property="IsPressed" Value="True">
              <Setter TargetName="ToggleCollapsedStateButton" Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.CollapseCardGlyphPressedBrushKey}}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>

      <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
        <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundActiveBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBackgroundActiveBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderTextActiveBrushKey}}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding Path=IsAddRecord, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
        <Setter Property="FontFamily" Value="Segoe UI Semibold" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowHeaderBrushKey}}" />

      </DataTrigger>
      <DataTrigger Binding="{Binding IsFilterRecord, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
        <Setter Property="FontFamily" Value="Segoe UI Semibold" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderFilterRecordHeaderBrushKey}}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <!--  ********************************** CardViewCard Style **********************************  -->
  <Style TargetType="{x:Type igDP:CardViewCard}">
    <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardBackgroundBrushKey}}" />
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardBorderBrushKey}}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Visibility" Value="{Binding VisibilityResolved}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:CardViewCard}">
          <Border x:Name="Bd"
                  Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Padding="{TemplateBinding Padding}">
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="0" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <!--  Element to simulate CardHeaderPresenter when HeaderVisibilty=Hidden  -->
              <Border x:Name="HeaderBgWhenVisHidden"
                      Background="{Binding Background, ElementName=CardHeaderPresenter}"
                      Visibility="Collapsed" />
              <!--  Card Header  -->
              <igDP:CardHeaderPresenter x:Name="CardHeaderPresenter"
                                        Card="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                        Content="{Binding Header, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                        ContentTemplate="{Binding HeaderTemplate, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                        ContentTemplateSelector="{Binding HeaderTemplateSelector, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                        Visibility="{Binding HeaderVisibility, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
              <Rectangle x:Name="captionStroke"
                         Grid.Row="1"
                         Height="1"
                         Fill="{TemplateBinding BorderBrush}"
                         Visibility="Collapsed" />
              <Rectangle x:Name="outerBd"
                         Grid.Row="1"
                         Grid.Column="1"
                         Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardChromeBorderBrushKey}}"
                         Visibility="Collapsed" />
              <Border x:Name="innerBd"
                      Grid.Row="2"
                      Margin="0"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="2"
                      SnapsToDevicePixels="true">
                <!--  Card Content  -->
                <ScrollViewer x:Name="CardContentScrollViewer"
                              CanContentScroll="False"
                              Focusable="False"
                              HorizontalScrollBarVisibility="Auto"
                              Style="{StaticResource ScrollViewerStyle}"
                              VerticalScrollBarVisibility="Auto">
                  <ContentControl x:Name="CardContent"
                                  Content="{TemplateBinding Content}"
                                  ContentTemplate="{TemplateBinding ContentTemplate}" />
                </ScrollViewer>
              </Border>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsCollapsed" Value="True">
              <Setter TargetName="innerBd" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="Bd" Property="VerticalAlignment" Value="Top" />
              <Setter TargetName="captionStroke" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="HeaderVisibility" Value="Collapsed">
              <Setter TargetName="captionStroke" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="innerBd" Property="Margin" Value="1" />
              <Setter TargetName="innerBd" Property="BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="HeaderVisibility" Value="Hidden">
              <Setter TargetName="HeaderBgWhenVisHidden" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True" />
            <Trigger Property="IsActive" Value="True" />
            <Trigger Property="IsAddRecord" Value="True">
              <Setter TargetName="CardHeaderPresenter" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowHeaderBrushKey}}" />
              <Setter TargetName="outerBd" Property="Fill" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowCardChromeBrushKey}}" />
            </Trigger>
            <Trigger Property="IsFilterRecord" Value="True">
              <Setter TargetName="CardHeaderPresenter" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderFilterRecordHeaderBrushKey}}" />
              <Setter TargetName="outerBd" Property="Fill" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderFilterRecordCardChromeBrushKey}}" />
              <Setter TargetName="CardHeaderPresenter" Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowHeaderTextBrushKey}}" />
              <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderFilterRecordHeaderBrushKey}}" />
            </Trigger>
            <Trigger Property="IsAddRecord" Value="True">
              <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowHeaderBrushKey}}" />
            </Trigger>
            <Trigger Property="IsOpacityReduced" Value="True">
              <Setter TargetName="Bd" Property="Opacity" Value="0.3" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  ********************************** RootMenu Style **********************************  -->
  <Style x:Key="RootMenuStyle" TargetType="{x:Type Menu}">
    <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
    <Setter Property="IsMainMenu" Value="False" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <igWindows:CardPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  ********************************** SubMenuItem Template **********************************  -->
  <ControlTemplate x:Key="subMenuItemTemplate" TargetType="{x:Type igDP:FieldMenuItem}">
    <igWindows:CardPanel>
      <Border x:Name="Highlight"
              Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackFillBrushKey}}"
              BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackOuterBorderBrushKey}}"
              BorderThickness="{StaticResource DefaultBorderThickness}"
              SnapsToDevicePixels="True"
              Visibility="Collapsed">
        <Border x:Name="HighlightInner" Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackFillBrushKey}}" />
      </Border>
      <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconArea" />
          <ColumnDefinition Width="Auto" />
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="24" />
        </Grid.ColumnDefinitions>
        <!--  Icon Area Background  -->
        <Border x:Name="IconAreaBackground"
                Grid.Column="0"
                Margin="0"
                Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemIconAreaBrushKey}}"
                BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemIconAreaBorderBrushKey}}"
                BorderThickness="0" />
        <!--  Icon Area  -->
        <Border x:Name="IconArea"
                Grid.Column="0"
                Margin="3">
          <Border x:Name="OrangeCheckBox"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  BorderThickness="1"
                  Padding="1"
                  SnapsToDevicePixels="True">
            <igWindows:CardPanel Width="15" Height="15">
              <!--  Small check mark  -->
              <igWindows:CardPanel x:Name="GlyphPanel"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   FlowDirection="LeftToRight"
                                   Visibility="Collapsed">
                <igWindows:CardPanel HorizontalAlignment="Left"
                                     VerticalAlignment="Top"
                                     SnapsToDevicePixels="True">
                  <Path Width="9"
                        Height="8"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Center"
                        Data="{StaticResource CheckBoxCheck}"
                        Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemCheckMarkStrokeBrushKey}}"
                        Stretch="Fill" />
                </igWindows:CardPanel>
              </igWindows:CardPanel>
              <!--  icon  -->
              <igWindows:AutoDisabledImage x:Name="Icon"
                                           HorizontalAlignment="Center"
                                           VerticalAlignment="Center"
                                           SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                           Source="{Binding ImageSource}" />
            </igWindows:CardPanel>
          </Border>
        </Border>
        <!--  Header  -->
        <ContentPresenter x:Name="Header"
                          Grid.Column="2"
                          Margin="7,0,0,0"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          ContentSource="Header"
                          RecognizesAccessKey="True" />
        <!--  Separator Line  -->
        <Rectangle x:Name="Separator"
                   Grid.Column="0"
                   Grid.ColumnSpan="4"
                   Height="1"
                   Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemSeparatorBrushKey}}"
                   SnapsToDevicePixels="True"
                   Visibility="Collapsed" />
        <!--  Glyph Arrow  -->
        <Grid x:Name="Menu_Arrow"
              Grid.Column="3"
              Width="20"
              Height="20"
              Margin="0"
              HorizontalAlignment="Center"
              VerticalAlignment="Center"
              Visibility="Collapsed">
          <Path x:Name="Glyph_Arrow"
                Width="6"
                Height="10"
                Margin="0"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Data="{StaticResource VArrowRight}"
                Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemDropDownArrowBrushKey}}"
                SnapsToDevicePixels="True"
                Stretch="Fill" />
        </Grid>
      </Grid>
      <!--  Popup  -->
      <Popup x:Name="PART_Popup"
             AllowsTransparency="true"
             Focusable="false"
             IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
             Placement="Right">
        <AdornerDecorator>
          <Border Background="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemPopupFillBrushKey}}"
                  BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemPopupOuterBorderBrushKey}}"
                  BorderThickness="1">
            <igWindows:PopupResizerDecorator x:Name="resizeDecorator" Grid.IsSharedSizeScope="true">
              <igWindows:XamPager CanContentScroll="True"
                                  HorizontalScrollBarVisibility="Disabled"
                                  VerticalScrollBarVisibility="Auto">
                <ItemsPresenter Grid.ColumnSpan="2"
                                KeyboardNavigation.DirectionalNavigation="Cycle"
                                KeyboardNavigation.TabNavigation="Cycle"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
              </igWindows:XamPager>
            </igWindows:PopupResizerDecorator>
          </Border>
        </AdornerDecorator>
      </Popup>
    </igWindows:CardPanel>
    <ControlTemplate.Triggers>
      <DataTrigger Binding="{Binding HasResizableItems}" Value="True">
        <Setter TargetName="resizeDecorator" Property="ResizeMode" Value="Both" />
      </DataTrigger>
      <DataTrigger Binding="{Binding IsResizable}" Value="True">
        <Setter TargetName="IconArea" Property="VerticalAlignment" Value="Top" />
      </DataTrigger>
      <Trigger Property="IsSubmenuOpen" Value="False">
        <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" />
      </Trigger>
      <Trigger Property="Role" Value="SubmenuHeader">
        <Setter TargetName="Menu_Arrow" Property="Visibility" Value="Visible" />
      </Trigger>
      <DataTrigger Binding="{Binding IsSeparator}" Value="True">
        <Setter TargetName="IconArea" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="Header" Property="Grid.Column" Value="2" />
        <Setter TargetName="Menu_Arrow" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="Separator" Property="Visibility" Value="Visible" />
        <Setter TargetName="Separator" Property="Margin" Value="1,0" />
      </DataTrigger>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding IsHighlighted, RelativeSource={RelativeSource Self}}" Value="True" />
          <!--  Don't highlight items like the tree  -->
          <Condition Binding="{Binding IsControlHost}" Value="False" />
        </MultiDataTrigger.Conditions>
        <Setter TargetName="IconAreaBackground" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="Highlight" Property="Visibility" Value="Visible" />
        <Setter TargetName="Glyph_Arrow" Property="Fill" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemHotTrackDropDownArrowBrushKey}}" />
      </MultiDataTrigger>
      <!--<Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                <Setter TargetName="Glyph_Arrow" Property="Fill" Value="{StaticResource DisabledBackgroundBrush}" />
            </Trigger>-->
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="IconArea" Property="Opacity" Value="0.3" />
        <Setter TargetName="Header" Property="Opacity" Value="0.3" />
        <Setter TargetName="Glyph_Arrow" Property="Opacity" Value="0.3" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition SourceName="Icon" Property="Source" Value="{x:Null}" />
          <Condition Property="IsChecked" Value="True" />
        </MultiTrigger.Conditions>
        <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
      </MultiTrigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <!--  Custom MenuItem to be used with FieldMenuDataItem  -->
  <!--  ********************************** FieldMenuItem Style **********************************  -->
  <Style TargetType="{x:Type igDP:FieldMenuItem}">
    <Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuItemForegroundBrushKey}}" />
    <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
    <Setter Property="FontSize" Value="{StaticResource FontSize}" />
    <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
    <Setter Property="CommandParameter" Value="{Binding CommandParameter}" />
    <!--  Note make sure to set the command after the command parameter since menu items only re-evaluate the canexecute when the command changes  -->
    <Setter Property="Command" Value="{Binding Command}" />
    <Setter Property="IsChecked" Value="{Binding IsChecked}" />
    <Setter Property="IsCheckable" Value="{Binding IsCheckable}" />
    <Setter Property="Header" Value="{Binding Header}" />
    <Setter Property="Icon" Value="{Binding ImageSource}" />
    <Setter Property="ItemsSource" Value="{Binding Items}" />
    <Setter Property="StaysOpenOnClick" Value="{Binding StaysOpenOnClick}" />
    <Setter Property="igWindows:PopupResizerStackPanel.IsResizable" Value="{Binding IsResizable}" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="Margin" Value="0" />
    <Setter Property="Template" Value="{StaticResource subMenuItemTemplate}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <igWindows:PopupResizerStackPanel />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Role" Value="TopLevelHeader">
        <Setter Property="Template" Value="{StaticResource topLevelMenuItemTemplate}" />
      </Trigger>
      <Trigger Property="Role" Value="TopLevelItem">
        <Setter Property="Template" Value="{StaticResource topLevelMenuItemTemplate}" />
      </Trigger>
      <DataTrigger Binding="{Binding IsSeparator}" Value="True">
        <Setter Property="IsEnabled" Value="False" />
      </DataTrigger>
      <DataTrigger Binding="{Binding IsResizable}" Value="True">
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <!--  ********************************** ExcelFilterButton Template **********************************  -->
  <ControlTemplate x:Key="excelFilterButtonTemplate" TargetType="{x:Type igDP:FilterButton}">
    <Border Background="{StaticResource TransparentBrush}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Padding="{TemplateBinding Padding}"
            SnapsToDevicePixels="True">
      <Menu HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
            Style="{StaticResource RootMenuStyle}">
        <igDP:FieldMenuItem x:Name="PART_FilterMenu"
                            HorizontalContentAlignment="Center"
                            VerticalContentAlignment="Center"
                            IsSubmenuOpen="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
          <igDP:FieldMenuItem.DataContext>
            <!--  This is a temporary item to avoid binding errors before its hooked up  -->
            <igDP:FieldMenuDataItem />
          </igDP:FieldMenuItem.DataContext>
          <!--<igDP:FieldMenuItem.Header>
						<igWindows:AutoDisabledImage
								x:Name="BtnImage"
								Stretch="Fill"
								igWindows:Utilities.SnapElementToDevicePixels="True"
								VerticalAlignment="Center"
								HorizontalAlignment="Center">
							<igWindows:AutoDisabledImage.Source>
								<BitmapImage UriSource="Images/Filter.png"/>
							</igWindows:AutoDisabledImage.Source>
						</igWindows:AutoDisabledImage>
					</igDP:FieldMenuItem.Header>-->

          <igDP:FieldMenuItem.Header>
            <Path Width="10"
                  Height="8"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="{StaticResource FilterIcon}"
                  Fill="{TemplateBinding Background}"
                  Stretch="Fill" />
          </igDP:FieldMenuItem.Header>

        </igDP:FieldMenuItem>
      </Menu>
    </Border>
  </ControlTemplate>

  <!--  ********************************** FilterButton Style **********************************  -->
  <Style x:Key="FilterButtonStyleBase" TargetType="{x:Type igDP:FilterButton}">
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="MinHeight" Value="22" />
    <Setter Property="MinWidth" Value="22" />
    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBorder}}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:FilterButton}">
          <Border x:Name="Border"
                  Background="{StaticResource TransparentBrush}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  IsHitTestVisible="True">
            <igWindows:CardPanel Margin="{TemplateBinding Padding}" IsHitTestVisible="False">
              <Path x:Name="btnPath"
                    Width="10"
                    Height="8"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="{StaticResource FilterIcon}"
                    Fill="{TemplateBinding Background}"
                    Stretch="Fill" />
              <editors:XamComboEditor Height="{Binding ActualHeight, ElementName=btnPath}"
                                      MaxWidth="1"
                                      DropDownResizeMode="None"
                                      IsDropDownOpen="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      ItemsSource="{Binding Operands, RelativeSource={RelativeSource TemplatedParent}}"
                                      MinDropDownWidth="150"
                                      Opacity="0"
                                      SelectedItem="{Binding SelectedOperand, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" />
            </igWindows:CardPanel>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="DropDownType" Value="MultiSelectExcelStyle">
        <Setter Property="Template" Value="{StaticResource excelFilterButtonTemplate}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!--  SS 06/26/15 xamDataGrid - Add Excel style filtering option to record filter  -->
  <!--  ********************************** ExcelStyleFilterButton **********************************  -->
  <Style TargetType="{x:Type igDP:ExcelStyleFilterButton}">
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="MinHeight" Value="24" />
    <Setter Property="MinWidth" Value="24" />
    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryCommandButtonsBorder}}" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Margin" Value="0,0,0,2" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:ExcelStyleFilterButton}">
          <Border Background="{StaticResource TransparentBrush}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Padding="{TemplateBinding Padding}"
                  SnapsToDevicePixels="True">
            <Menu HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                  Style="{StaticResource RootMenuStyle}">
              <igDP:FieldMenuItem x:Name="PART_FilterMenu"
                                  HorizontalContentAlignment="Center"
                                  VerticalContentAlignment="Center"
                                  IsSubmenuOpen="{Binding IsChecked, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <igDP:FieldMenuItem.DataContext>
                  <!--  This is a temporary item to avoid binding errors before its hooked up  -->
                  <igDP:FieldMenuDataItem />
                </igDP:FieldMenuItem.DataContext>
                <igDP:FieldMenuItem.Header>
                  <Path Width="10"
                        Height="8"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Data="{StaticResource FilterIcon}"
                        Fill="{TemplateBinding Background}"
                        Stretch="Fill" />
                </igDP:FieldMenuItem.Header>
              </igDP:FieldMenuItem>
            </Menu>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--  ********************************** FilterButton Style **********************************  -->
  <Style BasedOn="{StaticResource FilterButtonStyleBase}" TargetType="{x:Type igDP:FilterButton}">
    <Setter Property="Padding" Value="3,0" />
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey {x:Type igDP:XamDataGrid}, SummaryButtonBackgroundHover}}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!--  *********************************  ScrollViewer Style *********************************  -->
  <Style TargetType="{x:Type igDP:XamDataCards}">
    <Setter Property="FontSize" Value="{StaticResource FontSize}" />
    <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
    <Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardPanelBackgroundBrushKey}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type igDP:XamDataCards}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}">
            <Grid x:Name="PART_ContentSiteGrid" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Resources>
      <Style BasedOn="{StaticResource ScrollViewerStyle}" TargetType="{x:Type ScrollViewer}" />
      <Style BasedOn="{StaticResource ScrollBarStyle}" TargetType="{x:Type ScrollBar}" />
    </Style.Resources>
  </Style>
</ResourceDictionary>