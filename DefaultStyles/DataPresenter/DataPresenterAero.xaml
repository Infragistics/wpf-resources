<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:d="http://schemas.microsoft.com/expression/interactivedesigner/2006"
	mc:Ignorable="d"
	xmlns:igWindows="http://infragistics.com/Windows"
	xmlns:editors="http://infragistics.com/Editors"
	xmlns:igDP="http://infragistics.com/DataPresenter"
	xmlns:igThemes="http://infragistics.com/Themes">

	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="DataPresenterGeneric.xaml"/>
	</ResourceDictionary.MergedDictionaries>

	   <Style x:Key="EmbeddedMenuStyle" TargetType="{x:Type Menu}">
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="BorderThickness" Value="0"/>
				<Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Grid x:Name="Bd" Grid.IsSharedSizeScope="True">
                        <StackPanel IsItemsHost="True" ClipToBounds="True" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonBackgroundHover}}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
			<Style x:Key="EmbeddedMenuItemStyle" TargetType="{x:Type MenuItem}">
				<!--<Setter Property="Background" Value="Transparent"/>
				<Setter Property="BorderBrush" Value="Transparent"/>-->
				<Setter Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightBackgroundBrushFillKey}}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightOuterBorderBrushFillKey}}"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="Padding" Value="3,2,3,2"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type MenuItem}">
							<ControlTemplate.Resources>
								<Storyboard x:Key="Hover">
									<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
										<SplineDoubleKeyFrame KeyTime="00:00:00.2000000" Value="1"/>
									</DoubleAnimationUsingKeyFrames>
								</Storyboard>
								<Storyboard x:Key="HoverOff">
									<DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Hover" Storyboard.TargetProperty="(UIElement.Opacity)">
										<SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
									</DoubleAnimationUsingKeyFrames>
								</Storyboard>
							</ControlTemplate.Resources>
							<Grid Background="Transparent">
								<Border x:Name="Hover" Opacity="0"  Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0"/>
								<Grid Margin="{TemplateBinding Padding}">
									<!-- JM 03-06-09 TFS15005 - Cannot use 3.5 SP1 feature ContentStringFormat!!  (plus, there is no need to use this here anyway since ContentSource is being set) -->
									<!--<ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Header}" ContentSource="Header" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentTemplate="{TemplateBinding HeaderTemplate}" RecognizesAccessKey="True"/>-->
									<ContentPresenter x:Name="Content" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Header}" ContentSource="Header" RecognizesAccessKey="True"/>
									<Popup x:Name="PART_Popup" AllowsTransparency="True" HorizontalOffset="-2" IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Focusable="False">
										<Border x:Name="SubMenuBorder" Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupBackground}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonPopupBorder}}" BorderThickness="1" CornerRadius="0">
												<ScrollViewer Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}" CanContentScroll="True" Margin="1">
													<ItemsPresenter Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"/>
												</ScrollViewer>
										</Border>
									</Popup>
								</Grid>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="IsSuspendingPopupAnimation" Value="True">
									<Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="Role" Value="SubmenuItem"/>
										<Condition Property="IsHighlighted" Value="True"/>
									</MultiTrigger.Conditions>
									<MultiTrigger.EnterActions>
										<BeginStoryboard x:Name="Hover_BeginStoryboard" Storyboard="{StaticResource Hover}"/>
									</MultiTrigger.EnterActions>
									<MultiTrigger.ExitActions>
										<BeginStoryboard x:Name="HoverOff_BeginStoryboard" Storyboard="{StaticResource HoverOff}"/>
									</MultiTrigger.ExitActions>
									<Setter TargetName="Content" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.MenuHighlightTextBrushFillKey}}"/>
								</MultiTrigger>
								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

    <!--JM 1/14/09 FixedFields Feature -->
    <!--HC 1/19/09 Theme-Specific Addition -->
    <!-- _________________________ FixedButton ______________________________________ -->
    <Style TargetType="{x:Type igDP:FixedFieldButton}">
        <Style.Resources>
            <Style TargetType="{x:Type ToggleButton}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <igWindows:CardPanel Background="{TemplateBinding Background}">
                                <ContentPresenter />
                            </igWindows:CardPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!-- JJD 04/18/16 - Cross Field Record Filtering
                      Moved Menu and MenuItem style definitions outside of this element so they can be used by FixedFieldButton, FixedRecordButton and HeaderPrefixArea   -->
            <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource EmbeddedMenuStyle}" />
            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource EmbeddedMenuItemStyle}" />
            </Style.Resources>
        <Setter Property="FixToFarEdgePrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.FieldFixToFarEdgePrompt}}"/>
        <Setter Property="FixToNearEdgePrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.FieldFixToNearEdgePrompt}}"/>
        <Setter Property="UnfixPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.FieldUnfixPrompt}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=SummaryButtonForeground}}"/>
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:FixedFieldButton}">
					<Border Background="Transparent">
						<igWindows:CardPanel>
							<!-- JM 01-29-09 TFS13209 - Set the background to transparent so it is Hit Testable.  This will ensure that the button receives mouse clicks and the associated command is executed even when the user does not click directly on the embedded Path elements. -->
              <!-- JJD 3/16/11 - TFS24163
                      instead of using routed commands set in triggers that incur quite a bit of overhead,
                      bind to the new CurrentCommand property that
                      returns a non-routed command that is much more efficient -->
              <ToggleButton x:Name="toggleButton"
                            Focusable="False"
                            Command="{TemplateBinding CurrentCommand}"
                            CommandParameter="{TemplateBinding Field}"
                            Background="Transparent">
								<Grid Width="12" Height="12">
									<Path
										x:Name="btnFixedGlyph"
										Visibility="Collapsed"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Height="10"
										Width="7"
										Stretch="Fill"
										Opacity="1"
										Data="M 6,4 C6,4 8,4 8,4 8,4 8,9 8,9 8,9 6,9 6,9 6,9 6,4 6,4 zM 5,3 C5,3 5,9 5,9 5,9 4,9 4,9 4,9 4,10 4,10 4,10 7,10 7,10 7,10 7,13 7,13 7,13 8,13 8,13 8,13 8,10 8,10 8,10 11,10 11,10 11,10 11,9 11,9 11,9 10,9 10,9 10,9 10,3 10,3 10,3 5,3 5,3 z"
										Fill="{TemplateBinding Foreground}" />
									<Path
										x:Name="btnUnfixedGlyph"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Height="7"
										Width="10"
										Stretch="Fill"
										Opacity="1"
										Data="M 12,7 C12,7 12,9 12,9 12,9 7,9 7,9 7,9 7,7 7,7 7,7 12,7 12,7 zM 13,6 C13,6 7,6 7,6 7,6 7,5 7,5 7,5 6,5 6,5 6,5 6,8 6,8 6,8 3,8 3,8 3,8 3,9 3,9 3,9 6,9 6,9 6,9 6,12 6,12 6,12 7,12 7,12 7,12 7,11 7,11 7,11 13,11 13,11 13,11 13,6 13,6 z"
										Fill="{TemplateBinding Foreground}" />
								</Grid>
							</ToggleButton>

							<Menu x:Name="menu" Visibility="Collapsed" IsMainMenu="False">
								<MenuItem Padding="0">
									<MenuItem.Header>
										<igWindows:CardPanel>
											<Grid Width="12" Height="12">
												<Path
													x:Name="menuFixedGlyph"
													Visibility="Collapsed"
													HorizontalAlignment="Center"
													VerticalAlignment="Center"
													Height="10"
													Width="7"
													Stretch="Fill"
													Opacity="1"
													Data="M 6,4 C6,4 8,4 8,4 8,4 8,9 8,9 8,9 6,9 6,9 6,9 6,4 6,4 zM 5,3 C5,3 5,9 5,9 5,9 4,9 4,9 4,9 4,10 4,10 4,10 7,10 7,10 7,10 7,13 7,13 7,13 8,13 8,13 8,13 8,10 8,10 8,10 11,10 11,10 11,10 11,9 11,9 11,9 10,9 10,9 10,9 10,3 10,3 10,3 5,3 5,3 z"
													Fill="{TemplateBinding Foreground}" />
												<Path
													x:Name="MenuUnfixedGlyph"
													HorizontalAlignment="Center"
													VerticalAlignment="Center"
													Height="7"
													Width="10"
													Stretch="Fill"
													Opacity="1"
													Data="M 12,7 C12,7 12,9 12,9 12,9 7,9 7,9 7,9 7,7 7,7 7,7 12,7 12,7 zM 13,6 C13,6 7,6 7,6 7,6 7,5 7,5 7,5 6,5 6,5 6,5 6,8 6,8 6,8 3,8 3,8 3,8 3,9 3,9 3,9 6,9 6,9 6,9 6,12 6,12 6,12 7,12 7,12 7,12 7,11 7,11 7,11 13,11 13,11 13,11 13,6 13,6 z"
													Fill="{TemplateBinding Foreground}" />
											</Grid>
										</igWindows:CardPanel>
									</MenuItem.Header>
                  <!-- JJD 3/16/11 - TFS24163
                      instead of using routed commands that incur quite a bit of overhead, bind to the new command properties that
                      return non-routed commands that are much more efficient
									<MenuItem x:Name="unfix"   Header="{TemplateBinding UnfixPrompt}"			Command="igDP:DataPresenterCommands.UnfixField" CommandParameter="{TemplateBinding Field}"/>
									<MenuItem x:Name="fixNear" Header="{TemplateBinding FixToNearEdgePrompt}"	Command="igDP:DataPresenterCommands.FixFieldNear" CommandParameter="{TemplateBinding Field}"/>
									<MenuItem x:Name="fixFar"  Header="{TemplateBinding FixToFarEdgePrompt}"	Command="igDP:DataPresenterCommands.FixFieldFar" CommandParameter="{TemplateBinding Field}"/> -->
                  <MenuItem x:Name="unfix"   Header="{TemplateBinding UnfixPrompt}"			Command="{TemplateBinding UnfixCommand}" CommandParameter="{TemplateBinding Field}"/>
                  <MenuItem x:Name="fixNear" Header="{TemplateBinding FixToNearEdgePrompt}"	Command="{TemplateBinding FixToNearEdgeCommand}" CommandParameter="{TemplateBinding Field}"/>
                  <MenuItem x:Name="fixFar"  Header="{TemplateBinding FixToFarEdgePrompt}"	Command="{TemplateBinding FixToFarEdgeCommand}" CommandParameter="{TemplateBinding Field}"/>
                </MenuItem>
							</Menu>
						</igWindows:CardPanel>
					</Border>
					<ControlTemplate.Triggers>
						<!-- Set the correct image depending on the FixedLocation-->
						<DataTrigger Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToNearEdge">
							<Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>
                        <DataTrigger Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToFarEdge">
							<Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>

						<!-- Show/hide the menu and the toggleButton -->
                        <DataTrigger Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="NearOrFar">
							<Setter TargetName="menu" Property="Visibility" Value="Visible"/>
							<Setter TargetName="toggleButton" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>

            <!-- JJD 3/16/11 - TFS24163
                      instead of using routed commands set in triggers that incur quite a bit of overhead,
                      bind to the new command properties that
                      returns a non-routed command that is much more efficient -->
            <!-- If AllowFixingResolved is set to Near or set to Far, set the appropriate command on the toggleButton depending on the current FixedLocation -->
						<!--<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource TemplatedParent}}" Value="Near"/>
								<Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="Scrollable" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixFieldNear"/>
						</MultiDataTrigger>
						<DataTrigger Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="FixedToNearEdge">
							<Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixField"/>
						</DataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource TemplatedParent}}" Value="Far"/>
								<Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="Scrollable" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.FixFieldFar"/>
						</MultiDataTrigger>
						<DataTrigger Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource TemplatedParent}}" Value="FixedToFarEdge">
							<Setter TargetName="toggleButton" Property="Command" Value="igDP:DataPresenterCommands.UnfixField"/>
						</DataTrigger>-->

						<!-- If AllowFixingResolved is set to NearOrFar, hide/show the appropriate menu items depending on the current FixedLocation -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="NearOrFar"/>
                                <Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="Scrollable" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="unfix" Property="Visibility" Value="Collapsed"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="NearOrFar"/>
                                <Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToNearEdge" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="fixNear" Property="Visibility" Value="Collapsed"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Field.AllowFixingResolved, RelativeSource={RelativeSource Self}}" Value="NearOrFar"/>
                                <Condition Binding="{Binding Path=Field.FixedLocation, RelativeSource={RelativeSource Self}}" Value="FixedToFarEdge" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="fixFar" Property="Visibility" Value="Collapsed"/>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

    <!--JJD 6/10/09 - NA 2009 Vol 2 - Record fixing feature -->
	<!-- _________________________ FixedRecordButton ______________________________________ -->
	<Style TargetType="{x:Type igDP:FixedRecordButton}">
		<Style.Resources>
			<Style TargetType="{x:Type ToggleButton}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ToggleButton}">
							<igWindows:CardPanel Background="{TemplateBinding Background}">
								<ContentPresenter/>
							</igWindows:CardPanel>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
            <!-- JJD 04/18/16 - Cross Field Record Filtering
                      Moved Menu and MenuItem style definitions outside of this element so they can be used by FixedFieldButton, FixedRecordButton and HeaderPrefixArea   -->
            <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource EmbeddedMenuStyle}"/>
            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource EmbeddedMenuItemStyle}"/>
        </Style.Resources>
        <Setter Property="FixToBottomPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.RecordFixToBottomPrompt}}"/>
        <Setter Property="FixToTopPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.RecordFixToTopPrompt}}"/>
        <Setter Property="UnfixPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.RecordUnfixPrompt}}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.FixedRecordGlyphBrush}}"/>
		<Setter Property="Cursor" Value="Hand"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:FixedRecordButton}">
					<Border Background="Transparent">
						<igWindows:CardPanel>
							
              <ToggleButton x:Name="toggleButton"
                            Focusable="False"
                            Command="{TemplateBinding CurrentCommand}"
                            CommandParameter="{Binding}"
                            Background="Transparent">
								<Grid Width="12" Height="12">
									<Path
										x:Name="btnFixedGlyph"
										Visibility="Collapsed"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Height="10"
										Width="7"
										Stretch="Fill"
										Opacity="1"
										Data="M 6,4 C6,4 8,4 8,4 8,4 8,9 8,9 8,9 6,9 6,9 6,9 6,4 6,4 zM 5,3 C5,3 5,9 5,9 5,9 4,9 4,9 4,9 4,10 4,10 4,10 7,10 7,10 7,10 7,13 7,13 7,13 8,13 8,13 8,13 8,10 8,10 8,10 11,10 11,10 11,10 11,9 11,9 11,9 10,9 10,9 10,9 10,3 10,3 10,3 5,3 5,3 z"
										Fill="{TemplateBinding Foreground}" />
									<Path
										x:Name="btnUnfixedGlyph"
										HorizontalAlignment="Center"
										VerticalAlignment="Center"
										Height="7"
										Width="10"
										Stretch="Fill"
										Opacity="1"
										Data="M 12,7 C12,7 12,9 12,9 12,9 7,9 7,9 7,9 7,7 7,7 7,7 12,7 12,7 zM 13,6 C13,6 7,6 7,6 7,6 7,5 7,5 7,5 6,5 6,5 6,5 6,8 6,8 6,8 3,8 3,8 3,8 3,9 3,9 3,9 6,9 6,9 6,9 6,12 6,12 6,12 7,12 7,12 7,12 7,11 7,11 7,11 13,11 13,11 13,11 13,6 13,6 z"
										Fill="{TemplateBinding Foreground}" />
								</Grid>
							</ToggleButton>

							<Menu x:Name="menu" Visibility="Collapsed" IsMainMenu="False">
								<MenuItem Padding="0">
									<MenuItem.Header>
										<igWindows:CardPanel>
											<Grid Width="12" Height="12">
												<Path
													x:Name="menuFixedGlyph"
													Visibility="Collapsed"
													HorizontalAlignment="Center"
													VerticalAlignment="Center"
													Height="10"
													Width="7"
													Stretch="Fill"
													Opacity="1"
													Data="M 6,4 C6,4 8,4 8,4 8,4 8,9 8,9 8,9 6,9 6,9 6,9 6,4 6,4 zM 5,3 C5,3 5,9 5,9 5,9 4,9 4,9 4,9 4,10 4,10 4,10 7,10 7,10 7,10 7,13 7,13 7,13 8,13 8,13 8,13 8,10 8,10 8,10 11,10 11,10 11,10 11,9 11,9 11,9 10,9 10,9 10,9 10,3 10,3 10,3 5,3 5,3 z"
													Fill="{TemplateBinding Foreground}" />
												<Path
													x:Name="MenuUnfixedGlyph"
													HorizontalAlignment="Center"
													VerticalAlignment="Center"
													Height="7"
													Width="10"
													Stretch="Fill"
													Opacity="1"
													Data="M 12,7 C12,7 12,9 12,9 12,9 7,9 7,9 7,9 7,7 7,7 7,7 12,7 12,7 zM 13,6 C13,6 7,6 7,6 7,6 7,5 7,5 7,5 6,5 6,5 6,5 6,8 6,8 6,8 3,8 3,8 3,8 3,9 3,9 3,9 6,9 6,9 6,9 6,12 6,12 6,12 7,12 7,12 7,12 7,11 7,11 7,11 13,11 13,11 13,11 13,6 13,6 z"
													Fill="{TemplateBinding Foreground}" />
											</Grid>
										</igWindows:CardPanel>
									</MenuItem.Header>
									<MenuItem x:Name="unfix"   Header="{TemplateBinding UnfixPrompt}"		Command="{TemplateBinding UnfixCommand}" CommandParameter="{Binding}"/>
									<MenuItem x:Name="fixTop" Header="{TemplateBinding FixToTopPrompt}"	Command="{TemplateBinding FixToTopCommand}" CommandParameter="{Binding}"/>
									<MenuItem x:Name="fixBottom"  Header="{TemplateBinding FixToBottomPrompt}"	Command="{TemplateBinding FixToBottomCommand}" CommandParameter="{Binding}"/>
								</MenuItem>
							</Menu>
						</igWindows:CardPanel>
					</Border>
					<ControlTemplate.Triggers>
						<!-- Set the correct image depending on the FixedLocation-->
						<DataTrigger Binding="{Binding Path=FixedLocation}" Value="FixedToTop">
							<Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>
						<DataTrigger Binding="{Binding Path=FixedLocation}" Value="FixedToBottom">
							<Setter TargetName="menuFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="MenuUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="btnFixedGlyph" Property="Visibility" Value="Visible"/>
							<Setter TargetName="btnUnfixedGlyph" Property="Visibility" Value="Collapsed"/>
						</DataTrigger>

						<!-- Show/hide the menu and the toggleButton -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFixedOnTopAllowed" Value ="True"/>
                                <Condition Property="IsFixedOnBottomAllowed" Value ="True"/>
                            </MultiTrigger.Conditions>
							<Setter TargetName="menu" Property="Visibility" Value="Visible"/>
							<Setter TargetName="toggleButton" Property="Visibility" Value="Collapsed"/>
                        </MultiTrigger>

						<!-- If AllowRecordFixingResolved is set to TopOrBottom, hide/show the appropriate menu items depending on the current FixedLocation -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=FixedLocation}" Value="Scrollable" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="unfix" Property="Visibility" Value="Collapsed"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=FixedLocation}" Value="FixedToTop" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="fixTop" Property="Visibility" Value="Collapsed"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsFixedOnTopAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsFixedOnBottomAllowed, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding Path=FixedLocation}" Value="FixedToBottom" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="fixBottom" Property="Visibility" Value="Collapsed"/>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
    
	<Style TargetType="{x:Type igDP:CardHeaderPresenter}"  BasedOn="{x:Static igThemes:DataPresenterGeneric.CardHeaderPresenter}">
		<Setter Property="BorderThickness" Value="0"/>
	</Style>

<!-- _________________________ HeaderPrefixArea__________________________________________ -->
    <Style TargetType="{x:Type igDP:HeaderPrefixArea}">
        <Style.Resources>
            <!-- JJD 04/18/16 - Cross Field Record Filtering
                      Moved Menu and MenuItem style definitions outside of this element so they can be used by FixedFieldButton, FixedRecordButton and HeaderPrefixArea   -->
            <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource EmbeddedMenuStyle}"/>
            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource EmbeddedMenuItemStyle}"/>
        </Style.Resources>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <!-- JM 10-17-08 [TFS7039] -->
        <!--<Setter Property="Visibility" Value="Hidden"/>-->
        <Setter Property="Visibility" Value="Visible"/>
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igDP:XamDataGrid}, ResourceId=LabelForeground}}"/>
        <Setter Property="ShowFieldChooserPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.ShowFieldChooserPrompt}}"/>
        <Setter Property="ShowCrossFieldRecordFiltersPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.ShowCrossFieldRecordFiltersPrompt}}"/>
        <Setter Property="ClearCrossFieldRecordFiltersPrompt" Value="{Binding Path=Value, Source={x:Static igDP:ResourcesDataPresenter.ClearCrossFieldRecordFiltersPrompt}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igDP:HeaderPrefixArea}">
                    <!--SSP 6/18/09 - NAS9.2 Field Chooser - Added field chooser button in the below grid.-->
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
                        <!--Button that displays field chooser-->
                        <!-- AS 2/25/11 TFS67071 -->
                        <Button
							x:Name="fieldChooserButton"
							Style="{DynamicResource {x:Static igDP:DataPresenterBase.FieldChooserButtonStyleKey}}"
							CommandParameter="{TemplateBinding FieldLayout}"
							Visibility="Collapsed"/>
                        <!-- JJD 04/15/16 - NA 2016 Vol 2 - Cross Field Filtering-->
                        <Menu
							x:Name="Menu"
                            IsMainMenu="False"
							Visibility="Collapsed">
                            <MenuItem Padding="0" ToolTip="{TemplateBinding ActiveFiltersDescription}">
                                <MenuItem.Header>
                                    <igWindows:CardPanel>
                                        <Grid Width="12" Height="12"  SnapsToDevicePixels="True" >
                                            <Path
													x:Name="menuActiveFilters"
													Visibility="Collapsed"
													HorizontalAlignment="Center"
													VerticalAlignment="Center"
													Height="12"
													Width="12"
													Stretch="Fill"
													Opacity="0.6"
                                                    Data="M 1 7 L 6 7 L 6 8 L 5 8 L 5 9 L 4 9 L 4 11 L 3 11 L 3 9 L 2 9 L 2 8 L 1 8 L 1 7 ZM 2 0 L 2 1 L 2 6 L 0 6 L 0 12 L 7 12 L 7 9 L 11 9 L 12 9 L 12 1 L 12 0 L 11 0 L 3 0 L 2 0 ZM 7 7 L 10 7 L 10 6 L 7 6 L 3 6 L 3 1 L 11 1 L 11 8 L 7 8 L 7 7 ZM 4 4 L 4 5 L 10 5 L 10 4 L 4 4 ZM 4 2 L 4 3 L 10 3 L 10 2 L 4 2 Z"
                                                    Fill="{TemplateBinding Foreground}"/>
                                            <Path
													x:Name="menuNoActiveFilters"
													HorizontalAlignment="Right"
													VerticalAlignment="Top"
													Height="9"
													Width="10"
													Stretch="Fill"
													Opacity="0.6"
                                                    Data="M 1 8 L 1 1 L 9 1 L 9 8 L 1 8 ZM 0 0 L 0 1 L 0 8 L 0 9 L 1 9 L 9 9 L 10 9 L 10 1 L 10 0 L 9 0 L 1 0 L 0 0 ZM 2 6 L 2 7 L 8 7 L 8 6 L 2 6 ZM 2 4 L 2 5 L 8 5 L 8 4 L 2 4 ZM 2 2 L 2 3 L 8 3 L 8 2 L 2 2 Z"
                                                    Fill="{TemplateBinding Foreground}"/>
                                        </Grid>
                                    </igWindows:CardPanel>
                                </MenuItem.Header>


                                <MenuItem x:Name="ShowFieldChooser" Header="{TemplateBinding ShowFieldChooserPrompt}" Command="igDP:DataPresenterCommands.ShowFieldChooser" Visibility="{TemplateBinding ShowFieldChooserVisibility}" CommandParameter="{TemplateBinding FieldLayout}"/>
                                <MenuItem x:Name="ShowCrossFieldRecordFilters" Header="{TemplateBinding ShowCrossFieldRecordFiltersPrompt}" Command="igDP:DataPresenterCommands.ShowCrossFieldRecordFilters" Visibility="{TemplateBinding ShowCrossFieldRecordFiltersVisibility}" CommandParameter="{Binding Path=DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igDP:HeaderPresenter}}}"/>
                                <MenuItem x:Name="ClearCrossFieldRecordFilters" Header="{TemplateBinding ClearCrossFieldRecordFiltersPrompt}" Command="igDP:DataPresenterCommands.ClearCrossFieldRecordFilters" Visibility="{TemplateBinding ClearCrossFieldRecordFiltersVisibility}" CommandParameter="{Binding Path=DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igDP:HeaderPresenter}}}"/>
                            </MenuItem>
                        </Menu>
                        
                        <ContentPresenter
							Content="{TemplateBinding Content}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <!--SSP 6/18/09 - NAS9.2 Field Chooser - Added field chooser button-->
                        <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=FieldLayout.HeaderPrefixAreaDisplayModeResolved}" Value="FieldChooserButton">
                            <Setter TargetName="fieldChooserButton" Property="Visibility" Value="Visible" />
                            <!-- AS 2/25/11 TFS67071 - Don't set the Command until we show the element so the
								button will not query the canexecute state which results in a routed event. -->
                            <Setter TargetName="fieldChooserButton" Property="Command" Value="{x:Static igDP:DataPresenterCommands.ShowFieldChooser}" />
                        </DataTrigger>
                        <!-- JJD 04/15/16 - NA 2016 Vol 2 - Cross Field Filtering-->
                        <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=FieldLayout.HeaderPrefixAreaDisplayModeResolved}" Value="Menu">
                            <Setter TargetName="Menu" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <Trigger Property="HasActiveFilters" Value="True">
                            <Setter TargetName="menuActiveFilters" Property="Visibility" Value="Visible" />
                            <Setter TargetName="menuNoActiveFilters" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                         <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="menuActiveFilters" Property="Opacity" Value="1" />
                            <Setter TargetName="menuNoActiveFilters" Property="Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
	<!-- _________________________ CardViewCard [JM NA 10.1 CardView] __________________________________________ -->
	<Style TargetType="{x:Type igDP:CardViewCard}">
		<Setter Property="Visibility" Value="{Binding Path=VisibilityResolved}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type igDP:CardViewCard}">
					<Border x:Name="Bd"
							BorderThickness="{TemplateBinding BorderThickness}"
							BorderBrush="{TemplateBinding BorderBrush}"
							Background="{TemplateBinding Background}"
							Padding="{TemplateBinding Padding}"
							CornerRadius="3,3,1,1">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>
							<!-- Element to simulate CardHeaderPresenter when HeaderVisibilty=Hidden -->
							<Border x:Name="HeaderBgWhenVisHidden" Background="{Binding ElementName=CardHeaderPresenter,Path=Background}" Visibility="Collapsed" CornerRadius="2,2,0,0"/>

							<!-- Card Header -->
							<igDP:CardHeaderPresenter
								x:Name="CardHeaderPresenter"
									Content="{Binding Path=Header, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
									ContentTemplate="{Binding Path=HeaderTemplate, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
									ContentTemplateSelector="{Binding Path=HeaderTemplateSelector, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
									Visibility="{Binding Path=HeaderVisibility, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
									Card="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>

							<Rectangle x:Name="outerBd" Fill="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardChromeBorderBrushKey}}" Grid.Row="1"/>
							<Border x:Name="activeBd" BorderBrush="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderBorderNormalBrushKey}}" BorderThickness="1" Grid.RowSpan="2" Visibility="Collapsed" CornerRadius="2,2,0,0"/>
							<Border x:Name="highlightStroke" BorderBrush="#7FFFFFFF" BorderThickness="1" CornerRadius="2,2,0,0" Grid.RowSpan="2" Visibility="Collapsed"/>

							<Border x:Name="innerBd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Grid.Row="1" Margin="5,0,5,5">
								<!-- Card Content -->
								<ScrollViewer x:Name="CardContentScrollViewer"
												  Focusable="False"
												  CanContentScroll="False"
												  HorizontalScrollBarVisibility="Auto"
												  VerticalScrollBarVisibility="Auto">
									<ContentControl x:Name="CardContent" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"  />
								</ScrollViewer>
							</Border>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsCollapsed" Value="True">
							<Setter TargetName="innerBd" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="Bd" Property="VerticalAlignment" Value="Top"/>
						</Trigger>
						<Trigger Property="HeaderVisibility" Value="Collapsed">
							<Setter TargetName="innerBd" Property="Margin" Value="5"/>
						</Trigger>
						<Trigger Property="HeaderVisibility" Value="Hidden">
							<Setter TargetName="HeaderBgWhenVisHidden" Property="Visibility" Value="Visible"/>
						</Trigger>
						<Trigger Property="IsSelected" Value="True"/>
						<Trigger Property="IsActive" Value="True">
							<Setter TargetName="activeBd" Property="Visibility" Value="Visible"/>
						</Trigger>
						<Trigger Property="IsAddRecord" Value="True">
							<Setter TargetName="CardHeaderPresenter" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowHeaderBrushKey}}"/>
							<Setter TargetName="outerBd" Property="Fill" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowCardChromeBrushKey}}"/>
							<Setter TargetName="CardHeaderPresenter" Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowHeaderTextBrushKey}}"/>
							<Setter TargetName="highlightStroke" Property="Visibility" Value="Visible"/>
						</Trigger>
						<Trigger Property="IsFilterRecord" Value="True">
							<Setter TargetName="CardHeaderPresenter" Property="Background" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderFilterRecordHeaderBrushKey}}"/>
							<Setter TargetName="outerBd" Property="Fill" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderFilterRecordCardChromeBrushKey}}"/>
							<Setter TargetName="CardHeaderPresenter" Property="Foreground" Value="{DynamicResource {x:Static igDP:DataPresenterBrushKeys.ViewCardHeaderAddRowHeaderTextBrushKey}}"/>
							<Setter TargetName="highlightStroke" Property="Visibility" Value="Visible"/>
						</Trigger>

                        <!-- JM 03-26-13 TFS134433 -->
                        <Trigger Property="IsOpacityReduced" Value="True">
                            <Setter TargetName="Bd" Property="Opacity" Value="0.35"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>