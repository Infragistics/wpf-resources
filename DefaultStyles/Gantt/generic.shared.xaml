<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:local="http://schemas.infragistics.com/xaml"
    xmlns:localPrim="http://schemas.infragistics.com/xaml/primitives"
	xmlns:ig="http://schemas.infragistics.com/xaml"
	xmlns:igBase="http://schemas.infragistics.com/xaml"
	xmlns:igPrim="http://schemas.infragistics.com/xaml/primitives"
	xmlns:igPrimLocal="http://schemas.infragistics.com/xaml/primitives"
	xmlns:igSchedule="http://schemas.infragistics.com/xaml"
	xmlns:igSchedulePrim="http://schemas.infragistics.com/xaml/primitives"
    xmlns:igEditorPrim="http://schemas.infragistics.com/xaml/primitives"
    xmlns:igLayout="http://schemas.infragistics.com/xaml"
	xmlns:sys="clr-namespace:System;assembly=mscorlib"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
	mc:Ignorable="PresentationOptions"
    >

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!--                             IMPORTANT NOTE:                                -->
    <!--                                                                            -->
    <!-- Only place resources in this ResourceDictionary that can be shared between -->
    <!-- Silverlight and WPF.  This file is merged into the platform-specific       -->
    <!-- specific ResourceDictionaries (i.e., generic.sl.xaml and generic.wpf.xaml) -->
    <!-- and the appropriate platform-specific ResourceDictionary is copied in the  -->
    <!-- pre-build steps so that it overwrites generic.xaml (which  by default has  -->
    <!-- no content)                                                                -->
    <!--                                                                            -->
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <!-- *********************************  COLORS  ********************************* -->
    <Color x:Key="Color_001">#FF262B2F</Color>
    <Color x:Key="Color_002">#FF303B43</Color>
    <Color x:Key="Color_003">#FF4B606E</Color>
    <Color x:Key="Color_004">#FF697D8C</Color>
    <Color x:Key="Color_005">#FF9BACB8</Color>
    <Color x:Key="Color_006">#FFFFFFFF</Color>
    <Color x:Key="Color_007">#FF195A6A</Color>
    <Color x:Key="Color_008">#FF357686</Color>
    <Color x:Key="Color_009">#FF4CABC2</Color>
    <Color x:Key="Color_010">#FF486403</Color>
    <Color x:Key="Color_011">#FF719121</Color>
    <Color x:Key="Color_012">#FF94BA39</Color>
    <Color x:Key="Color_013">#FF5C4726</Color>
    <Color x:Key="Color_014">#FFCE861A</Color>
    <Color x:Key="Color_015">#FFF3BE4A</Color>
    <Color x:Key="Color_016">#FFFFDD93</Color>
    <Color x:Key="Color_017">#FFE4DFCD</Color>
    <Color x:Key="Color_018">#FFCC4B00</Color>
    <Color x:Key="Color_019">#FFE26C19</Color>
    <Color x:Key="Color_020">#FFFB9B56</Color>
    <Color x:Key="Color_021">#FF68141C</Color>
    <Color x:Key="Color_022">#FF95222D</Color>
    <Color x:Key="Color_023">#FFB82634</Color>
    <Color x:Key="Color_024">#EEFFFFFF</Color>
    <Color x:Key="Color_025">#00FFFFFF</Color>
    <Color x:Key="Color_026">#55FFFFFF</Color>
    <Color x:Key="Color_027">#FF2A2A2A</Color>
    <Color x:Key="Color_028">#FF3F3F3F</Color>
    <Color x:Key="Color_029">#FF6E6E6E</Color>
	<Color x:Key="Color_030">#FFE6E7E9</Color>
	<Color x:Key="Color_031">#FFC0C0C0</Color>
	<Color x:Key="Color_032">#FF6DBDD1</Color>
	<Color x:Key="Color_033">#FFD0D5DA</Color>
	<Color x:Key="Color_034">#FFE4E5F0</Color>
	<Color x:Key="Color_035">#FFC9CACA</Color>
	<Color x:Key="Color_036">#FFfefefe</Color>
	<Color x:Key="Color_037">#FFeff1f2</Color>
	<Color x:Key="Color_038">#FFd0d6db</Color>
	<Color x:Key="Color_039">#55CCCCCC</Color>
    <Color x:Key="Color_040">#FF000000</Color>
    <Color x:Key="Color_041">#FFF6F9FC</Color>
    <Color x:Key="Color_042">#FFD5EAF2</Color>
    <Color x:Key="Color_043">#FFE6EFF7</Color>
    <Color x:Key="Color_044">#FF060E18</Color>
    <Color x:Key="Color_045">#FFD3D3D3</Color> 


    <!-- ================ -->
    <!--    BRUSHES       -->
    <!-- ================ -->
    <SolidColorBrush x:Key="IconsNormalFill" Color="{StaticResource Color_004}"/>
    <SolidColorBrush x:Key="NonWorkingTimelineBgBrush" Color="{StaticResource Color_039}"/>
    <SolidColorBrush x:Key="ForegroundBrush" Color="{StaticResource Color_028}"/>
    <SolidColorBrush x:Key="TransparentBrush" Color="{StaticResource Color_025}"/>
    <LinearGradientBrush x:Key="NormalFill" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="{StaticResource Color_005}"/>
        <GradientStop Color="{StaticResource Color_004}" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="HoverFill" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="{StaticResource Color_004}"/>
        <GradientStop Color="{StaticResource Color_003}" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PressedFill" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="{StaticResource Color_005}" Offset="1"/>
        <GradientStop Color="{StaticResource Color_004}"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="DisabledFill" Color="{StaticResource Color_005}"/>
    <SolidColorBrush x:Key="BackgroundBrush" Color="{StaticResource Color_006}"/>
    <SolidColorBrush x:Key="PopupStroke" Color="{StaticResource Color_005}"/>
    <LinearGradientBrush x:Key="ManualTaskBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="{StaticResource Color_009}" Offset="0"/>
        <GradientStop Color="{StaticResource Color_008}" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ManualTaskBorderBrush" Color="{StaticResource Color_007}"/>
    <LinearGradientBrush x:Key="DurationOnlyTaskBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="{StaticResource Color_016}" Offset="0"/>
        <GradientStop Color="{StaticResource Color_015}" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="DurationOnlyTaskBorderBrush" Color="{StaticResource Color_014}"/>
    <LinearGradientBrush x:Key="DurationOnlyOverlayLeftBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Color="{StaticResource Color_024}" Offset=".2"/>
        <GradientStop Color="{StaticResource Color_026}" Offset=".7"/>
        <GradientStop Color="{StaticResource Color_025}" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="DurationOnlyOverlayRightBrush" StartPoint="1,0" EndPoint="0,0">
        <GradientStop Color="{StaticResource Color_024}" Offset=".2"/>
        <GradientStop Color="{StaticResource Color_026}" Offset=".7"/>
        <GradientStop Color="{StaticResource Color_025}" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="AutomaticTaskBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="{StaticResource Color_012}" Offset="0"/>
        <GradientStop Color="{StaticResource Color_011}" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="AutomaticTaskBorderBrush" Color="{StaticResource Color_010}"/>
    <LinearGradientBrush x:Key="ActiveSummaryTaskBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="{StaticResource Color_003}" Offset="0"/>
        <GradientStop Color="{StaticResource Color_002}" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ActiveSummaryTaskBorderBrush" Color="{StaticResource Color_001}"/>
    <LinearGradientBrush x:Key="ActiveProjectSummaryTaskBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="{StaticResource Color_005}" Offset="0"/>
        <GradientStop Color="{StaticResource Color_003}" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ActiveProjectSummaryTaskBorderBrush" Color="{StaticResource Color_003}"/>
    <SolidColorBrush x:Key="InactiveTaskBackgroundBrush" Color="{StaticResource Color_006}"/>
    <SolidColorBrush x:Key="InactiveTaskBorderBrush" Color="{StaticResource Color_003}"/>
    <LinearGradientBrush x:Key="TaskShapeBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="{StaticResource Color_003}" Offset="0"/>
        <GradientStop Color="{StaticResource Color_002}" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TaskShapeBorderBrush" Color="{StaticResource Color_001}"/>
    <LinearGradientBrush x:Key="ManualMilestoneTaskBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="{StaticResource Color_009}" Offset="0"/>
        <GradientStop Color="{StaticResource Color_008}" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ManualMilestoneTaskBorderBrush" Color="{StaticResource Color_007}"/>
    <LinearGradientBrush x:Key="PlaceholderMilestoneTaskBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="{StaticResource Color_006}" Offset="0"/>
        <GradientStop Color="{StaticResource Color_005}" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="PlaceholderMilestoneTaskBorderBrush" Color="{StaticResource Color_005}"/>
    <LinearGradientBrush x:Key="DeadlineTaskBackgroundBrush" StartPoint="0,0" EndPoint="0,1" igPrim:XamlHelper.IsExcludedFromWash="True">
        <GradientStop Color="{StaticResource Color_020}" Offset="0"/>
        <GradientStop Color="{StaticResource Color_019}" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="DeadlineTaskBorderBrush" Color="{StaticResource Color_018}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <LinearGradientBrush x:Key="ProgressTaskBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="{StaticResource Color_029}" Offset="0"/>
        <GradientStop Color="{StaticResource Color_028}" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ProgressTaskBorderBrush" Color="{StaticResource Color_027}"/>
    <LinearGradientBrush x:Key="CriticalTaskBackgroundBrush" StartPoint="0,0" EndPoint="0,1" igPrim:XamlHelper.IsExcludedFromWash="True">
        <GradientStop Color="{StaticResource Color_023}" Offset="0"/>
        <GradientStop Color="{StaticResource Color_022}" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="CriticalTaskBorderBrush" Color="{StaticResource Color_021}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <SolidColorBrush x:Key="SlackTaskBackgroundBrush" Color="{StaticResource Color_044}"/>
    <SolidColorBrush x:Key="GridIconBackgroundBrush" Color="{StaticResource Color_004}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <SolidColorBrush x:Key="TaskIndicatorInactiveStroke" Color="{StaticResource Color_003}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <SolidColorBrush x:Key="TaskIndicatorInactiveFill" Color="{StaticResource Color_005}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <SolidColorBrush x:Key="TaskIndicatorActiveStroke" Color="{StaticResource Color_018}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <SolidColorBrush x:Key="TaskIndicatorActiveFill" Color="{StaticResource Color_020}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <SolidColorBrush x:Key="AlertIconBackgroundFill" Color="{StaticResource Color_015}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <SolidColorBrush x:Key="AlertIconStroke" Color="{StaticResource Color_014}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <SolidColorBrush x:Key="AlertIconInnerFill" Color="{StaticResource Color_027}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <SolidColorBrush x:Key="NoteIconBackgroundFill" Color="{StaticResource Color_015}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <SolidColorBrush x:Key="NoteIconStroke" Color="{StaticResource Color_014}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <SolidColorBrush x:Key="NoteIconTextFill" Color="{StaticResource Color_013}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <SolidColorBrush x:Key="NoteIconShadowFill" Color="{StaticResource Color_017}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <SolidColorBrush x:Key="TaskIndicatorCheckIconFill" Color="{StaticResource Color_004}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <SolidColorBrush x:Key="ExclamationIconBackgroundFill" Color="{StaticResource Color_022}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <SolidColorBrush x:Key="ExclamationIconStroke" Color="{StaticResource Color_021}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <SolidColorBrush x:Key="ExclamationIconPathFill" Color="{StaticResource Color_006}" igPrim:XamlHelper.IsExcludedFromWash="True"/>
    <SolidColorBrush x:Key="ProjectTaskDependencyPresenterLine" Color="{StaticResource Color_001}"/>
    <SolidColorBrush x:Key="ProjectTaskDependencyPresenterEndCap" Color="{StaticResource Color_001}"/>
    <SolidColorBrush x:Key="ProjectTaskDependencyPresenterStartCap" Color="{StaticResource Color_001}"/>
    <SolidColorBrush x:Key="GanttBorderBrush" Color="{StaticResource Color_005}"/>
	<LinearGradientBrush x:Key="SplitterkBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
	   	<LinearGradientBrush.RelativeTransform>
	   		<TransformGroup>
	   			<ScaleTransform CenterY="0.5" CenterX="0.5"/>
	   			<SkewTransform CenterY="0.5" CenterX="0.5"/>
	   			<RotateTransform Angle="90" CenterY="0.5" CenterX="0.5"/>
	   			<TranslateTransform/>
	   		</TransformGroup>
	    </LinearGradientBrush.RelativeTransform>  
        <GradientStop Color="{StaticResource Color_005}"/>
        <GradientStop Color="{StaticResource Color_006}" Offset="0.65"/>
		<GradientStop Color="{StaticResource Color_006}" Offset="0.35"/>
		<GradientStop Color="{StaticResource Color_005}" Offset="1"/>
    </LinearGradientBrush>
	<SolidColorBrush x:Key="SplitterControlBackgroundBrush" Color="{StaticResource Color_031}"/>
	<SolidColorBrush x:Key="SplitterHiglightBrush" Color="{StaticResource Color_032}"/>
	<SolidColorBrush x:Key="TooltipTitleForegroundBrush" Color="{StaticResource Color_002}"/>
    <LinearGradientBrush x:Key="TooltipGenericBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="{StaticResource Color_006}" Offset="0"/>
        <GradientStop Color="{StaticResource Color_034}" Offset="1"/>
    </LinearGradientBrush>
	<LinearGradientBrush x:Key="ToolipGenericBorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="{StaticResource Color_005}" Offset="0"/>
        <GradientStop Color="{StaticResource Color_003}" Offset="1"/>
    </LinearGradientBrush>
	<LinearGradientBrush x:Key="ToolTtipTitleBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="{StaticResource Color_006}" Offset="0"/>
        <GradientStop Color="{StaticResource Color_033}" Offset="1"/>
    </LinearGradientBrush>
	   <LinearGradientBrush x:Key="HeaderNormalBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0" Color="{StaticResource Color_036}"/>
                <GradientStop Offset="0.5" Color="{StaticResource Color_037}"/>
                <GradientStop Offset="1" Color="{StaticResource Color_038}"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
	<SolidColorBrush x:Key="HeaderNormalBorderBrush" Color="{StaticResource Color_035}"/>

    <!--cellcontrol brushes-->
    <SolidColorBrush x:Key="CellItemNormalBackgroundBrush" Color="{StaticResource Color_006}"/>
    <SolidColorBrush x:Key="CellItemNormalBorderBrush" Color="{StaticResource Color_035}"/>
    <SolidColorBrush x:Key="CellItemAltNormalBackgroundBrush" Color="{StaticResource Color_041}"/>
    <SolidColorBrush x:Key="CellItemSelectedBackgroundBrush" Color="{StaticResource Color_042}"/>
    <SolidColorBrush x:Key="CellItemSelectedBorderBrush" Color="{StaticResource Color_032}"/>
    <SolidColorBrush x:Key="CellRowHoverBackgroundBrush" Color="{StaticResource Color_043}"/>
    <SolidColorBrush x:Key="CellItemForegroundBrush" Color="{StaticResource Color_040}"/>
    <SolidColorBrush x:Key="CellItemInactiveForegroundBrush" Color="{StaticResource Color_045}"/>

    <SolidColorBrush x:Key="BlockingErrorBackground" Color="{StaticResource Color_006}"/>
    <SolidColorBrush x:Key="BlockingErrorForeground" Color="{StaticResource Color_027}"/>
    <SolidColorBrush x:Key="BlockingErrorHeaderForeground" Color="{StaticResource Color_006}"/>
	<LinearGradientBrush x:Key="BlockingErrorHeaderBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="{StaticResource Color_023}"/>
        <GradientStop Offset="1" Color="{StaticResource Color_021}"/>
    </LinearGradientBrush>

    <!--textbox brushes-->
    <SolidColorBrush x:Key="TextBoxNormalBackgroundBrush" Color="{StaticResource Color_006}"/>
    <SolidColorBrush x:Key="TextBoxNormalBorderBrush" Color="{StaticResource Color_040}"/>

    <!-- ======================== -->
    <!-- Tooltip HEADER Template -->
    <!-- ======================== -->
    <Style x:Key="toolTipHeaderTemplate" TargetType="ContentControl">
        <Setter Property="Foreground" Value="{StaticResource TooltipTitleForegroundBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Background" Value="{StaticResource ToolTtipTitleBackgroundBrush}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Padding" Value="3,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border Background="{TemplateBinding Background}" CornerRadius="2 2 0 0" Padding="2">
                        <ContentPresenter
                      Content="{TemplateBinding Content}"
                      ContentTemplate="{TemplateBinding ContentTemplate}"
                      Cursor="{TemplateBinding Cursor}"
                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                       Margin="{TemplateBinding Padding}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ======================== -->
    <!-- Tooltip Generic Template -->
    <!-- ======================== -->
    <ControlTemplate x:Key="toolTipTemplate" TargetType="ToolTip">
        <Grid>
            <Border Background="{StaticResource TooltipGenericBackgroundBrush}"  BorderThickness="1" BorderBrush="{StaticResource ToolipGenericBorderBrush}" CornerRadius="2">
                <ContentPresenter />
            </Border>
        </Grid>
    </ControlTemplate>


    <!-- ======================== -->
    <!-- Tooltip Generic Style -->
    <!-- ======================== -->

    <Style x:Key="SimpletoolTip" TargetType="ToolTip">
        <Setter Property="Padding" Value="3,0,3,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Grid>
                          <Border Background="{StaticResource TooltipGenericBackgroundBrush}"  BorderThickness="1" BorderBrush="{StaticResource ToolipGenericBorderBrush}" CornerRadius="2" Padding="4 2">
                            <ContentPresenter />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    


    <!-- ======================== -->
    <!-- ValueConverter Resources -->
    <!-- ======================== -->
    <DataTemplate x:Key="TaskIndicatorTemplate_FlexibleConstraint">
        <Grid Height="16" Width="16">
            <Path Data="M10,9 L10,11 L12,11 L12,9 z M7,9 L7,11 L9,11 L9,9 z M4.0000005,9 L4.0000005,11 L6,11 L6,9 z M0.99999994,9 L0.99999994,11 L3.0000005,11 L3.0000005,9 z M10,5.9999995 L10,7.9999995 L12,7.9999995 L12,5.9999995 z M7,5.9999995 L7,7.9999995 L9,7.9999995 L9,5.9999995 z M4.0000005,5.9999995 L4.0000005,7.9999995 L6,7.9999995 L6,5.9999995 z M0.99999994,5.9999995 L0.99999994,7.9999995 L3.0000005,7.9999995 L3.0000005,5.9999995 z M10,3 L10,5 L12,5 L12,3 z M7,3 L7,5 L9,5 L9,3 z M4.0000005,3 L4.0000005,5 L6,5 L6,3 z M0.99999994,3 L0.99999994,5 L3.0000005,5 L3.0000005,3 z M0,0 L13,0 L13,2.0000005 L13,3 L13,5 L13,5.9999995 L13,7.9999995 L13,9 L13,11 L13,11.999999 L5.8114529E-07,12 L5.8114523E-08,3 L0,2 z" Fill="{StaticResource GridIconBackgroundBrush}" Stretch="Fill" UseLayoutRounding="False" Width="13" Height="12" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="1,2,0,0"/>
            <Rectangle Fill="{StaticResource TaskIndicatorInactiveStroke}" HorizontalAlignment="Left" Margin="4,7,0,0" Width="4" VerticalAlignment="Top" Height="4"/>
            <Rectangle Fill="{StaticResource TaskIndicatorInactiveFill}" HorizontalAlignment="Left" Margin="5,8,0,0" Width="2" Height="2" VerticalAlignment="Top"/>
            <Rectangle Fill="{StaticResource TaskIndicatorActiveStroke}" Margin="10,7,0,0" VerticalAlignment="Top" Height="4" HorizontalAlignment="Left" Width="4"/>
            <Rectangle Fill="{StaticResource TaskIndicatorActiveFill}" HorizontalAlignment="Left" Width="2" Height="2" VerticalAlignment="Top" Margin="11,8,0,0"/>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="TaskIndicatorTemplate_InflexibleConstraint">
        <Grid Height="16" Width="16">
            <Path Data="M10,9 L10,11 L12,11 L12,9 z M7,9 L7,11 L9,11 L9,9 z M4.0000005,9 L4.0000005,11 L6,11 L6,9 z M0.99999994,9 L0.99999994,11 L3.0000005,11 L3.0000005,9 z M10,5.9999995 L10,7.9999995 L12,7.9999995 L12,5.9999995 z M7,5.9999995 L7,7.9999995 L9,7.9999995 L9,5.9999995 z M4.0000005,5.9999995 L4.0000005,7.9999995 L6,7.9999995 L6,5.9999995 z M0.99999994,5.9999995 L0.99999994,7.9999995 L3.0000005,7.9999995 L3.0000005,5.9999995 z M10,3 L10,5 L12,5 L12,3 z M7,3 L7,5 L9,5 L9,3 z M4.0000005,3 L4.0000005,5 L6,5 L6,3 z M0.99999994,3 L0.99999994,5 L3.0000005,5 L3.0000005,3 z M0,0 L13,0 L13,2.0000005 L13,3 L13,5 L13,5.9999995 L13,7.9999995 L13,9 L13,11 L13,11.999999 L5.8114529E-07,12 L5.8114523E-08,3 L0,2 z" Fill="{StaticResource GridIconBackgroundBrush}" Stretch="Fill" UseLayoutRounding="False" Width="13" Height="12" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="1,2,0,0"/>
            <Rectangle Fill="{StaticResource TaskIndicatorActiveStroke}" HorizontalAlignment="Left" Margin="4,7,0,0" Width="4" VerticalAlignment="Top" Height="4"/>
            <Rectangle Fill="{StaticResource TaskIndicatorActiveFill}" HorizontalAlignment="Left" Margin="5,8,0,0" Width="2" Height="2" VerticalAlignment="Top"/>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="TaskIndicatorTemplate_ConstraintViolation">
        <Grid Height="16" Width="16">
            <Path Data="M10,9 L10,11 L12,11 L12,9 z M7,9 L7,11 L9,11 L9,9 z M4.0000005,9 L4.0000005,11 L6,11 L6,9 z M0.99999994,9 L0.99999994,11 L3.0000005,11 L3.0000005,9 z M10,5.9999995 L10,7.9999995 L12,7.9999995 L12,5.9999995 z M7,5.9999995 L7,7.9999995 L9,7.9999995 L9,5.9999995 z M4.0000005,5.9999995 L4.0000005,7.9999995 L6,7.9999995 L6,5.9999995 z M0.99999994,5.9999995 L0.99999994,7.9999995 L3.0000005,7.9999995 L3.0000005,5.9999995 z M10,3 L10,5 L12,5 L12,3 z M7,3 L7,5 L9,5 L9,3 z M4.0000005,3 L4.0000005,5 L6,5 L6,3 z M0.99999994,3 L0.99999994,5 L3.0000005,5 L3.0000005,3 z M0,0 L13,0 L13,2.0000005 L13,3 L13,5 L13,5.9999995 L13,7.9999995 L13,9 L13,11 L13,11.999999 L5.8114529E-07,12 L5.8114523E-08,3 L0,2 z" Fill="{StaticResource GridIconBackgroundBrush}" Stretch="Fill" UseLayoutRounding="False" Width="13" Height="12" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            <Rectangle Fill="{StaticResource TaskIndicatorActiveStroke}" HorizontalAlignment="Left" Margin="3,5,0,0" Width="4" VerticalAlignment="Top" Height="4"/>
            <Rectangle Fill="{StaticResource TaskIndicatorActiveFill}" HorizontalAlignment="Left" Margin="4,6,0,0" Width="2" Height="2" VerticalAlignment="Top"/>
            <Path Data="M6.484375,0.5 L12.5,10.5 L0.5,10.5 z" Fill="{StaticResource AlertIconBackgroundFill}" Stretch="Fill" Stroke="{StaticResource AlertIconStroke}" UseLayoutRounding="False" Width="14" Height="11" Margin="2,5,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" />
            <Path Data="M0,4 L2,4 L2,5 L0,5 z M1.3411045E-06,0 L2.0000014,0 L2.0000014,3 L1.3411045E-06,3 z" Fill="{StaticResource AlertIconInnerFill}" Stretch="Fill" UseLayoutRounding="False" Margin="8,9,0,0" HorizontalAlignment="Left" Width="2" Height="5" VerticalAlignment="Top"/>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="TaskIndicatorTemplate_Completed">
        <Grid Width="16" Height="16">
            <Path Data="M2.3914926,6.4981399 L6.4163337,10.087243 L14.793087,1.8651594 L15.544387,2.3674157 L6.7676015,14.584246 L6.0176682,14.584246 L-0.04171209,8.66747 z" Fill="{StaticResource TaskIndicatorCheckIconFill}" Stretch="Fill" UseLayoutRounding="False" Width="14" Height="13" VerticalAlignment="Top" Margin="0,2,0,0"/>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="TaskIndicatorTemplate_Notes">
        <Grid Height="16" Width="16">
            <Rectangle Fill="{StaticResource NoteIconShadowFill}" Grid.RowSpan="2" Width="12" Height="11" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="2,3,0,0"/>
            <Rectangle Fill="{StaticResource NoteIconBackgroundFill}" Margin="1,2,0,0" Grid.RowSpan="2" Stroke="{StaticResource NoteIconStroke}" Width="12" Height="11" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            <Path Data="M4,6 L8,6 L8,7 L4,7 z M0,4 L8,4 L8,5 L0,5 z M0,2 L8,2 L8,3 L0,3 z M0,0 L8,0 L8,1 L0,1 z" Fill="{StaticResource NoteIconTextFill}" Height="7" Grid.Row="1" Stretch="Fill" UseLayoutRounding="False" Width="8" Margin="3,4,0,0" HorizontalAlignment="Left" VerticalAlignment="Top"/>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="TaskIndicatorTemplate_Deadline">
        <Grid Height="16" Width="16">
            <Rectangle Fill="{StaticResource ExclamationIconBackgroundFill}" Width="12" Height="12" Stroke="{StaticResource ExclamationIconStroke}"/>
            <Rectangle Fill="{StaticResource ExclamationIconStroke}" Width="4" Height="10"/>
            <Path Data="M0,6 L2,6 L2,8 L0,8 z M0,0 L2,0 L2,5 L0,5 z" Fill="{StaticResource ExclamationIconPathFill}" Stretch="Fill" UseLayoutRounding="False" Width="2" Height="8"/>
        </Grid>
    </DataTemplate>

    <!-- ======================== -->
    <!--     ResourceStrings      -->
    <!-- ======================== -->
    <igSchedulePrim:GanttResourceString x:Key="progressToolTipTitle" ResourceName="TaskBarToolTip_ProgressTitle" />
    <igSchedulePrim:GanttResourceString x:Key="deadlineToolTipTitle" ResourceName="TaskBarToolTip_DeadlineTitle" />
    <igSchedulePrim:GanttResourceString x:Key="slackToolTipTitle" ResourceName="TaskBarToolTip_SlackTitle" />
    <igSchedulePrim:GanttResourceString x:Key="milestoneToolTipTitle" ResourceName="TaskBarToolTip_MilestoneTitle" />
    <igSchedulePrim:GanttResourceString x:Key="taskToolTipTitle" ResourceName="TaskBarToolTip_TaskTitle" />
    <igSchedulePrim:GanttResourceString x:Key="summaryToolTipTitle" ResourceName="TaskBarToolTip_SummaryTitle" />
    <igSchedulePrim:GanttResourceString x:Key="projectSummaryToolTipTitle" ResourceName="TaskBarToolTip_ProjectSummaryTitle" />
    <igSchedulePrim:GanttResourceString x:Key="taskToolTipNameLabel" ResourceName="TaskBarToolTip_TaskNameLabel" />
    <igSchedulePrim:GanttResourceString x:Key="taskToolTipActualStartLabel" ResourceName="TaskBarToolTip_ActualStartLabel" />
    <igSchedulePrim:GanttResourceString x:Key="taskToolTipCompleteThroughLabel" ResourceName="TaskBarToolTip_CompleteThroughLabel" />
    <igSchedulePrim:GanttResourceString x:Key="taskToolTipDurationLabel" ResourceName="TaskBarToolTip_DurationLabel" />
    <igSchedulePrim:GanttResourceString x:Key="taskToolTipPercentCompleteLabel" ResourceName="TaskBarToolTip_PercentCompleteLabel" />
    <igSchedulePrim:GanttResourceString x:Key="taskToolTipDeadlineLabel" ResourceName="TaskBarToolTip_DeadlineLabel" />
    <igSchedulePrim:GanttResourceString x:Key="taskToolTipTaskFinishLabel" ResourceName="TaskBarToolTip_TaskFinishLabel" />
    <igSchedulePrim:GanttResourceString x:Key="taskToolTipFreeSlackLabel" ResourceName="TaskBarToolTip_FreeSlackLabel" />
    <igSchedulePrim:GanttResourceString x:Key="taskToolTipTaskStartLabel" ResourceName="TaskBarToolTip_TaskStartLabel" />
    <igSchedulePrim:GanttResourceString x:Key="taskToolTipSubtaskStartLabel" ResourceName="TaskBarToolTip_SubtasksStartLabel" />
    <igSchedulePrim:GanttResourceString x:Key="taskToolTipSubtaskFinishLabel" ResourceName="TaskBarToolTip_SubtasksFinishLabel" />
    <igSchedulePrim:GanttResourceString x:Key="taskToolTipSubtaskDurationLabel" ResourceName="TaskBarToolTip_SubtasksDurationLabel" />
    <igSchedulePrim:GanttResourceString x:Key="dependencyToolTipLinkLabel" ResourceName="TaskDependencyToolTip_TaskLinkLabel" />
    <igSchedulePrim:GanttResourceString x:Key="dependencyToolTipLagLabel" ResourceName="TaskDependencyToolTip_LagLabel" />
    <igSchedulePrim:GanttResourceString x:Key="dependencyToolTipFromLabel" ResourceName="TaskDependencyToolTip_FromLabel" />
    <igSchedulePrim:GanttResourceString x:Key="dependencyToolTipToLabel" ResourceName="TaskDependencyToolTip_ToLabel" />
    <igSchedulePrim:GanttResourceString x:Key="dependencyToolTipTitle" ResourceName="TaskDependencyToolTip_Title" />
		<igSchedulePrim:GanttResourceString x:Key="BlockingErrorLiteral" ResourceName="BlockingErrorLiteral"/>

	<!-- ======================== -->
    <!--     ValueConverters      -->
    <!-- ======================== -->
    <igPrim:BoolToVisibilityConverter x:Key="boolToVisibility" />
    <igPrim:EmptyToCollapsedConverter x:Key="emptyToCollapsed" />
    <igPrim:ScaledDoubleConverter x:Key="doubleForPercentConverter">
        <igPrim:ScaledDoubleConverter.ScaleFactor>.01</igPrim:ScaledDoubleConverter.ScaleFactor>
    </igPrim:ScaledDoubleConverter>

    <igPrim:ValueConverterGroup x:Key="notBoolToVisibility">
        <!-- when true then collapse the item, otherwise leave it visible -->
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.SourceValue>
                <sys:Boolean>True</sys:Boolean>
            </igPrim:FixedValueConverter.SourceValue>
            <igPrim:FixedValueConverter.DestinationValue>
                <Visibility>Collapsed</Visibility>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>
    </igPrim:ValueConverterGroup>

    <igPrim:ValueConverterGroup x:Key="complementConverter">
        <!-- True to False -->
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.SourceValue>
                <sys:Boolean>True</sys:Boolean>
            </igPrim:FixedValueConverter.SourceValue>
            <igPrim:FixedValueConverter.DestinationValue>
                <sys:Boolean>False</sys:Boolean>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>

        <!-- False to True -->
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.SourceValue>
                <sys:Boolean>False</sys:Boolean>
            </igPrim:FixedValueConverter.SourceValue>
            <igPrim:FixedValueConverter.DestinationValue>
                <sys:Boolean>True</sys:Boolean>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>

    </igPrim:ValueConverterGroup>

    <igPrim:ValueConverterGroup x:Key="expansionVisibilityToOpacityConverter">
        <!-- when visibility is visible then fully opaque -->
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.SourceValue>
                <Visibility>Visible</Visibility>
            </igPrim:FixedValueConverter.SourceValue>
            <igPrim:FixedValueConverter.DestinationValue>
                <sys:Double>1</sys:Double>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>

        <!-- otherwise hide it but we still want it to occupy space -->
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.DestinationValue>
                <sys:Double>0</sys:Double>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>
    </igPrim:ValueConverterGroup>

    <igPrim:ValueConverterGroup x:Key="indicatorTypeToDataTemplateConverter">
        <igPrim:FixedValueConverter DestinationValue="{StaticResource TaskIndicatorTemplate_FlexibleConstraint}">
            <igPrim:FixedValueConverter.SourceValue>
                <igSchedulePrim:TaskIndicatorType>FlexibleConstraint</igSchedulePrim:TaskIndicatorType>
            </igPrim:FixedValueConverter.SourceValue>
        </igPrim:FixedValueConverter>

        <igPrim:FixedValueConverter DestinationValue="{StaticResource TaskIndicatorTemplate_InflexibleConstraint}">
            <igPrim:FixedValueConverter.SourceValue>
                <igSchedulePrim:TaskIndicatorType>InflexibleConstraint</igSchedulePrim:TaskIndicatorType>
            </igPrim:FixedValueConverter.SourceValue>
        </igPrim:FixedValueConverter>

        <igPrim:FixedValueConverter DestinationValue="{StaticResource TaskIndicatorTemplate_ConstraintViolation}">
            <igPrim:FixedValueConverter.SourceValue>
                <igSchedulePrim:TaskIndicatorType>ConstraintViolation</igSchedulePrim:TaskIndicatorType>
            </igPrim:FixedValueConverter.SourceValue>
        </igPrim:FixedValueConverter>

        <igPrim:FixedValueConverter DestinationValue="{StaticResource TaskIndicatorTemplate_Completed}">
            <igPrim:FixedValueConverter.SourceValue>
                <igSchedulePrim:TaskIndicatorType>Completed</igSchedulePrim:TaskIndicatorType>
            </igPrim:FixedValueConverter.SourceValue>
        </igPrim:FixedValueConverter>

        <igPrim:FixedValueConverter DestinationValue="{StaticResource TaskIndicatorTemplate_Notes}">
            <igPrim:FixedValueConverter.SourceValue>
                <igSchedulePrim:TaskIndicatorType>Notes</igSchedulePrim:TaskIndicatorType>
            </igPrim:FixedValueConverter.SourceValue>
        </igPrim:FixedValueConverter>

        <igPrim:FixedValueConverter DestinationValue="{StaticResource TaskIndicatorTemplate_Deadline}">
            <igPrim:FixedValueConverter.SourceValue>
                <igSchedulePrim:TaskIndicatorType>Deadline</igSchedulePrim:TaskIndicatorType>
            </igPrim:FixedValueConverter.SourceValue>
        </igPrim:FixedValueConverter>
    </igPrim:ValueConverterGroup>

    <igPrim:ValueConverterGroup x:Key="OrientationToBorderThicknessConverter">
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.SourceValue>
                <Orientation>Horizontal</Orientation>
            </igPrim:FixedValueConverter.SourceValue>
            <igPrim:FixedValueConverter.DestinationValue>
                <Thickness>0 1 0 1</Thickness>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>

        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.DestinationValue>
                <Thickness>1 0 1 0</Thickness>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>
    </igPrim:ValueConverterGroup>

    <igPrim:ValueConverterGroup x:Key="OrientationToMinWidthConverter">
        <igPrim:FixedValueConverter >
            <igPrim:FixedValueConverter.SourceValue>
                <Orientation>Vertical</Orientation>
            </igPrim:FixedValueConverter.SourceValue>
            <igPrim:FixedValueConverter.DestinationValue>
                <sys:Double>8</sys:Double>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>
        <igPrim:FixedValueConverter >
            <igPrim:FixedValueConverter.DestinationValue>
                <sys:Double>0</sys:Double>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>
    </igPrim:ValueConverterGroup>

    <igPrim:ValueConverterGroup x:Key="OrientationToMinHeightConverter">
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.SourceValue>
                <Orientation>Horizontal</Orientation>
            </igPrim:FixedValueConverter.SourceValue>
            <igPrim:FixedValueConverter.DestinationValue>
                <sys:Double>8</sys:Double>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.DestinationValue>
                <sys:Double>0</sys:Double>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>
    </igPrim:ValueConverterGroup>

    <igPrim:ValueConverterGroup x:Key="HorizontalToVisibilityConverter">
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.SourceValue>
                <Orientation>Horizontal</Orientation>
            </igPrim:FixedValueConverter.SourceValue>
            <igPrim:FixedValueConverter.DestinationValue>
                <Visibility>Visible</Visibility>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.DestinationValue>
                <Visibility>Collapsed</Visibility>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>
    </igPrim:ValueConverterGroup>

    <igPrim:ValueConverterGroup x:Key="VerticalToVisibilityConverter">
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.SourceValue>
                <Orientation>Vertical</Orientation>
            </igPrim:FixedValueConverter.SourceValue>
            <igPrim:FixedValueConverter.DestinationValue>
                <Visibility>Visible</Visibility>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.DestinationValue>
                <Visibility>Collapsed</Visibility>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>
    </igPrim:ValueConverterGroup>

    <igPrim:ValueConverterGroup x:Key="alternateToBrushConverter">
        <igPrim:FixedValueConverter DestinationValue="{StaticResource CellItemNormalBackgroundBrush}">
            <igPrim:FixedValueConverter.SourceValue>
                <sys:Boolean>False</sys:Boolean>
            </igPrim:FixedValueConverter.SourceValue>
        </igPrim:FixedValueConverter>
        <igPrim:FixedValueConverter DestinationValue="{StaticResource CellItemAltNormalBackgroundBrush}" />
    </igPrim:ValueConverterGroup>

    <igPrim:ValueConverterGroup x:Key="isSummaryToFontWeightConverter">
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.SourceValue>
                <sys:Boolean>True</sys:Boolean>
            </igPrim:FixedValueConverter.SourceValue>
            <igPrim:FixedValueConverter.DestinationValue>
                <sys:String>Bold</sys:String>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.DestinationValue>
                <sys:String>Normal</sys:String>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>
    </igPrim:ValueConverterGroup>

    <igPrim:ValueConverterGroup x:Key="isActiveToFontStyleConverter">
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.SourceValue>
                <sys:Boolean>False</sys:Boolean>
            </igPrim:FixedValueConverter.SourceValue>
            <igPrim:FixedValueConverter.DestinationValue>
                <sys:String>Italic</sys:String>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.DestinationValue>
                <sys:String>Normal</sys:String>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>
    </igPrim:ValueConverterGroup>

    <igPrim:ValueConverterGroup x:Key="isActiveToCellForegroundConverter">
        <igPrim:FixedValueConverter DestinationValue="{StaticResource CellItemInactiveForegroundBrush}">
            <igPrim:FixedValueConverter.SourceValue>
                <sys:Boolean>False</sys:Boolean>
            </igPrim:FixedValueConverter.SourceValue>
        </igPrim:FixedValueConverter>
        <igPrim:FixedValueConverter DestinationValue="{StaticResource CellItemForegroundBrush}" />
    </igPrim:ValueConverterGroup>

    <igPrim:ValueConverterGroup x:Key="visibilityToNotVisibility">
        <!-- flip the visibility -->
        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.SourceValue>
                <Visibility>Visible</Visibility>
            </igPrim:FixedValueConverter.SourceValue>
            <igPrim:FixedValueConverter.DestinationValue>
                <Visibility>Collapsed</Visibility>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>

        <igPrim:FixedValueConverter>
            <igPrim:FixedValueConverter.DestinationValue>
                <Visibility>Visible</Visibility>
            </igPrim:FixedValueConverter.DestinationValue>
        </igPrim:FixedValueConverter>
    </igPrim:ValueConverterGroup>

	<igPrim:ValueConverterGroup x:Key="nullToVisibility">
		<!-- if null sets visibility to Collapsed -->
		<igPrim:FixedValueConverter SourceValue="{x:Null}">
			<igPrim:FixedValueConverter.DestinationValue>
				<Visibility>Collapsed</Visibility>
			</igPrim:FixedValueConverter.DestinationValue>
		</igPrim:FixedValueConverter>

		<!-- if not null sets visibility to Visible -->
		<igPrim:FixedValueConverter>
			<igPrim:FixedValueConverter.DestinationValue>
				<Visibility>Visible</Visibility>
			</igPrim:FixedValueConverter.DestinationValue>
		</igPrim:FixedValueConverter>

	</igPrim:ValueConverterGroup>

	<igSchedulePrim:ProjectTaskStatesValueConverter x:Key="leftShapeToAreaType" RequiredStates="PlaceholderStart">
        <igSchedulePrim:ProjectTaskStatesValueConverter.DestinationValue>
            <igSchedulePrim:GanttTaskDragAreaType>MoveTaskBar</igSchedulePrim:GanttTaskDragAreaType>
        </igSchedulePrim:ProjectTaskStatesValueConverter.DestinationValue>
        <igSchedulePrim:ProjectTaskStatesValueConverter.FallbackValue>
            <igSchedulePrim:GanttTaskDragAreaType>ChangePercentComplete</igSchedulePrim:GanttTaskDragAreaType>
        </igSchedulePrim:ProjectTaskStatesValueConverter.FallbackValue>
    </igSchedulePrim:ProjectTaskStatesValueConverter>

    <igSchedulePrim:ProjectTaskStatesValueConverter x:Key="rightShapeToAreaType" RequiredStates="PlaceholderFinish">
        <igSchedulePrim:ProjectTaskStatesValueConverter.DestinationValue>
            <igSchedulePrim:GanttTaskDragAreaType>MoveTaskBar</igSchedulePrim:GanttTaskDragAreaType>
        </igSchedulePrim:ProjectTaskStatesValueConverter.DestinationValue>
        <igSchedulePrim:ProjectTaskStatesValueConverter.FallbackValue>
            <igSchedulePrim:GanttTaskDragAreaType>ResizeTaskBarEnd</igSchedulePrim:GanttTaskDragAreaType>
        </igSchedulePrim:ProjectTaskStatesValueConverter.FallbackValue>
    </igSchedulePrim:ProjectTaskStatesValueConverter>

    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="activeSummaryNotPlaceholderToVisibility" RequiredStates="Active,Summary" DisallowedStates="Placeholder,ProjectSummary" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="activeProjectSummaryNotPlaceholderToVisibility" RequiredStates="Active,ProjectSummary" DisallowedStates="Placeholder" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="inactiveToVisibility" DisallowedStates="Active" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="activeToVisibility" RequiredStates="Active" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="nonSummaryToVisibility" DisallowedStates="Summary" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="activeDurationOnlyToVisibility" RequiredStates="Active,PlaceholderDuration" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="durationOnlyToVisibility" RequiredStates="PlaceholderDuration"/>
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="activeAutoTaskToVisibility" RequiredStates="Active" DisallowedStates="ManuallyScheduled,Placeholder" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="activeAutoTaskNonCriticalToVisibility" RequiredStates="Active" DisallowedStates="ManuallyScheduled,Placeholder,DisplayAsCritical" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="activeCriticalToVisibility" RequiredStates="Active, DisplayAsCritical" DisallowedStates="Placeholder" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="activeManualTaskToVisibility" RequiredStates="ManuallyScheduled,Active" DisallowedStates="Placeholder" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="activeManualNonCriticalToVisibility" RequiredStates="ManuallyScheduled,Active" DisallowedStates="Placeholder,DisplayAsCritical" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="nonStartOnlyActivePlaceholderToVisibility" RequiredStates="Active,Placeholder" DisallowedStates="PlaceholderStart" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="activeStartOnlyPlaceholderToVisibility" RequiredStates="Active,PlaceholderStart" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="notStartOnlyToVisibility" DisallowedStates="PlaceholderStart" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="notFinishOnlyToVisibility" DisallowedStates="PlaceholderFinish" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="projectSummaryToVisibility" RequiredStates="ProjectSummary" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="notProjectSummaryToVisibility" DisallowedStates="ProjectSummary" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="notStartOrFinishOnlyToVisibility" DisallowedStates="PlaceholderFinish,PlaceholderStart" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="startOnlyToVisibility" RequiredStates="PlaceholderStart" />
    <igSchedulePrim:ProjectTaskStatesVisibilityConverter x:Key="finishOnlyToVisibility" RequiredStates="PlaceholderFinish" />

    <!-- ======================== -->
    <!-- Shared Styles/Templates  -->
    <!-- ======================== -->
    <Style TargetType="ItemsControl" x:Key="simpleItemsControlStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ItemsControl">
                    <ItemsPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="indicatorsTooltipContentTemplate">
        <ItemsControl ItemsSource="{Binding}" MaxWidth="210" Style="{StaticResource simpleItemsControlStyle}">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <!-- Note, the Content binding is here to work around an issue in SL where this CP is not 
                          getting the DataContext from the containing CP created by the ItemsControl or is setting 
                          its own local value -->
                        <ContentPresenter
                            Margin="0,0,3,0"
                            igPrim:XamlHelper.SnapsToDevicePixels="True"
                            VerticalAlignment="Top"
                            Content="{Binding Content, RelativeSource={RelativeSource AncestorType=ContentPresenter}}"
                            ContentTemplate="{Binding IndicatorType, Converter={StaticResource indicatorTypeToDataTemplateConverter}}" />
                        <TextBlock
                            Text="{Binding Description}"
                            TextWrapping="Wrap"
                            Grid.Column="1" />
                    </Grid>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <Style TargetType="TextBlock" x:Key="manualTextBlockStyle">
        <Setter Property="FontStyle" Value="Italic" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
    </Style>

    <!-- *********************************  RepeatButtonTemplate  ********************************* -->
    <ControlTemplate x:Key="RepeatButtonTemplate" TargetType="RepeatButton">
        <Grid Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal"/>
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="FocusStates">
                    <VisualState x:Name="Focused"/>
                    <VisualState x:Name="Unfocused"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ContentPresenter x:Name="contentPresenter" Opacity="0.7"/>
        </Grid>
    </ControlTemplate>

    <!-- *********************************  ToggleButtonTemplate  ********************************* -->
    <ControlTemplate x:Key="ToggleButtonTemplate" TargetType="ToggleButton">
        <Grid Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal"/>
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="FocusStates">
                    <VisualState x:Name="Focused"/>
                    <VisualState x:Name="Unfocused"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle Fill="{StaticResource TransparentBrush}"/>
            <ContentPresenter x:Name="contentPresenter" Opacity="0.7"/>
        </Grid>
    </ControlTemplate>

    <!-- *********************************  spinButtonStyle  ********************************* -->
    <Style x:Key="spinButtonStyle" TargetType="RepeatButton">
        <Setter Property="MinWidth" Value="11"/>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="igPrim:XamlHelper.Focusable" Value="False" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="Template" Value="{StaticResource RepeatButtonTemplate}"/>
    </Style>

    <!-- *********************************  dropDownButtonStyle  ********************************* -->
    <Style x:Key="dropDownButtonStyle" TargetType="ToggleButton">
        <Setter Property="MinWidth" Value="11"/>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="igPrim:XamlHelper.Focusable" Value="False" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="Template" Value="{StaticResource ToggleButtonTemplate}"/>
    </Style>

    <DataTemplate x:Key="IncreaseGlyphKey">
        <Path Width="7" Height="4" Data="M4.9585595,6.4799328 L9.9993324,1.9604321 L15.061378,6.4794879 L13.686531,7.979373 L9.9993334,4.5627856 L6.3744011,7.9793801 z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Control}}" Stretch="Fill"/>
    </DataTemplate>

    <DataTemplate x:Key="DecreaseGlyphKey">
        <Path Width="7" Height="4" Data="M4.9585595,3.4319611 L9.9993324,7.9791646 L15.061378,3.4315162 L13.686531,1.9208752 L9.9894123,5.3876333 L6.3744011,1.9208823 z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType=Control}}" Stretch="Fill"/>
    </DataTemplate>

    <Style x:Key="expansionIndicatorStyle" TargetType="igPrim:ExpansionIndicator">
        <Setter Property="Background" Value="{StaticResource NormalFill}"/>
        <Setter Property="BorderBrush" Value="{StaticResource NormalFill}"/>
        <Setter Property="Foreground" Value="{StaticResource BackgroundBrush}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Width" Value="9" />
        <Setter Property="Height" Value="9" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="igPrim:XamlHelper.Focusable" Value="False" />
        <Setter Property="igPrim:XamlHelper.SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igPrim:ExpansionIndicator">
                    <Grid Background="{StaticResource TransparentBrush}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>

                            <VisualStateGroup x:Name="ExpansionStates">
                                <VisualState x:Name="Expanded" />
                                <VisualState x:Name="Collapsed" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Border x:Name="ExpansionIndicator"
                            Opacity="{Binding Path=IndicatorVisibility, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource expansionVisibilityToOpacityConverter}}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}">
                            <Grid>
                                <Line
                                    x:Name="verticalLine"
                                    Stretch="Fill"
                                    X1="2.5" X2="2.5" Y1="0" Y2="5"
                                    Stroke="{TemplateBinding Foreground}"
                                    Visibility="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource notBoolToVisibility}}"
                                    />
                                <Line
                                    x:Name="horizontalLine"
                                    Stretch="Fill"
                                    X1="0" X2="5" Y1="2.5" Y2="2.5"
                                    Stroke="{TemplateBinding Foreground}"
                                    />
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="textBoxStyleBase" TargetType="TextBox">
        <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource NormalFill}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Margin" Value="0" />
    </Style>

    <!-- ======================== -->
    <!--    Grid Element Styles   -->
    <!-- ======================== -->

    <!-- *********************************  cellControlStyle  ********************************* -->
    <Style x:Key="cellControlStyle" TargetType="ig:CellControl">
        <Setter Property="FontSize" Value="11" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{StaticResource CellItemNormalBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CellItemNormalBorderBrush}"/>
        <Setter Property="BorderThickness" Value="0,0,1,0"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="FontWeight" Value="{Binding Path=Cell.Row.Data.IsSummary, RelativeSource={RelativeSource Self}, Converter={StaticResource isSummaryToFontWeightConverter}}" />
        <Setter Property="FontStyle" Value="{Binding Path=Cell.Row.Data.IsActive, RelativeSource={RelativeSource Self}, Converter={StaticResource isActiveToFontStyleConverter}}" />
        <Setter Property="Foreground" Value="{Binding Path=Cell.Row.Data.IsActive, RelativeSource={RelativeSource Self}, Converter={StaticResource isActiveToCellForegroundConverter}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ig:CellControl">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">

                                <VisualState x:Name="Normal" />

                                <VisualState x:Name="MouseOver">
                                    <Storyboard >
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00" Storyboard.TargetName="AltMouseOver" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{StaticResource CellRowHoverBackgroundBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Alternate" >
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00" Storyboard.TargetName="AltMouseOver" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{StaticResource CellItemAltNormalBackgroundBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                            </VisualStateGroup>

                            <VisualStateGroup x:Name="SelectedStates">
                                <VisualState x:Name="NotSelected" />
                                <VisualState x:Name="Selected">
                                    <Storyboard >
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00" Storyboard.TargetName="ActiveSelected" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{StaticResource CellItemSelectedBackgroundBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00" Storyboard.TargetName="ActiveSelected" Storyboard.TargetProperty="BorderThickness">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Thickness>0,0,1,0</Thickness>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>

                            <VisualStateGroup x:Name="ActiveStates">
                                <VisualState x:Name="InActive" />
                                <VisualState x:Name="Active">
                                    <Storyboard >
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00" Storyboard.TargetName="ActiveSelected" Storyboard.TargetProperty="BorderThickness">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Thickness>1,1,1,1</Thickness>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>

                        </VisualStateManager.VisualStateGroups>

                        <Border 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            x:Name="Root" />
                        <Rectangle x:Name="AltMouseOver" Margin="{TemplateBinding BorderThickness}" />
                        <Border x:Name="ActiveSelected" BorderBrush="{StaticResource CellItemSelectedBorderBrush}" />
                        <ContentPresenter 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            Margin="{TemplateBinding Padding}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ======================== -->
    <!-- Control Styles           -->
    <!-- ======================== -->

    <!-- ================================ -->
    <!--      SpinEditorControlBase       -->
    <!-- ================================ -->
    <Style TargetType="igEditorPrim:SpinEditorBase">
        <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource NormalFill}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igEditorPrim:SpinEditorBase">
                    <igPrim:ValidationDecorator>
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                igPrim:XamlHelper.SnapsToDevicePixels="true">
                            <Grid igPrim:XamlHelper.SnapsToDevicePixels="{TemplateBinding igPrim:XamlHelper.SnapsToDevicePixels}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <igPrim:EmbeddedTextBox x:Name="TextBox" Padding="2" />
                                <Grid Visibility="{TemplateBinding SpinButtonVisibility}" Grid.Column="1">
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <RepeatButton Style="{StaticResource spinButtonStyle}"
                                                  ContentTemplate="{StaticResource IncreaseGlyphKey}"
                                                  Command="{TemplateBinding SpinUpCommand}"
                                                  Grid.Row="0" />
                                    <RepeatButton Style="{StaticResource spinButtonStyle}"
                                                  ContentTemplate="{StaticResource DecreaseGlyphKey}"
                                                  Command="{TemplateBinding SpinDownCommand}"
                                                  Grid.Row="1" />
                                </Grid>
                            </Grid>
                        </Border>
                    </igPrim:ValidationDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--       ManualDateTimeEditor       -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:ManualDateTimeEditor">
        <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource NormalFill}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:ManualDateTimeEditor">
                    <igPrim:ValidationDecorator>
                        <Border Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                igPrim:XamlHelper.SnapsToDevicePixels="true">
                            <Grid igPrim:XamlHelper.SnapsToDevicePixels="{TemplateBinding igPrim:XamlHelper.SnapsToDevicePixels}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <igPrim:EmbeddedTextBox x:Name="TextBox" Padding="2" />
                                <Grid Visibility="{TemplateBinding SpinButtonVisibility}" Grid.Column="1">
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <RepeatButton Style="{StaticResource spinButtonStyle}"
                                        ContentTemplate="{StaticResource IncreaseGlyphKey}"
                                        Command="{TemplateBinding SpinUpCommand}"
                                        Grid.Row="0" />
                                    <RepeatButton Style="{StaticResource spinButtonStyle}"
                                        ContentTemplate="{StaticResource DecreaseGlyphKey}"
                                        Command="{TemplateBinding SpinDownCommand}"
                                        Grid.Row="1" />
                                </Grid>
                                <ToggleButton
                                    x:Name="DropDownButton"
                                    Style="{StaticResource dropDownButtonStyle}"
                                    ContentTemplate="{StaticResource DecreaseGlyphKey}"
                                    Grid.Column="2"
                                    ClickMode="Press"
                                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                    IsEnabled="{Binding IsReadOnly, Converter={StaticResource complementConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                    igPrim:XamlHelper.Focusable="False" IsTabStop="False" Margin="0,1,1,1"
                                    />
                                <Popup x:Name="Popup">
                                    <Border
                                        Background="{StaticResource BackgroundBrush}"
                                        BorderBrush="{StaticResource PopupStroke}"
                                        BorderThickness="1"
                                        Padding="1">
                                        <ig:XamCalendar x:Name="Calendar"
                                            MinDate="{TemplateBinding Minimum}"
                                            MaxDate="{TemplateBinding Maximum}"
                                            SelectionMode="SingleDate" />
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>
                    </igPrim:ValidationDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--       ProjectDatePresenter       -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:ProjectDatePresenter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:ProjectDatePresenter">
                    <TextBlock Text="{TemplateBinding FormattedText}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--     ProjectDurationPresenter     -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:ProjectDurationPresenter">
        <Setter Property="StringFormat" Value="{Binding Project.SettingsResolved.DurationStringFormat, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:ProjectDurationPresenter">
                    <TextBlock Text="{TemplateBinding FormattedText}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--       TaskIndicatorControl       -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:TaskIndicatorControl">
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:TaskIndicatorControl">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            Padding="{TemplateBinding Padding}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            IsHitTestVisible="{TemplateBinding HasIndicators}"
                            igPrim:XamlHelper.SnapsToDevicePixels="True">
                        <ToolTipService.ToolTip>
                            <ToolTip
                                Template="{StaticResource toolTipTemplate}"
                                Content="{Binding Indicators, RelativeSource={RelativeSource TemplatedParent}}"
                                ContentTemplate="{StaticResource indicatorsTooltipContentTemplate}" />
                        </ToolTipService.ToolTip>
                        <ItemsControl
                            igPrim:XamlHelper.SnapsToDevicePixels="{TemplateBinding igPrim:XamlHelper.SnapsToDevicePixels}"
                            ItemsSource="{Binding Indicators, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource simpleItemsControlStyle}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <!-- Note, the Content binding is here to work around an issue in SL where this CP is not 
                        getting the DataContext from the containing CP created by the ItemsControl or is setting 
                        its own local value -->
                                    <ContentPresenter
                                        igPrim:XamlHelper.SnapsToDevicePixels="True"
                                        Margin="0,0,1,0"
                                        Content="{Binding Content, RelativeSource={RelativeSource AncestorType=ContentPresenter}}"
                                        ContentTemplate="{Binding IndicatorType, Converter={StaticResource indicatorTypeToDataTemplateConverter}}"
                                        />
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal" />
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                        </ItemsControl>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--        GanttChartPresenter       -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:GanttTimescaleArea">
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttTimescaleArea">
                    <Grid x:Name="RootPanel" Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--     TimescaleHeaderPresenter     -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:TimescaleHeaderPresenter">
        <Setter Property="Background" Value="{StaticResource HeaderNormalBackgroundBrush}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="BorderBrush" Value="{StaticResource HeaderNormalBorderBrush}" />
        <Setter Property="VerticalContentAlignment" Value="Bottom" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:TimescaleHeaderPresenter">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        igPrim:XamlHelper.SnapsToDevicePixels="True">
                        <igSchedulePrim:TimescaleBandPanel VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Name="BandPanel" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--      TimescaleBandPresenter      -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:TimescaleBandPresenter">
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="BorderThickness" Value="0,1,0,0" />
        <Setter Property="BorderBrush" Value="{StaticResource HeaderNormalBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:TimescaleBandPresenter">
                    <Grid Background="{TemplateBinding Background}">
                        <!-- making this sibling to the text since the text shouldn't shift if the border is hidden -->
                        <Border
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            igPrim:XamlHelper.SnapsToDevicePixels="True"
                            />
                        <igSchedulePrim:TimescaleIntervalPanel
                            Margin="{TemplateBinding BorderThickness}"
                            Name="IntervalPanel" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--         GanttRowPresenter        -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:GanttRowPresenter">
        <Setter Property="Background" Value="{Binding Path=Row.IsAlternate, RelativeSource={RelativeSource Self}, Converter={StaticResource alternateToBrushConverter}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttRowPresenter">
                    <Border x:Name="RootVisual"
                        Background="{TemplateBinding Background}"
                        igPrim:XamlHelper.SnapsToDevicePixels="True">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="SelectedStates">
                                <VisualState x:Name="Unselected" />
                                <VisualState x:Name="Selected">
                                    <Storyboard >
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00" Storyboard.TargetName="RootVisual" Storyboard.TargetProperty="Background">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{StaticResource CellItemSelectedBackgroundBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--        NonWorkingTimeArea        -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:NonWorkingTimeArea">
       <Setter Property="Background" Value="{StaticResource NonWorkingTimelineBgBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:NonWorkingTimeArea">
                    <Border
                        Background="{TemplateBinding Background}"
                        igPrim:XamlHelper.SnapsToDevicePixels="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--        GanttTaskDragArea         -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:GanttTaskDragArea">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttTaskDragArea">
                    <Border
                        Background="{TemplateBinding Background}"
                        igPrim:XamlHelper.SnapsToDevicePixels="True" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ===================================== -->
    <!--  GanttTaskDependencyToolTipPresenter  -->
    <!-- ===================================== -->
    <Style TargetType="igSchedulePrim:GanttTaskDependencyToolTipPresenter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttTaskDependencyToolTipPresenter">
                    <StackPanel>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition MinWidth="16" Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            
                            <TextBlock Grid.Column="0" Text="{Binding Source={StaticResource dependencyToolTipLinkLabel}, Path=Value}" />
                            <TextBlock Grid.Column="1" Text="{Binding LinkText, RelativeSource={RelativeSource TemplatedParent}}" />

                            <TextBlock Grid.Column="3" Text="{Binding Source={StaticResource dependencyToolTipLagLabel}, Path=Value}" />
                            <igSchedulePrim:ProjectDurationPresenter 
                                Grid.Column="4" 
                                Duration="{Binding Dependency.Lag, RelativeSource={RelativeSource TemplatedParent}}" 
                                Project="{Binding Dependency.From.Project, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Grid>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{Binding Source={StaticResource dependencyToolTipFromLabel}, Path=Value}" />
                            <TextBlock Text="{Binding Dependency.From.Id, RelativeSource={RelativeSource TemplatedParent}, StringFormat='(ID {0}) '}" />
                            <TextBlock Text="{Binding Dependency.From.TaskName, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{Binding Source={StaticResource dependencyToolTipToLabel}, Path=Value}" />
                            <TextBlock Text="{Binding Dependency.To.Id, RelativeSource={RelativeSource TemplatedParent}, StringFormat='(ID {0}) '}" />
                            <TextBlock Text="{Binding Dependency.To.TaskName, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--   GanttTaskDependencyPresenter   -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:GanttTaskDependencyPresenter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttTaskDependencyPresenter">
                    <!-- Note: there shouldn't be any chrome/padding/margins around the canvas -->
                    <Canvas x:Name="RootPanel">
                        <ToolTipService.ToolTip>
                            <ToolTip Template="{StaticResource toolTipTemplate}">
                                <StackPanel>
                                    <ContentControl Style="{StaticResource toolTipHeaderTemplate}" Content="{Binding Source={StaticResource dependencyToolTipTitle}, Path=Value}" Foreground="{StaticResource TooltipTitleForegroundBrush}"/>
                                    <igSchedulePrim:GanttTaskDependencyToolTipPresenter Dependency="{TemplateBinding Dependency}" Margin="5,0"/>
                            </StackPanel>
                            </ToolTip>
                        </ToolTipService.ToolTip>

                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="DragStates">
                                <VisualState x:Name="Dragging">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00" Storyboard.TargetName="Line1" Storyboard.TargetProperty="Stroke">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{StaticResource CellItemSelectedBorderBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00" Storyboard.TargetName="EndCap" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{StaticResource CellItemSelectedBorderBrush}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="NotDragging"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Path x:Name="Line2" Stroke="Transparent" StrokeThickness="5" />
                        <Path x:Name="Line1" Stroke="{StaticResource ProjectTaskDependencyPresenterLine}" />
                        <!-- Note: Caps must face right -->
                        <Path x:Name="EndCap" Data="M 0,0 4.5,4.5 0,9 Z" Fill="{StaticResource ProjectTaskDependencyPresenterEndCap}" />
                        <!-- can define start cap if desired
                        <Path x:Name="StartCap" Data="M 0,0 4.5,4.5 0,9 Z" Fill="{StaticResource ProjectTaskDependencyPresenterStartCap}" />-->
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ======================================= -->
    <!-- GanttTaskDependencyDragToolTipPresenter -->
    <!-- ======================================= -->
    <Style TargetType="igSchedulePrim:GanttTaskDependencyDragToolTipPresenter">
        <Setter Property="MinWidth" Value="200"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttTaskDependencyDragToolTipPresenter">
                    <Border Background="{StaticResource TooltipGenericBackgroundBrush}"  BorderThickness="1" BorderBrush="{StaticResource ToolipGenericBorderBrush}" CornerRadius="2">
                        <StackPanel>
                            <ContentControl Style="{StaticResource toolTipHeaderTemplate}" Content="{TemplateBinding Title}" Foreground="{StaticResource TooltipTitleForegroundBrush}"/>
                            <Grid Margin="5,0">
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="5" />
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>

                                <!-- Task Start: -->
                                <TextBlock
                                    Text="{TemplateBinding SourceLabel}"
                                    Grid.Row="0" />
                                <TextBlock
                                    Grid.Row="0"
                                    Grid.Column="2"
                                    Text="{TemplateBinding SourceTaskIdText}" />

                                <!-- Task Finish: -->
                                <TextBlock
                                    Text="{TemplateBinding TargetLabel}"
                                    Grid.Row="1" />
                                <TextBlock
                                    Grid.Row="1"
                                    Grid.Column="2"
                                    Text="{TemplateBinding TargetTaskIdText}" />
                            </Grid>
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--  ProjectTaskDependencyDragArea   -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:GanttTaskDependencyDragArea">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttTaskDependencyDragArea">
                    <Border Background="Transparent">
                        <Path Data="F1 M 96.3831,33.3099C 98.149,35.0757 98.1167,37.9709 96.3073,39.7804L 96.3065,39.7796L 94.3569,41.7292C 94.5815,40.7079 94.4767,39.6287 94.0425,38.6614L 94.6192,38.0847L 94.6181,38.0836C 95.4677,37.2341 95.5508,35.8718 94.7199,35.041C 93.8988,34.2198 92.4924,34.225 91.6358,35.049L 88.8807,37.8041C 88.0679,38.6487 88.0567,39.9737 88.8579,40.796L 88.8593,40.7947L 89.6458,41.5813L 87.9548,43.2723L 87.1682,42.4858L 87.1718,42.4822C 85.4415,40.7136 85.425,37.8734 87.2221,36.0762L 87.2242,36.0784L 89.9186,33.3841L 89.9164,33.3819C 91.7221,31.5763 94.6173,31.544 96.3831,33.3099 Z M 82.9917,46.7013C 81.2258,44.9355 81.2581,42.0402 83.0675,40.2308L 83.0683,40.2316L 85.0179,38.282C 84.7933,39.3033 84.8981,40.3825 85.3323,41.3497L 84.7556,41.9265L 84.7567,41.9275C 83.9071,42.7771 83.824,44.1394 84.6549,44.9702C 85.476,45.7913 86.8824,45.7861 87.739,44.9622L 90.4941,42.2071C 91.3069,41.3624 91.3181,40.0375 90.5169,39.2151L 90.5155,39.2165L 89.729,38.4299L 91.42,36.7388L 92.2066,37.5254L 92.203,37.529C 93.9333,39.2976 93.9498,42.1378 92.1527,43.9349L 92.1506,43.9328L 89.4562,46.6271L 89.4584,46.6293C 87.6527,48.4349 84.7575,48.4671 82.9917,46.7013 Z " Fill="{StaticResource IconsNormalFill}" Stretch="Fill" UseLayoutRounding="False" Height="12" Width="12"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--    TimescaleIntervalPresenter    -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:TimescaleIntervalPresenter">
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="BorderThickness" Value="0,0,1,0" />
        <Setter Property="Padding" Value="4,0,3,0" />
        <Setter Property="BorderBrush" Value="{StaticResource HeaderNormalBorderBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=IntervalInfo.Band.HorizontalAlignment, RelativeSource={RelativeSource Self}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:TimescaleIntervalPresenter">
                    <Border
                        Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        igPrim:XamlHelper.SnapsToDevicePixels="True">
                        <ToolTipService.ToolTip>
                            <ToolTip Template="{StaticResource toolTipTemplate}">
                                <Binding Path="IntervalInfo.ToolTipText" RelativeSource="{RelativeSource TemplatedParent}" />
                            </ToolTip>
                        </ToolTipService.ToolTip>
                        <TextBlock
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Text="{Binding Path=IntervalInfo.DisplayText, RelativeSource={RelativeSource TemplatedParent}}"
                            />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--         ProjectTableGrid         -->
    <!-- ================================ -->
    <Style x:Key="projectTableGridStyle" TargetType="igSchedulePrim:ProjectTableGrid">
        <Setter Property="Background" Value="{StaticResource TransparentBrush}"/>
        <Setter Property="MinimumRowHeight" Value="21"/>
        <Setter Property="CellStyle" Value="{StaticResource cellControlStyle}" />
        <Setter Property="ToolTipStyle" Value="{StaticResource SimpletoolTip}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:ProjectTableGrid">
                    <Border
                        x:Name="Root"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        igPrim:XamlHelper.SnapsToDevicePixels="True">
                        <Grid
                            Background="{TemplateBinding Background}"
                            igPrim:XamlHelper.SnapsToDevicePixels="{TemplateBinding igPrim:XamlHelper.SnapsToDevicePixels}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <igSchedulePrim:ProjectTableGridRowsPanel x:Name="RowsPanel" Background="Transparent" />
                            <ScrollBar x:Name="VerticalScrollBar" Width="0" MinWidth="0" Grid.Column="1" Template="{Binding Tag, RelativeSource={RelativeSource Self}}"/>
                            <ScrollBar x:Name="HorizontalScrollBar"  Height="0" MinHeight="0" Grid.Row="1" Maximum="0" Template="{Binding Tag, RelativeSource={RelativeSource Self}}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================== -->
    <!--    GanttTaskDragToolTipPresenter   -->
    <!-- ================================== -->
    <Style TargetType="igSchedulePrim:GanttTaskDragToolTipPresenter">
        <Setter Property="MinWidth" Value="200"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttTaskDragToolTipPresenter">
                    <Border Background="{StaticResource TooltipGenericBackgroundBrush}"  BorderThickness="1" BorderBrush="{StaticResource ToolipGenericBorderBrush}" CornerRadius="2">
                        <StackPanel>
                            <Border Background="{StaticResource ToolTtipTitleBackgroundBrush}" Padding="2" VerticalAlignment="Top" CornerRadius="2 2 0 0">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                            <TextBlock 
                                Text="{TemplateBinding Title}" 
                                        Margin="3 0 10 0" 
                                VerticalAlignment="Center" 
                                        Foreground="{StaticResource TooltipTitleForegroundBrush}"
                                        FontWeight="Bold"      
                                />
                            <ContentPresenter 
                                Content="{Binding Path=TaskPreviewElement, RelativeSource={RelativeSource TemplatedParent}}" 
                                Width="100"
                                HorizontalAlignment="Left"
                                VerticalAlignment="Center" 
                                Grid.Column="1"
                                />

                                </Grid>
                            </Border>
                            <Grid Margin="5,0">
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition />
                                <RowDefinition />
                                <RowDefinition />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="5" />
                                    <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <!-- Task Start: -->
                            <TextBlock 
                                Visibility="{TemplateBinding ComputedTaskStartVisibility}"
                                Text="{Binding Source={StaticResource taskToolTipTaskStartLabel}, Path=Value}" 
                                Grid.Row="0" />
                            <igSchedulePrim:ProjectDatePresenter
                                Visibility="{TemplateBinding ComputedTaskStartVisibility}"
                                Grid.Row="0"
                                Grid.Column="2"
                                DateTime="{Binding TaskStart, RelativeSource={RelativeSource TemplatedParent}}"
                                StringFormat="{Binding Task.Project.SettingsResolved.DateStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                LocalToken="{Binding Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}" />

                            <!-- Task Finish: -->
                            <TextBlock 
                                Visibility="{TemplateBinding ComputedTaskFinishVisibility}"
                                Text="{Binding Source={StaticResource taskToolTipTaskFinishLabel}, Path=Value}"
                                Grid.Row="1"/>
                            <igSchedulePrim:ProjectDatePresenter
                                Visibility="{TemplateBinding ComputedTaskFinishVisibility}"
                                Grid.Row="1"
                                Grid.Column="2"
                                DateTime="{Binding TaskFinish, RelativeSource={RelativeSource TemplatedParent}}"
                                StringFormat="{Binding Task.Project.SettingsResolved.DateStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                LocalToken="{Binding Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}" />

                            <!-- Duration: -->
                            <TextBlock
                                Visibility="{TemplateBinding ComputedTaskDurationVisibility}"
                                Text="{Binding Source={StaticResource taskToolTipDurationLabel}, Path=Value}"
                                Grid.Row="2" />
                            <igSchedulePrim:ProjectDurationPresenter 
                                Visibility="{TemplateBinding ComputedTaskDurationVisibility}"
                                Grid.Row="2"
                                Grid.Column="2"
                                Duration="{Binding TaskDuration, RelativeSource={RelativeSource TemplatedParent}}" 
                                Project="{Binding Task.Project, RelativeSource={RelativeSource TemplatedParent}}" />

                            <!-- Deadline: -->
                            <TextBlock 
                                Visibility="{TemplateBinding ComputedTaskDeadlineVisibility}"
                                Text="{Binding Source={StaticResource taskToolTipDeadlineLabel}, Path=Value}" 
                                Grid.Row="3" />
                            <igSchedulePrim:ProjectDatePresenter
                                Visibility="{TemplateBinding ComputedTaskDeadlineVisibility}"
                                Grid.Row="3"
                                Grid.Column="2"
                                DateTime="{Binding TaskDeadline, RelativeSource={RelativeSource TemplatedParent}}"
                                StringFormat="{Binding Task.Project.SettingsResolved.DateStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                LocalToken="{Binding Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}" />

                            <!-- Complete Through: -->
                            <TextBlock
                                Visibility="{TemplateBinding ComputedTaskCompleteThroughVisibility}"
                                Text="{Binding Source={StaticResource taskToolTipCompleteThroughLabel}, Path=Value}"
                                Grid.Row="4" />
                            <igSchedulePrim:ProjectDatePresenter
                                Visibility="{TemplateBinding ComputedTaskCompleteThroughVisibility}"
                                Grid.Row="4"
                                Grid.Column="2"
                                DateTime="{Binding TaskCompleteThrough, RelativeSource={RelativeSource TemplatedParent}}"
                                StringFormat="{Binding Task.Project.SettingsResolved.DateStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                LocalToken="{Binding Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Grid>
                    </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>  
    
    <!-- ================================ -->
    <!--      GanttTaskPresenterBase      -->
    <!-- ================================ -->
    <Style x:Key="taskBarPresenterBase" TargetType="igSchedulePrim:GanttTaskPresenterBase">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0,5" />
    </Style>

    <!-- ======================================== -->
    <!--     GanttTaskProgressToolTipPresenter    -->
    <!-- ======================================== -->
    <Style TargetType="igSchedulePrim:GanttTaskProgressToolTipPresenter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttTaskProgressToolTipPresenter">
                    <StackPanel>
                        <ContentControl Style="{StaticResource toolTipHeaderTemplate}" Content="{Binding Source={StaticResource progressToolTipTitle}, Path=Value}" Foreground="{StaticResource TooltipTitleForegroundBrush}"/>

                        <StackPanel Orientation="Horizontal" Margin="5,0">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipNameLabel}, Path=Value}" />
                            <TextBlock Text="{Binding Task.TaskName, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>

                        <StackPanel Orientation="Horizontal" Margin="5,0">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipActualStartLabel}, Path=Value}" />
                            <igSchedulePrim:ProjectDatePresenter
                                DateTime="{Binding Task.ActualStart, RelativeSource={RelativeSource TemplatedParent}}"
                                StringFormat="{Binding Task.Project.SettingsResolved.DateStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                LocalToken="{Binding Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>

                        <StackPanel Orientation="Horizontal" Margin="5,0">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipCompleteThroughLabel}, Path=Value}" />
                            <igSchedulePrim:ProjectDatePresenter
                                DateTime="{Binding Task.CompleteThrough, RelativeSource={RelativeSource TemplatedParent}}"
                                StringFormat="{Binding Task.Project.SettingsResolved.DateStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                LocalToken="{Binding Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>

                        <StackPanel Orientation="Horizontal" Margin="5,0">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipDurationLabel}, Path=Value}" />
                            <igSchedulePrim:ProjectDurationPresenter Duration="{Binding Task.ScheduledDuration, RelativeSource={RelativeSource TemplatedParent}}" Project="{Binding Task.Project, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>

                        <StackPanel Orientation="Horizontal" Margin="5,0">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipPercentCompleteLabel}, Path=Value}" />
                            <TextBlock Text="{Binding Task.PercentComplete, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource doubleForPercentConverter}, StringFormat=P0}" />
                        </StackPanel>
                    </StackPanel>
                </ControlTemplate>
			  </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--    GanttTaskProgressPresenter    -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:GanttTaskProgressPresenter">
        <!-- Hide the progress on summary tasks -->
        <Setter Property="Visibility" Value="{Binding TaskStates, RelativeSource={RelativeSource Self},Converter={StaticResource nonSummaryToVisibility}}" />
        <Setter Property="Canvas.ZIndex" Value="10" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttTaskProgressPresenter">
                    <Grid Height="{TemplateBinding BarHeight}">
                        <ToolTipService.ToolTip>
                            <ToolTip Template="{StaticResource toolTipTemplate}">
                                <igSchedulePrim:GanttTaskProgressToolTipPresenter Task="{TemplateBinding Task}" TaskStates="{TemplateBinding TaskStates}" />
					   	    </ToolTip>
					    </ToolTipService.ToolTip>
                        <Grid HorizontalAlignment="Left" Width="{TemplateBinding ProgressExtent}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="25*" />
                                    <RowDefinition Height="40*" />
                                    <RowDefinition Height="35*" />
                                </Grid.RowDefinitions>
                                <Rectangle
                                    Grid.Row="1"
                                    RadiusX="2"
                                    RadiusY="2"
                                    Fill="{StaticResource ProgressTaskBackgroundBrush}"
                                    Stroke="{StaticResource ProgressTaskBorderBrush}"
                                    StrokeThickness="{TemplateBinding BorderThickness}"
                                    />
                            </Grid>
                            <igSchedulePrim:GanttTaskDragArea
                                AreaType="ChangePercentComplete"
                                Width="{TemplateBinding BarHeight}"
                                HorizontalAlignment="Right" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ===================================== -->
    <!--     GanttTaskSlackToolTipPresenter    -->
    <!-- ===================================== -->
    <Style TargetType="igSchedulePrim:GanttTaskSlackToolTipPresenter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttTaskSlackToolTipPresenter">
                    <StackPanel>
                        <ContentControl Style="{StaticResource toolTipHeaderTemplate}" Content="{Binding Source={StaticResource slackToolTipTitle}, Path=Value}" Foreground="{StaticResource TooltipTitleForegroundBrush}"/>

                        <StackPanel Orientation="Horizontal" Margin="5,0">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipNameLabel}, Path=Value}" />
                            <TextBlock Text="{Binding Task.TaskName, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>

                        <StackPanel Orientation="Horizontal" Margin="5,0">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipTaskFinishLabel}, Path=Value}" />
                            <igSchedulePrim:ProjectDatePresenter
                                DateTime="{Binding Task.CalculatedFinish, RelativeSource={RelativeSource TemplatedParent}}"
                                StringFormat="{Binding Task.Project.SettingsResolved.DateStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                LocalToken="{Binding Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>

                        <StackPanel Orientation="Horizontal" Margin="5,0">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipFreeSlackLabel}, Path=Value}" />
                            <igSchedulePrim:ProjectDatePresenter
                                DateTime="{Binding Task.CalculatedFinish, RelativeSource={RelativeSource TemplatedParent}}"
                                DateTimeAdjustment="{Binding Task.FreeSlack, RelativeSource={RelativeSource TemplatedParent}}"
                                Task="{TemplateBinding Task}"
                                StringFormat="{Binding Task.Project.SettingsResolved.DateStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                LocalToken="{Binding Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>

                        <StackPanel Orientation="Horizontal" Margin="5,0">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipDurationLabel}, Path=Value}" />
                            <igSchedulePrim:ProjectDurationPresenter Duration="{Binding Task.ScheduledDuration, RelativeSource={RelativeSource TemplatedParent}}" Project="{Binding Task.Project, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--      GanttTaskSlackPresenter     -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:GanttTaskSlackPresenter" BasedOn="{StaticResource taskBarPresenterBase}">
        <!-- Hide the slack on inactive tasks -->
        <Setter Property="Visibility" Value="{Binding TaskStates, RelativeSource={RelativeSource Self},Converter={StaticResource activeToVisibility}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttTaskSlackPresenter">
                    <igSchedulePrim:GanttTaskContentPanel
                        x:Name="ContentPanel"
                        BarHeight="{TemplateBinding BarHeight}"
                        igPrim:XamlHelper.SnapsToDevicePixels="True"
                        >
                        <ToolTipService.ToolTip>
                        		<ToolTip Template="{StaticResource toolTipTemplate}">
                            <igSchedulePrim:GanttTaskSlackToolTipPresenter Task="{TemplateBinding Task}" TaskStates="{TemplateBinding TaskStates}" />
                        		</ToolTip>
						</ToolTipService.ToolTip>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="22*" />
                                <RowDefinition Height="2*" MinHeight="2" />
                            </Grid.RowDefinitions>
                            <Rectangle Fill="{StaticResource SlackTaskBackgroundBrush}" Grid.Row="1" />
                        </Grid>
                    </igSchedulePrim:GanttTaskContentPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ======================================== -->
    <!--     GanttTaskDeadlineToolTipPresenter    -->
    <!-- ======================================== -->
    <Style TargetType="igSchedulePrim:GanttTaskDeadlineToolTipPresenter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttTaskDeadlineToolTipPresenter">
                    <StackPanel>
                        <ContentControl Style="{StaticResource toolTipHeaderTemplate}" Content="{Binding Source={StaticResource deadlineToolTipTitle}, Path=Value}" Foreground="{StaticResource TooltipTitleForegroundBrush}"/>

                        <StackPanel Orientation="Horizontal" Margin="5,0">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipNameLabel}, Path=Value}" />
                            <TextBlock Text="{Binding Task.TaskName, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>

                        <StackPanel Orientation="Horizontal" Margin="5,0">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipDeadlineLabel}, Path=Value}" />
                            <igSchedulePrim:ProjectDatePresenter
                                DateTime="{Binding Task.Deadline, RelativeSource={RelativeSource TemplatedParent}}"
                                StringFormat="{Binding Task.Project.SettingsResolved.DateStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                LocalToken="{Binding Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--    GanttTaskDeadlinePresenter    -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:GanttTaskDeadlinePresenter" BasedOn="{StaticResource taskBarPresenterBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttTaskDeadlinePresenter">
                    <igSchedulePrim:GanttTaskContentPanel
                        x:Name="ContentPanel"
                        BarHeight="{TemplateBinding BarHeight}"
                        RightShapeAlignment="OverEdge"
                        igPrim:XamlHelper.SnapsToDevicePixels="True"
                        >
                        <ToolTipService.ToolTip>
                        		<ToolTip Template="{StaticResource toolTipTemplate}">
                            <igSchedulePrim:GanttTaskDeadlineToolTipPresenter Task="{TemplateBinding Task}" TaskStates="{TemplateBinding TaskStates}" />
                      			</ToolTip>
					    </ToolTipService.ToolTip>
                        <igSchedulePrim:GanttTaskContentPanel.RightShape>
                            <Grid Canvas.ZIndex="1">
                                <!-- Note: The natural size of the shape paths should be small so it scales properly with the uniformtofill -->
                                <Path StrokeThickness="1"
                                        Stroke="{StaticResource DeadlineTaskBorderBrush}"
                                        Fill="{StaticResource DeadlineTaskBackgroundBrush}"
                                        Stretch="UniformToFill"
                                        IsHitTestVisible="false"
                                        Data="M 1.5,0 3.5,0 3.5,2.5 5,2.5 5,3 2.5,5 0,3 0,2.5 1.5,2.5 Z"
                                    />
                                <igSchedulePrim:GanttTaskDragArea RenderTransform="{Binding Path=RightShapeDragAreaTransform, ElementName=ContentPanel}"/>
                            </Grid>
                        </igSchedulePrim:GanttTaskContentPanel.RightShape>
                    </igSchedulePrim:GanttTaskContentPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ======================================= -->
    <!--    GanttMilestoneTaskToolTipPresenter   -->
    <!-- ======================================= -->
    <Style TargetType="igSchedulePrim:GanttMilestoneTaskToolTipPresenter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttMilestoneTaskToolTipPresenter">
                    <StackPanel>
                        <ContentControl Style="{StaticResource toolTipHeaderTemplate}" Content="{Binding Source={StaticResource milestoneToolTipTitle}, Path=Value}" Foreground="{StaticResource TooltipTitleForegroundBrush}"/>

                        <StackPanel Orientation="Horizontal" Margin="5,0">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipNameLabel}, Path=Value}" />
                            <TextBlock Text="{Binding Task.TaskName, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>

                        <StackPanel Orientation="Horizontal" Margin="5,0" Visibility="{Binding TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource startOnlyToVisibility}}">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipTaskStartLabel}, Path=Value}" />
                            <igSchedulePrim:ProjectDatePresenter
                                DateTime="{Binding Task.CalculatedStart, RelativeSource={RelativeSource TemplatedParent}}"
                                StringFormat="{Binding Task.Project.SettingsResolved.DateStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                LocalToken="{Binding Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>

                        <StackPanel Orientation="Horizontal" Margin="5,0" Visibility="{Binding TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource notStartOnlyToVisibility}}">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipTaskFinishLabel}, Path=Value}" />
                            <igSchedulePrim:ProjectDatePresenter
                                DateTime="{Binding Task.CalculatedFinish, RelativeSource={RelativeSource TemplatedParent}}"
                                StringFormat="{Binding Task.Project.SettingsResolved.DateStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                LocalToken="{Binding Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--    GanttMilestoneTaskPresenter   -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:GanttMilestoneTaskPresenter" BasedOn="{StaticResource taskBarPresenterBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttMilestoneTaskPresenter">
                    <igSchedulePrim:GanttTaskContentPanel
                        x:Name="ContentPanel"
                        BarHeight="{TemplateBinding BarHeight}"
                        RightShapeAlignment="OverEdge"
                        igPrim:XamlHelper.SnapsToDevicePixels="True"
                        >
                        <ToolTipService.ToolTip>
                        	<ToolTip Template="{StaticResource toolTipTemplate}">
                                <igSchedulePrim:GanttMilestoneTaskToolTipPresenter Task="{TemplateBinding Task}" TaskStates="{TemplateBinding TaskStates}" />
                       		</ToolTip>
					    </ToolTipService.ToolTip>
                        <igSchedulePrim:GanttTaskContentPanel.LeftShape>
                            <Grid Visibility="{TemplateBinding ComputedLeftShapeVisibility}">
                                <!-- Note: The natural size of the shape paths should be small so it scales properly with the uniformtofill -->
                                <Path StrokeThickness="1"
                                      Stroke="{StaticResource PlaceholderMilestoneTaskBorderBrush}"
                                      Fill="{StaticResource PlaceholderMilestoneTaskBackgroundBrush}"
                                      Stretch="UniformToFill"
                                      IsHitTestVisible="false"
                                      Data="M 0,1 1,0 2,1 1,2 Z" />
                                <igSchedulePrim:GanttTaskDragArea RenderTransform="{Binding Path=LeftShapeDragAreaTransform, ElementName=ContentPanel}"/>
                            </Grid>
                        </igSchedulePrim:GanttTaskContentPanel.LeftShape>
                        <igSchedulePrim:GanttTaskContentPanel.RightShape>
                            <!-- Note: The natural size of the shape paths should be small so it scales properly with the uniformtofill -->
                            <Grid Visibility="{TemplateBinding ComputedRightShapeVisibility}">
                                <Path StrokeThickness="1"
                                      Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource activeManualTaskToVisibility}}"
                                      Stroke="{StaticResource ManualMilestoneTaskBorderBrush}"
                                      Fill="{StaticResource ManualMilestoneTaskBackgroundBrush}"
                                      Stretch="UniformToFill"
                                      IsHitTestVisible="false"
                                      Data="M 0,1 1,0 2,1 1,2 Z" />
                                <Path StrokeThickness="1"
                                      Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource activeAutoTaskToVisibility}}"
                                      Stroke="{StaticResource TaskShapeBorderBrush}"
                                      Fill="{StaticResource TaskShapeBackgroundBrush}"
                                      Stretch="UniformToFill"
                                      IsHitTestVisible="false"
                                      Data="M 0,1 1,0 2,1 1,2 Z" />
                                <Path StrokeThickness="1"
                                      Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource nonStartOnlyActivePlaceholderToVisibility}}"
                                      Stroke="{StaticResource PlaceholderMilestoneTaskBorderBrush}"
                                      Fill="{StaticResource PlaceholderMilestoneTaskBackgroundBrush}"
                                      Stretch="UniformToFill"
                                      IsHitTestVisible="false"
                                      Data="M 0,1 1,0 2,1 1,2 Z" />
                                <Grid x:Name="InactiveMilestone" Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource inactiveToVisibility}}">
                                    <Path
                                        Fill="{StaticResource InactiveTaskBackgroundBrush}"
                                        Stretch="Uniform"
                                        IsHitTestVisible="false"
                                        Data="M 0,1 1,0 2,1 1,2 Z" />
                                    <Path StrokeThickness="1"
                                        Stroke="{StaticResource InactiveTaskBorderBrush}"
                                        IsHitTestVisible="false"
                                        Stretch="UniformToFill"
                                        Data="M 0.75,0.25, 1,0 1.25,0.25 M 1.75,0.75 2,1 1.75,1.25 M 1.25,1.75 1,2 0.75,1.75 M 0.25,1.25 0,1 0.25,0.75" />
                                </Grid>
                                <igSchedulePrim:GanttTaskDragArea RenderTransform="{Binding Path=RightShapeDragAreaTransform, ElementName=ContentPanel}"/>
                            </Grid>
                        </igSchedulePrim:GanttTaskContentPanel.RightShape>

                        <!-- Adorners -->
                        <StackPanel 
                            Orientation="Horizontal" 
                            Margin="0,0,10,0" 
                            Visibility="{TemplateBinding TaskAdornmentVisibility}" 
                            igSchedulePrim:GanttTaskContentPanel.AdornerLocation="Left">
                            <igSchedulePrim:GanttTaskDependencyDragArea AreaType="Start" Margin="5,0,0,0" Visibility="{TemplateBinding ComputedStartLinkVisibility}" />
                        </StackPanel>
                        <StackPanel 
                            Orientation="Horizontal" 
                            Margin="10,0,0,0" 
                            Visibility="{TemplateBinding TaskAdornmentVisibility}" 
                            igSchedulePrim:GanttTaskContentPanel.AdornerLocation="Right">
                            <igSchedulePrim:GanttTaskDependencyDragArea AreaType="Finish" Margin="0,0,5,0" Visibility="{TemplateBinding ComputedFinishLinkVisibility}" />
                            <Grid IsHitTestVisible="False">
                                <igSchedulePrim:ProjectDatePresenter
                                    Visibility="{TemplateBinding ComputedRightShapeVisibility}"
                                    StringFormat="d"
                                    LocalToken="{Binding Path=Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}"
                                    DateTime="{Binding Path=Task.CalculatedFinish, RelativeSource={RelativeSource TemplatedParent}}" />
                                <igSchedulePrim:ProjectDatePresenter
                                    Visibility="{TemplateBinding ComputedLeftShapeVisibility}"
                                    StringFormat="d"
                                    LocalToken="{Binding Path=Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}"
                                    DateTime="{Binding Path=Task.CalculatedStart, RelativeSource={RelativeSource TemplatedParent}}" />
                            </Grid>
                        </StackPanel>
                    </igSchedulePrim:GanttTaskContentPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ===================================== -->
    <!--    GanttNormalTaskToolTipPresenter    -->
    <!-- ===================================== -->
    <Style TargetType="igSchedulePrim:GanttNormalTaskToolTipPresenter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttNormalTaskToolTipPresenter">
                    <StackPanel>
                        <ContentControl Style="{StaticResource toolTipHeaderTemplate}" Content="{Binding Source={StaticResource taskToolTipTitle}, Path=Value}" Foreground="{StaticResource TooltipTitleForegroundBrush}"/>

                        <StackPanel Orientation="Horizontal" Margin="5,0">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipNameLabel}, Path=Value}" />
                            <TextBlock Text="{Binding Task.TaskName, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>

                        <StackPanel Orientation="Horizontal" Margin="5,0" Visibility="{Binding TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource notFinishOnlyToVisibility}}">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipTaskStartLabel}, Path=Value}" />
                            <igSchedulePrim:ProjectDatePresenter
                                DateTime="{Binding Task.CalculatedStart, RelativeSource={RelativeSource TemplatedParent}}"
                                StringFormat="{Binding Task.Project.SettingsResolved.DateStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                LocalToken="{Binding Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>

                        <StackPanel Orientation="Horizontal" Margin="5,0" Visibility="{Binding TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource notStartOnlyToVisibility}}">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipTaskFinishLabel}, Path=Value}" />
                            <igSchedulePrim:ProjectDatePresenter
                                DateTime="{Binding Task.CalculatedFinish, RelativeSource={RelativeSource TemplatedParent}}"
                                StringFormat="{Binding Task.Project.SettingsResolved.DateStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                LocalToken="{Binding Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>

                        <StackPanel Orientation="Horizontal" Margin="5,0" Visibility="{Binding TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource notStartOrFinishOnlyToVisibility}}">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipDurationLabel}, Path=Value}" />
                            <igSchedulePrim:ProjectDurationPresenter Duration="{Binding Task.ScheduledDuration, RelativeSource={RelativeSource TemplatedParent}}" Project="{Binding Task.Project, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--     GanttNormalTaskPresenter     -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:GanttNormalTaskPresenter" BasedOn="{StaticResource taskBarPresenterBase}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttNormalTaskPresenter">
                    <igSchedulePrim:GanttTaskContentPanel
                        BarHeight="{TemplateBinding BarHeight}"
                        x:Name="ContentPanel"
                        LeftShapeAlignment="InsideEdge"
                        RightShapeAlignment="InsideEdge"
                        igPrim:XamlHelper.SnapsToDevicePixels="True"
                        >
                        <ToolTipService.ToolTip>
                        	<ToolTip Template="{StaticResource toolTipTemplate}">
                                <igSchedulePrim:GanttNormalTaskToolTipPresenter Task="{TemplateBinding Task}" TaskStates="{TemplateBinding TaskStates}" />
                       		</ToolTip>
					    </ToolTipService.ToolTip>
                        <igSchedulePrim:GanttTaskContentPanel.LeftShape>
                            <Grid Visibility="{TemplateBinding ComputedLeftShapeVisibility}" Canvas.ZIndex="1">
                                <!-- Note: The natural size of the shape paths should be small so it scales properly with the uniformtofill -->
                                <Path StrokeThickness="1"
                                      Stroke="{StaticResource TaskShapeBorderBrush}"
                                      Fill="{StaticResource TaskShapeBackgroundBrush}"
                                      Stretch="UniformToFill"
                                      IsHitTestVisible="false"
                                      Data="M 0,0 2.5,0 2.5,1 1,1 1,4 2.5,4 2.5,5 0,5 Z"
                                    />

                                <!-- when this is a start only task then we want to be able to move the task (or change the progress) -->
                                <igSchedulePrim:GanttTaskDragArea AreaType="{Binding TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource leftShapeToAreaType}}" RenderTransform="{Binding Path=LeftShapeDragAreaTransform, ElementName=ContentPanel}"/>
                            </Grid>
                        </igSchedulePrim:GanttTaskContentPanel.LeftShape>
                        <igSchedulePrim:GanttTaskContentPanel.RightShape>
                            <Grid Visibility="{TemplateBinding ComputedRightShapeVisibility}" Canvas.ZIndex="1">
                                <!-- Note: The natural size of the shape paths should be small so it scales properly with the uniformtofill -->
                                <Path StrokeThickness="1"
                                      Stroke="{StaticResource TaskShapeBorderBrush}"
                                      Fill="{StaticResource TaskShapeBackgroundBrush}"
                                      Stretch="UniformToFill"
                                      IsHitTestVisible="false"
                                      Data="M 0,0 2.5,0 2.5,5 0,5 0,4 1.5,4 1.5,1 0,1 Z"
                                    />

                                <!-- when this is a finish only task then we want to be able to move the task (or drag the end) -->
                                <igSchedulePrim:GanttTaskDragArea AreaType="{Binding TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource rightShapeToAreaType}}" RenderTransform="{Binding Path=RightShapeDragAreaTransform, ElementName=ContentPanel}"/>
                            </Grid>
                        </igSchedulePrim:GanttTaskContentPanel.RightShape>
                        <Grid Visibility="{TemplateBinding ComputedMiddleBarVisibility}">
                            <!-- Active Manually Scheduled -->
                            <Rectangle
                                Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource activeManualNonCriticalToVisibility}}"
                                RadiusX="3"
                                RadiusY="3"
                                Fill="{StaticResource ManualTaskBackgroundBrush}"
                                Stroke="{StaticResource ManualTaskBorderBrush}"
                                StrokeThickness="{TemplateBinding BorderThickness}"
                                />
                            <!-- Active Automatically Scheduled -->
                            <Rectangle
                                Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource activeAutoTaskNonCriticalToVisibility}}"
                                RadiusX="3"
                                RadiusY="3"
                                Fill="{StaticResource AutomaticTaskBackgroundBrush}"
                                Stroke="{StaticResource AutomaticTaskBorderBrush}"
                                StrokeThickness="{TemplateBinding BorderThickness}"
                                />
                            <!-- Inactive -->
                            <Rectangle
                                Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource inactiveToVisibility}}"
                                RadiusX="3"
                                RadiusY="3"
                                Fill="{StaticResource InactiveTaskBackgroundBrush}"
                                Stroke="{StaticResource InactiveTaskBorderBrush}"
                                StrokeThickness="{TemplateBinding BorderThickness}"
                                />
                            <!-- Active Duration-Only -->
                            <Rectangle Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource activeDurationOnlyToVisibility}}"
                                RadiusX="3"
                                RadiusY="3"
                                Fill="{StaticResource DurationOnlyTaskBackgroundBrush}"
                                Stroke="{StaticResource DurationOnlyTaskBorderBrush}"
                                StrokeThickness="{TemplateBinding BorderThickness}"
                                />
                            <!-- Critical task -->
                            <Rectangle Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource activeCriticalToVisibility}}"
                                RadiusX="3"
                                RadiusY="3"
                                Fill="{StaticResource CriticalTaskBackgroundBrush}"
                                Stroke="{StaticResource CriticalTaskBorderBrush}"
                                StrokeThickness="{TemplateBinding BorderThickness}"
                                />
                            <!-- Duration only overlay to white-out the left/right edges -->
                            <Grid Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource durationOnlyToVisibility}}">
                                <Rectangle HorizontalAlignment="Left" Width="9" Fill="{StaticResource DurationOnlyOverlayLeftBrush}" />
                                <Rectangle HorizontalAlignment="Right" Width="9" Fill="{StaticResource DurationOnlyOverlayRightBrush}" />
                            </Grid>

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="8" MinWidth="1" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition MaxWidth="8" MinWidth="1" />
                                </Grid.ColumnDefinitions>
                                <!-- this spans the entire middle and is used to move the task -->
                                <igSchedulePrim:GanttTaskDragArea Grid.ColumnSpan="3" />

                                <!-- we only need this when we don't have a left shape -->
                                <igSchedulePrim:GanttTaskDragArea
                                    AreaType="ChangePercentComplete"
                                    Visibility="{Binding ComputedLeftShapeVisibility, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource visibilityToNotVisibility}}"
                                    Grid.Column="0" />

                                <!-- we only need this when we don't have a right shape -->
                                <igSchedulePrim:GanttTaskDragArea
                                    AreaType="ResizeTaskBarEnd"
                                    Visibility="{Binding ComputedRightShapeVisibility, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource visibilityToNotVisibility}}"
                                    Grid.Column="2" />
                            </Grid>
                        </Grid>

                        <!-- Adorners -->
                        <StackPanel 
                            Orientation="Horizontal" 
                            Margin="0,0,10,0" 
                            Visibility="{TemplateBinding TaskAdornmentVisibility}" 
                            igSchedulePrim:GanttTaskContentPanel.AdornerLocation="Left">
                            <igSchedulePrim:GanttTaskDependencyDragArea AreaType="Start" Margin="5,0,0,0" Visibility="{TemplateBinding ComputedStartLinkVisibility}" />
                        </StackPanel>
                        <StackPanel 
                            Orientation="Horizontal" 
                            Margin="10,0,0,0" 
                            Visibility="{TemplateBinding TaskAdornmentVisibility}" 
                            igSchedulePrim:GanttTaskContentPanel.AdornerLocation="Right">
                            <igSchedulePrim:GanttTaskDependencyDragArea AreaType="Finish" Margin="0,0,5,0" Visibility="{TemplateBinding ComputedFinishLinkVisibility}" />
                            <Grid IsHitTestVisible="False">
                                <TextBlock Visibility="{Binding Path=Text, RelativeSource={RelativeSource Self}, Converter={StaticResource emptyToCollapsed}}"
                                    Text="{Binding Path=Task.ResourcesText, RelativeSource={RelativeSource TemplatedParent}}" />
                            </Grid>
                        </StackPanel>
                    </igSchedulePrim:GanttTaskContentPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ======================================= -->
    <!--     GanttSummaryTaskToolTipPresenter    -->
    <!-- ======================================= -->
    <Style TargetType="igSchedulePrim:GanttSummaryTaskToolTipPresenter">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttSummaryTaskToolTipPresenter">
                    <StackPanel >
                        <ContentControl Style="{StaticResource toolTipHeaderTemplate}" Content="{Binding Source={StaticResource summaryToolTipTitle}, Path=Value}" Foreground="{StaticResource TooltipTitleForegroundBrush}" Visibility="{Binding TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource notProjectSummaryToVisibility}}"/>
                        <ContentControl Style="{StaticResource toolTipHeaderTemplate}" Content="{Binding Source={StaticResource projectSummaryToolTipTitle}, Path=Value}" Foreground="{StaticResource TooltipTitleForegroundBrush}" Visibility="{Binding TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource projectSummaryToVisibility}}"/>
                      
                        <StackPanel Orientation="Horizontal" Margin="5,0">
                            <TextBlock Text="{Binding Source={StaticResource taskToolTipNameLabel}, Path=Value}" />
                            <TextBlock Text="{Binding Task.TaskName, RelativeSource={RelativeSource TemplatedParent}}" />
                        </StackPanel>

                        <Grid Margin="5,0" Visibility="{Binding TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource notFinishOnlyToVisibility}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="{Binding Source={StaticResource taskToolTipTaskStartLabel}, Path=Value}" />
                                <igSchedulePrim:ProjectDatePresenter
                                    DateTime="{Binding Task.CalculatedStart, RelativeSource={RelativeSource TemplatedParent}}"
                                    StringFormat="{Binding Task.Project.SettingsResolved.DateStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                    LocalToken="{Binding Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}" />
                            </StackPanel>

                            <StackPanel Margin="16,0,0,0" Orientation="Horizontal" Grid.Column="2" Visibility="{Binding HasStartDifference, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibility}}">
                                <TextBlock Text="(" />
                                <TextBlock Text="{Binding Source={StaticResource taskToolTipSubtaskStartLabel}, Path=Value}" />
                                <igSchedulePrim:ProjectDatePresenter
                                    DateTime="{Binding Task.ScheduledStart, RelativeSource={RelativeSource TemplatedParent}}"
                                    StringFormat="{Binding Task.Project.SettingsResolved.DateStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                    LocalToken="{Binding Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}" />
                                <TextBlock Text=")" />
                            </StackPanel>
                        </Grid>

                        <Grid Margin="5,0" Visibility="{Binding TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource notStartOnlyToVisibility}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="{Binding Source={StaticResource taskToolTipTaskFinishLabel}, Path=Value}" />
                                <igSchedulePrim:ProjectDatePresenter
                                    DateTime="{Binding Task.CalculatedFinish, RelativeSource={RelativeSource TemplatedParent}}"
                                    StringFormat="{Binding Task.Project.SettingsResolved.DateStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                    LocalToken="{Binding Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}" />
                            </StackPanel>

                            <StackPanel Margin="16,0,0,0" Orientation="Horizontal" Grid.Column="2" Visibility="{Binding HasFinishDifference, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibility}}">
                                <TextBlock Text="(" />
                                <TextBlock Text="{Binding Source={StaticResource taskToolTipSubtaskFinishLabel}, Path=Value}" />
                                <igSchedulePrim:ProjectDatePresenter
                                    DateTime="{Binding Task.ScheduledFinish, RelativeSource={RelativeSource TemplatedParent}}"
                                    StringFormat="{Binding Task.Project.SettingsResolved.DateStringFormat, RelativeSource={RelativeSource TemplatedParent}}"
                                    LocalToken="{Binding Task.Project.TimeZoneInfoProvider.LocalToken, RelativeSource={RelativeSource TemplatedParent}}" />
                                <TextBlock Text=")" />
                            </StackPanel>
                        </Grid>

                        <Grid Margin="5,0" Visibility="{Binding TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource notStartOrFinishOnlyToVisibility}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="{Binding Source={StaticResource taskToolTipDurationLabel}, Path=Value}" />
                                <igSchedulePrim:ProjectDurationPresenter Duration="{Binding Task.ManualDuration, RelativeSource={RelativeSource TemplatedParent}}" Project="{Binding Task.Project, RelativeSource={RelativeSource TemplatedParent}}" />
                            </StackPanel>

                            <StackPanel Margin="16,0,0,0" Orientation="Horizontal" Grid.Column="2" Visibility="{Binding HasDurationDifference, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource boolToVisibility}}">
                                <TextBlock Text="(" />
                                <TextBlock Text="{Binding Source={StaticResource taskToolTipSubtaskDurationLabel}, Path=Value}" />
                                <igSchedulePrim:ProjectDurationPresenter Duration="{Binding Task.ScheduledDuration, RelativeSource={RelativeSource TemplatedParent}}" Project="{Binding Task.Project, RelativeSource={RelativeSource TemplatedParent}}" />
                                <TextBlock Text=")" />
                            </StackPanel>
                        </Grid>

                        <TextBlock Text="{TemplateBinding StartDifferenceText}" Visibility="{Binding Path=StartDifferenceText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource emptyToCollapsed}}" />
                        <TextBlock Text="{TemplateBinding FinishDifferenceText}" Visibility="{Binding Path=FinishDifferenceText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource emptyToCollapsed}}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ================================ -->
    <!--     GanttSummaryTaskPresenter    -->
    <!-- ================================ -->
    <Style TargetType="igSchedulePrim:GanttSummaryTaskPresenter" BasedOn="{StaticResource taskBarPresenterBase}">
	    <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedulePrim:GanttSummaryTaskPresenter">
                    <igSchedulePrim:GanttTaskContentPanel
                        x:Name="ContentPanel"
                        BarHeight="{TemplateBinding BarHeight}"
                        LeftShapeAlignment="OverEdge"
                        RightShapeAlignment="OverEdge"
                        igPrim:XamlHelper.SnapsToDevicePixels="True"
                        >
                        <ToolTipService.ToolTip>
                        	<ToolTip Template="{StaticResource toolTipTemplate}">
                           		 <igSchedulePrim:GanttSummaryTaskToolTipPresenter Task="{TemplateBinding Task}" TaskStates="{TemplateBinding TaskStates}" />
                            </ToolTip>
						</ToolTipService.ToolTip>
                        <igSchedulePrim:GanttTaskContentPanel.LeftShape>
                            <!-- Note: The natural size of the shape paths should be small so it scales properly with the uniformtofill -->
                            <Grid Canvas.ZIndex="1" Visibility="{TemplateBinding ComputedLeftShapeVisibility}">
                                <Path x:Name="LeftShape"
                                      Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource activeSummaryNotPlaceholderToVisibility}}"
                                      StrokeThickness="1"
                                      Stroke="{StaticResource TaskShapeBorderBrush}"
                                      Fill="{StaticResource TaskShapeBackgroundBrush}"
                                      Stretch="UniformToFill"
                                      IsHitTestVisible="false"
                                      Data="M 0,0 2,0 2,1 1,2 0,1 Z"
                                      />
                                <Path x:Name="LeftShapeProject"
                                      Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource activeProjectSummaryNotPlaceholderToVisibility}}"
                                      StrokeThickness="1"
                                      Stroke="{StaticResource ActiveProjectSummaryTaskBorderBrush}"
                                      Fill="{StaticResource ActiveProjectSummaryTaskBackgroundBrush}"
                                      Stretch="UniformToFill"
                                      IsHitTestVisible="false"
                                      Data="M 0,0 2,0 2,1 1,2 0,1 Z"
                                      />
                                <Path x:Name="LeftShapeInactive"
                                      Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource inactiveToVisibility}}"
                                      StrokeThickness="1"
                                      Stroke="{StaticResource InactiveTaskBorderBrush}"
                                      Fill="{StaticResource InactiveTaskBackgroundBrush}"
                                      Stretch="UniformToFill"
                                      IsHitTestVisible="false"
                                      Data="M 0,0 2,0 2,1 1,2 0,1 Z"
                                      />
                                <Path x:Name="LeftShapeStartOnly"
                                      StrokeThickness="1"
                                      Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource startOnlyToVisibility}}"
                                      Stroke="{StaticResource TaskShapeBorderBrush}"
                                      Fill="{StaticResource TaskShapeBackgroundBrush}"
                                      Stretch="UniformToFill"
                                      IsHitTestVisible="false"
                                      Data="M 0,0 2.5,0 2.5,1 1,1 1,4 2.5,4 2.5,5 0,5 Z"
                                      />

                                <!-- when this is a start only task then we want to be able to move the task -->
                                <igSchedulePrim:GanttTaskDragArea Visibility="{Binding TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource startOnlyToVisibility}}" RenderTransform="{Binding Path=LeftShapeDragAreaTransform, ElementName=ContentPanel}"/>
                            </Grid>
                        </igSchedulePrim:GanttTaskContentPanel.LeftShape>
                        <igSchedulePrim:GanttTaskContentPanel.RightShape>
                            <Grid Canvas.ZIndex="1" Visibility="{TemplateBinding ComputedRightShapeVisibility}">
                                <!-- Note: The natural size of the shape paths should be small so it scales properly with the uniformtofill -->
                                <Path x:Name="RightShape"
                                      Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource activeSummaryNotPlaceholderToVisibility}}"
                                      StrokeThickness="1"
                                      Stroke="{StaticResource TaskShapeBorderBrush}"
                                      Fill="{StaticResource TaskShapeBackgroundBrush}"
                                      Stretch="UniformToFill"
                                      IsHitTestVisible="false"
                                      Data="M 0,0 2,0 2,1 1,2 0,1 Z"
                                      />
                                <Path x:Name="RightShapeProject"
                                      Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource activeProjectSummaryNotPlaceholderToVisibility}}"
                                      StrokeThickness="1"
                                      Stroke="{StaticResource ActiveProjectSummaryTaskBorderBrush}"
                                      Fill="{StaticResource ActiveProjectSummaryTaskBackgroundBrush}"
                                      Stretch="UniformToFill"
                                      IsHitTestVisible="false"
                                      Data="M 0,0 2,0 2,1 1,2 0,1 Z"
                                      />
                                <Path x:Name="RightShapeInactive"
                                      Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource inactiveToVisibility}}"
                                      StrokeThickness="1"
                                      Stroke="{StaticResource InactiveTaskBorderBrush}"
                                      Fill="{StaticResource InactiveTaskBackgroundBrush}"
                                      Stretch="UniformToFill"
                                      IsHitTestVisible="false"
                                      Data="M 0,0 2,0 2,1 1,2 0,1 Z"
                                      />
                                <Path x:Name="RightShapeFinishOnly"
                                      StrokeThickness="1"
                                      Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource finishOnlyToVisibility}}"
                                      Stroke="{StaticResource TaskShapeBorderBrush}"
                                      Fill="{StaticResource TaskShapeBackgroundBrush}"
                                      Stretch="UniformToFill"
                                      IsHitTestVisible="false"
                                      Data="M 0,0 2.5,0 2.5,5 0,5 0,4 1.5,4 1.5,1 0,1 Z"
                                      />

                                <!-- when this is a finish only task then we want to be able to move the task (or drag the end) -->
                                <igSchedulePrim:GanttTaskDragArea AreaType="{Binding TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource rightShapeToAreaType}}" RenderTransform="{Binding Path=RightShapeDragAreaTransform, ElementName=ContentPanel}"/>
                            </Grid>
                        </igSchedulePrim:GanttTaskContentPanel.RightShape>
                        <Grid Visibility="{TemplateBinding ComputedMiddleBarVisibility}">
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Rectangle
                                RadiusX="3"
                                RadiusY="3"
                                Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource activeSummaryNotPlaceholderToVisibility}}"
                                Fill="{StaticResource ActiveSummaryTaskBackgroundBrush}"
                                Stroke="{StaticResource ActiveSummaryTaskBorderBrush}"
                                StrokeThickness="{TemplateBinding BorderThickness}"
                            />
                            <Rectangle
                                RadiusX="3"
                                RadiusY="3"
                                Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource activeProjectSummaryNotPlaceholderToVisibility}}"
                                Fill="{StaticResource ActiveProjectSummaryTaskBackgroundBrush}"
                                Stroke="{StaticResource ActiveProjectSummaryTaskBorderBrush}"
                                StrokeThickness="{TemplateBinding BorderThickness}"
                            />
                            <Rectangle
                                RadiusX="3"
                                RadiusY="3"
                                Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource inactiveToVisibility}}"
                                Fill="{StaticResource InactiveTaskBackgroundBrush}"
                                Stroke="{StaticResource InactiveTaskBorderBrush}"
                                StrokeThickness="{TemplateBinding BorderThickness}"
                            />
                            <Grid
                                Visibility="{Binding Path=TaskStates, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource durationOnlyToVisibility}}"
                                Grid.RowSpan="2">
                                <Rectangle
                                    RadiusX="3"
                                    RadiusY="3"
                                    Fill="{StaticResource DurationOnlyTaskBackgroundBrush}"
                                    Stroke="{StaticResource DurationOnlyTaskBorderBrush}"
                                    StrokeThickness="{TemplateBinding BorderThickness}"
                                    />
                                <Rectangle HorizontalAlignment="Left" Width="9" Fill="{StaticResource DurationOnlyOverlayLeftBrush}" />
                                <Rectangle HorizontalAlignment="Right" Width="9" Fill="{StaticResource DurationOnlyOverlayRightBrush}" />
                            </Grid>

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition MaxWidth="8" MinWidth="1" />
                                </Grid.ColumnDefinitions>
                                
                                <!-- this spans the entire middle and is used to move the task -->
                                <igSchedulePrim:GanttTaskDragArea Grid.ColumnSpan="2" />

                                <!-- we only need this when we don't have a right shape -->
                                <igSchedulePrim:GanttTaskDragArea
                                    AreaType="ResizeTaskBarEnd"
                                    Visibility="{Binding ComputedRightShapeVisibility, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource visibilityToNotVisibility}}"
                                    Grid.Column="1" />
                            </Grid>
                        </Grid>

                        <!-- Adorners -->
                        <StackPanel 
                            Orientation="Horizontal" 
                            Margin="0,0,10,0" 
                            Visibility="{TemplateBinding TaskAdornmentVisibility}" 
                            igSchedulePrim:GanttTaskContentPanel.AdornerLocation="Left">
                            <igSchedulePrim:GanttTaskDependencyDragArea AreaType="Start" Margin="5,0,0,0" Visibility="{TemplateBinding ComputedStartLinkVisibility}" />
                        </StackPanel>
                        <StackPanel 
                            Orientation="Horizontal" 
                            Margin="10,0,0,0"
                            Visibility="{TemplateBinding TaskAdornmentVisibility}"
                            igSchedulePrim:GanttTaskContentPanel.AdornerLocation="Right">
                            <igSchedulePrim:GanttTaskDependencyDragArea AreaType="Finish" Margin="0,0,5,0" Visibility="{TemplateBinding ComputedFinishLinkVisibility}" />
                        </StackPanel>
                    </igSchedulePrim:GanttTaskContentPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

		<Style x:Key="BlockingErrorStyle" TargetType="ContentControl">
		<Setter Property="igPrim:XamlHelper.Focusable" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ContentControl">
					<Border  Opacity=".9" Background="{StaticResource ActiveSummaryTaskBackgroundBrush}">         
 			<Border Background="{StaticResource TooltipGenericBackgroundBrush}" Width="550" Height="350" VerticalAlignment="Center" HorizontalAlignment="Center" BorderThickness="1" BorderBrush="{StaticResource HeaderNormalBorderBrush}">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height ="Auto"/>
							<RowDefinition Height ="Auto"/>
							<RowDefinition Height ="*"/>
						</Grid.RowDefinitions>

						<!--Header-->
						<Border Background="{StaticResource BlockingErrorHeaderBackground}">
						<ContentControl
							Grid.Row="0"
							FontWeight="Bold"
							Foreground="{StaticResource BlockingErrorHeaderForeground}"
							Content="{Binding Source={StaticResource BlockingErrorLiteral}, Path=Value}"
							Margin="10,5">
							<ContentControl.FontSize>
								<Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}">
									<Binding.Converter>
										<igPrim:MinMaxConverter MinValue="14"/>
									</Binding.Converter>
								</Binding>
							</ContentControl.FontSize>
						</ContentControl>
						</Border>

						<!--Description-->
						<TextBlock
							Grid.Row="1"
							Margin="10,5,5,0"
							FontWeight="Bold"
							TextWrapping="Wrap"
							Foreground="{StaticResource BlockingErrorForeground}"
							Text="{Binding Path=Content.UserErrorText, RelativeSource={RelativeSource TemplatedParent}}"
							Visibility="{Binding Path=Content.UserErrorText, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource nullToVisibility}}"
							>
							<TextBlock.FontSize>
								<Binding Path="FontSize" RelativeSource="{RelativeSource TemplatedParent}">
									<Binding.Converter>
										<igPrim:MinMaxConverter MinValue="12.5"/>
									</Binding.Converter>
								</Binding>
							</TextBlock.FontSize>

						</TextBlock>

						<!--Details-->
						<ScrollViewer Grid.Row="2"
													Margin="5"
													HorizontalScrollBarVisibility="Auto"
													VerticalScrollBarVisibility="Auto"
													BorderThickness="0">

							<TextBox
								Text="{Binding Path=Content, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
								Foreground="{StaticResource BlockingErrorForeground}"
								IsReadOnly="True"
								TextWrapping="Wrap"
								Background="{x:Null}"
								/>

						</ScrollViewer>
					</Grid>
</Border>
</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ================================ -->
    <!--              XamGantt            -->
    <!-- ================================ -->
    <Style TargetType="igSchedule:XamGantt">
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource GanttBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ManualValueTextBlockStyle" Value="{StaticResource manualTextBlockStyle}" />
        <Setter Property="ExpansionIndicatorStyle" Value="{StaticResource expansionIndicatorStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="igSchedule:XamGantt">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            Padding="{TemplateBinding Padding}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            igPrim:XamlHelper.SnapsToDevicePixels="True">
											<VisualStateManager.VisualStateGroups>
												<VisualStateGroup Name="ErrorStates">
													<VisualState Name="NoError"/>
													<VisualState Name="Error">
														<Storyboard Storyboard.TargetName="ErrorDisplay" Storyboard.TargetProperty="Visibility">
															<ObjectAnimationUsingKeyFrames>
																<DiscreteObjectKeyFrame KeyTime="0">
																	<DiscreteObjectKeyFrame.Value>
																		<Visibility>Visible</Visibility>
																	</DiscreteObjectKeyFrame.Value>
																</DiscreteObjectKeyFrame>
															</ObjectAnimationUsingKeyFrames>
														</Storyboard>
													</VisualState>
												</VisualStateGroup>
											</VisualStateManager.VisualStateGroups>
											<Grid x:Name="RootPanel" igPrim:XamlHelper.SnapsToDevicePixels="{TemplateBinding igPrim:XamlHelper.SnapsToDevicePixels}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="{Binding Path=GridWidth, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="{Binding Path=ChartWidth, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <Grid x:Name="GridSite"
                                    Grid.Column="0"
                                    Grid.Row="0" />
                                <Grid x:Name="ChartSite"
                                    Grid.Column="2"
                                    Grid.Row="0" />
                                <igSchedulePrim:ProjectGridSplitter
                                    x:Name="GridChartSplitter"
                                    ShowsPreview="True"
                                    HorizontalAlignment="Center"
                                    Width="6"
                                    Grid.Column="1"
                                    Grid.Row="0"
                                    Grid.RowSpan="2" />
                                <ScrollBar
                                    x:Name="GridHorizontalScrollBar"
                                    Orientation="Horizontal"
                                    Grid.Column="0"
                                    Grid.Row="1" />
                                <ScrollBar
                                    x:Name="ChartHorizontalScrollBar"
                                    Orientation="Horizontal"
                                    Grid.Column="2"
                                    Grid.Row="1" />
                                <ScrollBar
                                    x:Name="VerticalScrollBar"
                                    Orientation="Vertical"
                                    Grid.Column="3"
                                    Grid.Row="0" />
                            </Grid>
												
												<ContentControl x:Name="ErrorDisplay"
																				Visibility="Collapsed"
																				Content="{Binding Path=BlockingError, RelativeSource={RelativeSource TemplatedParent}}"
																				Style="{StaticResource BlockingErrorStyle}"
															/>
											</Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>