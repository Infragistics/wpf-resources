<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:igwindows="http://infragistics.com/Windows"
                    xmlns:igEditors="http://infragistics.com/Editors">

    <!-- *********************************  RESOURCES  ********************************* -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="EditorsGeneric_Express.xaml" />
        <ResourceDictionary Source="EditorsMetro_Brushes.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- *********************************  XamTextEditor Style  ********************************* -->
    <Style TargetType="{x:Type igEditors:XamTextEditor}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <!-- JJD 09/12/14 TFS179326 Set the foreground in a trigger when IsEmbedded is false  -->
        <!--<Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>-->
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="6,4"/>
        <Setter Property="MinHeight" Value="30" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamTextEditor}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <igwindows:SimpleTextBlock x:Name="TextBlock"
                                                   Text="{TemplateBinding DisplayText}"
                                                   TextWrapping="{TemplateBinding TextWrapping}"
                                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                   TextAlignment="{TemplateBinding TextAlignmentResolved}"
                                                   Foreground="{TemplateBinding Foreground}"
                                                   Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter Property="igwindows:SimpleTextBlock.OptimizeWidthMeasurement" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="EditTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamTextEditor}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <!--
                        BF 6/7/17   TFS232899
                        Added MinHeight=0 here to prevent the height of the XamTextEditor
                        from changing when it enters edit mode.
                        -->
                        <TextBox Name="PART_FocusSite"
                                 MinHeight="0"
                                 AcceptsReturn="{TemplateBinding AcceptsReturn}"
                                 AcceptsTab="{TemplateBinding AcceptsTab}"
                                 TextWrapping="{TemplateBinding TextWrapping}"
                                 HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
                                 VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
                                 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                 TextAlignment="{TemplateBinding TextAlignmentResolved}"
                                 IsReadOnly="{TemplateBinding ReadOnly}"
                                 MaxLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ValueConstraint.MaxLength, Mode=OneWay}"
                                 Background="Transparent"
                                 Padding="0"
                                 Margin="0"
                                 BorderBrush="Transparent"
                                 BorderThickness="0,0,0,0"
                                 ContextMenu="{TemplateBinding ContextMenu}"
                                 SpellCheck.IsEnabled="{TemplateBinding SpellCheck.IsEnabled}"
                                 SpellCheck.SpellingReform="{TemplateBinding SpellCheck.SpellingReform}"
                                 InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                 InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                                 InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}"
                                 FontSize="{TemplateBinding FontSize}"
                                 Foreground="{TemplateBinding Foreground}"
                                 SelectionBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=SelectionBrush}}"
                                 SelectionOpacity="0.4"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="True">
                            <Setter TargetName="MainBorder" Property="Padding" 
                                    Value="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter TargetName="PART_FocusSite" Property="Margin" 
                                    Value="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource XamTextEditorMarginConverter}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEmbedded" Value="True">
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True"/>
                    <Condition Property="IsInEditMode" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource EditorsBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource EditorsFocusBorderBrush}"/>
                <Setter Property="BorderThickness" Value="1,1,0,0"/>
                <Setter Property="Padding" Value="3,3,6,4"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsEmbedded" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsHottrackBorderFillKey}}"/>
                <Setter Property="Background" Value="{StaticResource EditorsHoverBackgroundBrush}"/>
            </MultiTrigger>
            <Trigger Property="IsEmbedded" Value="False">
                <!-- JJD 09/12/14 TFS179326 Set the foreground in a trigger when IsEmbedded is false  -->
                <Setter Property="Background" Value="{StaticResource EditorsBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}"/>
                <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
                <Setter Property="FontSize" Value="14.667"/>
                <Setter Property="Padding" Value="4,2"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocusWithin" Value="True"/>
                    <Condition Property="IsEmbedded" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{StaticResource EditorsFocusBorderBrush}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBackgroundBrush}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBorderBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledForeground}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- *********************************  ValueEditorCheckBox Style  ********************************* -->
    <Style x:Key="ValueEditorCheckBoxStyle" TargetType="{x:Type igEditors:ValueEditorCheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=ForegroundBrush}}"/>
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxBackgroundBrush}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxBorderBrush}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:ValueEditorCheckBox}">
                    <Grid x:Name="CheckBox">
                        <Rectangle x:Name="normal" Opacity="1" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" Fill="{TemplateBinding Background}" Width="18" Height="18"/>
                        <Rectangle x:Name="IndeterminateCheck" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxIndeterminateCheckBackgroundBrush}}" Height="3" Width="8" Opacity="0"/>
                        <Path x:Name="checkBox" Visibility="Collapsed" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxCheckBackgroundBrush}}" Height="10" Width="12" Stretch="Fill" Data="M 1145.607177734375,430 C1145.607177734375,430 1141.449951171875,435.0772705078125 1141.449951171875,435.0772705078125 1141.449951171875,435.0772705078125 1139.232177734375,433.0999755859375 1139.232177734375,433.0999755859375 1139.232177734375,433.0999755859375 1138,434.5538330078125 1138,434.5538330078125 1138,434.5538330078125 1141.482177734375,438 1141.482177734375,438 1141.482177734375,438 1141.96875,437.9375 1141.96875,437.9375 1141.96875,437.9375 1147,431.34619140625 1147,431.34619140625 1147,431.34619140625 1145.607177734375,430 1145.607177734375,430 z"  />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="normal" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxHoverBorderBrush}}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="checkBox" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="IndeterminateCheck" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  XamCheckEditor Style  ********************************* -->
    <Style TargetType="{x:Type igEditors:XamCheckEditor}" >
        <Setter Property="Padding" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamCheckEditor}">
                    <Border x:Name="MainBorder"
						    BorderBrush="{TemplateBinding BorderBrush}"
						    BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}">
                        <igEditors:ValueEditorCheckBox x:Name="PART_FocusSite"
								IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
								IsThreeState="{TemplateBinding IsThreeState}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								Margin="{TemplateBinding Padding}" Style="{StaticResource ValueEditorCheckBoxStyle}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEmbedded" Value="False"/>
                        <Trigger Property="ReadOnly" Value="True">
                            <Setter TargetName="PART_FocusSite" Property ="IsEnabled" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>