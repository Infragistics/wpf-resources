<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:igwindows="http://infragistics.com/Windows"
	xmlns:igEditors="http://infragistics.com/Editors"
	xmlns:igThemes="http://infragistics.com/Themes"
	xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
    >
    <ResourceDictionary.MergedDictionaries>
        <!--<igThemes:EditorsGenericBrushes />-->
        <ResourceDictionary Source="EditorsGeneric_Brushes.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <igEditors:XamTextEditorMarginConverter x:Key="XamTextEditorMarginConverter" />
    
    <SolidColorBrush PresentationOptions:Freeze="true" x:Key="{ComponentResourceKey {x:Type igEditors:XamTextEditor}, TextEditorBorderBrush}" Color="#FF7F9DB9" />

    <!--  _________________________ TextEditor __________________________________________  -->
    <Style TargetType="{x:Type igEditors:XamTextEditor}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="4,2" />
        <!-- MD 4/26/11 - TFS73532 - This causes major slowdowns and doesn't provide much value so use a hard coded value instead. -->
        <!--<Setter Property="Margin" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorMarginKey}}" />-->
        <Setter Property="Margin" Value="0" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamTextEditor}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            >
                        <!-- SSP 10/3/07 BR25672 Took the following code out of Border element above since
									the TextBlock below is already setting that value. We don't want to substract
									the padding twice.
						    Margin="{TemplateBinding Padding}"-->
                        <!-- MD 8/12/10 - TFS26592 - Use the SimpleTextBlock instead -->
                        <!--<TextBlock x:Name="TextBlock"-->
                        <igwindows:SimpleTextBlock x:Name="TextBlock"
							Text="{TemplateBinding DisplayText}"
							TextWrapping="{TemplateBinding TextWrapping}"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							TextAlignment="{TemplateBinding TextAlignmentResolved}" 
                            Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter TargetName="MainBorder" Property="CornerRadius" Value="1" />
                            <!-- MD 10/27/10 - TFS38066 - We shouldn't optimize the width measurements when this is a standalone editor -->
                            <Setter Property="igwindows:SimpleTextBlock.OptimizeWidthMeasurement" Value="False" />
                            <!-- SSP 12/5/11 TFS32567 TFS84941 TFS97036
                                Removed the setter here since it's not necessary as we have the style setter that does
                                this further below.
                            -->
                            <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="EditTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamTextEditor}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}" Margin="-2,0,0,0">
                        <!-- SSP 10/3/07 BR25672 Took the Margin="{TemplateBinding Padding}" code out of Border element above
								and instead added Padding="{TemplateBinding Padding}" to the TextBox below. Padding should not
								be outside the border and the background. It should be inside the border and around the editor's
								contents.-->
                        <!-- AS 2/3/09 TFS13387 Added template binding to the SpellCheck properties -->
                        <!-- JJD 11/29/10 - TFS58984 - Added AcceptsReturn and AcceptsTab properties -->
                        <!-- SSP 6/24/11 TFS57835 Added InputMethod.PreferredImeState template binding. -->
                        <!-- SSP 11/14/11 TFS95730 - Added InputMethod.IsInputMethodEnabled template binding. -->
                        <!--  SSP 5/10/12 TFS100047 - Took out the binding in the template that synchronized the XamTextEditor's
                              Text to the textbox's Text property so now we have to manually synchronize them. We did this to make
                              use of the SetCurrentValue to set the text property.
                            Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        -->
                        <TextBox
							Name="PART_FocusSite"
							AcceptsReturn="{TemplateBinding AcceptsReturn}"
							AcceptsTab="{TemplateBinding AcceptsTab}"
							TextWrapping="{TemplateBinding TextWrapping}"
							HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
							VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							TextAlignment="{TemplateBinding TextAlignmentResolved}"
							IsReadOnly="{TemplateBinding ReadOnly}"
							MaxLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ValueConstraint.MaxLength, Mode=OneWay}"
							Padding="0"
                            Background="Transparent"
							BorderBrush="Transparent"
							BorderThickness="0,0,0,0"
							Foreground="{TemplateBinding Foreground}"
							ContextMenu="{TemplateBinding ContextMenu}"
                            SpellCheck.IsEnabled="{TemplateBinding SpellCheck.IsEnabled}"
                            SpellCheck.SpellingReform="{TemplateBinding SpellCheck.SpellingReform}"
                            InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                            InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                            InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}"/>
                    </Border>
                    <!--
					SSP 6/6/07 BR23366
					Added trigger that sets IsTabStop to False based on IsInEditMode setting.
					We need this in order to make the Tab and Shift+Tab navigation work properly.
					Apparently presense of nested textbox causes Shift+Tab to misbehave and cause
					the framwork to give focus to the parent ContentPresenter if the editor
					is inside a HeaderedContentControl. This is similar to what inbox ComboBox
					does.
					-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEmbedded" Value="True">
                <Setter Property="BorderThickness" Value="0"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True"/>
                    <Condition Property="IsInEditMode" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Padding" Value="1,2,2,2"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True"/>
                    <Condition Property="IsInEditMode" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}"/>
                <Setter Property="BorderBrush" Value="{x:Null}"/>
            </MultiTrigger>
            <!-- SSP/AS 12/8/11 TFS32567 TFS84941 TFS97036
                Removed the setter here since it's not necessary as we have the style setter that does
                this further below.
            -->
            <!--<MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="False"/>
                    <Condition Property="IsInEditMode" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            </MultiTrigger>-->
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            </Trigger>
            <!-- SSP 1/8/08 BR29482 - Added setter for setting Foreground.
			 We were already setting the Background explicitly above. If we don't
			 do this then the Foreground will be inherited but not the background.
			 This causes a problem when the editor is inside an item of a ListBox
			 and the item is selected. The item's back color turns blue and fore
			 color turns white. However the editor inherits only the fore color
			 and causes the contents to turn white, essentially disappear since
			 the background is explicitly set to white above. Also TextBox
			 explicitly sets both the Background and Foreground.
			-->
            <!--<Trigger Property="IsEmbedded" Value="False">
				<Setter Property="Foreground" Value="#000000" />
			</Trigger>-->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=TextEditorBackgroundDisabled}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  _________________________ XamCheckEditor __________________________________________  -->
    <Style TargetType="{x:Type igEditors:XamCheckEditor}" >
        <!-- AS 1/13/12 TFS69479 Added Padding -->
        <!-- JJD 07/23/12 TFS117531 
			Reduce padding so it doesn't cause the XamCheckEditor to have a desired size higher than the default XamTextEditor-->
        <!--<Setter Property="Padding" Value="5" />-->
        <Setter Property="Padding" Value="4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamCheckEditor}">
                    <Border x:Name="MainBorder"
						    BorderBrush="{TemplateBinding BorderBrush}"
						    BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}">
                        <!-- SSP 10/3/07 BR25672 Added Padding="{TemplateBinding Padding}" to the ValueEditorCheckBox below -->
                        <igEditors:ValueEditorCheckBox x:Name="PART_FocusSite"
								IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
								IsThreeState="{TemplateBinding IsThreeState}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEmbedded" Value="False"/>
                        <Trigger Property="ReadOnly" Value="True">
                            <Setter TargetName="PART_FocusSite" Property ="IsEnabled" Value="False" />
                        </Trigger>
                        <!-- JJD 08/17/12 - TFS118698 
														Null out the FocusVisualStyle when the editor is embedded, e.e. in a XamDataGrid -->
                        <Trigger Property="IsEmbedded" Value="True">
                            <Setter Property="FocusVisualStyle" TargetName="PART_FocusSite" Value="{x:Null}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- JM 11-13-17 TFS245845 -->
    <!--  _________________________ ImageEditor __________________________________________  -->
    <Style TargetType="{x:Type igEditors:ImageEditor}" >
        <Setter Property="Padding" Value="4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:ImageEditor}">
                    <Border x:Name="MainBorder"
						    BorderBrush="{TemplateBinding BorderBrush}"
						    BorderThickness="{TemplateBinding BorderThickness}"
							Background="{TemplateBinding Background}">
                        <Image x:Name="PART_Image"
								Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceResolved, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
								Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageWidth, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
								Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageHeight, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
								Stretch="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Stretch, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
								StretchDirection="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=StretchDirection, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                FocusVisualStyle="{x:Null}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								Margin="{TemplateBinding Padding}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>