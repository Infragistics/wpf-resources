<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:igEditors="http://infragistics.com/Editors"
	xmlns:themesEd="http://infragistics.com/Themes"
                    	xmlns:igwindows="http://infragistics.com/Windows">

    <!-- *********************************  RESOURCES  ********************************* -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="EditorsGeneric_Express.xaml" />
        <ResourceDictionary Source="EditorsIGTheme_Brushes.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- *********************************  XamTextEditor Style  ********************************* -->
    <Style TargetType="{x:Type igEditors:XamTextEditor}" BasedOn="{x:Static themesEd:EditorsGeneric.XamTextEditor}">
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalCenterFillKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="4,2" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamTextEditor}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorCornerRadiusKey}}"
                            Padding="{TemplateBinding Padding}">
                        <igwindows:SimpleTextBlock x:Name="TextBlock"
                                                   Text="{TemplateBinding DisplayText}"
                                                   TextWrapping="{TemplateBinding TextWrapping}"
                                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                   TextAlignment="{TemplateBinding TextAlignmentResolved}"
                                                   Foreground="{TemplateBinding Foreground}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsFocused" Value="True">
              <Setter TargetName="MainBorder" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsHottrackBorderFillKey}}" Property="BorderBrush"/>
            </Trigger>-->
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter Property="igwindows:SimpleTextBlock.OptimizeWidthMeasurement" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="EditTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamTextEditor}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorCornerRadiusKey}}">
                        <!-- SSP 12/6/12 TFS100047/TFS128312 - Took out the binding in the template that synchronized the XamTextEditor's
                              Text to the textbox's Text property so now we have to manually synchronize them. We did this to make
                              use of the SetCurrentValue to set the text property.
                            Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        -->
                        <TextBox Name="PART_FocusSite"
                                 AcceptsReturn="{TemplateBinding AcceptsReturn}"
                                 AcceptsTab="{TemplateBinding AcceptsTab}"
                                 TextWrapping="{TemplateBinding TextWrapping}"
                                 HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
                                 VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
                                 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                 TextAlignment="{TemplateBinding TextAlignmentResolved}"
                                 IsReadOnly="{TemplateBinding ReadOnly}"
                                 MaxLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ValueConstraint.MaxLength, Mode=OneWay}"
                                 Background="Transparent"
                                 BorderBrush="Transparent"
                                 BorderThickness="0,0,0,0"
                                 Padding="0"
                                 Margin="0"
                                 ContextMenu="{TemplateBinding ContextMenu}"
                                 SpellCheck.IsEnabled="{TemplateBinding SpellCheck.IsEnabled}"
                                 SpellCheck.SpellingReform="{TemplateBinding SpellCheck.SpellingReform}"
                                 InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                 InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                                 InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}"
                                 FontSize="{TemplateBinding FontSize}"
                                 Foreground="{TemplateBinding Foreground}"
                                 SelectionBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=TextEditorSelectionBrush}}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="True">
                            <Setter TargetName="MainBorder" Property="Padding" 
                                    Value="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter TargetName="PART_FocusSite" Property="Margin" 
                                    Value="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource XamTextEditorMarginConverter}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEmbedded" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True"/>
                    <Condition Property="IsInEditMode" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Padding" Value="1,2,2,2"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsEmbedded" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsHottrackBorderFillKey}}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocusWithin" Value="True"/>
                    <Condition Property="IsEmbedded" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"  Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsHottrackBorderFillKey}}"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBackgroundBrush}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBorderBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledForeground}}" />
            </Trigger>

        </Style.Triggers>
    </Style>

</ResourceDictionary>