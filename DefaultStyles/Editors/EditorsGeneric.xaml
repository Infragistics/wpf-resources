<?xml version="1.0" encoding="Windows-1252"?>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:igWindows="http://infragistics.com/Windows"
	xmlns:igEditors="http://infragistics.com/Editors"
	xmlns:luna="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Luna"
	xmlns:igThemes="http://infragistics.com/Themes"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
	>
    <ResourceDictionary.MergedDictionaries>
        <!--<igThemes:EditorsGenericBrushes />-->
        <ResourceDictionary Source="EditorsGeneric_Brushes.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- _________________________ Value Converters Start  ____________________________________ -->
    <igWindows:BoolToHiddenConverter x:Key="BoolToHidden" />
    <igEditors:DayOfWeekToStringConverter x:Key="DayOfWeekToStr" />
    <igWindows:StringFormatConverter x:Key="StrFormatConv" />
    <igWindows:FormattableToStringConverter x:Key="FormattableToStr" />

    <!-- SSP 3/23/09 IME -->
    <igEditors:HorizontalToTextAlignmentConverter x:Key="horizToTextAlignmentConverter" />

    <!-- SSP 3/12/10 TFS27090 -->
    <igWindows:NullToFalseConverter x:Key="nullToFalseConverter" />
    <igWindows:TypeCheckConverter x:Key="typeCheckConverter" />
    <igWindows:NullToParameterConverter x:Key="nullToParameterConverter" />

    <!--SSP 11/9/10 TFS33587-->
    <igWindows:BoolToValueConverter x:Key="complementConverter" >
        <igWindows:BoolToValueConverter.TrueConvertValue>
            <sys:Boolean>False</sys:Boolean>
        </igWindows:BoolToValueConverter.TrueConvertValue>
        <igWindows:BoolToValueConverter.FalseConvertValue>
            <sys:Boolean>True</sys:Boolean>
        </igWindows:BoolToValueConverter.FalseConvertValue>
    </igWindows:BoolToValueConverter>

    <!-- _________________________ Value Converters End  ____________________________________ -->

    <!-- _________________________ Static Styles Start  ______________________________________ -->
    <Style x:Key="BorderlessButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="Transparent">
                        <ContentPresenter
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- _________________________ Static Styles End  ______________________________________ -->

    <!--SSP 10/8/09 NAS10.1 - Spin Buttons-->
    <!--  _________________________ Spin Button Style  _______________________________________  -->
    <Style x:Key="spinButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnNormalCenterFillKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnNormalOuterBorderFillKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnGlyphNormalForegroundFillKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.SpinButtonCornerRadiusKey}}">
                        <Grid>
                            <Border x:Name="innerBd" BorderBrush="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnNormalInnerBorderFillKey}}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.SpinButtonCornerRadiusKey}}"/>
                            <ContentPresenter x:Name="ContentPresenter"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
							Margin="{TemplateBinding Padding}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="innerBd" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackInnerBorderFillKey}}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackCenterFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackOuterBorderFillKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnPressedOuterBorderFillKey}}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnPressedCenterFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="innerBd" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnPressedInnerBorderFillKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentPresenter" Property="Opacity" Value="0.25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  _________________________ SpinButton Glyphs _______________________________________  -->
    <DataTemplate x:Key="{x:Static igEditors:EditorsBrushKeys.IncreaseGlyphKey}">
        <Path
			Width="7"
			Height="4"
			Data="M 0,3 C0,3 0,4 0,4 0,4 3,4 3,4 3,4 3,3 3,3 3,3 4,3 4,3 4,3 4,4 4,4 4,4 7,4 7,4 7,4 7,3 7,3 7,3 6,3 6,3 6,3 6,2 6,2 6,2 5,2 5,2 5,2 5,1 5,1 5,1 4,1 4,1 4,1 4,0 4,0 4,0 3,0 3,0 3,0 3,1 3,1 3,1 2,1 2,1 2,1 2,2 2,2 2,2 1,2 1,2 1,2 1,3 1,3 1,3 0,3 0,3 z"
			Fill="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnGlyphNormalForegroundFillKey}}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static igEditors:EditorsBrushKeys.DecreaseGlyphKey}">
        <Path
			Width="7"
			Height="4"
			Data="M 0,1 C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z"
			Fill="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnGlyphNormalForegroundFillKey}}"/>
    </DataTemplate>

    <!--  _________________________ XamMaskedEditor __________________________________________  -->
    <Style TargetType="{x:Type igEditors:XamMaskedEditor}" x:Key="XamMaskedEditorBaseStyle">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2" />

        <!-- MD 4/26/11 - TFS73532 - This causes major slowdowns and doesn't provide much value so use a hard coded value instead. -->
        <!--<Setter Property="Margin" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorMarginKey}}" />-->
        <Setter Property="Margin" Value="1" />

        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="SpinButtonStyle" Value="{StaticResource spinButtonStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamMaskedEditor}">
                    <Border x:Name="MainBorder"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
 						>
                        <!--SSP 10/1/09 NAS10.1 - Spin Buttons - Enclosed in dock panel element so we can display spin buttons-->
                        <DockPanel>
                            <!--SSP 10/1/09 NAS10.1 - Spin Buttons -->
                            <Grid x:Name="PART_SpinButtons" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}" Margin="0,1">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="1"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <RepeatButton Style="{TemplateBinding SpinButtonStyle}" Focusable="false" IsHitTestVisible="false" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.IncreaseGlyphKey}}"/>
                                <RepeatButton Style="{TemplateBinding SpinButtonStyle}" Focusable="false" IsHitTestVisible="false" Grid.Row="2" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DecreaseGlyphKey}}"/>
                            </Grid>
                            <!-- SSP 10/3/07 BR25672 Took the following code out of Border element above since
								we are setting that value on the TextBlock below.
								We don't want to substract the padding twice
						    Margin="{TemplateBinding Padding}"-->
                            <!-- MD 8/12/10 - TFS26592 - Use the SimpleTextBlock instead -->
                            <!--<TextBlock x:Name="TextBlock"-->
                            <igWindows:SimpleTextBlock x:Name="TextBlock"
						           Margin="{TemplateBinding Padding}"
						           Text="{TemplateBinding DisplayText}"
						           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
						           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
						          />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter Property="Padding" Value="4,2,4,2" />
                            <!-- MD 10/27/10 - TFS38066 - We shouldn't optimize the width measurements when this is a standalone editor -->
                            <Setter Property="igWindows:SimpleTextBlock.OptimizeWidthMeasurement" Value="False" />
                            <!-- SSP/AS 12/8/11 TFS32567 TFS84941 TFS97036
                                Removed the setter here since it's not necessary as we have the style setter that does
                                this further below.
                            -->
                            <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="EditTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamMaskedEditor}">
                    <Border x:Name="MainBorder"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}">
                        <!-- SSP 10/3/07 BR25672 Took the following code out of Border element above
									since we are setting that value on the SectionsList element below.
									We don't want to substract the padding twice
						    Margin="{TemplateBinding Padding}"-->
                        <!--SSP 10/1/09 NAS10.1 - Spin Buttons - Enclosed in dock panel element so we can display spin buttons-->
                        <DockPanel>
                            <!--SSP 10/1/09 NAS10.1 - Spin Buttons -->
                            <Grid x:Name="PART_SpinButtons" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}" Margin="0,1">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="1"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <!-- AS 2/25/11 TFS67071 -->
                                <RepeatButton x:Name="spinUp" Style="{TemplateBinding SpinButtonStyle}" Focusable="false" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.IncreaseGlyphKey}}"/>
                                <RepeatButton x:Name="spinDown" Style="{TemplateBinding SpinButtonStyle}" Focusable="false" Grid.Row="2" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DecreaseGlyphKey}}"/>
                            </Grid>
                            <!-- SSP 3/23/09 IME - Enclosed the SectionsList in a CardPanel and added ImeTextBox.
													Also renamed SectionsList element to 'SectionsList' from 'PART_FocusSite' and assigned
													that name to 'CardPanel'
												-->
                            <igWindows:CardPanel x:Name="PART_FocusSite">
                                <!-- SSP 6/24/11 TFS57835 Added InputMethod.PreferredImeState template binding. This property needs to be set
                                                    on the element that is given focus in the editors SetFocusToFocusSite.-->
                                <!-- SSP 11/16/11 TFS95805 - Added InputMethod.IsInputMethodEnabled template binding. -->
                                <igEditors:SectionsList
														x:Name="SectionsList"
														Margin="{TemplateBinding Padding}"
														Foreground="{TemplateBinding Foreground}"
														ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Sections, Mode=OneWay}"
														HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
														VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
														FlowDirection="LeftToRight"
                                                        InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                                        InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                                                        InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}"
													/>
                                <!-- SSP 6/24/11 TFS57835 Added InputMethod.PreferredImeState template binding. -->
                                <TextBox
														x:Name="PART_InputTextBox"
														Visibility="Collapsed"
														HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
														VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
														TextAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource horizToTextAlignmentConverter}}"
														Background="Transparent"
														BorderBrush="Transparent"
														BorderThickness="0,0,0,0"
														Foreground="{TemplateBinding Foreground}"
                                                        InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                                        InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}"
													/>
                            </igWindows:CardPanel>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- AS 2/25/11 TFS67071 -->
                        <Trigger Property="SpinButtonVisibilityResolved" Value="Visible">
                            <Setter TargetName="spinUp" Property="Command" Value="{x:Static igEditors:MaskedEditorCommands.SpinUp}" />
                            <Setter TargetName="spinDown" Property="Command" Value="{x:Static igEditors:MaskedEditorCommands.SpinDown}" />
                        </Trigger>

                        <Trigger Property="IsEmbedded" Value="False"/>
                        <!--
						SSP 6/6/07 BR23366
						Added trigger that sets IsTabStop to False based on IsInEditMode setting.
						We need this in order to make the Tab and Shift+Tab navigation work properly.
						Apparently presense of nested textbox causes Shift+Tab to misbehave and cause
						the framwork to give focus to the parent ContentPresenter if the editor
						is inside a HeaderedContentControl. This is similar to what inbox ComboBox
						does.
						-->
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                        <!-- SSP 3/23/09 IME - Added the trigger that sets Visibility on sections
														list and text box based on isTextBoxEntryEnabled. -->
                        <Trigger Property="IsTextBoxEntryEnabled" Value="True">
                            <Setter TargetName="SectionsList" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_InputTextBox" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEmbedded" Value="True">
                <Setter Property="BorderThickness" Value="0"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True"/>
                    <Condition Property="IsInEditMode" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderThickness" Value="0"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True"/>
                    <Condition Property="IsInEditMode" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}"/>
                <Setter Property="BorderBrush" Value="{x:Null}"/>
            </MultiTrigger>
            <!-- SSP 1/8/08 BR29482 - Added setter for setting Foreground.
			 We were already setting the Background explicitly above. If we don't
			 do this then the Foreground will be inherited but not the background.
			 This causes a problem when the editor is inside an item of a ListBox
			 and the item is selected. The item's back color turns blue and fore
			 color turns white. However the editor inherits only the fore color
			 and causes the contents to turn white, essentially disappear since
			 the background is explicitly set to white above. Also TextBox
			 explicitly sets both the Background and Foreground.
			-->
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsInEditMode" Value="True">
                <!-- SSP 5/13/10 TFS30701 - Commented out setting of ClipToBounds which I believe was
                added to clip the caret element and so instead added the necessary code to clip the caret
                in XamMaskedEditor.ArrangeOverride. This bug-fix was done to make the UIElement.Effect work. -->
                <!--<Setter Property="ClipToBounds" Value="True" />-->
                <!--
						// SSP 3/15/07 BR21086 BR20704
						// Do this through the style via a trigger so when the masked editor is not in edit mode, it draws
						// the focus rect. For example, in DataPresenter when the cell exits edit mode via Escape key, the
						// editor retains focus and is not in edit mode. In such a case, it should draw focus rect.
				-->
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=TextEditorBackgroundDisabled}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type igEditors:XamMaskedEditor}" BasedOn="{StaticResource XamMaskedEditorBaseStyle}"/>

    <Style TargetType="{x:Type igEditors:DisplayCharacterPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:DisplayCharacterPresenter}">
                    <Grid>
                        <TextBlock
							x:Name="TextBlock"
							Margin="0,0,0,0"
							Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DisplayCharacter.DrawString, Mode=OneWay}"
							Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DisplayCharacter.Visibility, Mode=OneWay}" />
                        <Rectangle x:Name="SelectionRect" Margin="0,0,0,0" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Opacity="0.5"
								 Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DrawAsSelected, Mode=OneWay, Converter={StaticResource BoolToHidden} }"
								 IsHitTestVisible="False"
								 />
                    </Grid>
                    <!--SSP 3/20/07 BR21135
					Instead of this, added Rectangle element to the element hierarchy to draw the selection.
					This was done to accurately emulate how the TextBox renders its selection.
					<ControlTemplate.Triggers>
						<Trigger Property="DrawAsSelected" Value="True">
							<Setter TargetName="TextBlock" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
							<Setter TargetName="TextBlock" Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type igEditors:SectionPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:SectionPresenter}">
                    <igEditors:DisplayCharactersList
						ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Section.DisplayChars, Mode=OneWay}"
					 />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type igEditors:DisplayCharactersList}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:DisplayCharactersList}">
                    <StackPanel IsItemsHost="True" Orientation="Horizontal" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type igEditors:SectionsList}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:SectionsList}">
                    <ScrollViewer Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" >
                        <StackPanel IsItemsHost="True" Orientation="Horizontal" />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type igEditors:CaretElement}">
        <Setter Property="Background" Value="Black"/>
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.CaretWidthKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:CaretElement}">
                    <Rectangle Fill="{TemplateBinding Background}"/>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            <EventTrigger.Actions>
                                <BeginStoryboard Name="BlinkStoryboard">
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames
										    Storyboard.TargetProperty="BlinkVisibility"
										    Duration="{x:Static igEditors:CaretElement.CaretBlinkDuration}"
										    RepeatBehavior="Forever">
                                            <DiscreteBooleanKeyFrame Value="True" KeyTime="0%" />
                                            <DiscreteBooleanKeyFrame Value="False" KeyTime="50%" />
                                            <!--We need the third key frame in case caret blink duration is 0-->
                                            <DiscreteBooleanKeyFrame Value="True" KeyTime="100%" />
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="igEditors:CaretElement.ResetBlinking">
                            <EventTrigger.Actions>
                                <SeekStoryboard BeginStoryboardName="BlinkStoryboard" Origin="BeginTime" />
                            </EventTrigger.Actions>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  _________________________ XamNumericEditor __________________________________________  -->
    <Style TargetType="{x:Type igEditors:XamNumericEditor}" BasedOn="{StaticResource {x:Type igEditors:XamMaskedEditor}}" >
    </Style>

    <!--  _________________________ XamCurrencyEditor __________________________________________  -->
    <Style TargetType="{x:Type igEditors:XamCurrencyEditor}" BasedOn="{StaticResource {x:Type igEditors:XamMaskedEditor}}" >
    </Style>

    <!--  _________________________ XamComboEditor __________________________________________  -->

    <!-- NOTE: do not modify the key of this style unless you make a corresponding change to the
             Infragistics.Windows.Themes.EditorsResourceSet<T>.XamComboEditor_DropDownButtonStyle property-->
    <Style x:Key="ComboEditor_DropDownButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                        </Grid.ColumnDefinitions>
                        <Grid x:Name="ComboEditorDropdown" HorizontalAlignment="Right" Background="Transparent"
							Grid.Column="1" Width="15" Margin="0,1,1,1">
                            <Border SnapsToDevicePixels="True" x:Name="OuterBorder_Center" BorderBrush="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnNormalOuterBorderFillKey}}" BorderThickness="1" Background="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnNormalCenterFillKey}}" CornerRadius="2"/>
                            <Border SnapsToDevicePixels="True" Margin="1,1,1,1" x:Name="InnerBorder" BorderBrush="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnNormalInnerBorderFillKey}}" BorderThickness="1" CornerRadius="2"/>
                        </Grid>
                        <Grid x:Name="glyphArrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Width="9" Height="6" Margin="0,0,1,0">
                            <Path x:Name="glyph" HorizontalAlignment="Stretch" Width="6" RenderTransformOrigin="0,0" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnGlyphNormalForegroundFillKey}}" Stretch="Fill" Data="M4,0 L6,0 6,6 6,6 6,6 0,6 0,4 4,4 4,0 z" Height="6" Margin="0,-5,-6,0">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" ScaleY="1"/>
                                        <SkewTransform AngleX="0" AngleY="0"/>
                                        <RotateTransform Angle="45"/>
                                        <TranslateTransform X="0" Y="0"/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="Tag" Value="MouseOverControlTrue">
                            <Setter Property="BorderBrush" TargetName="InnerBorder" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackInnerBorderFillKey}}"/>
                            <Setter Property="Background" TargetName="OuterBorder_Center" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackCenterFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="OuterBorder_Center" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackOuterBorderFillKey}}"/>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" TargetName="OuterBorder_Center" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnPressedOuterBorderFillKey}}"/>
                            <Setter Property="Background" TargetName="OuterBorder_Center" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnPressedCenterFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="InnerBorder" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnPressedInnerBorderFillKey}}"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="InnerBorder" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackInnerBorderFillKey}}"/>
                            <Setter Property="Background" TargetName="OuterBorder_Center" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackCenterFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="OuterBorder_Center" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackOuterBorderFillKey}}"/>
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="glyph" Property="Opacity" Value="0.25"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboEditor_TextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboEditor_EditableComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid Background="Transparent" SnapsToDevicePixels="True">
            <Grid IsSharedSizeScope="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                </Grid.ColumnDefinitions>

                <Grid Grid.Column="0" Margin="{TemplateBinding Padding}">
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <!-- SSP 4/28/11 TFS66509 - Added MaxLength binding below.-->
                    <!-- SSP 6/24/11 TFS57835 Added InputMethod.PreferredImeState template binding. This property needs to be set
                                                    on the element that ends up being focused in the editor's SetFocusToFocusSite.-->
                    <!-- SSP 11/14/11 TFS95730 - Added InputMethod.IsInputMethodEnabled template binding. -->
                    <TextBox Name="PART_EditableTextBox"
                                 Grid.Column="1"
						         Padding="-1,0,0,0"
						         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
						         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
						         IsReadOnly="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
						         Background="Transparent"
                                 BorderBrush="Transparent"
						         BorderThickness="0,0,0,0"
						         Style="{StaticResource ComboEditor_TextBoxStyle}"
						         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                 MaxLength="{Binding Path=(igEditors:XamComboEditor.ComboEditor).ValueConstraint.MaxLength, RelativeSource={RelativeSource TemplatedParent}}"
                                 InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                 InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                                 InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}"
						        />
                    <!-- SSP 3/12/10 TFS27090 - Added support for displaying image (ComboBoxDataItem.Image).
                        Added above Grid element and the following CardPanel element hierarchy.
                    -->
                    <igWindows:GrowOnlyDecorator x:Name="imageDecorator">
                        <igWindows:CardPanel x:Name="imagePanel" Visibility="Collapsed" VerticalAlignment="Center" Margin="1,0,-1,0" >
                            <!-- This text block is used to make sure the image height is as tall as text because that's how
                                the image is displayed in the ComboBoxDataItem template.-->
                            <TextBlock x:Name="textBlock" Visibility="Hidden" VerticalAlignment="Center" />
                            <Image
                                    x:Name="image" Stretch="Uniform" StretchDirection="Both" VerticalAlignment="Center"
                                    Height="{Binding ElementName=textBlock, Path=ActualHeight, Mode=OneWay}"
                                />
                        </igWindows:CardPanel>
                    </igWindows:GrowOnlyDecorator>
                </Grid>
                <!--SSP 11/9/10 TFS33587 - Added IsEnabled setter-->
                <!--JM 06-24-11 TFS73970 - Added a Focusable setter -->
                <ToggleButton
							x:Name="PART_DropDownButton"
							Grid.Column="1"
							Focusable="False"
							Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
							Background="{x:Null}"
							Style="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownButtonStyle, RelativeSource={RelativeSource TemplatedParent}}"
							IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}"
							/>
            </Grid>
            <Popup x:Name="PART_Popup"
						 AllowsTransparency="True"
						 Placement="Bottom"
						 VerticalOffset="1"
						 HorizontalOffset="-1"
						 IsOpen="{TemplateBinding IsDropDownOpen}"
						 Focusable="False"
						 PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
						 MaxHeight="{TemplateBinding MaxDropDownHeight}"
					   MinWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MinDropDownWidthResolved, RelativeSource={RelativeSource TemplatedParent}}"
						 MaxWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}}"
						 >
                <luna:SystemDropShadowChrome
							x:Name="Shdw"
							Color="Transparent"
							>
                    <Border Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}">
                        <igWindows:PopupResizerDecorator ResizeMode="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownResizeMode, RelativeSource={RelativeSource TemplatedParent}}" >
                            <DockPanel>
                                <!--JJD 07/06/10 - TFS32174-->
                                <ContentPresenter DockPanel.Dock="Top" ContentTemplate="{Binding Path=PreDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igEditors:XamComboEditor}}}"/>
                                <!--JJD 07/06/10 - TFS32174-->
                                <ContentPresenter DockPanel.Dock="Bottom" ContentTemplate="{Binding Path=PostDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igEditors:XamComboEditor}}}"/>
                                <ScrollViewer x:Name="ScrollViewer">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </DockPanel>
                        </igWindows:PopupResizerDecorator>
                    </Border>
                </luna:SystemDropShadowChrome>
            </Popup>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="False">
                <!--SSP 4/19/11 TFS72329 - Set the Height instead of MinHeight. Setting the MinHeight causes TFS72329
                where the drop-down is sized to the height of the resizer bar and doesn't show any items when the
                control is bound to items source.-->
                <!--<Setter TargetName="PART_Popup" Property="MinHeight" Value="95" />-->
                <Setter TargetName="PART_Popup" Property="Height" Value="95" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
                <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=TextEditorBackgroundDisabled}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
            <!-- SSP 3/12/10 TFS27090 - Added support for displaying image (ComboBoxDataItem.Image).
                Added the following MultiDataTrigger and the DataTrigger after that that sets the
                ResetSize on the image decorator.
            -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <!-- This condition checks to see if the SelectedItem is ComboBoxDataItem. -->
                    <Condition Value="True" Binding="{Binding Path=SelectedItem, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource typeCheckConverter}, ConverterParameter={x:Type igEditors:ComboBoxDataItem}, Mode=OneWay}" />
                    <!-- This condition checks to see if DisplayMemberPath is null or empty string. -->
                    <Condition Value="False" Binding="{Binding Path=DisplayMemberPath, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource nullToFalseConverter}, Mode=OneWay}" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="image" Property="Source" Value="{Binding Path=SelectedItem.Image, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=OneWay}" />
                <Setter TargetName="imagePanel" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <DataTrigger Value="False" Binding="{Binding Path=(igEditors:XamComboEditor.ComboEditor).IsInEditMode, RelativeSource={RelativeSource TemplatedParent}}">
                <Setter TargetName="imageDecorator" Property="ResetSize" Value="True" />
            </DataTrigger>
            <!-- SSP 5/11/10 TFS21311 -->
            <DataTrigger Value="True" Binding="{Binding Path=ContextMenu, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource nullToFalseConverter}}">
                <Setter TargetName="PART_EditableTextBox" Property="ContextMenu" Value="{Binding Path=ContextMenu, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboEditor_NonEditableComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid Background="Transparent" SnapsToDevicePixels="True">
            <Grid IsSharedSizeScope="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                </Grid.ColumnDefinitions>
                <Border Name="SelectedItemBorder" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}" >
                    <ContentPresenter
                        Content="{TemplateBinding SelectionBoxItem}"
				        ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
				        ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
				        Margin="1,0"
				        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
				        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
				        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
					/>
                </Border>
                <!--SSP 11/9/10 TFS33587 - Added IsEnabled setter-->
                <ToggleButton
							x:Name="PART_DropDownButton"
							Grid.ColumnSpan="3"
							Style="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownButtonStyle, RelativeSource={RelativeSource TemplatedParent}}"
							IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}"
							/>
            </Grid>
            <Popup x:Name="PART_Popup"
						 AllowsTransparency="True"
						 Placement="Bottom"
						 IsOpen="{TemplateBinding IsDropDownOpen}"
						 VerticalOffset="1"
						 HorizontalOffset="-1"
						 Focusable="False"
						 PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
					   MaxHeight="{TemplateBinding MaxDropDownHeight}"
					   MinWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MinDropDownWidthResolved, RelativeSource={RelativeSource TemplatedParent}}"
					   MaxWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}}"
						 >
                <luna:SystemDropShadowChrome
							x:Name="Shdw"
							Color="Transparent"
							>
                    <Border Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}">
                        <igWindows:PopupResizerDecorator ResizeMode="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownResizeMode, RelativeSource={RelativeSource TemplatedParent}}" >
                            <DockPanel>
                                <!--JJD 07/06/10 - TFS32174-->
                                <ContentPresenter DockPanel.Dock="Top" ContentTemplate="{Binding Path=PreDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igEditors:XamComboEditor}}}"/>
                                <!--JJD 07/06/10 - TFS32174-->
                                <ContentPresenter DockPanel.Dock="Bottom" ContentTemplate="{Binding Path=PostDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igEditors:XamComboEditor}}}"/>
                                <ScrollViewer x:Name="ScrollViewer">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </ScrollViewer>
                            </DockPanel>
                        </igWindows:PopupResizerDecorator>
                    </Border>
                </luna:SystemDropShadowChrome>
            </Popup>
        </Grid>

        <ControlTemplate.Triggers>
            <!-- SSP 11/6/07 BR27195
				 There is no need to check for IsDropDownOpen as IsSelectionBoxHighlighted already takes that into account.
			-->
            <!--<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelectionBoxHighlighted" Value="True" />
					<Condition Property="IsDropDownOpen" Value="False" />
				</MultiTrigger.Conditions>
				<Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" Property="Foreground" />
			</MultiTrigger>-->

            <!--
                BF 3/19/18 TFS246107
                This trigger is too ambiguous, we need to specify the element here
                so we don't inadvertantly target elements we don't want to be affected.
            -->
            <!--
            <Trigger Property="IsSelectionBoxHighlighted" Value="True">
                <Setter TargetName="SelectedItemBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Property="Background" />
                <Setter Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" Property="Foreground" />
            </Trigger>
            -->
            <Trigger Property="IsSelectionBoxHighlighted" Value="True">
                <Setter TargetName="SelectedItemBorder" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Property="Background" />
                <Setter TargetName="SelectedItemBorder" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" Property="TextElement.Foreground" />
            </Trigger>
            
            <Trigger Property="HasItems" Value="False">
                <!--SSP 4/19/11 TFS72329 - Set the Height instead of MinHeight. Setting the MinHeight causes TFS72329
                where the drop-down is sized to the height of the resizer bar and doesn't show any items when the
                control is bound to items source.-->
                <!--<Setter TargetName="PART_Popup" Property="MinHeight" Value="95" />-->
                <Setter TargetName="PART_Popup" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=TextEditorBackgroundDisabled}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
                <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
            </Trigger>
            <!--SSP 11/9/10 TFS33587 - Disable auto-edit if the editor is read-only. Otherwise when characters are pressed,
                the combobox will select matching entries and and cause the value of the editor to change.-->
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="IsTextSearchEnabled" Value="False" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Static igEditors:XamComboEditor.ComboEditorComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Template" Value="{StaticResource ComboEditor_EditableComboBoxTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{StaticResource ComboEditor_NonEditableComboBoxTemplate}" />
        <!-- SSP 1/7/08 BR27432  - set IsSynchronizedWithCurrentItem to False -->
        <Setter Property="IsSynchronizedWithCurrentItem" Value="False" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <igEditors:VirtualizingStackPanelEx/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <!--SSP 11/7/07 BR27220
			In Non-Editable mode, we don't want to draw dashed focus rect which was happening when you toggle
			through items with keyboard.
			-->
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style />
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type igEditors:XamComboEditor}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="1,2,1,2"/>

        <!-- MD 4/26/11 - TFS73532 - This causes major slowdowns and doesn't provide much value so use a hard coded value instead. -->
        <!--<Setter Property="Margin" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorMarginKey}}" />-->
        <Setter Property="Margin" Value="1" />

        <!--SSP 11/2/07 Now this is being done in code. See ComboBoxStyleKey property of the XamComboEditor-->
        <!--<Setter Property="ComboBoxStyle" Value="{StaticResource ComboEditor_ComboBoxStyle}" />-->
        <Setter Property="DropDownButtonStyle" Value="{StaticResource ComboEditor_DropDownButtonStyle}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamComboEditor}">
                    <Border x:Name="MainBorder"
					    Background="{TemplateBinding Background}"
					    BorderBrush="{TemplateBinding BorderBrush}"
					    BorderThickness="{TemplateBinding BorderThickness}"
 						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <!-- SSP 10/3/07 BR25672 Took the Margin="{TemplateBinding Padding}" code out of Border element above.-->
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <!-- SSP 3/10/09 Display Value Task
									Added DisplayValue and DisplayValueSource properties on XamComboEditor. Use DisplayValue
									instead of the DisplayText. This also means that we can't use TextBlock since DisplayValue
									is an object type and can contain anything. Changed to use ContentPresenter instead of TextBlock.

									Also enclosed the ContentPresenter in a Border element because the ContentPresenter doesn't
									have Padding, which we were setting on the TextBlock previously.

									<TextBlock x:Name="PART_TextBlock"
										Grid.Column="0"
										Padding="{TemplateBinding Padding}"
										Margin="1,0,0,0"
										Text="{TemplateBinding DisplayText}"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										Foreground="{TemplateBinding Foreground}"
									/>
							-->
                            <Border Grid.Column="0" Margin="1,0,0,0" Padding="{TemplateBinding Padding}" >
                                <!-- SSP 3/12/10 TFS27090 - Changed Content="{TemplateBinding DisplayValue} to use Binding
                                    to convert null DisplayValue to empty string because otherwise the content presenter
                                    and thus the editor will be really small in height. -->
                                <ContentPresenter x:Name="PART_Content"
									Content="{Binding Path=DisplayValue, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource nullToParameterConverter}, ConverterParameter={x:Static sys:String.Empty}, Mode=OneWay}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								/>
                            </Border>
                            <!--SSP 11/9/10 TFS33587 - Added IsEnabled setter-->
                            <!--JM 06-24-11 TFS73970 - Added a Focusable setter -->
                            <ToggleButton x:Name="PART_DropDownButton"
								Grid.Column="1"
								Focusable="False"
								Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
								IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
								ClickMode="Press"
								Style="{TemplateBinding DropDownButtonStyle}"
								Visibility="{TemplateBinding DropDownButtonVisibility}"
                                IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}"
								/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- SSP 3/12/10 TFS27090 - When DisplayValueSource is set to Value, we need to have the PART_Content use
                            DisplayValueTemplateKey data template for the ComboBoxDataItem which displays ComboBoxDataItem's Value instead
                            of DisplayText. Added the following DisplayValueSource trigger.
                        -->
                        <Trigger Property="DisplayValueSource" Value="Value">
                            <Setter TargetName="PART_Content" Property="ContentTemplate" Value="{DynamicResource {x:Static igEditors:XamComboEditor.DisplayValueTemplateKey}}" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter Property="DropDownButtonDisplayMode" Value="Always"/>
                            <Setter Property="Padding" Value="2,2,2,2" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_DropDownButton" Property="Tag" Value="MouseOverControlTrue" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="EditTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamComboEditor}">
                    <Border
						x:Name="MainBorder"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
 						>
                        <!-- SSP 10/3/07 BR25672 Took the Margin="{TemplateBinding Padding}" code out of Border element above
								since the ComboBox below is already setting its Padding to that value. We don't want to
								substract the Padding twice. -->
                        <!-- SSP 6/24/11 TFS57835 Added InputMethod.PreferredImeState template binding. This property needs to be set
                                                    on the element that is given focus in the editors SetFocusToFocusSite.-->
                        <!-- SSP 11/14/11 TFS95730 - Added InputMethod.IsInputMethodEnabled template binding. -->
                        <ComboBox
							Name="PART_FocusSite"
							Padding="{TemplateBinding Padding}"
							HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
							IsReadOnly="{TemplateBinding ReadOnly}"
							Background="Transparent"
							BorderBrush="Transparent"
							BorderThickness="0,0,0,0"
							ContextMenu="{TemplateBinding ContextMenu}"
							IsDropDownOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
							Style="{TemplateBinding ComboBoxStyle}"
							IsEditable="{TemplateBinding IsEditable}"
							SelectedValuePath="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsProvider.ValuePath}"
							DisplayMemberPath="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsProvider.DisplayMemberPath}"
							MaxDropDownHeight="{TemplateBinding MaxDropDownHeight}"
							igEditors:XamComboEditor.ComboEditor="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                            InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                            InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                            InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}"
					  />
                    </Border>
                    <!--
					SSP 6/6/07 BR23366
					Added trigger that sets IsTabStop to False based on IsInEditMode setting.
					We need this in order to make the Tab and Shift+Tab navigation work properly.
					Apparently presense of nested textbox causes Shift+Tab to misbehave and cause
					the framwork to give focus to the parent ContentPresenter if the editor
					is inside a HeaderedContentControl. This is similar to what inbox ComboBox
					does.
					-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True"/>
                    <Condition Property="IsInEditMode" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}"/>
                <Setter Property="BorderBrush" Value="{x:Null}"/>
            </MultiTrigger>
            <!-- SSP 1/8/08 BR29482 - Added setter for setting Foreground.
			 We were already setting the Background explicitly above. If we don't
			 do this then the Foreground will be inherited but not the background.
			 This causes a problem when the editor is inside an item of a ListBox
			 and the item is selected. The item's back color turns blue and fore
			 color turns white. However the editor inherits only the fore color
			 and causes the contents to turn white, essentially disappear since
			 the background is explicitly set to white above. Also TextBox
			 explicitly sets both the Background and Foreground.
			-->
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="Foreground" Value="#000000" />
                <Setter Property="Padding" Value="2,2,2,2" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsEmbedded" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsHottrackBorderFillKey}}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=TextEditorBackgroundDisabled}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <DataTemplate DataType="{x:Type igEditors:ComboBoxDataItem}" >
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <TextBlock x:Name="TextBlock" Text="{Binding Path=DisplayText}" Grid.Column="1" Grid.Row="0" />
            <Image Height="{Binding ElementName=TextBlock, Path=ActualHeight}" Stretch="Uniform" StretchDirection="Both" Source="{Binding Path=Image}" Grid.Column="0" Grid.Row="0" />
        </Grid>
    </DataTemplate>

    <!--SSP 3/10/09 Display Value Task - Added a DataTemplate that will be used as ItemTemplate when DisplayValueSource is set to Value-->
    <DataTemplate x:Key="{x:Static igEditors:XamComboEditor.DisplayValueTemplateKey}">
        <DataTemplate.Resources>
            <DataTemplate DataType="{x:Type igEditors:ComboBoxDataItem}" >
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="ContentPresenter" Content="{Binding Path=Value}" Grid.Column="1" Grid.Row="0" />
                    <Image Height="{Binding ElementName=ContentPresenter, Path=ActualHeight}" Stretch="Uniform" StretchDirection="Both" Source="{Binding Path=Image}" Grid.Column="0" Grid.Row="0" />
                </Grid>
            </DataTemplate>
        </DataTemplate.Resources>
        <ContentPresenter Content="{Binding}" />
    </DataTemplate>

    <!--  _________________________ XamDateTimeEditor __________________________________________  -->
    <ControlTemplate x:Key="MaskedEditorWithDropDownRenderTemplate" TargetType="{x:Type igEditors:XamDateTimeEditor}">
        <Border x:Name="MainBorder"
					Background="{TemplateBinding Background}"
					BorderBrush="{TemplateBinding BorderBrush}"
					BorderThickness="{TemplateBinding BorderThickness}"
					>
            <DockPanel>
                <!--SSP 11/9/10 TFS33587 - Added IsEnabled setter - now we do display the drop-down button but
                 disable it when the editor is read-only, to be consistent with the new behavior of the combo editor.-->
                <!--JM 06-24-11 TFS73970 - Added a Focusable setter -->
                <ToggleButton
                                x:Name="PART_DropDownButton"
							    Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
							    IsChecked="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
							    ClickMode="Press"
							    Style="{TemplateBinding DropDownButtonStyle}"
							    Visibility="{TemplateBinding DropDownButtonVisibility}"
                                DockPanel.Dock="Right"
                                IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}"
								Focusable="False"
                                />
                <!--SSP 10/1/09 NAS10.1 - Spin Buttons -->
                <Grid x:Name="PART_SpinButtons" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}" Margin="0,1">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="1"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <!-- AS 7/9/10 TFS35642 - Removed commands from render template spin buttons -->
                    <RepeatButton Style="{TemplateBinding SpinButtonStyle}" Focusable="false" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.IncreaseGlyphKey}}"/>
                    <RepeatButton Style="{TemplateBinding SpinButtonStyle}" Focusable="false" Grid.Row="2" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DecreaseGlyphKey}}"/>
                </Grid>
                <!-- SSP 10/3/07 BR25672 Took the following code out of Border element above since
							    we are setting that value on the TextBlock below.
							    We don't want to substract the padding twice
					        Margin="{TemplateBinding Padding}"-->
                <!-- MD 8/12/10 - TFS26592 - Use the SimpleTextBlock instead -->
                <!--<TextBlock x:Name="TextBlock"-->
                <igWindows:SimpleTextBlock x:Name="TextBlock"
					           Margin="{TemplateBinding Padding}"
					           Text="{TemplateBinding DisplayText}"
					           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
					           VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="Padding" Value="4,2,4,2" />
                <!-- MD 10/27/10 - TFS38066 - We shouldn't optimize the width measurements when this is a standalone editor -->
                <Setter Property="igWindows:SimpleTextBlock.OptimizeWidthMeasurement" Value="False" />
                <!-- SSP/AS 12/8/11 TFS32567 TFS84941 TFS97036
                    Removed the setter here since it's not necessary as we have the style setter that does
                    this further below.
                -->
                <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>-->
            </Trigger>
            <!-- SSP/AS 12/8/11 TFS32567 TFS84941 TFS97036
                Removed the setter here since it's not necessary as we have the style setter that does
                this further below.
            -->
            <!--<MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="False"/>
                    <Condition Property="IsInEditMode" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            </MultiTrigger>-->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=TextEditorBackgroundDisabled}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="MaskedEditorWithDropDownEditTemplate" TargetType="{x:Type igEditors:XamDateTimeEditor}">
        <Border x:Name="MainBorder"
					    Background="{TemplateBinding Background}"
					    BorderBrush="{TemplateBinding BorderBrush}"
					    BorderThickness="{TemplateBinding BorderThickness}">
            <DockPanel>
                <!--SSP 11/9/10 TFS33587 - Added IsEnabled setter - now we do display the drop-down button but
                 disable it when the editor is read-only, to be consistent with the new behavior of the combo editor.-->
                <!--JM 06-24-11 TFS73970 - Added a Focusable setter -->
                <ToggleButton
                                x:Name="PART_DropDownButton"
							    Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
							    ClickMode="Press"
                                IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                                Style="{TemplateBinding DropDownButtonStyle}"
							    Visibility="{TemplateBinding DropDownButtonVisibility}"
                                DockPanel.Dock="Right"
                                IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}"
								Focusable="False"
                                />
                <Popup x:Name="PART_Popup"
                                    AllowsTransparency="True"
                                    StaysOpen="False"
						            PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                    IsOpen="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                    igWindows:PopupHelper.DropDownButton="{Binding ElementName=PART_DropDownButton}">
                    <luna:SystemDropShadowChrome
							        x:Name="Shdw"
							        Color="Transparent"
							        >
                        <Border Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                                            BorderThickness="1"
                                            BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                                            Padding="1">
                            <!--SSP 3/6/09 TFS15024 - Added new DateValue property and changed the SelectedDate to bind to that instead.
														SelectedDate="{Binding Path=Value, Mode=TwoWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}"-->
                            <igEditors:XamMonthCalendar x:Name="PART_Calendar"
                                            EraDisplayMode="{TemplateBinding EraDisplayMode}"
                                            MinDate="{TemplateBinding ComputedMinDate}"
                                            MaxDate="{TemplateBinding ComputedMaxDate}"
                                            MinCalendarMode="{TemplateBinding ComputedMinCalendarMode}"
                                            ScrollDirection="{TemplateBinding ScrollDirection}"
                                            SelectedDate="{Binding Path=DateValue, Mode=TwoWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                            ActiveDate="{Binding Path=DateValue, Mode=OneWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                            SelectionType="Single" />
                        </Border>
                    </luna:SystemDropShadowChrome>
                </Popup>

                <!--SSP 10/1/09 NAS10.1 - Spin Buttons -->
                <Grid x:Name="PART_SpinButtons" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}" Margin="0,1" >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="1"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <RepeatButton Style="{TemplateBinding SpinButtonStyle}" Focusable="false" Command="{x:Static igEditors:MaskedEditorCommands.SpinUp}" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.IncreaseGlyphKey}}"/>
                    <RepeatButton Style="{TemplateBinding SpinButtonStyle}" Focusable="false" Command="{x:Static igEditors:MaskedEditorCommands.SpinDown}" Grid.Row="2" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DecreaseGlyphKey}}"/>
                </Grid>
                <!-- SSP 10/3/07 BR25672 Took the following code out of Border element above
								since we are setting that value on the SectionsList element below.
								We don't want to substract the padding twice
					            Margin="{TemplateBinding Padding}"-->
                <!-- SSP 3/23/09 IME - Enclosed the SectionsList in a CardPanel and added ImeTextBox.
													Also renamed SectionsList element to 'SectionsList' from 'PART_FocusSite' and assigned
													that name to 'CardPanel'
												-->
                <igWindows:CardPanel x:Name="PART_FocusSite">
                    <!-- SSP 6/24/11 TFS57835 Added InputMethod.PreferredImeState template binding. This property needs to be set
                                                    on the element that is given focus in the editors SetFocusToFocusSite.-->
                    <!-- SSP 11/16/11 TFS95805 - Added InputMethod.IsInputMethodEnabled template binding. -->
                    <igEditors:SectionsList
									x:Name="SectionsList"
									Margin="{TemplateBinding Padding}"
									Foreground="{TemplateBinding Foreground}"
									ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Sections, Mode=OneWay}"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
									FlowDirection="LeftToRight"
                                    InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                    InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                                    InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}"
								/>
                    <!-- SSP 6/24/11 TFS57835 Added InputMethod.PreferredImeState template binding. -->
                    <TextBox
									x:Name="PART_InputTextBox"
									Visibility="Collapsed"
									HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
									VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
									TextAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource horizToTextAlignmentConverter}}"
									Background="Transparent"
									BorderBrush="Transparent"
									BorderThickness="0,0,0,0"
									Foreground="{TemplateBinding Foreground}"
                                    InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                    InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}"
								/>
                </igWindows:CardPanel>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
                <Setter TargetName="Shdw" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="Shdw" Property="Color" Value="#71000000" />
            </Trigger>
            <Trigger Property="IsEmbedded" Value="False"/>
            <!--
					        SSP 6/6/07 BR23366
					        Added trigger that sets IsTabStop to False based on IsInEditMode setting.
					        We need this in order to make the Tab and Shift+Tab navigation work properly.
					        Apparently presense of nested textbox causes Shift+Tab to misbehave and cause
					        the framwork to give focus to the parent ContentPresenter if the editor
					        is inside a HeaderedContentControl. This is similar to what inbox ComboBox
					        does.
					    -->
            <Trigger Property="IsInEditMode" Value="True">
                <Setter Property="IsTabStop" Value="False" />
            </Trigger>
            <!-- SSP 3/23/09 IME - Added the trigger that sets Visibility on sections
								 list and text box based on isTextBoxEntryEnabled. -->
            <Trigger Property="IsTextBoxEntryEnabled" Value="True">
                <Setter TargetName="SectionsList" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_InputTextBox" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=TextEditorBackgroundDisabled}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="XamDateTimeEditorBaseStyle" TargetType="{x:Type igEditors:XamDateTimeEditor}" BasedOn="{StaticResource XamMaskedEditorBaseStyle}" >
        <Setter Property="DropDownButtonStyle" Value="{StaticResource ComboEditor_DropDownButtonStyle}" />
        <Setter Property="Template" Value="{StaticResource MaskedEditorWithDropDownRenderTemplate}" />
        <Setter Property="EditTemplate" Value="{StaticResource MaskedEditorWithDropDownEditTemplate}" />
    </Style>
    <Style TargetType="{x:Type igEditors:XamDateTimeEditor}" BasedOn="{StaticResource XamDateTimeEditorBaseStyle}" />

    <!--  _________________________ XamMonthCalendar __________________________________________  -->

    <!-- _________________________ Resource Keys Start  ______________________________________ -->

    <!-- _________________________ XamMonthNaviButtons ______________________________________ -->
    <Style x:Key="{x:Static igEditors:XamMonthCalendar.ScrollPreviousRepeatButtonStyleKey}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarNavGlyphFillKey} }"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Width="16" Height="14" Background="#00FFFFFF">
                        <Path
							Stretch="Fill"
							Opacity="1"
							Data="M 431,43 C431,43 427,46.5 427,46.5 427,46.5 431,50 431,50 431,50 431,43 431,43 z"
							Fill="{TemplateBinding Foreground}" Width="4" Height="7" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarNavGlyphHoverFillKey} }"/>
                        </Trigger>
                        <!--SS 08/02/16 TFS222433 - Add vertical scrolling-->
                        <DataTrigger Binding="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).ScrollDirection, RelativeSource={RelativeSource Self}}" Value="Vertical">
                            <Setter Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" CenterX=".5" CenterY=".5"/>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger> 
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="{x:Static igEditors:XamMonthCalendar.ScrollNextRepeatButtonStyleKey}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarNavGlyphFillKey} }"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Width="16" Height="14" Background="#00FFFFFF">
                        <Path
							Stretch="Fill"
							Opacity="1"
							Data="M437,43C437,43 441,46.5 441,46.5 441,46.5 437,50 437,50 437,50 437,43 437,43z"
							Fill="{TemplateBinding Foreground}" Width="4" Height="7" x:Name="path" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarNavGlyphHoverFillKey} }"/>
                        </Trigger>
                        <!--SS 08/02/16 TFS222433 - Add vertical scrolling-->
                        <DataTrigger Binding="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).ScrollDirection, RelativeSource={RelativeSource Self}}" Value="Vertical">
                            <Setter Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" CenterX=".5" CenterY=".5"/>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <CornerRadius x:Key="{x:Static igEditors:CalendarItem.CornerRadiusKey}">3</CornerRadius>

    <!-- TodayButtonStyleKey -->
    <Style TargetType="{x:Type Button}" x:Key="{x:Static igEditors:XamMonthCalendar.TodayButtonStyleKey}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Command" Value="{x:Static igEditors:MonthCalendarCommands.Today}" />
        <Setter Property="Content" Value="{Binding Path=TodayButtonCaption, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="True">
                        <StackPanel Orientation="Horizontal">
                            <Border BorderBrush="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayOuterBorderFillKey}}"
                                BorderThickness="1"
                                Width="20"
                                Margin="0,0,2,0"
                                VerticalAlignment="Stretch"
                                Background="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayFillKey} }"
								CornerRadius="{DynamicResource {x:Static igEditors:CalendarItem.CornerRadiusKey}}" />
                            <ContentPresenter x:Name="TodayButtonContent"
                                              ContentSource="Content"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              Opacity="0.7"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                       <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value="1" TargetName="TodayButtonContent"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" TargetName="TodayButtonContent" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <!-- _________________________ CalendarItem ______________________________________ -->
    <ControlTemplate x:Key="CalendarItemInner" TargetType="{x:Type igEditors:CalendarItem}">
        <Border x:Name="OuterBorder"
                SnapsToDevicePixels="True"
                HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                VerticalAlignment="{TemplateBinding VerticalAlignment}"
                BorderThickness="{TemplateBinding BorderThickness}"
                BorderBrush="{TemplateBinding BorderBrush}"
                CornerRadius="{DynamicResource {x:Static igEditors:CalendarItem.CornerRadiusKey}}"
                Background="{TemplateBinding Background}">
            <Border x:Name="InnerBorder" CornerRadius="{Binding Path=CornerRadius, ElementName=OuterBorder}" BorderThickness="1">
                <ContentPresenter
                    Content="{TemplateBinding Content}"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    TextBlock.Foreground="{TemplateBinding Foreground}"
                    Margin="{TemplateBinding Padding}" />
            </Border>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"  Value="False"/>
                    <Condition Property="IsMouseOver"  Value="True"/>
                    <Condition Property="IsToday" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverFillKey} }"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverOuterBorderFillKey} }"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverForegroundKey} }"/>
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderBrush" TargetName="InnerBorder" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemInnerBorderFillKey} }"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedFillKey} }"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedOuterBorderFillKey} }"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedForegroundKey} }"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"  Value="True"/>
                    <Condition Property="IsSelectionActive"  Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsToday" Value="True">
                <Setter Property="BorderBrush" TargetName="InnerBorder" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemInnerBorderFillKey} }"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayOuterBorderFillKey} }"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="CalendarItemNoInner" TargetType="{x:Type igEditors:CalendarItem}">
        <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                VerticalAlignment="{TemplateBinding VerticalAlignment}"
                BorderThickness="{TemplateBinding BorderThickness}"
                BorderBrush="{TemplateBinding BorderBrush}"
                CornerRadius="{DynamicResource {x:Static igEditors:CalendarItem.CornerRadiusKey}}"
                Background="{TemplateBinding Background}"
                SnapsToDevicePixels="True">
            <ContentPresenter
                Content="{TemplateBinding Content}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                TextBlock.Foreground="{TemplateBinding Foreground}"
                Margin="{TemplateBinding Padding}" />
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"  Value="False"/>
                    <Condition Property="IsMouseOver"  Value="True"/>
                    <Condition Property="IsToday" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverFillKey} }"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverOuterBorderFillKey} }"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverForegroundKey} }"/>
            </MultiTrigger>
            <!--<Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverFillKey} }"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverOuterBorderFillKey} }"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverForegroundKey} }"/>
            </Trigger>-->
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedFillKey} }"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedOuterBorderFillKey} }"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedForegroundKey} }"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected"  Value="True"/>
                    <Condition Property="IsSelectionActive"  Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="CalendarItemBase" TargetType="{x:Type igEditors:CalendarItem}">
        <Setter Property="Content" Value="{Binding Path=Title, RelativeSource={x:Static RelativeSource.Self}}"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="4,1,4,1"/>
        <Setter Property="Template" Value="{StaticResource CalendarItemInner}" />
        <Style.Triggers>
            <Trigger Property="IsToday" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayOuterBorderFillKey}}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsToday" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayForegroundKey}}"/>
            </MultiTrigger>
            <Trigger Property="IsLeadingOrTrailingItem" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarOtherDayForegroundKey}}"/>
            </Trigger>
            <Trigger Property="IsActive" Value="True">
                <Setter Property="KeyboardNavigation.IsTabStop" Value="True"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type igEditors:CalendarItem}" BasedOn="{StaticResource CalendarItemBase}" />

    <!-- _________________________ CalendarDay ______________________________________ -->
    <Style x:Key="CalendarDayBase" TargetType="{x:Type igEditors:CalendarDay}" BasedOn="{StaticResource CalendarItemBase}">
        <!--<Setter Property="Content" Value="{Binding Path=StartDate, Converter={StaticResource FormattableToStr}, ConverterParameter=%d, RelativeSource={x:Static RelativeSource.Self}}"/>-->
        <Style.Triggers>
            <Trigger Property="IsWorkday" Value="True">
                <Setter Property="FontWeight" Value="Bold"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type igEditors:CalendarDay}" BasedOn="{StaticResource CalendarDayBase}"/>

    <!-- _________________________ CalendarDayOfWeek ______________________________________ -->
    <Style x:Key="CalendarDayOfWeekBase" TargetType="{x:Type igEditors:CalendarDayOfWeek}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayOfWeekForegroundKey} }"/>
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Border.CornerRadius" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:CalendarDayOfWeek}">
                    <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                      VerticalAlignment="{TemplateBinding VerticalAlignment}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      CornerRadius="{TemplateBinding Border.CornerRadius}"
                      Background="{TemplateBinding Background}"
                      Padding="{TemplateBinding Padding}">
                        <TextBlock
                          Foreground="{TemplateBinding Foreground}"
                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                          Text="{TemplateBinding Caption}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type igEditors:CalendarDayOfWeek}" BasedOn="{StaticResource CalendarDayOfWeekBase}"/>

    <!-- _________________________ CalendarWeekNumber ______________________________________ -->
    <Style x:Key="CalendarWeekNumberBase" TargetType="{x:Type igEditors:CalendarWeekNumber}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayOfWeekForegroundKey} }"/>
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Border.CornerRadius" Value="0" />
        <Setter Property="Padding" Value="1,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:CalendarWeekNumber}">
                    <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalAlignment}"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          CornerRadius="{TemplateBinding Border.CornerRadius}"
                          Background="{TemplateBinding Background}"
                          Padding="{TemplateBinding Padding}">
                        <TextBlock Foreground="{TemplateBinding Foreground}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            Text="{Binding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type igEditors:CalendarWeekNumber}" BasedOn="{StaticResource CalendarWeekNumberBase}" />

    <!-- _________________________ CalendarItemGroupTitle _________________________________ -->
    <Style x:Key="CalendarItemGroupTitleBase" TargetType="{x:Type igEditors:CalendarItemGroupTitle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalAlignment}"
                          CornerRadius="{TemplateBinding Border.CornerRadius}"
                          Background="{TemplateBinding Background}"
                          SnapsToDevicePixels="True"
                          Padding="{TemplateBinding Control.Padding}">
                        <DockPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" LastChildFill="True">
                            <RepeatButton DockPanel.Dock="Left" x:Name="previousMonth"
                                Focusable="False"
                                Visibility="{Binding Path=ScrollPreviousButtonVisibility,
                                    RelativeSource={RelativeSource AncestorType={x:Type igEditors:CalendarItemGroup}}}"
                                Command="{x:Static igEditors:MonthCalendarCommands.ScrollPreviousGroup}"
                                Style="{DynamicResource {x:Static igEditors:XamMonthCalendar.ScrollPreviousRepeatButtonStyleKey}}"
                                >&lt;</RepeatButton>
                            <RepeatButton DockPanel.Dock="Right" x:Name="nextMonth"
                                Focusable="False"
                                Visibility="{Binding Path=ScrollNextButtonVisibility,
                                    RelativeSource={RelativeSource AncestorType={x:Type igEditors:CalendarItemGroup}}}"
                                Command="{x:Static igEditors:MonthCalendarCommands.ScrollNextGroup}"
                                Style="{DynamicResource {x:Static igEditors:XamMonthCalendar.ScrollNextRepeatButtonStyleKey}}"
                                >&gt;</RepeatButton>

							<Button x:Name="headerContent"
                                HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                Focusable="False"
                                VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                Style="{StaticResource BorderlessButtonStyle}"
                                Command="{x:Static igEditors:MonthCalendarCommands.ZoomOutCalendarMode}"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type igEditors:CalendarItemGroup}}}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                Content="{TemplateBinding ContentControl.Content}" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="headerContent">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarNavGlyphHoverFillKey} }"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemGroupTitleBackgroundKey} }"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemGroupTitleForegroundKey} }"/>
        <Setter Property="Padding" Value="0,0,0,0"/>
    </Style>
    <Style TargetType="{x:Type igEditors:CalendarItemGroupTitle}" BasedOn="{StaticResource CalendarItemGroupTitleBase}">
    </Style>

    <!-- _________________________ CalendarItemGroup ______________________________________ -->
    <Style TargetType="{x:Type igEditors:CalendarItemGroup}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ScrollNextButtonVisibility" Value="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).ScrollButtonVisibility, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="ScrollPreviousButtonVisibility" Value="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).ScrollButtonVisibility, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:CalendarItemGroup}">
                    <Border BorderBrush="{TemplateBinding Border.BorderBrush}"
                      BorderThickness="{TemplateBinding Border.BorderThickness}"
                      Background="{TemplateBinding Panel.Background}"
                      SnapsToDevicePixels="True"
                      Padding="{TemplateBinding Control.Padding}">
                        <DockPanel LastChildFill="True"
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">

                            <!-- Title -->
                            <igEditors:CalendarItemGroupTitle x:Name="groupTitle"
                                                              Content="{TemplateBinding Title}"
                                                              DockPanel.Dock="Top" />

                            <igEditors:CalendarItemAreaPanel />
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ CalendarItemArea ______________________________________ -->
    <Style x:Key="CalendarItemAreaBase" TargetType="{x:Type igEditors:CalendarItemArea}">
        <Setter Property="DayOfWeekHeaderVisibility" Value="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).DayOfWeekHeaderVisibility, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="WeekNumberVisibility" Value="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).WeekNumberVisibility, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:CalendarItemArea}">
                    <!-- AS 10/3/08 TFS8616 - Added AdornerDecorator -->
                    <AdornerDecorator>
                        <Border BorderBrush="{TemplateBinding Border.BorderBrush}"
                          BorderThickness="{TemplateBinding Border.BorderThickness}"
                          Background="{TemplateBinding Panel.Background}"
                          SnapsToDevicePixels="True"
                          Padding="{TemplateBinding Control.Padding}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <!-- week numbers -->
                                    <ColumnDefinition Width="*" />
                                    <!-- Calendar -->
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <!-- Days of Week -->
                                    <RowDefinition />
                                    <!-- Calendar -->
                                </Grid.RowDefinitions>

                                <!-- Day Of Week Header -->
                                <ItemsControl x:Name="daysOfWeek"
                                    Grid.Column="1"
                                    Visibility="{TemplateBinding Property=DayOfWeekHeaderVisibility}"
                                    Focusable="False"
                                    ItemsSource="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).DaysOfWeek, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                    Background="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayOfWeekFillKey} }">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <igWindows:UniformGridEx Rows="1" Columns="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).DaysOfWeek.Count, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <igEditors:CalendarDayOfWeek DataContext="{Binding}" />
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>

                                <!-- Week Numbers -->
                                <igWindows:CardPanel Grid.Column="0"
                                      Grid.Row="1"
                                      x:Name="weekNumbers"
                                      Visibility="{TemplateBinding WeekNumberVisibility}"
                                    >
                                    <!-- This is there to ensure the column is wide enough -->
                                    <igEditors:CalendarWeekNumber DataContext="52" Visibility="Hidden" IsHitTestVisible="False"/>

                                    <ItemsControl x:Name="weekNumberItems"
                                        Focusable="False"
                                        ItemsSource="{Binding Path=WeekNumbers, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                        Background="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayOfWeekFillKey} }">

                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <igWindows:UniformGridEx Rows="6" Columns="1" FirstRow="{Binding Path=(igEditors:CalendarItemArea.ItemArea).FirstItemRowOffset, RelativeSource={x:Static RelativeSource.Self}}" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>

                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <igEditors:CalendarWeekNumber DataContext="{Binding}"/>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>

                                    </ItemsControl>
                                </igWindows:CardPanel>

                                <!-- Items of Group - e.g. Days Of Month -->
                                <ItemsControl
                                    x:Name="itemsList"
                                    Grid.Column="1"
                                    Grid.Row="1"
                                    KeyboardNavigation.DirectionalNavigation="None"
                                    Focusable="False"
                                    BorderBrush="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarSeparatorStrokeKey} }"
                                    BorderThickness="0"
                                    ItemsSource="{Binding Path=Items, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <igWindows:UniformGridEx
                                                FirstColumn="{Binding Path=(igEditors:CalendarItemArea.ItemArea).FirstItemColumnOffset, RelativeSource={x:Static RelativeSource.Self}}"
                                                FirstRow="{Binding Path=(igEditors:CalendarItemArea.ItemArea).FirstItemRowOffset, RelativeSource={x:Static RelativeSource.Self}}"
                                                Rows="{Binding Path=(igEditors:CalendarItemArea.ItemArea).ItemRows, RelativeSource={x:Static RelativeSource.Self}}"
                                                Columns="{Binding Path=(igEditors:CalendarItemArea.ItemArea).ItemColumns, RelativeSource={x:Static RelativeSource.Self}}" />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </Grid>
                        </Border>
                    </AdornerDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="DayOfWeekHeaderVisibility" Value="Visible">
                            <Setter Property="BorderThickness" TargetName="itemsList" Value="0,1,0,0" />
                        </Trigger>
                        <Trigger Property="WeekNumberVisibility" Value="Visible">
                            <Setter Property="BorderThickness" TargetName="itemsList" Value="1,0,0,0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="DayOfWeekHeaderVisibility" Value="Visible" />
                                <Condition Property="WeekNumberVisibility" Value="Visible" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="itemsList" Value="1,1,0,0" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type igEditors:CalendarItemArea}" BasedOn="{StaticResource CalendarItemAreaBase}">
        <Setter Property="Margin" Value="0,5,0,0" />
    </Style>

    <!-- _________________________ XamMonthCalendar ______________________________________ -->
    <Style TargetType="{x:Type igEditors:XamMonthCalendar}">
        <!-- AS 2/9/09 TFS11631 We may need to focus the month calendar but we don't
            want the default focus rect on the control.
        -->
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />

        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamMonthCalendar}">
                    <Border BorderBrush="{TemplateBinding Border.BorderBrush}"
                      BorderThickness="{TemplateBinding Border.BorderThickness}"
                      Background="{TemplateBinding Panel.Background}"
                      SnapsToDevicePixels="True"
                      Padding="{TemplateBinding Padding}">
                        <DockPanel SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <!-- Today button -->
                            <Button DockPanel.Dock="Bottom"
                                Style="{DynamicResource {x:Static igEditors:XamMonthCalendar.TodayButtonStyleKey}}"
                                Visibility="{TemplateBinding TodayButtonVisibility}" />

                            <!-- Months -->
                            <igEditors:CalendarItemGroupPanel
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                />
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    <!-- _________________________ TemplateEditor ______________________________________ -->
    <Style TargetType="{x:Type igEditors:TemplateEditor}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:TemplateEditor}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="content"
                            Content="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"
						    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
						    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--If there is no format or converter then we will use the value-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ValueToTextConverter" Value="{x:Null}" />
                                <Condition Property="Format" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="content" Property="Content" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>

                        <!-- By default if we have a render template then use the value as the content and 
                            use the specified renderdatatemplate -->
                        <Trigger Property="HasDisplayDataTemplate" Value="True">
                            <Setter TargetName="content" Property="Content" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="content" Property="ContentTemplate" Value="{Binding DisplayDataTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <Trigger Property="HasDisplayDataTemplateSelector" Value="True">
                            <Setter TargetName="content" Property="ContentTemplateSelector" Value="{Binding DisplayDataTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="EditTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:TemplateEditor}">
                    <ControlTemplate.Resources>
                        <Style x:Key="emptyCtrl" TargetType="{x:Type Control}">
                            <Setter Property="IsTabStop" Value="True" />
                            <Setter Property="Focusable" Value="True" />
                            <Setter Property="Template" Value="{x:Null}" />
                        </Style>
                        <ControlTemplate x:Key="emptyCtrlTemplate" />
                    </ControlTemplate.Resources>
                    <Grid KeyboardNavigation.TabNavigation="local">
                        <Control x:Name="PART_FocusBefore" TabIndex="0" Style="{StaticResource emptyCtrl}" />
                        <Control x:Name="PART_FocusAfter" TabIndex="2" Style="{StaticResource emptyCtrl}" />
                        <Border 
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                            <ContentPresenter 
                                x:Name="PART_FocusSite" 
							    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Content="{TemplateBinding Value}"
                                KeyboardNavigation.IsTabStop="false"
                                KeyboardNavigation.TabIndex="1"
                                Focusable="True"
                                KeyboardNavigation.TabNavigation="local" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasEditDataTemplate" Value="True">
                            <Setter TargetName="PART_FocusSite" Property="ContentTemplate" Value="{Binding EditDataTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasEditDataTemplate" Value="False" />
                                <Condition Property="HasDisplayDataTemplate" Value="True" />
                                <Condition Property="HasEditDataTemplateSelector" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_FocusSite" Property="ContentTemplate" Value="{Binding DisplayDataTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasEditDataTemplate" Value="False"/>
                                <Condition Property="HasEditDataTemplateSelector" Value="False"/>
                                <Condition Property="HasDisplayDataTemplateSelector" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_FocusSite" Property="ContentTemplateSelector" Value="{Binding DisplayDataTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                        <Trigger Property="HasEditDataTemplateSelector" Value="True">
                            <Setter TargetName="PART_FocusSite" Property="ContentTemplateSelector" Value="{Binding EditDataTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- _________________________ Resource Keys End  ______________________________________ -->
</ResourceDictionary>