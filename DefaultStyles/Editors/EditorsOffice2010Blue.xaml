<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:igEditors="http://infragistics.com/Editors"
  xmlns:igWindows="http://infragistics.com/Windows"
  xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="EditorsOffice2k7Blue.xaml" />
        <ResourceDictionary Source="EditorsOffice2010Blue_Brushes.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!-- *********************************  Vertical ScrollBarButton  ********************************* -->
    <Style x:Key="VScrollBarButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="{StaticResource TransparentBrush}">
                        <Border Visibility="Collapsed" x:Name="ButtonBackground" Background="{StaticResource RepeatBtnNormalBackgroundBrush}" BorderBrush="{StaticResource RepeatBtnBorderBrush}" BorderThickness="1" CornerRadius="1">
                            <Rectangle x:Name="highlight" Stroke="{StaticResource RepeatBtnHoverHighlightBrush}" Visibility="Collapsed"/>
                        </Border>
                        <ContentPresenter/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="ButtonBackground" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="highlight" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  Horizontal ScrollBarButton  ********************************* -->
    <Style x:Key="HScrollBarButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="{StaticResource TransparentBrush}">
                        <Border Visibility="Collapsed" x:Name="ButtonBackground" Background="{StaticResource HorizRepeatBtnNormalBackgroundBrush}" BorderBrush="{StaticResource RepeatBtnBorderBrush}" BorderThickness="1" CornerRadius="1">
                            <Rectangle x:Name="highlight" Stroke="{StaticResource HorizRepeatBtnHoverHighlightBrush}" Visibility="Collapsed"/>
                        </Border>
                        <ContentPresenter/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Visibility" TargetName="ButtonBackground" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="highlight" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  Scrollbar Page Button Style  ********************************* -->
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="{StaticResource TransparentBrush}"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  Horizontal Scrollbar Thumb Style  ********************************* -->
    <Style x:Key="HScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Width="Auto" Height="Auto">
                        <Rectangle x:Name="ThumbBackground" Stroke="{StaticResource RepeatBtnBorderBrush}" Fill="{StaticResource HorizRepeatBtnNormalBackgroundBrush}" RadiusX="1" RadiusY="1" Margin="0"/>
                        <Path Width="7" Height="8" Data="M 0,6 C0,6 0,7 0,7 0,7 8,7 8,7 8,7 8,6 8,6 8,6 0,6 0,6 zM 0,4 C0,4 0,5 0,5 0,5 8,5 8,5 8,5 8,4 8,4 8,4 0,4 0,4 zM 0,2 C0,2 0,3 0,3 0,3 8,3 8,3 8,3 8,2 8,2 8,2 0,2 0,2 zM 0,0 C0,0 0,1 0,1 0,1 8,1 8,1 8,1 8,0 8,0 8,0 0,0 0,0 z" Fill="{StaticResource ScrollBarThumbGlyphDarkBrush}" RenderTransformOrigin="0.5,0.5" Stretch="Uniform">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="90"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="ThumbBackground" Value="{StaticResource HorizRepeatBtnHoverBackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Fill" TargetName="ThumbBackground" Value="{StaticResource HorizRepeatBtnHoverHighlightBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  Vertical Scrollbar Thumb Style  ********************************* -->
    <Style x:Key="VScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Width="Auto" Height="Auto">
                        <Rectangle x:Name="ThumbBackground" Stroke="{StaticResource RepeatBtnBorderBrush}" Fill="{StaticResource RepeatBtnNormalBackgroundBrush}" RadiusX="1" RadiusY="1" Margin="0"/>
                        <Path Width="7" Height="8" Data="M 0,6 C0,6 0,7 0,7 0,7 8,7 8,7 8,7 8,6 8,6 8,6 0,6 0,6 zM 0,4 C0,4 0,5 0,5 0,5 8,5 8,5 8,5 8,4 8,4 8,4 0,4 0,4 zM 0,2 C0,2 0,3 0,3 0,3 8,3 8,3 8,3 8,2 8,2 8,2 0,2 0,2 zM 0,0 C0,0 0,1 0,1 0,1 8,1 8,1 8,1 8,0 8,0 8,0 0,0 0,0 z" Fill="{StaticResource ScrollBarThumbGlyphDarkBrush}" RenderTransformOrigin="0.5,0.5" Stretch="Uniform">
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="ThumbBackground" Value="{StaticResource RepeatBtnHoverBackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Fill" TargetName="ThumbBackground" Value="{StaticResource RepeatBtnPressedBackgroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  Scrollbar Style  ********************************* -->
    <Style x:Key="ScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="Background" Value="{StaticResource ScrollBarTrackBrush}"/>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>
                        <Rectangle Grid.RowSpan="3" StrokeThickness="1" Fill="{StaticResource ScrollBarTrackBrush}" Stroke="{StaticResource ScrollBarTrackBorderBrush}" Margin="0"/>
                        <RepeatButton Style="{StaticResource VScrollBarButton}" IsEnabled="{TemplateBinding IsMouseOver}" Command="{x:Static ScrollBar.LineUpCommand}">
                            <Path Width="8" Height="4" Data="M 0,3 C0,3 0,4 0,4 0,4 8,4 8,4 8,4 8,3 8,3 8,3 7,3 7,3 7,3 7,2 7,2 7,2 6,2 6,2 6,2 6,1 6,1 6,1 5,1 5,1 5,1 5,0 5,0 5,0 3,0 3,0 3,0 3,1 3,1 3,1 2,1 2,1 2,1 2,2 2,2 2,2 1,2 1,2 1,2 1,3 1,3 1,3 0,3 0,3 z" Fill="{StaticResource ScrollBarGlyphFillBrush}"/>
                        </RepeatButton>
                        <Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1" IsDirectionReversed="true">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="{x:Static ScrollBar.PageUpCommand}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="{x:Static ScrollBar.PageDownCommand}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource VScrollBarThumb}"/>
                            </Track.Thumb>
                        </Track>
                        <RepeatButton Style="{StaticResource VScrollBarButton}" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2" Command="{x:Static ScrollBar.LineDownCommand}">
                            <Path Width="8" Height="4" Data="M 0,0 C0,0 0,1 0,1 0,1 1,1 1,1 1,1 1,2 1,2 1,2 2,2 2,2 2,2 2,3 2,3 2,3 3,3 3,3 3,3 3,4 3,4 3,4 5,4 5,4 5,4 5,3 5,3 5,3 6,3 6,3 6,3 6,2 6,2 6,2 7,2 7,2 7,2 7,1 7,1 7,1 8,1 8,1 8,1 8,0 8,0 8,0 0,0 0,0 z" Fill="{StaticResource ScrollBarGlyphFillBrush}"/>
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="Background" Value="{StaticResource HorizontalScrollBarTrackBrush}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    <ColumnDefinition Width="0.00001*"/>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                </Grid.ColumnDefinitions>
                                <Rectangle StrokeThickness="1" Fill="{StaticResource ScrollBarTrackBrush}" Stroke="{StaticResource ScrollBarTrackBorderBrush}" Margin="0" Grid.ColumnSpan="3"/>
                                <RepeatButton Style="{StaticResource HScrollBarButton}" IsEnabled="{TemplateBinding IsMouseOver}" Command="{x:Static ScrollBar.LineLeftCommand}">
                                    <Path Width="4" Height="8" Data="M 4,0 C4,0 3,0 3,0 3,0 3,1 3,1 3,1 2,1 2,1 2,1 2,2 2,2 2,2 1,2 1,2 1,2 1,3 1,3 1,3 0,3 0,3 0,3 0,5 0,5 0,5 1,5 1,5 1,5 1,6 1,6 1,6 2,6 2,6 2,6 2,7 2,7 2,7 3,7 3,7 3,7 3,8 3,8 3,8 4,8 4,8 4,8 4,0 4,0 z" Fill="{StaticResource ScrollBarGlyphFillBrush}" Stretch="Fill"/>
                                </RepeatButton>
                                <Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Column="1">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="{x:Static ScrollBar.PageLeftCommand}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="{x:Static ScrollBar.PageRightCommand}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource HScrollBarThumb}"/>
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton Style="{StaticResource HScrollBarButton}" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}">
                                    <Path Width="4" Height="8" Fill="{StaticResource ScrollBarGlyphFillBrush}" Stretch="Fill" Data="M 0,0 C0,0 1,0 1,0 1,0 1,1 1,1 1,1 2,1 2,1 2,1 2,2 2,2 2,2 3,2 3,2 3,2 3,3 3,3 3,3 4,3 4,3 4,3 4,5 4,5 4,5 3,5 3,5 3,5 3,6 3,6 3,6 2,6 2,6 2,6 2,7 2,7 2,7 1,7 1,7 1,7 1,8 1,8 1,8 0,8 0,8 0,8 0,0 0,0 z"/>
                                </RepeatButton>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- *********************************  ScrollViewer Style ********************************* -->
    <Style x:Key="ScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner" Grid.Column="1" Fill="{StaticResource HorizontalScrollBarTrackBrush}" Grid.Row="1"/>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Style="{StaticResource ScrollBarStyle}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Style="{StaticResource ScrollBarStyle}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************* SimpleTextBox Style ********************************* -->
    <Style x:Key="SimpleTextBoxStyle" TargetType="{x:Type igWindows:SimpleTextBlock}">
        <Setter Property="Margin" Value="0" />
        <!--To override styles in CoreImplicit Styles file-->
    </Style>

    <!-- *********************************  InputTextBox Style  ********************************* -->
    <Style x:Key="InputTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{StaticResource TransparentBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource TransparentBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0" />
        <!--To override styles in CoreImplicit Styles file-->
        <Setter Property="SelectionBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=TextEditorSelectionBrush}}" />
    </Style>

    <!-- *********************************  ComboEditorDropDownButton Style ********************************* -->
    <Style x:Key="ComboEditor_DropDownButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="True" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto"  />
                        </Grid.ColumnDefinitions>
                        <Grid x:Name="ComboEditorDropdown" HorizontalAlignment="Right" Background="Transparent" Grid.Column="1" Width="14" Margin="0,-1,-1,-1">
                            <Border SnapsToDevicePixels="True" x:Name="OuterBorder_Center" BorderBrush="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnNormalOuterBorderFillKey}}" BorderThickness="1" Background="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnNormalCenterFillKey}}" />
                            <Border SnapsToDevicePixels="True" Margin="1,1,1,1" x:Name="InnerBorder" BorderBrush="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnNormalInnerBorderFillKey}}" BorderThickness="1" />
                        </Grid>
                        <Grid x:Name="glyphArrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Width="14" Margin="1,-1,-1,-1">
                            <Path x:Name="glyph" HorizontalAlignment="Center" Width="6" Height="4" SnapsToDevicePixels="True" Fill="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnGlyphNormalForegroundFillKey}}" Stretch="Fill" Data="M0,0 L8,0 L4,4 z"  />
                        </Grid>
                        <Rectangle x:Name="DisabledVisualElement" Grid.Column="1" Margin="1 -1 -1 -1" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=TextEditorBackgroundDisabled}}" IsHitTestVisible="false"  Opacity="0"  />
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="Tag" Value="MouseOverControlTrue">
                            <Setter Property="BorderBrush" TargetName="InnerBorder" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackInnerBorderFillKey}}"/>
                            <Setter Property="Background" TargetName="OuterBorder_Center" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackCenterFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="OuterBorder_Center" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackOuterBorderFillKey}}"/>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" TargetName="OuterBorder_Center" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnPressedOuterBorderFillKey}}"/>
                            <Setter Property="Background" TargetName="OuterBorder_Center" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnPressedCenterFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="InnerBorder" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnPressedInnerBorderFillKey}}"/>
                            <Setter Property="ClipToBounds"  Value="True"/>

                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" TargetName="InnerBorder" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackInnerBorderFillKey}}"/>
                            <Setter Property="Background" TargetName="OuterBorder_Center" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackCenterFillKey}}"/>
                            <Setter Property="BorderBrush" TargetName="OuterBorder_Center" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnHottrackOuterBorderFillKey}}"/>
                        </MultiTrigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <!--<Setter TargetName="glyph" Property="Opacity" Value="0.25"/>-->
                            <Setter TargetName="DisabledVisualElement" Property="Opacity" Value="0.6" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  EditableComboBoxTemplate  ********************************* -->
    <ControlTemplate x:Key="ComboEditor_EditableComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid Background="Transparent" SnapsToDevicePixels="True">
            <Grid IsSharedSizeScope="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                </Grid.ColumnDefinitions>

                <Grid Grid.Column="0" Margin="{TemplateBinding Padding}">
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBox Name="PART_EditableTextBox"
                                 Grid.Column="1"
                     Margin="-1,0,0,0"
                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                     IsReadOnly="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                     Background="Transparent"
                                 BorderBrush="Transparent"
                     BorderThickness="0,0,0,0"
                     Style="{StaticResource InputTextBoxStyle}"
                     SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                 MaxLength="{Binding Path=(igEditors:XamComboEditor.ComboEditor).ValueConstraint.MaxLength, RelativeSource={RelativeSource TemplatedParent}}"
                                 InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                 InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                                 InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}"
						        />
                    <igWindows:GrowOnlyDecorator x:Name="imageDecorator">
                        <igWindows:CardPanel x:Name="imagePanel" Visibility="Collapsed" VerticalAlignment="Center" Margin="1,0,-1,0" >
                            <TextBlock x:Name="textBlock" Visibility="Hidden" VerticalAlignment="Center" />
                            <Image
                                    x:Name="image" Stretch="Uniform" StretchDirection="Both" VerticalAlignment="Center"
                                    Height="{Binding ElementName=textBlock, Path=ActualHeight, Mode=OneWay}"
                                />
                        </igWindows:CardPanel>
                    </igWindows:GrowOnlyDecorator>
                </Grid>
                <ToggleButton
              x:Name="PART_DropDownButton"
              Grid.Column="1"
              Focusable="False"
              Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
              Background="{x:Null}"
              Style="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownButtonStyle, RelativeSource={RelativeSource TemplatedParent}}"
              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}"
							/>
                <Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=TextEditorBackgroundDisabled}}" IsHitTestVisible="false" Opacity="0" Grid.ColumnSpan="2" />
            </Grid>
            <Popup x:Name="PART_Popup"
             AllowsTransparency="True"
             Placement="Bottom"
             VerticalOffset="1"
             HorizontalOffset="-1"
             IsOpen="{TemplateBinding IsDropDownOpen}"
             
             Focusable="False"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
             MaxHeight="{TemplateBinding MaxDropDownHeight}"
             MinWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MinDropDownWidthResolved, RelativeSource={RelativeSource TemplatedParent}}"
             MaxWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}}"
						 >
                <Border  Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=PopupBackgroundBrush}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=PopupBorderBrush}}" BorderThickness="1">
                    <igWindows:PopupResizerDecorator ResizeMode="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownResizeMode, RelativeSource={RelativeSource TemplatedParent}}" >
                        <DockPanel>
                            <ContentPresenter DockPanel.Dock="Top" ContentTemplate="{Binding Path=PreDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igEditors:XamComboEditor}}}"/>
                            <ContentPresenter DockPanel.Dock="Bottom" ContentTemplate="{Binding Path=PostDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igEditors:XamComboEditor}}}"/>
                            <ScrollViewer x:Name="ScrollViewer">
                                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </ScrollViewer>
                        </DockPanel>
                    </igWindows:PopupResizerDecorator>
                </Border>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="PART_Popup" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True" Binding="{Binding Path=SelectedItem, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource typeCheckConverter}, ConverterParameter={x:Type igEditors:ComboBoxDataItem}, Mode=OneWay}" />
                    <Condition Value="False" Binding="{Binding Path=DisplayMemberPath, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource nullToFalseConverter}, Mode=OneWay}" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="image" Property="Source" Value="{Binding Path=SelectedItem.Image, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=OneWay}" />
                <Setter TargetName="imagePanel" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <DataTrigger Value="False" Binding="{Binding Path=(igEditors:XamComboEditor.ComboEditor).IsInEditMode, RelativeSource={RelativeSource TemplatedParent}}">
                <Setter TargetName="imageDecorator" Property="ResetSize" Value="True" />
            </DataTrigger>
            <DataTrigger Value="True" Binding="{Binding Path=ContextMenu, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource nullToFalseConverter}}">
                <Setter TargetName="PART_EditableTextBox" Property="ContextMenu" Value="{Binding Path=ContextMenu, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- *********************************  NonEditableComboBoxTemplate  ********************************* -->
    <ControlTemplate x:Key="ComboEditor_NonEditableComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid Background="Transparent" SnapsToDevicePixels="True">
            <Grid IsSharedSizeScope="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                </Grid.ColumnDefinitions>
                <Border Name="SelectedItemBorder" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}" >
                    <ContentPresenter  Content="{TemplateBinding SelectionBoxItem}"
                                       ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                       ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                       Margin="1,0"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                             />
                </Border>
                <ToggleButton x:Name="PART_DropDownButton"
                              Grid.ColumnSpan="3"
                              Style="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownButtonStyle, RelativeSource={RelativeSource TemplatedParent}}"
                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}"	/>
            </Grid>
            <Popup x:Name="PART_Popup"
             AllowsTransparency="True"
             Placement="Bottom"
             IsOpen="{TemplateBinding IsDropDownOpen}"
             VerticalOffset="1"
             HorizontalOffset="-1"
             Focusable="False"
             PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
             MaxHeight="{TemplateBinding MaxDropDownHeight}"
             MinWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MinDropDownWidthResolved, RelativeSource={RelativeSource TemplatedParent}}"
             MaxWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}}"
						 >
                <Border  Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=PopupBackgroundBrush}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=PopupBorderBrush}}" BorderThickness="1">
                    <igWindows:PopupResizerDecorator ResizeMode="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownResizeMode, RelativeSource={RelativeSource TemplatedParent}}" >
                        <DockPanel>
                            <ContentPresenter DockPanel.Dock="Top" ContentTemplate="{Binding Path=PreDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igEditors:XamComboEditor}}}"/>
                            <ContentPresenter DockPanel.Dock="Bottom" ContentTemplate="{Binding Path=PostDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igEditors:XamComboEditor}}}"/>
                            <ScrollViewer x:Name="ScrollViewer">
                                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </ScrollViewer>
                        </DockPanel>
                    </igWindows:PopupResizerDecorator>
                </Border>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger Property="IsSelectionBoxHighlighted" Value="True">
                <Setter TargetName="SelectedItemBorder" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnPressedOuterBorderFillKey}}" Property="BorderBrush"/>
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="PART_Popup" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="IsTextSearchEnabled" Value="False" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- *********************************  ComboBoxItemStyle  ********************************* -->
    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="4,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" CornerRadius="2" Margin="1 0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=ComboBoxItemHoverBackgroundBrush}}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=ComboBoxItemHoverBorderBrush}}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=ComboBoxItemSelectedBackgroundBrush}}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=ComboBoxItemSelectedBorderBrush}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarOtherDayForegroundKey}}"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=ComboBoxItemSelectedBorderBrush}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- JJD 03/10/16 - Create a based on style that is keyed by a ComponentResourceKey so we can reference it in the DataPresenter assembly -->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=ComboBoxItemStyle}"
           TargetType="{x:Type ComboBoxItem}"
           BasedOn="{StaticResource ComboBoxItemStyle}" />

    <!-- *********************************  ComboEditorComboBox StyleKey  ********************************* -->
    <Style x:Key="{x:Static igEditors:XamComboEditor.ComboEditorComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Template" Value="{StaticResource ComboEditor_EditableComboBoxTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{StaticResource ComboEditor_NonEditableComboBoxTemplate}" />
        <Setter Property="IsSynchronizedWithCurrentItem" Value="False" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <igEditors:VirtualizingStackPanelEx/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style />
            </Setter.Value>
        </Setter>
        <!--BF 11/13/18 TFS247354 - Moved here from the XamComboEditor style section-->
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}" />
    </Style>

    <!-- *********************************  XamComboEditor Style  ********************************* -->
    <Style TargetType="{x:Type igEditors:XamComboEditor}">
        <Style.Resources>
            <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}"/>
            <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarStyle}"/>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="{StaticResource Color_037}" />
        </Style.Resources>
        <!-- SSP 11/20/13 TFS157125 - Added ComboBoxStyle setter -->
        <Setter Property="ComboBoxStyle" Value="{DynamicResource {x:Static igEditors:XamComboEditor.ComboEditorComboBoxStyleKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}" />
        <!-- JJD 09/12/14 TFS179326 Set the foreground in a trigger when IsEmbedded is false  -->
        <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}"/>-->
        <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalCenterFillKey}}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="1,2,1,2"/>
        <Setter Property="Margin" Value="0" />
        <Setter Property="DropDownButtonStyle" Value="{StaticResource ComboEditor_DropDownButtonStyle}" />
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamComboEditor}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Border Grid.Column="0" Margin="1,0,0,0" Padding="{TemplateBinding Padding}">
                                <ContentPresenter x:Name="PART_Content"
                                                  Content="{Binding Path=DisplayValue, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource nullToParameterConverter}, ConverterParameter={x:Static sys:String.Empty}, Mode=OneWay}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								/>
                            </Border>
                            <ToggleButton x:Name="PART_DropDownButton"
                                          Grid.Column="1"
                                          Focusable="False"
                                          Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                          IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                          ClickMode="Press"
                                          Style="{TemplateBinding DropDownButtonStyle}"
                                          Visibility="{TemplateBinding DropDownButtonVisibility}"
                                          IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}"
								/>
                            <Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=TextEditorBackgroundDisabled}}" IsHitTestVisible="false" Margin="-1" Opacity="0" Grid.ColumnSpan="2" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="DisplayValueSource" Value="Value">
                            <Setter TargetName="PART_Content" Property="ContentTemplate" Value="{DynamicResource {x:Static igEditors:XamComboEditor.DisplayValueTemplateKey}}" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter Property="DropDownButtonDisplayMode" Value="Always"/>
                            <Setter Property="Padding" Value="2,2,2,2" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_DropDownButton" Property="Tag" Value="MouseOverControlTrue" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="DisabledVisualElement" Property="Opacity" Value="0.6" />
                            <Setter TargetName="PART_Content" Property="Opacity" Value="0.6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="EditTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamComboEditor}">
                    <Border
                      x:Name="MainBorder"
                      Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
 						>
                        <!-- BF 11/13/18  TFS247354 - I removed this line from the ComboBox definition and moved it to the ComboEditorComboBox StyleKey section. -->
                        <!--ItemContainerStyle="{StaticResource ComboBoxItemStyle}"-->
                        <ComboBox Name="PART_FocusSite"
                                  Padding="{TemplateBinding Padding}"
                                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                  IsReadOnly="{TemplateBinding ReadOnly}"
                                  Background="Transparent"
                                  BorderBrush="Transparent"
                                  BorderThickness="0,0,0,0"
                                  ContextMenu="{TemplateBinding ContextMenu}"
                                  IsDropDownOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                  Style="{TemplateBinding ComboBoxStyle}"
                                  IsEditable="{TemplateBinding IsEditable}"
                                  SelectedValuePath="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsProvider.ValuePath}"
                                  DisplayMemberPath="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemsProvider.DisplayMemberPath}"
                                  MaxDropDownHeight="{TemplateBinding MaxDropDownHeight}"
                                  igEditors:XamComboEditor.ComboEditor="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                  InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                                  InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}"
                      />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True"/>
                    <Condition Property="IsInEditMode" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}"/>
                <Setter Property="BorderBrush" Value="{x:Null}"/>
            </MultiTrigger>
            <Trigger Property="IsEmbedded" Value="False">
                <!--JJD 09/12/14 TFS179326 Set the foreground in a trigger when IsEmbedded is false-->
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}"/>
                <Setter Property="Padding" Value="2,2,2,2" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocusWithin" Value="True" />
                    <Condition Property="IsEmbedded" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnPressedOuterBorderFillKey}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocusWithin" Value="True" />
                    <Condition Property="IsEmbedded" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{x:Null}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsEmbedded" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsHottrackBorderFillKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- *********************************  XamMaskedEditor Style ********************************* -->
    <Style TargetType="{x:Type igEditors:XamMaskedEditor}" x:Key="XamMaskedEditorBaseStyle">
        <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalCenterFillKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="SpinButtonStyle" Value="{StaticResource spinButtonStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamMaskedEditor}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                  >
                        <DockPanel>
                            <Grid x:Name="PART_SpinButtons" Width="18" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}" Margin="0,-1,-1,-1">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <RepeatButton Style="{TemplateBinding SpinButtonStyle}" Focusable="false" IsHitTestVisible="false" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.IncreaseGlyphKey}}"/>
                                <RepeatButton Style="{TemplateBinding SpinButtonStyle}" Focusable="false" IsHitTestVisible="false" Grid.Row="1" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DecreaseGlyphKey}}" Margin="0,-1,0,0"/>
                            </Grid>
                            <igWindows:SimpleTextBlock x:Name="TextBlock"
                                                       Margin="{TemplateBinding Padding}"
                                                       Text="{TemplateBinding DisplayText}"
                                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                         />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter Property="Padding" Value="4,2,4,2" />
                            <Setter Property="igWindows:SimpleTextBlock.OptimizeWidthMeasurement" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="EditTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamMaskedEditor}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <DockPanel>
                            <Grid x:Name="PART_SpinButtons" Width="18" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}" Margin="0,-1,-1,-1">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <RepeatButton x:Name="spinUp" Style="{TemplateBinding SpinButtonStyle}" Focusable="false" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.IncreaseGlyphKey}}"/>
                                <RepeatButton x:Name="spinDown" Style="{TemplateBinding SpinButtonStyle}" Focusable="false" Grid.Row="1" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DecreaseGlyphKey}}" Margin="0,-1,0,0"/>
                            </Grid>
                            <igWindows:CardPanel x:Name="PART_FocusSite">
                                <igEditors:SectionsList x:Name="SectionsList"
                                                        Margin="{TemplateBinding Padding}"
                                                        Foreground="{TemplateBinding Foreground}"
                                                        ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Sections, Mode=OneWay}"
                                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                        FlowDirection="LeftToRight"
                                                        InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                                        InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                                                        InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}"
													/>
                                <TextBox x:Name="PART_InputTextBox"
                                         Visibility="Collapsed"
                                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                         VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                         TextAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource horizToTextAlignmentConverter}}"
                                         Background="Transparent"
                                         BorderBrush="Transparent"
                                         BorderThickness="0,0,0,0" Margin="{TemplateBinding Padding}"
                                         Foreground="{TemplateBinding Foreground}"
                                         InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                         InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}"
													/>
                            </igWindows:CardPanel>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SpinButtonVisibilityResolved" Value="Visible">
                            <Setter TargetName="spinUp" Property="Command" Value="{x:Static igEditors:MaskedEditorCommands.SpinUp}" />
                            <Setter TargetName="spinDown" Property="Command" Value="{x:Static igEditors:MaskedEditorCommands.SpinDown}" />
                        </Trigger>

                        <Trigger Property="IsEmbedded" Value="False"/>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                        <Trigger Property="IsTextBoxEntryEnabled" Value="True">
                            <Setter TargetName="SectionsList" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_InputTextBox" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEmbedded" Value="True">
                <Setter Property="BorderThickness" Value="0"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True"/>
                    <Condition Property="IsInEditMode" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Padding" Value="0,0,2,0"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True"/>
                    <Condition Property="IsInEditMode" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}"/>
                <Setter Property="BorderBrush" Value="{x:Null}"/>
            </MultiTrigger>
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
                <Setter Property="Padding" Value="4,2"/>
            </Trigger>
            <Trigger Property="IsInEditMode" Value="True">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DropdownBtnPressedOuterBorderFillKey}}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsEmbedded" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsHottrackBorderFillKey}}"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBackgroundBrush}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBorderBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledForeground}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type igEditors:XamMaskedEditor}" BasedOn="{StaticResource XamMaskedEditorBaseStyle}"/>

    <!--  ********************************* Text SelectionBrush Style for Editors *********************************  -->
    <Style TargetType="{x:Type igEditors:DisplayCharacterPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:DisplayCharacterPresenter}">
                    <Grid>
                        <TextBlock x:Name="TextBlock" Margin="0,0,0,0" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DisplayCharacter.DrawString, Mode=OneWay}"
                                   Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DisplayCharacter.Visibility, Mode=OneWay}" />
                        <Rectangle x:Name="SelectionRect" Margin="0,0,0,0" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=TextEditorSelectionBrush}}" Opacity="0.5"
                                   Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DrawAsSelected, Mode=OneWay, Converter={StaticResource BoolToHidden} }"
                                   IsHitTestVisible="False" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  XamNumericEditor Style ********************************* -->
    <Style TargetType="{x:Type igEditors:XamNumericEditor}" BasedOn="{StaticResource {x:Type igEditors:XamMaskedEditor}}" >
    </Style>

    <!-- *********************************  XamCurrencyEditor Style ********************************* -->
    <Style TargetType="{x:Type igEditors:XamCurrencyEditor}" BasedOn="{StaticResource {x:Type igEditors:XamMaskedEditor}}" >
    </Style>

    <!-- *********************************  XamDateTimeEditor Style ********************************* -->
    <ControlTemplate x:Key="MaskedEditorWithDropDownRenderTemplate" TargetType="{x:Type igEditors:XamDateTimeEditor}">
        <Border x:Name="MainBorder"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
            >
            <DockPanel>
                <ToggleButton x:Name="PART_DropDownButton"
                              Width="18"
                              IsChecked="{Binding RelativeSource={x:Static RelativeSource.TemplatedParent}, Path=IsDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                              ClickMode="Press"
                              Style="{TemplateBinding DropDownButtonStyle}"
                              Visibility="{TemplateBinding DropDownButtonVisibility}"
                              DockPanel.Dock="Right"
                              IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}"
                              Focusable="False"
                              Margin="-4 0 0 0"/>
                <Grid x:Name="PART_SpinButtons" Width="18" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}"  Margin="0,-1,-1,-1">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <RepeatButton Style="{TemplateBinding SpinButtonStyle}" Focusable="false" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.IncreaseGlyphKey}}"/>
                    <RepeatButton Style="{TemplateBinding SpinButtonStyle}" Focusable="false" Grid.Row="1" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DecreaseGlyphKey}}" Margin="0,-1,0,0"/>
                </Grid>
                <igWindows:SimpleTextBlock x:Name="TextBlock"
                                           Margin="{TemplateBinding Padding}"
                                           Text="{TemplateBinding DisplayText}"
                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="Padding" Value="4,2,4,2" />
                <Setter Property="igWindows:SimpleTextBlock.OptimizeWidthMeasurement" Value="False" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=TextEditorBackgroundDisabled}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
                <Setter TargetName="PART_SpinButtons" Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="MaskedEditorWithDropDownEditTemplate" TargetType="{x:Type igEditors:XamDateTimeEditor}">
        <Border x:Name="MainBorder"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <DockPanel>
                <ToggleButton x:Name="PART_DropDownButton"
                              Width="18"
                              ClickMode="Press"
                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                              Style="{TemplateBinding DropDownButtonStyle}"
                              Visibility="{TemplateBinding DropDownButtonVisibility}"
                              DockPanel.Dock="Right"
                              IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource complementConverter}}"
                              Focusable="False"
                              Margin="-4 0 0 0"/>
                <Popup x:Name="PART_Popup"
                       AllowsTransparency="True"
                       StaysOpen="False"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                       IsOpen="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                       igWindows:PopupHelper.DropDownButton="{Binding ElementName=PART_DropDownButton}">
                    <Border Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                            Padding="1">
                        <igEditors:XamMonthCalendar x:Name="PART_Calendar"
                                                      EraDisplayMode="{TemplateBinding EraDisplayMode}"
                                                    MinDate="{TemplateBinding ComputedMinDate}"
                                                    MaxDate="{TemplateBinding ComputedMaxDate}"
                                                    MinCalendarMode="{TemplateBinding ComputedMinCalendarMode}"
                                                    ScrollDirection="{TemplateBinding ScrollDirection}"
                                                    SelectedDate="{Binding Path=DateValue, Mode=TwoWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                                    ActiveDate="{Binding Path=DateValue, Mode=OneWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                                    SelectionType="Single" />
                    </Border>
                </Popup>
                <Grid x:Name="PART_SpinButtons" Width="18" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}"  Margin="0,-1,-1,-1" >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <RepeatButton Style="{TemplateBinding SpinButtonStyle}" Focusable="false" Command="{x:Static igEditors:MaskedEditorCommands.SpinUp}" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.IncreaseGlyphKey}}"/>
                    <RepeatButton Style="{TemplateBinding SpinButtonStyle}" Focusable="false" Command="{x:Static igEditors:MaskedEditorCommands.SpinDown}" Grid.Row="1" ContentTemplate="{DynamicResource {x:Static igEditors:EditorsBrushKeys.DecreaseGlyphKey}}" Margin="0,-1,0,0"/>
                </Grid>
                <igWindows:CardPanel x:Name="PART_FocusSite">
                    <igEditors:SectionsList x:Name="SectionsList"
                                            Margin="{TemplateBinding Padding}"
                                            Foreground="{TemplateBinding Foreground}"
                                            ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Sections, Mode=OneWay}"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            FlowDirection="LeftToRight"
                                            InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                            InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                                            InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}"
                                  />
                    <TextBox  x:Name="PART_InputTextBox"
                              Visibility="Collapsed"
                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                              TextAlignment="{Binding Path=HorizontalContentAlignment, RelativeSource={x:Static RelativeSource.TemplatedParent}, Converter={StaticResource horizToTextAlignmentConverter}}"
                              Background="Transparent"
                              BorderBrush="Transparent"
                              BorderThickness="0,0,0,0"
                              Foreground="{TemplateBinding Foreground}"
                              InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                              InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}"
								/>
                </igWindows:CardPanel>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEmbedded" Value="False"/>
            <Trigger Property="IsInEditMode" Value="True">
                <Setter Property="IsTabStop" Value="False" />
            </Trigger>
            <Trigger Property="IsTextBoxEntryEnabled" Value="True">
                <Setter TargetName="SectionsList" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_InputTextBox" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="XamDateTimeEditorBaseStyle" TargetType="{x:Type igEditors:XamDateTimeEditor}" BasedOn="{StaticResource XamMaskedEditorBaseStyle}" >
        <Setter Property="DropDownButtonStyle" Value="{StaticResource ComboEditor_DropDownButtonStyle}" />
        <Setter Property="Template" Value="{StaticResource MaskedEditorWithDropDownRenderTemplate}" />
        <Setter Property="EditTemplate" Value="{StaticResource MaskedEditorWithDropDownEditTemplate}" />
    </Style>
    <Style TargetType="{x:Type igEditors:XamDateTimeEditor}" BasedOn="{StaticResource XamDateTimeEditorBaseStyle}" />

</ResourceDictionary>