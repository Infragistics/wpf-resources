<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:igEditors="http://infragistics.com/Editors"
                    xmlns:igwindows="http://infragistics.com/Windows"
                    xmlns:luna="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Luna">

    <!--  *********************************  RESOURCES  *********************************  -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="EditorsGeneric_Express.xaml" />
        <ResourceDictionary Source="EditorsRoyalDark_Brushes.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--
        ******************************************************** WPF SPECIFIC CONTROLS RESOURCES ***********************************************************
        ***********************************************************************************************************************************************************************
    -->

    <!--  *********************************  XamTextEditor Style  *********************************  -->
    <Style TargetType="{x:Type igEditors:XamTextEditor}">
        <Setter Property="Padding" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorPaddingKey}}" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultMinHeight}" />
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsBackgroundBrush}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <!--  AS 10/11/19 Commented FontSize so the user can set a font size it's reflected on cells for grids  -->
        <!--<Setter Property="FontSize" Value="{StaticResource FontSize}" />-->
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamTextEditor}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorCornerRadiusKey}}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            Padding="8 0 6 2">
                        <igwindows:SimpleTextBlock x:Name="TextBlock"
                                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                   Foreground="{TemplateBinding Foreground}"
                                                   Text="{TemplateBinding DisplayText}"
                                                   TextAlignment="{TemplateBinding TextAlignmentResolved}"
                                                   TextWrapping="{TemplateBinding TextWrapping}"
                                                   />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter Property="igwindows:SimpleTextBlock.OptimizeWidthMeasurement" Value="False" />
                        </Trigger>
                     <!--<Trigger Property="IsReadOnly" Value="True">
                      <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsReadOnlyBackgroundBrush}}" />
                     </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="EditTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamTextEditor}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorCornerRadiusKey}}"
                            Padding="0 0 6 2">
                        <!--
                        BF 6/7/17   TFS232899
                        Added MinHeight=0 here to prevent the height of the XamTextEditor
                        from changing when it enters edit mode.
                        -->
                        <TextBox Name="PART_FocusSite"
                                 MinHeight="0"
                                 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                 AcceptsReturn="{TemplateBinding AcceptsReturn}"
                                 AcceptsTab="{TemplateBinding AcceptsTab}"
                                 Background="Transparent"
                                 BorderBrush="Transparent"
                                 BorderThickness="0"
                                 CaretBrush="{StaticResource CaretBrushForeground}"
                                 ContextMenu="{TemplateBinding ContextMenu}"
                                 FontSize="{TemplateBinding FontSize}"
                                 Foreground="{TemplateBinding Foreground}"
                                 HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
                                 InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                                 InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                 IsReadOnly="{TemplateBinding ReadOnly}"
                                 Margin="0"
                                 MaxLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ValueConstraint.MaxLength, Mode=OneWay}"                                 
                                 SpellCheck.IsEnabled="{TemplateBinding SpellCheck.IsEnabled}"
                                 SpellCheck.SpellingReform="{TemplateBinding SpellCheck.SpellingReform}"                                 
                                 TextAlignment="{TemplateBinding TextAlignmentResolved}"
                                 TextWrapping="{TemplateBinding TextWrapping}"
                                 VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
                                 SelectionBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsFocusBorderBrush}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEmbedded" Value="True">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsBackgroundBrush}}" />
                  <Setter Property="BorderBrush" Value="Transparent" />
                <!--<Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}" />-->
                <Setter Property="BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsEmbedded" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsHottrackBorderFillKey}}" />
                <!--<Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsHoverBackgroundBrush}}" />-->
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocusWithin" Value="True" />
                    <Condition Property="IsEmbedded" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsFocusBorderBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
               <Setter  Property="Opacity" Value="0.3"/>
                <!--<Setter Property="BorderBrush" Value="{StaticResource EditorsDisabledBorderBrush}" />
                <Setter Property="Background" Value="{StaticResource EditorsDisabledBackgroundBrush}" />
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />-->
            </Trigger>
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="FontSize" Value="{StaticResource FontSize}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  *********************************  ValueEditorCheckBox Style  *********************************  -->
    <Style x:Key="ValueEditorCheckBoxStyle" TargetType="{x:Type igEditors:ValueEditorCheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxBackgroundBrush}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxBorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderThicknessKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:ValueEditorCheckBox}">
                    <Grid x:Name="CheckBox">
                        <Rectangle x:Name="normal"
                                   Width="15"
                                   Height="15"
                                   Fill="{TemplateBinding Background}"
                                   Opacity="1"
                                   Stroke="{TemplateBinding BorderBrush}"
                                   StrokeThickness="{TemplateBinding BorderThickness}" />
                        <Rectangle x:Name="IndeterminateCheck"
                                   Width="7"
                                   Height="7"
                                   Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxIndeterminateCheckBackgroundBrush}}"
                                   Opacity="0" />
                        <Path x:Name="checkBox"
                              Width="9"
                              Height="8"
                              Data="M 1.3394 3.4286 L 0 4.8932 L 3.75 8 L 9 1.165 L 7.5938 0 L 3.6831 5.3703 L 1.3394 3.4286 Z"
                              Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxCheckBackgroundBrush}}"
                              Stretch="Fill"
                              Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="checkBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="normal" Property="Stroke" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxCheckedBorderBrush}}" />
                            <Setter TargetName="normal" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxCheckedBackgroundBrush}}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="IndeterminateCheck" Property="Opacity" Value="1" />
                            <Setter TargetName="normal" Property="Stroke" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxCheckedBorderBrush}}" />
                            <Setter TargetName="normal" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxCheckedBackgroundBrush}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="normal" Property="Stroke" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxCheckedBorderBrush}}" />
                            <Setter TargetName="normal" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxCheckedBackgroundBrush}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="normal" Property="Stroke" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxHoverBorderBrush}}" />
                            <Setter TargetName="normal" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxHoverBackgroundBrush}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="CheckBox" Property="Opacity" Value="0.3" />
                            <!--<Setter TargetName="normal" Property="Stroke" Value="{StaticResource CheckBoxDisabledBorderBrush}" />
                            <Setter TargetName="normal" Property="Fill" Value="{StaticResource CheckBoxDisabledBackgroundBrush}" />
                            <Setter TargetName="normal" Property="Opacity" Value="1" />-->
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="normal" Property="Stroke" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxFocusedBorderBrush}}" />
                        </Trigger>
                        <MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsChecked" Value="True"/>
								<Condition Property="IsMouseOver" Value="True"/>
							</MultiTrigger.Conditions>
					        <Setter TargetName="normal" Property="Stroke" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxCheckedBorderBrush}}" />
                            <Setter TargetName="normal" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:ValueEditorCheckBox}, ResourceId=CheckBoxCheckedBackgroundBrush}}" />
						</MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  *********************************  XamCheckEditor Style  *********************************  -->
    <Style TargetType="{x:Type igEditors:XamCheckEditor}">
        <Setter Property="Padding" Value="5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamCheckEditor}">
                    <Border x:Name="MainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <igEditors:ValueEditorCheckBox x:Name="PART_FocusSite"
                                                       Margin="{TemplateBinding Padding}"
                                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                       IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                       IsThreeState="{TemplateBinding IsThreeState}"
                                                       Style="{DynamicResource ValueEditorCheckBoxStyle}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEmbedded" Value="False" />
                        <Trigger Property="ReadOnly" Value="True">
                            <Setter TargetName="PART_FocusSite" Property="IsEnabled" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>
