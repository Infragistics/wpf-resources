<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:igEditors="http://infragistics.com/Editors"
                    xmlns:igPrim="http://schemas.infragistics.com/xaml/primitives"
                    xmlns:igWindows="http://infragistics.com/Windows"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    mc:Ignorable="d">

    
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="EditorsGeneric.xaml" />
        <ResourceDictionary Source="EditorsRoyalDark_Brushes.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--  ********************************* Validation Template*********************************  -->

    <ControlTemplate x:Key="ValidationErrorTemplate">
        <AdornedElementPlaceholder >
            <Border BorderThickness="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderThicknessKey}}"
                    BorderBrush="{StaticResource ValidationErrorElement}"
                    CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorCornerRadiusKey}}"
                    igPrim:XamlHelper.SnapsToDevicePixels="True" />
        </AdornedElementPlaceholder>
    </ControlTemplate>

    <!--
        ******************************************************** WPF SPECIFIC INLINE-CONTROLS RESOURCES ***********************************************************
        ********************************************************************************************************************************************************************
    -->

    <!--  *********************************  ScrollBarButton Style  *********************************  -->
    <Style x:Key="ScrollBarButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="MinHeight" Value="18" />
        <Setter Property="MinWidth" Value="18" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid x:Name="grid1">
                        <Rectangle Fill="{StaticResource TransparentBrush}" />
                        <Path x:Name="Arrow"
                              Width="8"
                              Height="5"
                              Margin="{TemplateBinding Padding}"
                              Data="{StaticResource ScrollbarArrow}"
                              Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=ScrollbarPageButtonArrowBackgroundBrush}}"
                              Stretch="Fill" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=ScrollbarPageButtonArrowHoverBackgroundBrush}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=ScrollbarPageButtonArrowPressedBackgroundBrush}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Arrow" Property="Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  *********************************  ScrollBarPageButton Style  *********************************  -->
    <Style x:Key="ScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Background}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Pressed" />
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Rectangle>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  *********************************  Horizontal ScrollBarThumb Style  *********************************  -->
    <Style x:Key="HScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="MinHeight" Value="18" />
        <Setter Property="MinWidth" Value="10" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Margin="0">
                        <Rectangle Fill="{StaticResource TransparentBrush}" />
                        <Rectangle x:Name="Thumb" Height="6" Margin="1" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=HScrollbarThumbBackgroundBrush}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Thumb" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=HScrollbarThumbHoverBackgroundBrush}}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="Thumb" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=HScrollbarThumbPressedBackgroundBrush}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Thumb" Property="Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  *********************************  Vertical ScrollbarThumb Style  *********************************  -->
    <Style x:Key="VScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="MinWidth" Value="18" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="grid" Width="Auto" Height="Auto">
                        <Rectangle Fill="{StaticResource TransparentBrush}" />
                        <Rectangle x:Name="Thumb" Width="6" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=VScrollbarThumbBackgroundBrush}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Thumb" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=VScrollbarThumbHoverBackgroundBrush}}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="Thumb" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=VScrollbarThumbPressedBackgroundBrush}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Thumb" Property="Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  *********************************  ScrollBar Style  *********************************  -->
    <Style x:Key="ScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="MinWidth" Value="18" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="16" />
                            <RowDefinition Height="0.00001*" />
                            <RowDefinition Height="16" />
                        </Grid.RowDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Bg" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle Grid.RowSpan="3" Margin="0" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=ScrollbarBackgroundBrush}}" />
                        <RepeatButton x:Name="repeatButton"
                                      HorizontalAlignment="Center"
                                      Command="{x:Static ScrollBar.LineUpCommand}"
                                      IsEnabled="True"
                                      Style="{StaticResource ScrollBarButtonStyle}" />
                        <Track x:Name="PART_Track" Grid.Row="1" IsDirectionReversed="true" IsEnabled="True">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource ScrollBarPageButtonStyle}" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource ScrollBarPageButtonStyle}" />
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb x:Name="thumb" Width="30" HorizontalAlignment="Center" Style="{StaticResource VScrollBarThumbStyle}" />
                            </Track.Thumb>
                        </Track>
                        <RepeatButton x:Name="repeatButton1"
                                      Grid.Row="2"
                                      HorizontalAlignment="Center"
                                      Command="{x:Static ScrollBar.LineDownCommand}"
                                      IsEnabled="True"
                                      RenderTransformOrigin="0.5,0.5"
                                      Style="{StaticResource ScrollBarButtonStyle}">
                            <RepeatButton.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform Angle="180" />
                                    <TranslateTransform />
                                </TransformGroup>
                            </RepeatButton.RenderTransform>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Width" Value="18" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Height" Value="18" />
                <Setter Property="MinHeight" Value="18" />
                <Setter Property="MinWidth" Value="0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="16" />
                                    <ColumnDefinition Width="0.00001*" />
                                    <ColumnDefinition Width="16" />
                                </Grid.ColumnDefinitions>
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition GeneratedDuration="0:0:0.3" />
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Normal" />
                                        <VisualState x:Name="MouseOver">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="repeatButton" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="repeatButton1" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Disabled">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Bg" Storyboard.TargetProperty="(UIElement.Opacity)">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="0.3" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Rectangle Grid.ColumnSpan="5" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=ScrollbarBackgroundBrush}}" />
                                <RepeatButton x:Name="repeatButton"
                                              VerticalAlignment="Center"
                                              Command="{x:Static ScrollBar.LineLeftCommand}"
                                              IsEnabled="True"
                                              Opacity="1"
                                              RenderTransformOrigin="0.5,0.5"
                                              Style="{DynamicResource ScrollBarButtonStyle}">
                                    <RepeatButton.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform />
                                            <SkewTransform />
                                            <RotateTransform Angle="-90" />
                                            <TranslateTransform />
                                        </TransformGroup>
                                    </RepeatButton.RenderTransform>
                                </RepeatButton>
                                <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="True">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource ScrollBarPageButtonStyle}" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource ScrollBarPageButtonStyle}" />
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Height="30" VerticalAlignment="Center" Style="{StaticResource HScrollBarThumbStyle}" />
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton x:Name="repeatButton1"
                                              Grid.Column="2"
                                              VerticalAlignment="Center"
                                              Command="{x:Static ScrollBar.LineRightCommand}"
                                              IsEnabled="True"
                                              Opacity="1"
                                              RenderTransformOrigin="0.5,0.5"
                                              Style="{DynamicResource ScrollBarButtonStyle}">
                                    <RepeatButton.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform />
                                            <SkewTransform />
                                            <RotateTransform Angle="90" />
                                            <TranslateTransform />
                                        </TransformGroup>
                                    </RepeatButton.RenderTransform>
                                </RepeatButton>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Width" Value="Auto" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  *********************************  ScrollViewer Style *********************************  -->
    <Style x:Key="ScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="BorderThickness" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderThicknessKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                                Grid.Row="0"
                                                Grid.Column="0"
                                                Margin="{TemplateBinding Padding}"
                                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                                CanHorizontallyScroll="False"
                                                CanVerticallyScroll="False"
                                                Content="{TemplateBinding Content}"
                                                ContentTemplate="{TemplateBinding ContentTemplate}" />
                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                   Grid.Row="0"
                                   Grid.Column="1"
                                   AutomationProperties.AutomationId="VerticalScrollBar"
                                   Cursor="Arrow"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   Minimum="0"
                                   Style="{StaticResource ScrollBarStyle}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                                   Grid.Row="1"
                                   Grid.Column="0"
                                   AutomationProperties.AutomationId="HorizontalScrollBar"
                                   Cursor="Arrow"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   Minimum="0"
                                   Orientation="Horizontal"
                                   Style="{StaticResource ScrollBarStyle}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
    </Style>

    <!--  *********************************  BorderlessButton Style  *********************************  -->
    <Style x:Key="BorderlessButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground"  Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemGroupTitleForegroundKey}}" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource FontSize}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="3,0,3,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border>
                        <ContentPresenter x:Name="ContentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          TextElement.Foreground="{TemplateBinding Foreground}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverForegroundKey}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverForegroundKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentPresenter" Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  *********************************  RepeatButtonTemplate  *********************************  -->
    <ControlTemplate x:Key="RepeatButtonTemplate" TargetType="RepeatButton">
        <Grid igPrim:XamlHelper.SnapsToDevicePixels="True">
            <Rectangle x:Name="Bg" Width="22" Height="22" Fill="{StaticResource TransparentBrush}" />
            <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" TextElement.Foreground="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=GlyphBackgroundBrush}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=GlyphHoverBackgroundBrush}}" />
                <Setter TargetName="Bg" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=ButtonHoverBackgroundBrush}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=GlyphHoverBackgroundBrush}}" />
                <Setter TargetName="Bg" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=ButtonPressedBackgroundBrush}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="contentPresenter" Property="Opacity" Value="0.3" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  *********************************  SpinButton Style  *********************************  -->
    <Style x:Key="spinButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="IsTabStop" Value="False" />
        <!--<Setter Property="BorderThickness" Value="{StaticResource DefaultBorderThickness}" />-->
        <Setter Property="Padding" Value="3 0 3 2" />
        <Setter Property="Template" Value="{StaticResource RepeatButtonTemplate}" />
    </Style>

    <!--  ********************************* SimpleTextBox Style *********************************  -->
    <Style x:Key="SimpleTextBoxStyle" TargetType="{x:Type igWindows:SimpleTextBlock}" />

    
    <!--  *********************************  InputTextBox Style  *********************************  -->
    <Style x:Key="InputTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource TransparentBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CaretBrush" Value="{StaticResource CaretBrushForeground}"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsFocusBorderBrush}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  *********************************  ComboEditorDropDownButton Style  *********************************  -->
    <Style x:Key="ComboEditor_DropDownButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="MinWidth" Value="{StaticResource DefaultSize}" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultMinHeight}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Main" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="21" />
                        </Grid.ColumnDefinitions>
                        <Border  Grid.Column="1" x:Name="Bd" Width="21" Background="{StaticResource TransparentBrush}" CornerRadius="{StaticResource DropDownCornerRadius}" />
                        <Grid Grid.Column="1" HorizontalAlignment="Center">
                            <Path x:Name="Arrow"
                                  Width="7"
                                  Height="4"
                                  Margin="{TemplateBinding Padding}"
                                  Data="{StaticResource DownArrow}"
                                  Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=GlyphBackgroundBrush}}"
                                  Stretch="Fill" />
                            <Path x:Name="ArrowSelected"
                                  Width="7"
                                  Height="4"
                                  Margin="{TemplateBinding Padding}"
                                  Data="{StaticResource DownArrow}"
                                  Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=GlyphHoverBackgroundBrush}}"
                                  Stretch="Fill"
                                  Opacity="0" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Arrow" Property="Opacity" Value="0" />
                            <Setter TargetName="ArrowSelected"  Property="Opacity"  Value="1"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=GlyphPressedBackgroundBrush}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd"  Property="Background"  Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=ButtonHoverBackgroundBrush}}"/>
                            <Setter TargetName="ArrowSelected"  Property="Opacity"  Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************* SectionsList Style *********************************  -->
    <Style x:Key="SectionsListStyle" TargetType="{x:Type igEditors:SectionsList}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:SectionsList}">
                    <ScrollViewer Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden">
                        <StackPanel IsItemsHost="True" Orientation="Horizontal" />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************* XamMaskedEditor Style *********************************  -->
    <Style x:Key="XamMaskedEditorBaseStyle"  TargetType="{x:Type igEditors:XamMaskedEditor}">
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsBackgroundBrush}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderThicknessKey}}" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultMinHeight}" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <!--  SS 08/39/17 TFS241724 Set the foreground in a trigger when IsEmbedded is false  -->
        <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />-->
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorPaddingKey}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="SpinButtonStyle" Value="{StaticResource spinButtonStyle}" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationErrorTemplate}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamMaskedEditor}">
                    <Grid x:Name="rootGrid">
                        <!--<Border Background="{TemplateBinding Background}"
                            CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorCornerRadiusKey}}"/>-->
                        <Border x:Name="MainBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorCornerRadiusKey}}">
                            <DockPanel>
                                <Grid x:Name="PART_SpinButtons" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <RepeatButton Focusable="false"
                                                  Style="{StaticResource spinButtonStyle}"
                                                  Grid.Column="1"
                                                  VerticalAlignment="Center"
                                                  IsHitTestVisible="false">
                                        <Path Data="{StaticResource PlusIcon}"
                                                 Width="8"
                                                 Height="8"
                                                 Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType=ContentPresenter}}"
                                                 Stretch="Fill"/>
                                    </RepeatButton>
                                    <RepeatButton Grid.Column="0"
                                                  VerticalAlignment="Center"
                                                  Focusable="false"
                                                  Style="{StaticResource spinButtonStyle}"
                                                  UseLayoutRounding="true"
                                                  IsHitTestVisible="false">
                                        <Path Data="{StaticResource MinusIcon}"
                                                 Width="8"
                                                 Height="2"
                                                 Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType=ContentPresenter}}"
                                                 Stretch="Fill"/>
                                    </RepeatButton>
                                </Grid>
                                <igWindows:SimpleTextBlock x:Name="TextBlock"
                                                           Margin="{TemplateBinding Padding}"
                                                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                           FontFamily="{TemplateBinding FontFamily}"
                                                           FontSize="{TemplateBinding FontSize}"
                                                           Foreground="{TemplateBinding Foreground}"
                                                           Style="{StaticResource SimpleTextBoxStyle}"
                                                           Text="{TemplateBinding DisplayText}"/>
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter Property="igWindows:SimpleTextBlock.OptimizeWidthMeasurement" Value="False" />
                            <!--  SS 08/39/17 TFS241724 Set the foreground in a trigger when IsEmbedded is false  -->
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="EditTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamMaskedEditor}">
                    <Grid>
                        <Border x:Name="MainBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorCornerRadiusKey}}">
                            <DockPanel>
                                <Grid x:Name="PART_SpinButtons" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <RepeatButton x:Name="spinUp"
                                                  Focusable="false"
                                                  Style="{StaticResource spinButtonStyle}"
                                                  Grid.Column="1"
                                                  VerticalAlignment="Center" >
                                        <Path Data="{StaticResource PlusIcon}"
                                                 Width="8"
                                                 Height="8"
                                                 Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType=ContentPresenter}}"
                                                 Stretch="Fill"/>
                                    </RepeatButton>
                                    <RepeatButton x:Name="spinDown"
                                                  Grid.Column="0"
                                                  VerticalAlignment="Center"
                                                  Focusable="false"
                                                  Style="{StaticResource spinButtonStyle}"
                                                  UseLayoutRounding="true">
                                        <Path Data="{StaticResource MinusIcon}"
                                                 Width="8"
                                                 Height="2"
                                                 Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType=ContentPresenter}}"
                                                 Stretch="Fill"/>
                                    </RepeatButton>
                                </Grid>
                                <igWindows:CardPanel x:Name="PART_FocusSite">
                                    <igEditors:SectionsList x:Name="SectionsList"
                                                            Margin="{TemplateBinding Padding}"
                                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                            FlowDirection="LeftToRight"
                                                            FontFamily="{TemplateBinding FontFamily}"
                                                            FontSize="{TemplateBinding FontSize}"
                                                            Foreground="{TemplateBinding Foreground}"
                                                            InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                                                            InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                                            ItemsSource="{Binding Sections, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                            Style="{StaticResource SectionsListStyle}" />
                                    <TextBox x:Name="PART_InputTextBox"
                                             Margin="{TemplateBinding Padding}"
                                             VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                             HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                             VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                             FontFamily="{TemplateBinding FontFamily}"
                                             FontSize="{TemplateBinding FontSize}"
                                             Foreground="{TemplateBinding Foreground}"
                                             InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                             Style="{StaticResource InputTextBoxStyle}"
                                             TextAlignment="{Binding HorizontalContentAlignment, Converter={StaticResource horizToTextAlignmentConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                             Visibility="Collapsed" />
                                </igWindows:CardPanel>
                            </DockPanel>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SpinButtonVisibilityResolved" Value="Visible">
                            <Setter TargetName="spinDown" Property="Command" Value="{x:Static igEditors:MaskedEditorCommands.SpinDown}" />
                            <Setter TargetName="spinUp" Property="Command" Value="{x:Static igEditors:MaskedEditorCommands.SpinUp}" />
                        </Trigger>

                        <Trigger Property="IsEmbedded" Value="False" />
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                        <Trigger Property="IsTextBoxEntryEnabled" Value="True">
                            <Setter TargetName="PART_InputTextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="SectionsList" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsEmbedded" Value="True">
                <Setter Property="BorderThickness" Value="0" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
            </MultiTrigger>
            <Trigger Property="IsInEditMode" Value="True">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsEmbedded" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsHoverBackgroundBrush}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsHottrackBorderFillKey}}" />
            </MultiTrigger>
            <Trigger Property="IsFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsFocusBorderBrush}}" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsReadOnly" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="Opacity" Value="0.7"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="False" />
                    <Condition Property="IsReadOnly" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsReadOnlyBackgroundBrush}}" />
                <Setter Property="Opacity" Value="0.7"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsReadOnly" Value="True" />
                    <Condition Property="IsInEditMode" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"  Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsBackgroundBrush}}" />
                <Setter Property="Opacity" Value="1"/>
            </MultiTrigger>

            <!--<Trigger Property="IsReadOnly" Value="True">
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsReadOnlyBackgroundBrush}}" />
      </Trigger>-->
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="FontSize" Value="{StaticResource FontSize}" />
                <!--  SS 08/39/17 TFS241724 Set the foreground in a trigger when IsEmbedded is false  -->
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.3"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource XamMaskedEditorBaseStyle}" TargetType="{x:Type igEditors:XamMaskedEditor}" />

    <!--  ********************************* Text SelectionBrush Style for Editors *********************************  -->
    <Style TargetType="{x:Type igEditors:DisplayCharacterPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:DisplayCharacterPresenter}">
                    <Grid>
                        <TextBlock x:Name="TextBlock" Margin="0,0,0,0" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DisplayCharacter.DrawString, Mode=OneWay}"
                                Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DisplayCharacter.Visibility, Mode=OneWay}" />
                        <Rectangle x:Name="SelectionRect" Margin="0,0,0,0" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsFocusBorderBrush}}" Opacity="0.5"
                                Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DrawAsSelected, Mode=OneWay, Converter={StaticResource BoolToHidden} }"
                                IsHitTestVisible="False" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************* XamNumericEditor Style *********************************  -->
    <Style BasedOn="{StaticResource {x:Type igEditors:XamMaskedEditor}}" TargetType="{x:Type igEditors:XamNumericEditor}" />

    <!--  ********************************* XamCurrencyEditor Style *********************************  -->
    <Style BasedOn="{StaticResource {x:Type igEditors:XamMaskedEditor}}" TargetType="{x:Type igEditors:XamCurrencyEditor}" />

    <!--  *********************************  ComboBoxItem Style  *********************************  -->
    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultMinHeight}" />
        <Setter Property="Padding" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorPaddingKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=ComboBoxItemHoverBackgroundBrush}}" />
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=ComboBoxItemHoverBackgroundBrush}}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=ComboBoxItemPressedBackgroundBrush}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Bd" Property="Opacity" Value="0.2" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=ComboBoxItemPressedBackgroundBrush}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <!--  *********************************  ComboEditorEditableComboBox Template  *********************************  -->
    <ControlTemplate x:Key="ComboEditor_EditableComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="root" Background="Transparent" SnapsToDevicePixels="True">
            <Grid Grid.IsSharedSizeScope="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="21" SharedSizeGroup="ComboBoxButton" />
                </Grid.ColumnDefinitions>
                <Grid x:Name="content" Grid.Column="0" Margin="{TemplateBinding Padding}">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <TextBox x:Name="PART_EditableTextBox"
                             Grid.Column="1"
                             HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                             VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                             Background="Transparent"
                             BorderBrush="Transparent"
                             BorderThickness="0,0,0,1"
                             Foreground="{TemplateBinding Foreground}"
                             InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                             InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                             IsReadOnly="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                             MaxLength="{Binding Path=(igEditors:XamComboEditor.ComboEditor).ValueConstraint.MaxLength, RelativeSource={RelativeSource TemplatedParent}}"
                             Padding="0,0,0,0"
                             SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                             Style="{StaticResource InputTextBoxStyle}" />
                    <igWindows:GrowOnlyDecorator x:Name="imageDecorator">
                        <igWindows:CardPanel x:Name="imagePanel" Margin="1,0,-1,0" VerticalAlignment="Center" Visibility="Collapsed">
                            <TextBlock x:Name="textBlock" VerticalAlignment="Center" Visibility="Hidden" />
                            <Image x:Name="image"
                                   Height="{Binding ActualHeight, ElementName=textBlock, Mode=OneWay}"
                                   VerticalAlignment="Center"
                                   Stretch="Uniform"
                                   StretchDirection="Both" />
                        </igWindows:CardPanel>
                    </igWindows:GrowOnlyDecorator>
                </Grid>
                <ToggleButton x:Name="PART_DropDownButton"
                              Width="21"
                              Grid.Column="1"
                              Background="{x:Null}"
                              Focusable="False"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              IsEnabled="{Binding IsReadOnly, Converter={StaticResource complementConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                              Style="{DynamicResource ComboEditor_DropDownButtonStyle}" />
            </Grid>
            <Popup x:Name="PART_Popup"
                   MinWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MinDropDownWidthResolved, RelativeSource={RelativeSource TemplatedParent}}"
                   MaxWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}}"
                   MaxHeight="{TemplateBinding MaxDropDownHeight}"
                   AllowsTransparency="True"
                   Focusable="False"
                   HorizontalOffset="-1"
                   IsOpen="{TemplateBinding IsDropDownOpen}"
                   Placement="Bottom"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   VerticalOffset="1">
                <Border Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=PopupBackgroundBrush}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=PopupBorderBrush}}" BorderThickness="1">
                    <igWindows:PopupResizerDecorator ResizeMode="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownResizeMode, RelativeSource={RelativeSource TemplatedParent}}">
                        <DockPanel>
                            <ContentPresenter ContentTemplate="{Binding PreDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igEditors:XamComboEditor}}}" DockPanel.Dock="Top" />
                            <ContentPresenter ContentTemplate="{Binding PostDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igEditors:XamComboEditor}}}" DockPanel.Dock="Bottom" />
                            <ScrollViewer x:Name="ScrollViewer" Style="{StaticResource ScrollViewerStyle}">
                                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </ScrollViewer>
                        </DockPanel>
                    </igWindows:PopupResizerDecorator>
                </Border>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="PART_DropDownButton" Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=ButtonHoverBackgroundBrush}}" />
                <Setter TargetName="PART_Popup" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="content" Property="Opacity" Value="0.2"/>
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding SelectedItem, ConverterParameter={x:Type igEditors:ComboBoxDataItem}, Converter={StaticResource typeCheckConverter}, Mode=OneWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding DisplayMemberPath, Converter={StaticResource nullToFalseConverter}, Mode=OneWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="image" Property="Source" Value="{Binding SelectedItem.Image, Mode=OneWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                <Setter TargetName="imagePanel" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=(igEditors:XamComboEditor.ComboEditor).IsInEditMode, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                <Setter TargetName="imageDecorator" Property="ResetSize" Value="True" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ContextMenu, Converter={StaticResource nullToFalseConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Value="True">
                <Setter TargetName="PART_EditableTextBox" Property="ContextMenu" Value="{Binding ContextMenu, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  *********************************  ComboEditorNonEditableComboBox Template  *********************************  -->
    <ControlTemplate x:Key="ComboEditor_NonEditableComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="root" Background="Transparent" SnapsToDevicePixels="True">
            <Grid Grid.IsSharedSizeScope="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="21" SharedSizeGroup="ComboBoxButton" />
                </Grid.ColumnDefinitions>
                <ToggleButton x:Name="PART_DropDownButton"
                              Grid.ColumnSpan="3"
                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              IsEnabled="{Binding Path=IsReadOnly, Converter={StaticResource complementConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                              Style="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownButtonStyle, RelativeSource={RelativeSource TemplatedParent}}" />
                <Border x:Name="SelectedItemBorder"
                        Grid.ColumnSpan="3"
                        BorderThickness="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderThicknessKey}}"
                        CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorCornerRadiusKey}}"
                        IsHitTestVisible="False">
                    <ContentPresenter Margin="4 0 23 1"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      Content="{TemplateBinding SelectionBoxItem}"
                                      ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </Border>
            </Grid>
            <Popup x:Name="PART_Popup"
                   MinWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MinDropDownWidthResolved, RelativeSource={RelativeSource TemplatedParent}}"
                   MaxWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}}"
                   MaxHeight="{TemplateBinding MaxDropDownHeight}"
                   AllowsTransparency="True"
                   Focusable="False"
                   HorizontalOffset="-1"
                   IsOpen="{TemplateBinding IsDropDownOpen}"
                   Placement="Bottom"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   VerticalOffset="1">
                <Border Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=PopupBackgroundBrush}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=PopupBorderBrush}}" BorderThickness="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderThicknessKey}}">
                    <igWindows:PopupResizerDecorator ResizeMode="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownResizeMode, RelativeSource={RelativeSource TemplatedParent}}">
                        <DockPanel>
                            <ContentPresenter ContentTemplate="{Binding PreDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igEditors:XamComboEditor}}}" DockPanel.Dock="Top" />
                            <ContentPresenter ContentTemplate="{Binding PostDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igEditors:XamComboEditor}}}" DockPanel.Dock="Bottom" />
                            <ScrollViewer x:Name="ScrollViewer" Style="{StaticResource ScrollViewerStyle}">
                                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </ScrollViewer>
                        </DockPanel>
                    </igWindows:PopupResizerDecorator>
                </Border>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="PART_Popup" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="SelectedItemBorder" Property="Opacity" Value="0.2"/>
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="IsTextSearchEnabled" Value="False" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  *********************************  ComboEditorComboBox Style  *********************************  -->
    <Style x:Key="{x:Static igEditors:XamComboEditor.ComboEditorComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Template" Value="{StaticResource ComboEditor_EditableComboBoxTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style />
            </Setter.Value>
        </Setter>
        <Setter Property="IsSynchronizedWithCurrentItem" Value="False" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <igEditors:VirtualizingStackPanelEx />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template" Value="{StaticResource ComboEditor_NonEditableComboBoxTemplate}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <!--  ********************************* XamComboEditor Style  *********************************  -->
    <Style TargetType="{x:Type igEditors:XamComboEditor}">
        <Style.Resources>
            <Style BasedOn="{StaticResource ScrollViewerStyle}" TargetType="{x:Type ScrollViewer}" />
            <Style BasedOn="{StaticResource ScrollBarStyle}" TargetType="{x:Type ScrollBar}" />
        </Style.Resources>
        <!--  JJD 09/12/14 TFS179326 Set the foreground in a trigger when IsEmbedded is false  -->
        <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />-->
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsBackgroundBrush}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderThicknessKey}}" />
        <Setter Property="ComboBoxStyle" Value="{DynamicResource {x:Static igEditors:XamComboEditor.ComboEditorComboBoxStyleKey}}" />
        <Setter Property="DropDownButtonStyle" Value="{StaticResource ComboEditor_DropDownButtonStyle}" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource FontSize}" />
        <Setter Property="EditTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamComboEditor}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorCornerRadiusKey}}">
                        <!--
                            Don't explicitly set the ComboBox's style here. Instead bind it to the ComboBoxStyle property so that, dy default, it will
                            pick up the style keyed by the ComboEditorComboBoxStyleKey dynamically unless set explicitly by the user
                        -->
                        <!-- BF 11/13/18  TFS247354 - I removed this line from the ComboBox definition and moved it to the ComboEditorComboBox StyleKey section. -->
                        <!--ItemContainerStyle="{StaticResource ComboBoxItemStyle}"-->
                        <ComboBox x:Name="PART_FocusSite"
                                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                  igEditors:XamComboEditor.ComboEditor="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                  Background="Transparent"
                                  BorderBrush="Transparent"
                                  BorderThickness="0,0,0,0"
                                  ContextMenu="{TemplateBinding ContextMenu}"
                                  DisplayMemberPath="{Binding ItemsProvider.DisplayMemberPath, RelativeSource={RelativeSource TemplatedParent}}"
                                  Foreground="{TemplateBinding Foreground}"
                                  InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                                  InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                  IsDropDownOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                                  IsEditable="{TemplateBinding IsEditable}"
                                  IsReadOnly="{TemplateBinding ReadOnly}"
                                  MaxDropDownHeight="{TemplateBinding MaxDropDownHeight}"
                                  Padding="{TemplateBinding Padding}"
                                  SelectedValuePath="{Binding ItemsProvider.ValuePath, RelativeSource={RelativeSource TemplatedParent}}"
                                  Style="{TemplateBinding ComboBoxStyle}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="0" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultMinHeight}" />
        <Setter Property="Padding" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorPaddingKey}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamComboEditor}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorCornerRadiusKey}}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Border Grid.Column="0" Margin="{TemplateBinding Padding}">
                                <ContentPresenter x:Name="PART_Content"
                                                  Margin="3 0 0 1"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Content="{Binding DisplayValue, ConverterParameter={x:Static sys:String.Empty}, Converter={StaticResource nullToParameterConverter}, Mode=OneWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                            </Border>
                            <ToggleButton x:Name="PART_DropDownButton"
                                          Grid.Column="1"
                                          Width="21"
                                          ClickMode="Press"
                                          Focusable="False"
                                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                                          IsEnabled="{Binding IsReadOnly, Converter={StaticResource complementConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{TemplateBinding DropDownButtonStyle}"
                                          Visibility="{TemplateBinding DropDownButtonVisibility}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="DisplayValueSource" Value="Value">
                            <Setter TargetName="PART_Content" Property="ContentTemplate" Value="{DynamicResource {x:Static igEditors:XamComboEditor.DisplayValueTemplateKey}}" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter Property="DropDownButtonDisplayMode" Value="Always" />
                            <Setter Property="Padding" Value="2,2,2,2" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsHoverBackgroundBrush}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsHottrackBorderFillKey}}" />
                            <Setter TargetName="PART_DropDownButton" Property="Tag" Value="MouseOverControlTrue" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="MainBorder" Property="Opacity" Value="0.2" />
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsReadOnlyBackgroundBrush}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
            </MultiTrigger>
            <Trigger Property="IsEmbedded" Value="False">
                <!--  JJD 09/12/14 TFS179326 Set the foreground in a trigger when IsEmbedded is false  -->
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
                <Setter Property="Padding" Value="2,2,2,2" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsEmbedded" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsHottrackBorderFillKey}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocusWithin" Value="True" />
                    <Condition Property="IsEmbedded" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsFocusBorderBrush}}" />
            </MultiTrigger>
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="FontSize" Value="12" />
            </Trigger>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=ButtonPressedBackgroundBrush}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsFocusBorderBrush}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=ComboEditorDisabledForeground}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  *********************************  MaskedEditorWithDropDownRender Template  *********************************  -->
    <ControlTemplate x:Key="MaskedEditorWithDropDownRenderTemplate" TargetType="{x:Type igEditors:XamDateTimeEditor}">
        <Border x:Name="MainBorder"
                Background="{TemplateBinding Background}"
                CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorCornerRadiusKey}}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <DockPanel>
                <ToggleButton x:Name="PART_DropDownButton" Width="21" ClickMode="Press" DockPanel.Dock="Right" Focusable="False" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={x:Static RelativeSource.TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding IsReadOnly, Converter={StaticResource complementConverter}, RelativeSource={RelativeSource TemplatedParent}}" Style="{TemplateBinding DropDownButtonStyle}" Visibility="{TemplateBinding DropDownButtonVisibility}" />
                <Grid x:Name="PART_SpinButtons" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Rectangle x:Name="SpinSeparator" Width="1" Grid.ColumnSpan="2" HorizontalAlignment="Right" VerticalAlignment="Stretch" Fill="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}" />
                    <RepeatButton Grid.Column="1" VerticalAlignment="Center" Style="{TemplateBinding SpinButtonStyle}">
                        <Path Data="{StaticResource PlusIcon}" Width="8" Height="8" Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType=ContentPresenter}}" Stretch="Fill" />
                    </RepeatButton>
                    <RepeatButton Grid.Column="0" Margin="0 0 1 0" VerticalAlignment="Center" Style="{TemplateBinding SpinButtonStyle}">
                        <Path Data="{StaticResource MinusIcon}" Width="8" Height="2" Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType=ContentPresenter}}" Stretch="Fill" />
                    </RepeatButton>
        </Grid>
        <igWindows:SimpleTextBlock x:Name="TextBlock" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Style="{DynamicResource SimpleTextBoxStyle}" Text="{TemplateBinding DisplayText}" />
      </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="Padding" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorPaddingKey}}" />
                <Setter Property="igWindows:SimpleTextBlock.OptimizeWidthMeasurement" Value="False" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="MainBorder" Property="Opacity" Value="0.3" />
                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledForeground}}"/>
                <Setter TargetName="PART_DropDownButton" Property="Opacity" Value="0.6" />
            </Trigger>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter TargetName="PART_DropDownButton" Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=ButtonPressedBackgroundBrush}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  *********************************  MaskedEditorWithDropDownEdit Template  *********************************  -->
    <ControlTemplate x:Key="MaskedEditorWithDropDownEditTemplate" TargetType="{x:Type igEditors:XamDateTimeEditor}">
        <Border x:Name="MainBorder"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorCornerRadiusKey}}">
            <DockPanel>
        <ToggleButton x:Name="PART_DropDownButton"
                      Width="21"
                      ClickMode="Press"
                      DockPanel.Dock="Right"
                      Focusable="False"
                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                      IsEnabled="{Binding IsReadOnly, Converter={StaticResource complementConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                      Style="{TemplateBinding DropDownButtonStyle}"
                      Visibility="{TemplateBinding DropDownButtonVisibility}" />
                <Popup x:Name="PART_Popup"
                         igWindows:PopupHelper.DropDownButton="{Binding ElementName=PART_DropDownButton}"
                         AllowsTransparency="True"
                         IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                         PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                         StaysOpen="False">
                    <Border Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=PopupBackgroundBrush}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=PopupBorderBrush}}" BorderThickness="1">
                        <igEditors:XamMonthCalendar x:Name="PART_Calendar"
                                                    EraDisplayMode="{TemplateBinding EraDisplayMode}"
                                                    ActiveDate="{Binding Path=DateValue, Mode=OneWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                                    MaxDate="{TemplateBinding ComputedMaxDate}"
                                                    MinCalendarMode="{TemplateBinding ComputedMinCalendarMode}"
                                                    MinDate="{TemplateBinding ComputedMinDate}"
                                                    ScrollDirection="{TemplateBinding ScrollDirection}"
                                                    SelectedDate="{Binding DateValue, Mode=TwoWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                                    SelectionType="Single" />
                    </Border>
                </Popup>
                <Grid x:Name="PART_SpinButtons" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Rectangle x:Name="SpinSeparator" Width="1" Grid.ColumnSpan="2" HorizontalAlignment="Right" VerticalAlignment="Stretch" Fill="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}"/>
                    <RepeatButton Grid.Column="1"
                                  VerticalAlignment="Center"
                                  Style="{TemplateBinding SpinButtonStyle}"
                                  Command="{x:Static igEditors:MaskedEditorCommands.SpinUp}">
                        <Path Data="{StaticResource PlusIcon}"
                              Width="8"
                              Height="8"
                              Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType=ContentPresenter}}"
                              Stretch="Fill"/>
                    </RepeatButton>
                    <RepeatButton Grid.Column="0"
                                  Margin="0 0 1 0"
                                  VerticalAlignment="Center"
                                  Style="{TemplateBinding SpinButtonStyle}"
                                  Command="{x:Static igEditors:MaskedEditorCommands.SpinDown}">
                        <Path Data="{StaticResource MinusIcon}"
                              Width="8"
                              Height="2"
                              Fill="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType=ContentPresenter}}"
                              Stretch="Fill"/>
                    </RepeatButton>
                </Grid>
                <igWindows:CardPanel x:Name="PART_FocusSite">
                    <igEditors:SectionsList x:Name="SectionsList"
                                            Margin="4,2"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            FlowDirection="LeftToRight"
                                            Foreground="{TemplateBinding Foreground}"
                                            InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}"
                                            InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                                            ItemsSource="{Binding Sections, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                            Style="{StaticResource SectionsListStyle}" />
                    <TextBox x:Name="PART_InputTextBox"
                             Margin="4,2"
                             HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                             VerticalContentAlignment="Center"
                             Background="Transparent"
                             BorderBrush="Transparent"
                             BorderThickness="0"
                             Foreground="{TemplateBinding Foreground}"
                             InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"
                             Style="{StaticResource InputTextBoxStyle}"
                             TextAlignment="{Binding HorizontalContentAlignment, Converter={StaticResource horizToTextAlignmentConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                             Visibility="Collapsed" />
                </igWindows:CardPanel>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEmbedded" Value="False" />
            <Trigger Property="IsInEditMode" Value="True">
                <Setter Property="IsTabStop" Value="False" />
            </Trigger>
            <Trigger Property="IsTextBoxEntryEnabled" Value="True">
                <Setter TargetName="PART_InputTextBox" Property="Visibility" Value="Visible" />
                <Setter TargetName="SectionsList" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="MainBorder" Property="Opacity" Value="0.3" />
                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledForeground}}"/>
            </Trigger>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter TargetName="PART_DropDownButton" Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=ButtonPressedBackgroundBrush}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  *********************************  XamDateTimeEditorBase Style  *********************************  -->
    <Style x:Key="XamDateTimeEditorBaseStyle" BasedOn="{StaticResource XamMaskedEditorBaseStyle}" TargetType="{x:Type igEditors:XamDateTimeEditor}">
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsBackgroundBrush}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderThicknessKey}}" />
        <Setter Property="DropDownButtonStyle" Value="{StaticResource ComboEditor_DropDownButtonStyle}" />
        <Setter Property="EditTemplate" Value="{StaticResource MaskedEditorWithDropDownEditTemplate}" />
        <Setter Property="Padding" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorPaddingKey}}" />
        <Setter Property="Template" Value="{StaticResource MaskedEditorWithDropDownRenderTemplate}" />
        <Style.Triggers>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsFocusBorderBrush}}" />

            </Trigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource XamDateTimeEditorBaseStyle}" TargetType="{x:Type igEditors:XamDateTimeEditor}" />

    <!--  ********************************* XamMonthCalendar.ScrollPreviousRepeatButton Style *********************************  -->
    <Style x:Key="{x:Static igEditors:XamMonthCalendar.ScrollPreviousRepeatButtonStyleKey}" TargetType="{x:Type RepeatButton}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Grid Margin="11 4" igPrim:XamlHelper.SnapsToDevicePixels="{TemplateBinding igPrim:XamlHelper.SnapsToDevicePixels}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="Arrow" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=GlyphHoverBackgroundBrush}}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="Arrow" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=PrevNextMonthButtonsCalendarPressedBackgroundBrush}}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="Arrow" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=GlyphDisabledBackgroundBrush}}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle Width="10" Height="10" Fill="{StaticResource TransparentBrush}" />
                        <Path x:Name="Arrow"
                              Width="6"
                              Height="10"
                              Data="{StaticResource VArrowLeft}"
                              Fill="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarNavGlyphFillKey}}"
                              Stretch="Fill" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--SS 08/02/16 TFS222433 - Add vertical scrolling-->
                        <DataTrigger Binding="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).ScrollDirection, RelativeSource={RelativeSource Self}}" Value="Vertical">
                            <Setter TargetName="Arrow" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" CenterX=".5" CenterY=".5"/>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************* XamMonthCalendar.ScrollNextRepeatButton Style *********************************  -->
    <Style x:Key="{x:Static igEditors:XamMonthCalendar.ScrollNextRepeatButtonStyleKey}" BasedOn="{StaticResource {x:Static igEditors:XamMonthCalendar.ScrollPreviousRepeatButtonStyleKey}}" TargetType="{x:Type RepeatButton}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Grid Margin="11 4" igPrim:XamlHelper.SnapsToDevicePixels="{TemplateBinding igPrim:XamlHelper.SnapsToDevicePixels}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="Arrow" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=GlyphHoverBackgroundBrush}}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="Arrow" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=PrevNextMonthButtonsCalendarPressedBackgroundBrush}}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetName="Arrow" Storyboard.TargetProperty="Fill">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamComboEditor}, ResourceId=GlyphDisabledBackgroundBrush}}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle Width="10" Height="10" Fill="{StaticResource TransparentBrush}" />
                        <Path x:Name="Arrow"
                              Width="6"
                              Height="10"
                              Data="{StaticResource VArrowRight}"
                              Fill="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarNavGlyphFillKey}}"
                              Stretch="Fill" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--SS 08/02/16 TFS222433 - Add vertical scrolling-->
                        <DataTrigger Binding="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).ScrollDirection, RelativeSource={RelativeSource Self}}" Value="Vertical">
                            <Setter TargetName="Arrow" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" CenterX=".5" CenterY=".5"/>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************* CalendarItem CornerRadius *********************************  -->
    <CornerRadius x:Key="{x:Static igEditors:CalendarItem.CornerRadiusKey}">0</CornerRadius>

    <!--  ********************************* TodayButton Style *********************************  -->
    <Style x:Key="{x:Static igEditors:XamMonthCalendar.TodayButtonStyleKey}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=ButtonBackgroundBrush}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=ButtonBorderBrush}}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderThicknessKey}}" />
        <Setter Property="Command" Value="{x:Static igEditors:MonthCalendarCommands.Today}" />
        <Setter Property="Content" Value="{Binding Path=TodayButtonCaption, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorForegroundKey}}" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultMinHeight}" />
        <Setter Property="Padding" Value="20 6" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="MainBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorCornerRadiusKey}}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="TodayButtonContent"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="Center"
                                          ContentSource="Content"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="MainBorder" Property="Opacity" Value="0.3" />
                            <!--<Setter TargetName="TodayButtonContent" Property="Opacity" Value="0.2" />-->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=ButtonHoverBackgroundBrush}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=ButtonHoverBorderBrush}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=ButtonPressedBackgroundBrush}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=ButtonPressedBackgroundBrush}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************* CalendarItemInner Style *********************************  -->
    <ControlTemplate x:Key="CalendarItemInner" TargetType="{x:Type igEditors:CalendarItem}">
        <Border x:Name="mainborder" HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                VerticalAlignment="{TemplateBinding VerticalAlignment}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                CornerRadius="{DynamicResource {x:Static igEditors:CalendarItem.CornerRadiusKey}}"
                SnapsToDevicePixels="True">
            <ContentPresenter Margin="{TemplateBinding Padding}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              TextBlock.Foreground="{TemplateBinding Foreground}" />
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="False" />
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsToday" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverFillKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverForegroundKey}}" />
            </MultiTrigger>
            
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="IsSelectionActive" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=SelectedInactiveItemBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedForegroundKey}}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="mainborder" Property="Opacity" Value="0.3" />
            </Trigger>
            <Trigger Property="IsToday" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayFillKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayOuterBorderFillKey}}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedFillKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedForegroundKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  ********************************* CalendarItemNoInner *********************************  -->
    <ControlTemplate x:Key="CalendarItemNoInner" TargetType="{x:Type igEditors:CalendarItem}">
        <Grid x:Name="maingrid">
            <Ellipse x:Name="OuterBorder"
                     Width="{StaticResource DefaultSize}"
                     Height="{StaticResource DefaultSize}"
                     HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                     VerticalAlignment="{TemplateBinding VerticalAlignment}"
                     Fill="{TemplateBinding Background}"
                     SnapsToDevicePixels="True"
                     Stroke="{TemplateBinding BorderBrush}"
                     StrokeThickness="{TemplateBinding BorderThickness}" />
            <Border>
                <ContentPresenter Margin="{TemplateBinding Padding}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  TextBlock.Foreground="{TemplateBinding Foreground}" />
            </Border>
        </Grid>

        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="False" />
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsToday" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverFillKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverForegroundKey}}" />
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedFillKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedForegroundKey}}" />
            </Trigger>
            <!--  Hover if Selected  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverFillKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverForegroundKey}}" />
            </MultiTrigger>
            <!--  Hover if Selected END  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="IsSelectionActive" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedFillKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedForegroundKey}}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="maingrid" Property="Opacity" Value="0.3" />
            </Trigger>
            <Trigger Property="IsToday" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayFillKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayOuterBorderFillKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    
    <!--  ********************************* CalendarItemBase Style *********************************  -->
    <Style x:Key="CalendarItemBase" TargetType="{x:Type igEditors:CalendarItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderThicknessKey}}" />
        <Setter Property="Content" Value="{Binding Path=Title, RelativeSource={x:Static RelativeSource.Self}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverForegroundKey}}" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultMinHeight}" />
        <Setter Property="MinWidth" Value="{StaticResource DefaultMinHeight}" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template" Value="{StaticResource CalendarItemInner}" />
        <Style.Triggers>
            <Trigger Property="IsToday" Value="True">
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsToday" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayFillKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayOuterBorderFillKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayForegroundKey}}" />
            </MultiTrigger>
            <!--  Today´s Hover  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsToday" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverFillKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverForegroundKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverOuterBorderFillKey}}" />
            </MultiTrigger>
            <!--  Today´s Hover END  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsToday" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                    <Condition Property="IsLeadingOrTrailingItem" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayFillKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayOuterBorderFillKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayForegroundKey}}" />
            </MultiTrigger>
            <!--<MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsToday" Value="False" />
          <Condition Property="IsLeadingOrTrailingItem" Value="True" />
        </MultiTrigger.Conditions>
             <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarOtherDayForegroundKey}}" />
      </MultiTrigger>-->
            <!--<MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsToday" Value="True" />
          <Condition Property="IsLeadingOrTrailingItem" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedFillKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedOuterBorderFillKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayForegroundKey}}" />
      </MultiTrigger>-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsLeadingOrTrailingItem" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayForegroundKey}}" />
            </MultiTrigger>
            <!--<MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="False" />
          <Condition Property="IsLeadingOrTrailingItem" Value="True" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarOtherDayForegroundKey}}" />
      </MultiTrigger>-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsToday" Value="False" />
                    <Condition Property="IsEnabled" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                    <Condition Property="IsLeadingOrTrailingItem" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarOtherDayForegroundKey}}" />
            </MultiTrigger>
            <Trigger Property="IsActive" Value="True">
                <Setter Property="KeyboardNavigation.IsTabStop" Value="True" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource CalendarItemBase}" TargetType="{x:Type igEditors:CalendarItem}">
        <Setter Property="Margin" Value="0,0,.5,.5" />
    </Style>

    <!--  ********************************* CalendarDay Style *********************************  -->
    <Style x:Key="CalendarDayBase" BasedOn="{StaticResource CalendarItemBase}" TargetType="{x:Type igEditors:CalendarDay}">
        <Setter Property="Margin" Value="1" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultMinHeight}" />
        <Setter Property="MinWidth" Value="{StaticResource DefaultMinHeight}" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template" Value="{StaticResource CalendarItemNoInner}" />
        <Style.Triggers>
            <Trigger Property="IsWorkday" Value="True">
                <Setter Property="FontWeight" Value="Bold" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource CalendarDayBase}" TargetType="{x:Type igEditors:CalendarDay}" />

    <!--  ********************************* CalendarDayOfWeek Style *********************************  -->
    <Style x:Key="CalendarDayOfWeekBase" TargetType="{x:Type igEditors:CalendarDayOfWeek}">
        <Setter Property="Border.CornerRadius" Value="0" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayOfWeekForegroundKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:CalendarDayOfWeek}">
                    <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding Border.CornerRadius}"
                            Padding="{TemplateBinding Padding}">
                        <TextBlock HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{TemplateBinding Foreground}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                   Text="{TemplateBinding Caption}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource CalendarDayOfWeekBase}" TargetType="{x:Type igEditors:CalendarDayOfWeek}" />

    <!--  ********************************* CalendarWeekNumber Style *********************************  -->
    <Style x:Key="CalendarWeekNumberBase" TargetType="{x:Type igEditors:CalendarWeekNumber}">
        <Setter Property="Border.CornerRadius" Value="0" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.TextEditorBorderThicknessKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayOfWeekForegroundKey}}" />
        <Setter Property="MinHeight" Value="{StaticResource DefaultMinHeight}" />
        <Setter Property="MinWidth" Value="{StaticResource DefaultMinHeight}" />
        <Setter Property="Padding" Value="1,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:CalendarWeekNumber}">
                    <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding Border.CornerRadius}"
                            Padding="{TemplateBinding Padding}">
                        <TextBlock HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Foreground="{TemplateBinding Foreground}"
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                   Text="{Binding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource CalendarWeekNumberBase}" TargetType="{x:Type igEditors:CalendarWeekNumber}" />

    <!--  ********************************* CalendarItemGroupTitle Style *********************************  -->
    <Style x:Key="CalendarItemGroupTitleBase" TargetType="{x:Type igEditors:CalendarItemGroupTitle}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemGroupTitleBackgroundKey}}" />
        <Setter Property="FontWeight" Value="{StaticResource FontSemiBold}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemGroupTitleForegroundKey}}" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource FontSize}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding Border.CornerRadius}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="True">
                        <DockPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" LastChildFill="True">
                            <RepeatButton x:Name="previousMonth"
                                          Command="{x:Static igEditors:MonthCalendarCommands.ScrollPreviousGroup}"
                                          DockPanel.Dock="Left"
                                          Focusable="False"
                                          Style="{DynamicResource {x:Static igEditors:XamMonthCalendar.ScrollPreviousRepeatButtonStyleKey}}"
                                          Visibility="{Binding ScrollPreviousButtonVisibility, RelativeSource={RelativeSource AncestorType={x:Type igEditors:CalendarItemGroup}}}" />
                            <RepeatButton x:Name="nextMonth"
                                          Command="{x:Static igEditors:MonthCalendarCommands.ScrollNextGroup}"
                                          DockPanel.Dock="Right"
                                          Focusable="False"
                                          Style="{DynamicResource {x:Static igEditors:XamMonthCalendar.ScrollNextRepeatButtonStyleKey}}"
                                          Visibility="{Binding ScrollNextButtonVisibility, RelativeSource={RelativeSource AncestorType={x:Type igEditors:CalendarItemGroup}}}" />
                            <Button x:Name="headerContent"
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Command="{x:Static igEditors:MonthCalendarCommands.ZoomOutCalendarMode}"
                                    CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type igEditors:CalendarItemGroup}}}"
                                    Content="{TemplateBinding ContentControl.Content}"
                                    ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                    Focusable="False"
                                    FontFamily="{TemplateBinding FontFamily}"
                                    FontSize="{TemplateBinding FontSize}"
                                    FontWeight="{TemplateBinding FontWeight}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    Style="{StaticResource BorderlessButtonStyle}" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="headerContent" Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarNavGlyphHoverFillKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style BasedOn="{StaticResource CalendarItemGroupTitleBase}" TargetType="{x:Type igEditors:CalendarItemGroupTitle}" />

    <!--  ********************************* CalendarItemGroup Style *********************************  -->
    <Style TargetType="{x:Type igEditors:CalendarItemGroup}">
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="ScrollNextButtonVisibility" Value="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).ScrollButtonVisibility, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="ScrollPreviousButtonVisibility" Value="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).ScrollButtonVisibility, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:CalendarItemGroup}">
                    <Border Background="{TemplateBinding Panel.Background}"
                            BorderBrush="{TemplateBinding Border.BorderBrush}"
                            BorderThickness="{TemplateBinding Border.BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="True">
                        <DockPanel LastChildFill="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <!--  Title  -->
                            <igEditors:CalendarItemGroupTitle x:Name="groupTitle" DockPanel.Dock="Top"
                                                           Content="{Binding Path=Title, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                            <igEditors:CalendarItemAreaPanel />
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************* CalendarItemArea Style *********************************  -->
    <Style x:Key="CalendarItemAreaBase" TargetType="{x:Type igEditors:CalendarItemArea}">
        <Setter Property="DayOfWeekHeaderVisibility" Value="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).DayOfWeekHeaderVisibility, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="Margin" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:CalendarItemArea}">
                    <AdornerDecorator>
                        <Border Background="{TemplateBinding Panel.Background}"
                                BorderBrush="{TemplateBinding Border.BorderBrush}"
                                BorderThickness="{TemplateBinding Border.BorderThickness}"
                                Padding="{TemplateBinding Control.Padding}"
                                SnapsToDevicePixels="True">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <!--  week numbers  -->
                                    <ColumnDefinition Width="*" />
                                    <!--  Calendar  -->
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <!--  Days of Week  -->
                                    <RowDefinition />
                                    <!--  Calendar  -->
                                </Grid.RowDefinitions>
                                <!--  Day Of Week Header  -->
                                <ItemsControl x:Name="daysOfWeek"
                                              Grid.Column="1"
                                              Margin="0 5"
                                              Background="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayOfWeekFillKey}}"
                                              Focusable="False"
                                              ItemsSource="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).DaysOfWeek, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                              Visibility="{TemplateBinding Property=DayOfWeekHeaderVisibility}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <igWindows:UniformGridEx Columns="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).DaysOfWeek.Count, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Rows="1" />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <igEditors:CalendarDayOfWeek DataContext="{Binding}" />
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                                <!--  Week Numbers  -->
                                <igWindows:CardPanel x:Name="weekNumbers"
                                                     Grid.Row="1"
                                                     Grid.Column="0"
                                                     Margin="1,0"
                                                     Visibility="{TemplateBinding WeekNumberVisibility}">
                                    <Border Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=CalendarWeekNumberBaseBackgroundBrush}}" BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=CalendarWeekNumberBaseBorderBrush}}" BorderThickness="0,0,1,0" />
                                    <igEditors:CalendarWeekNumber DataContext="52" IsHitTestVisible="False" Visibility="Hidden" />
                                    <ItemsControl x:Name="weekNumberItems" Focusable="False" ItemsSource="{Binding Path=WeekNumbers, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <igWindows:UniformGridEx Columns="1" FirstRow="{Binding Path=(igEditors:CalendarItemArea.ItemArea).FirstItemRowOffset, RelativeSource={x:Static RelativeSource.Self}}" Rows="6" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <igEditors:CalendarWeekNumber DataContext="{Binding}" />
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </igWindows:CardPanel>
                                <ItemsControl x:Name="itemsList"
                                              Grid.Row="1"
                                              Grid.Column="1"
                                              BorderBrush="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarSeparatorStrokeKey}}"
                                              BorderThickness="0"
                                              Focusable="False"
                                              ItemsSource="{Binding Path=Items, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                              KeyboardNavigation.DirectionalNavigation="None">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <igWindows:UniformGridEx Columns="{Binding Path=(igEditors:CalendarItemArea.ItemArea).ItemColumns, RelativeSource={x:Static RelativeSource.Self}}" FirstColumn="{Binding Path=(igEditors:CalendarItemArea.ItemArea).FirstItemColumnOffset, RelativeSource={x:Static RelativeSource.Self}}" FirstRow="{Binding Path=(igEditors:CalendarItemArea.ItemArea).FirstItemRowOffset, RelativeSource={x:Static RelativeSource.Self}}" Rows="{Binding Path=(igEditors:CalendarItemArea.ItemArea).ItemRows, RelativeSource={x:Static RelativeSource.Self}}" />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </Grid>
                        </Border>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="WeekNumberVisibility" Value="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).WeekNumberVisibility, RelativeSource={x:Static RelativeSource.Self}}" />
    </Style>
    <Style BasedOn="{StaticResource CalendarItemAreaBase}" TargetType="{x:Type igEditors:CalendarItemArea}" />

    
    <!--  ********************************* XamMonthCalendar Style *********************************  -->
    <Style TargetType="{x:Type igEditors:XamMonthCalendar}">
        <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=CalendarBackgroundBrush}}" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource FontSize}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamMonthCalendar}">
                    <Border Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=CalendarBackgroundBrush}}"
                            BorderBrush="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=CalendarBorderBrush}}"
                            BorderThickness="0"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="True">
                        <DockPanel SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <!--  Today button  -->
                            <Border Background="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamMonthCalendar}, ResourceId=CalendarTodayButtonBackgroundBrush}}" DockPanel.Dock="Bottom" Visibility="{TemplateBinding TodayButtonVisibility}">
                                <Button Margin="0 10"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        DockPanel.Dock="Bottom"
                                        Style="{DynamicResource {x:Static igEditors:XamMonthCalendar.TodayButtonStyleKey}}"
                                        Visibility="{TemplateBinding TodayButtonVisibility}" />
                            </Border>
                            <!--  Months  -->
                            <igEditors:CalendarItemGroupPanel HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ********************************* CaretElement *********************************  -->
    <Style TargetType="{x:Type igEditors:CaretElement}">
        <Setter Property="Background" Value="{StaticResource CaretBrushForeground}" />
    </Style>
</ResourceDictionary>
