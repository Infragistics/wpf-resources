<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:igWindows="http://infragistics.com/Windows"
                    xmlns:igEditors="http://infragistics.com/Editors" 
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:igPrim="http://schemas.infragistics.com/xaml/primitives"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="EditorsGeneric.xaml" />
        <ResourceDictionary Source="EditorsOffice2013_Brushes.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- ******************************************************** WPF SPECIFIC INLINE-CONTROLS RESOURCES ***********************************************************
********************************************************************************************************************************************************************    -->

    <!-- *********************************  ScrollBarButton Style  ********************************* -->
    <Style x:Key="ScrollBarButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="MinWidth" Value="15" />
        <Setter Property="MinHeight" Value="15" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid x:Name="grid1">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="Arrow">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource ScrollbarPageButtonArrowHoverBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Background" Storyboard.TargetName="Bg">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource ScrollbarPageButtonHoverBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="BorderBrush" Storyboard.TargetName="Bg">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource ScrollbarPageButtonHoverBorderBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="Arrow">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource ScrollbarPageButtonArrowPressedBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Background" Storyboard.TargetName="Bg">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource ScrollbarPageButtonPressedBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="BorderBrush" Storyboard.TargetName="Bg">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource ScrollbarPageButtonPressedBorderBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="Arrow">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource DisabledBorderBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Background" Storyboard.TargetName="Bg">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource DisabledBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="BorderBrush" Storyboard.TargetName="Bg">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource DisabledBorderBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Bg" Background="{StaticResource ScrollbarPageButtonBackgroundBrush}" BorderBrush="{StaticResource ScrollbarPageButtonBorderBrush}" BorderThickness="1" />
                        <Path x:Name="Arrow" Data="M0,4 L7,4 L4,0 z" Height="4" Stretch="Uniform" Width="7" Fill="{StaticResource ScrollbarPageButtonArrowBackgroundBrush}" Margin="{TemplateBinding Padding}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  ScrollBarPageButton Style  ********************************* -->
    <Style x:Key="ScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Pressed" />
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Rectangle>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  Horizontal ScrollBarThumb Style  ********************************* -->
    <Style x:Key="HScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="MinWidth" Value="5" />
        <Setter Property="MinHeight" Value="15" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Margin="0">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="Thumb">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource HScrollbarThumbHoverBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Stroke" Storyboard.TargetName="Thumb">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource HScrollbarThumbHoverBorderBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="Thumb">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource HScrollbarThumbPressedBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Stroke" Storyboard.TargetName="Thumb">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource HScrollbarThumbPressedBorderBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="Thumb">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource DisabledBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Stroke" Storyboard.TargetName="Thumb">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource DisabledBorderBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="Thumb" Fill="{StaticResource HScrollbarThumbBackgroundBrush}" Stroke="{StaticResource HScrollbarThumbBorderBrush}" Height="15" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  Vertical ScrollbarThumb Style  ********************************* -->
    <Style x:Key="VScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="MinWidth" Value="15" />
        <Setter Property="MinHeight" Value="5" />
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid x:Name="grid" Height="Auto" Width="Auto">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="Thumb">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource VScrollbarThumbHoverBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Stroke" Storyboard.TargetName="Thumb">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource VScrollbarThumbHoverBorderBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="Thumb">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource VScrollbarThumbPressedBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Stroke" Storyboard.TargetName="Thumb">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource VScrollbarThumbPressedBorderBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="Thumb">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource DisabledBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Stroke" Storyboard.TargetName="Thumb">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource DisabledBorderBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle x:Name="Thumb" Fill="{StaticResource VScrollbarThumbBackgroundBrush}" Stroke="{StaticResource VScrollbarThumbBorderBrush}" Width="15" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  ScrollBar Style  ********************************* -->
    <Style x:Key="ScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="false" />
        <Setter Property="Width" Value="15" />
        <Setter Property="MinWidth" Value="15" />
        <Setter Property="Margin" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="15" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="15" />
                        </Grid.RowDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle Grid.RowSpan="3" Fill="{StaticResource ScrollbarBackgroundBrush}" />
                        <RepeatButton x:Name="repeatButton" Command="{x:Static ScrollBar.LineUpCommand}" IsEnabled="True" Style="{StaticResource ScrollBarButtonStyle}" HorizontalAlignment="Center" />
                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="True" Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource ScrollBarPageButtonStyle}" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource ScrollBarPageButtonStyle}" />
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb x:Name="thumb" Style="{StaticResource VScrollBarThumbStyle}" HorizontalAlignment="Center" Width="30" />
                            </Track.Thumb>
                        </Track>
                        <RepeatButton x:Name="repeatButton1" Command="{x:Static ScrollBar.LineDownCommand}" IsEnabled="True" Grid.Row="2" Style="{StaticResource ScrollBarButtonStyle}" RenderTransformOrigin="0.5,0.5" HorizontalAlignment="Center">
                            <RepeatButton.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform />
                                    <SkewTransform />
                                    <RotateTransform Angle="180" />
                                    <TranslateTransform />
                                </TransformGroup>
                            </RepeatButton.RenderTransform>
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="MinWidth" Value="0" />
                <Setter Property="Height" Value="15" />
                <Setter Property="MinHeight" Value="15" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="15" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="15" />
                                </Grid.ColumnDefinitions>
                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CommonStates">
                                        <VisualStateGroup.Transitions>
                                            <VisualTransition GeneratedDuration="0:0:0.3" />
                                        </VisualStateGroup.Transitions>
                                        <VisualState x:Name="Normal" />
                                        <VisualState x:Name="MouseOver">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="repeatButton">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="repeatButton1">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="1" />
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Disabled" />
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                                <Rectangle Grid.ColumnSpan="5" Fill="{StaticResource ScrollbarBackgroundBrush}" />
                                <RepeatButton x:Name="repeatButton" Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="True" Style="{StaticResource ScrollBarButtonStyle}" Opacity="1" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center">
                                    <RepeatButton.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform />
                                            <SkewTransform />
                                            <RotateTransform Angle="-90" />
                                            <TranslateTransform />
                                        </TransformGroup>
                                    </RepeatButton.RenderTransform>
                                </RepeatButton>
                                <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="True">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource ScrollBarPageButtonStyle}" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource ScrollBarPageButtonStyle}" />
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource HScrollBarThumbStyle}" VerticalAlignment="Center" Height="30" />
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton x:Name="repeatButton1" Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}" IsEnabled="True" Style="{StaticResource ScrollBarButtonStyle}" Opacity="1" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center">
                                    <RepeatButton.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform />
                                            <SkewTransform />
                                            <RotateTransform Angle="90" />
                                            <TranslateTransform />
                                        </TransformGroup>
                                    </RepeatButton.RenderTransform>
                                </RepeatButton>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- *********************************  ScrollViewer Style ********************************* -->
    <Style x:Key="ScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" CanHorizontallyScroll="False" CanVerticallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="0" Margin="{TemplateBinding Padding}" Grid.Row="0" />
                        <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Style="{StaticResource ScrollBarStyle}" />
                        <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Style="{StaticResource ScrollBarStyle}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  BorderlessButton Style  ********************************* -->
    <Style x:Key="BorderlessButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Padding" Value="3,0,3,2" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border>
                        <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ContentPresenter" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ContentPresenter" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ContentPresenter" Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- *********************************  RepeatButtonTemplate  ********************************* -->
    <ControlTemplate x:Key="RepeatButtonTemplate" TargetType="RepeatButton">
        <Grid igPrim:XamlHelper.SnapsToDevicePixels="True">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ButtonHover" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="Arrow">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource GlyphHoverBackgroundBrush}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="Arrow">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource GlyphPressedBackgroundBrush}" />
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ButtonPressed" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ButtonDisabled" Storyboard.TargetProperty="Opacity">
                                <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="Arrow">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource GlyphDisabledBackgroundBrush}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="FocusStates">
                    <VisualState x:Name="Focused" />
                    <VisualState x:Name="Unfocused" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="ButtonHover" Fill="{StaticResource ButtonHoverBackgroundBrush}" Stroke="{StaticResource ButtonHoverBorderBrush}" StrokeThickness="1" Opacity="0" />
            <Rectangle x:Name="ButtonPressed" Fill="{StaticResource ButtonPressedBackgroundBrush}" Stroke="{StaticResource ButtonHoverBorderBrush}" StrokeThickness="1" Opacity="0" />
            <Rectangle x:Name="ButtonDisabled" Fill="{StaticResource ButtonBackgroundBrush}" Stroke="{StaticResource DisabledBorderBrush}" StrokeThickness="1" Opacity="0" />
            <Path x:Name="Arrow" Data="M 0 2 L 0 3 L 1 3 L 2 3 L 4 3 L 5 3 L 6 3 L 6 2 L 5 2 L 5 1 L 4 1 L 4 0 L 2 0 L 2 1 L 1 1 L 1 2 L 0 2 Z" Height="3" Stretch="Uniform" Width="6" Fill="{StaticResource GlyphBackgroundBrush}" Margin="{TemplateBinding Padding}" />
        </Grid>
    </ControlTemplate>

    <!-- *********************************  SpinButton Style  ********************************* -->
    <Style x:Key="spinButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="3,1" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="MinWidth" Value="18" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="Template" Value="{StaticResource RepeatButtonTemplate}" />
    </Style>

    <!-- ********************************* SimpleTextBox Style ********************************* -->
    <Style x:Key="SimpleTextBoxStyle" TargetType="{x:Type igWindows:SimpleTextBlock}">
        <Setter Property="Margin" Value="0" /><!--To override styles in CoreImplicit Styles file-->
    </Style>

    <!-- *********************************  InputTextBox Style  ********************************* -->
    <Style x:Key="InputTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource TransparentBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0" /><!--To override styles in CoreImplicit Styles file-->
        <Setter Property="SelectionBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=TextEditorSelectionBrush}}"/>
    </Style>

    <!-- *********************************  ComboEditorDropDownButton Style  ********************************* -->
    <Style x:Key="ComboEditor_DropDownButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="MinWidth" Value="14" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="True" >
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto"  />
                        </Grid.ColumnDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ButtonHover" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="Arrow">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource GlyphHoverBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="Arrow">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource GlyphPressedBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ButtonPressed" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ButtonDisabled" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Duration="0" Storyboard.TargetProperty="Fill" Storyboard.TargetName="Arrow">
                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource GlyphDisabledBackgroundBrush}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused" />
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="ComboEditorDropdown" HorizontalAlignment="Right" Background="Transparent" Grid.Column="1" Width="15" Margin="0,-1,-1,-1">
                            <Rectangle x:Name="ButtonHover" Fill="{StaticResource ButtonHoverBackgroundBrush}" Stroke="{StaticResource ButtonHoverBorderBrush}" StrokeThickness="1" Opacity="0" />
                            <Rectangle x:Name="ButtonPressed" Fill="{StaticResource ButtonPressedBackgroundBrush}" Stroke="{StaticResource ButtonHoverBorderBrush}" StrokeThickness="1" Opacity="0" />
                            <Rectangle x:Name="ButtonDisabled" Fill="{StaticResource DisabledBackgroundBrush}" Stroke="{StaticResource TransparentBrush}" StrokeThickness="1" Opacity="0" />
                            <Path x:Name="Arrow" Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z" Height="4" Stretch="Uniform" Width="6" Fill="{StaticResource GlyphBackgroundBrush}" Margin="{TemplateBinding Padding}" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="Tag" Value="MouseOverControlTrue">
                            <Setter TargetName="ButtonHover"  Property="Opacity"  Value="1"/>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ButtonPressed"  Property="Opacity"  Value="1"/>
                            <Setter TargetName="Arrow"  Property="Fill"  Value="{StaticResource GlyphHoverBackgroundBrush}" />
                            <Setter Property="ClipToBounds"  Value="True"/>

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************* SectionsList Style ********************************* -->
    <Style x:Key="SectionsListStyle" TargetType="{x:Type igEditors:SectionsList}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:SectionsList}">
                    <ScrollViewer Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden">
                        <StackPanel IsItemsHost="True" Orientation="Horizontal" />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************* XamMaskedEditor Style ********************************* -->
    <Style TargetType="{x:Type igEditors:XamMaskedEditor}" x:Key="XamMaskedEditorBaseStyle">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Background" Value="{StaticResource EditorsBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="4,2" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="SpinButtonStyle" Value="{StaticResource spinButtonStyle}" />
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamMaskedEditor}">
                    <Border x:Name="MainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <DockPanel>
                            <Grid x:Name="PART_SpinButtons" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <RepeatButton Style="{StaticResource spinButtonStyle}" Focusable="false" IsHitTestVisible="false" />
                                <RepeatButton Style="{StaticResource spinButtonStyle}" Focusable="false" IsHitTestVisible="false" Grid.Row="1" RenderTransformOrigin="0.5,0.5" UseLayoutRounding="true">
                                    <RepeatButton.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform />
                                            <SkewTransform />
                                            <RotateTransform Angle="180" />
                                            <TranslateTransform />
                                        </TransformGroup>
                                    </RepeatButton.RenderTransform>
                                </RepeatButton>
                            </Grid>
                            <igWindows:SimpleTextBlock x:Name="TextBlock" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" Style="{StaticResource SimpleTextBoxStyle}" Margin="{TemplateBinding Padding}" Text="{TemplateBinding DisplayText}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter Property="igWindows:SimpleTextBlock.OptimizeWidthMeasurement" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="EditTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamMaskedEditor}">
                    <Border x:Name="MainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <DockPanel>
                            <Grid x:Name="PART_SpinButtons" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>
                                <RepeatButton x:Name="spinUp" Style="{StaticResource spinButtonStyle}" Focusable="false" />
                                <RepeatButton x:Name="spinDown" Style="{StaticResource spinButtonStyle}" Focusable="false" Grid.Row="1" RenderTransformOrigin="0.5,0.5" UseLayoutRounding="true">
                                    <RepeatButton.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform />
                                            <SkewTransform />
                                            <RotateTransform Angle="180" />
                                            <TranslateTransform />
                                        </TransformGroup>
                                    </RepeatButton.RenderTransform>
                                </RepeatButton>
                            </Grid>
                            <igWindows:CardPanel x:Name="PART_FocusSite">
                                <igEditors:SectionsList x:Name="SectionsList" Margin="{TemplateBinding Padding}" ItemsSource="{Binding Sections, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" FlowDirection="LeftToRight" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}" InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}" InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" Style="{StaticResource SectionsListStyle}" />
                                <TextBox x:Name="PART_InputTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" TextAlignment="{Binding HorizontalContentAlignment, Converter={StaticResource horizToTextAlignmentConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"                                      InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}" Style="{StaticResource InputTextBoxStyle}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" Foreground="{TemplateBinding Foreground}" Visibility="Collapsed" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </igWindows:CardPanel>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SpinButtonVisibilityResolved" Value="Visible">
                            <Setter TargetName="spinUp" Property="Command" Value="{x:Static igEditors:MaskedEditorCommands.SpinUp}" />
                            <Setter TargetName="spinDown" Property="Command" Value="{x:Static igEditors:MaskedEditorCommands.SpinDown}" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="False" />
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                        <Trigger Property="IsTextBoxEntryEnabled" Value="True">
                            <Setter TargetName="SectionsList" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_InputTextBox" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEmbedded" Value="True">
                <Setter Property="BorderThickness" Value="0" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{StaticResource EditorsFocusBorderBrush}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Padding" Value="3,2,3,2"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
            </MultiTrigger>
            <Trigger Property="IsInEditMode" Value="True">
                <Setter Property="FocusVisualStyle">
                    <Setter.Value>
                        <Style />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBackgroundBrush}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBorderBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledForeground}}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsEmbedded" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsHottrackBorderFillKey}}" />
                <Setter Property="Background" Value="{StaticResource EditorsHoverBackgroundBrush}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocusWithin" Value="True" />
                    <Condition Property="IsEmbedded" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{StaticResource EditorsFocusBorderBrush}" />
            </MultiTrigger>
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="FontSize" Value="12" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type igEditors:XamMaskedEditor}" BasedOn="{StaticResource XamMaskedEditorBaseStyle}" />

    <!--  ********************************* Text SelectionBrush Style for Editors *********************************  -->
    <Style TargetType="{x:Type igEditors:DisplayCharacterPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:DisplayCharacterPresenter}">
                    <Grid>
                        <TextBlock x:Name="TextBlock" Margin="0,0,0,0" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DisplayCharacter.DrawString, Mode=OneWay}"
                                   Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DisplayCharacter.Visibility, Mode=OneWay}" />
                        <Rectangle x:Name="SelectionRect" Margin="0,0,0,0" Fill="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=TextEditorSelectionBrush}}" Opacity="0.5"
                                   Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DrawAsSelected, Mode=OneWay, Converter={StaticResource BoolToHidden} }"
                                   IsHitTestVisible="False" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************* XamNumericEditor Style ********************************* -->
    <Style TargetType="{x:Type igEditors:XamNumericEditor}" BasedOn="{StaticResource {x:Type igEditors:XamMaskedEditor}}" />

    <!-- ********************************* XamCurrencyEditor Style ********************************* -->
    <Style TargetType="{x:Type igEditors:XamCurrencyEditor}" BasedOn="{StaticResource {x:Type igEditors:XamMaskedEditor}}" />

    <!-- *********************************  ComboBoxItem Style  ********************************* -->
    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="Padding" Value="4,2" />
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItemHoverBackgroundBrush}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItemHoverBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItemPressedBackgroundBrush}" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItemPressedBackgroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{StaticResource ComboBoxItemPressedBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- JJD 03/10/16 - Create a based on style that is keyed by a ComponentResourceKey so we can reference it in the DataPresenter assembly -->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=ComboBoxItemStyle}"
           TargetType="{x:Type ComboBoxItem}"
           BasedOn="{StaticResource ComboBoxItemStyle}" />

    <!-- *********************************  ComboEditorEditableComboBox Template  ********************************* -->
    <ControlTemplate x:Key="ComboEditor_EditableComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid Background="Transparent" SnapsToDevicePixels="True">
            <Grid Grid.IsSharedSizeScope="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                </Grid.ColumnDefinitions>
                <Grid Grid.Column="0" Margin="{TemplateBinding Padding}">
                    <Grid.RowDefinitions>
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <TextBox x:Name="PART_EditableTextBox" Grid.Column="1" Padding="1,0,0,0" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Background="Transparent" BorderBrush="Transparent" BorderThickness="0,0,0,0" Style="{StaticResource InputTextBoxStyle}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" MaxLength="{Binding Path=(igEditors:XamComboEditor.ComboEditor).ValueConstraint.MaxLength, RelativeSource={RelativeSource TemplatedParent}}" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"                                      InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}" InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}" />
                    <igWindows:GrowOnlyDecorator x:Name="imageDecorator">
                        <igWindows:CardPanel x:Name="imagePanel" Visibility="Collapsed" VerticalAlignment="Center" Margin="1,0,-1,0">
                            <TextBlock x:Name="textBlock" Visibility="Hidden" VerticalAlignment="Center" />
                            <Image x:Name="image" Stretch="Uniform" StretchDirection="Both" VerticalAlignment="Center" Height="{Binding ActualHeight, ElementName=textBlock, Mode=OneWay}" />
                        </igWindows:CardPanel>
                    </igWindows:GrowOnlyDecorator>
                </Grid>
                <ToggleButton x:Name="PART_DropDownButton" Grid.Column="1" Focusable="False" Width="15" Background="{x:Null}" Style="{StaticResource ComboEditor_DropDownButtonStyle}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{Binding IsReadOnly, Converter={StaticResource complementConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
            <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" VerticalOffset="1" HorizontalOffset="-1" IsOpen="{TemplateBinding IsDropDownOpen}" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MinDropDownWidthResolved, RelativeSource={RelativeSource TemplatedParent}}" MaxWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}}">
                <Border BorderBrush="{StaticResource PopupBorderBrush}" BorderThickness="1" Background="{StaticResource PopupBackgroundBrush}">
                    <igWindows:PopupResizerDecorator ResizeMode="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownResizeMode, RelativeSource={RelativeSource TemplatedParent}}">
                        <DockPanel>
                            <ContentPresenter DockPanel.Dock="Top" ContentTemplate="{Binding PreDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igEditors:XamComboEditor}}}" />
                            <ContentPresenter DockPanel.Dock="Bottom" ContentTemplate="{Binding PostDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igEditors:XamComboEditor}}}" />
                            <ScrollViewer x:Name="ScrollViewer" Style="{StaticResource ScrollViewerStyle}">
                                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </ScrollViewer>
                        </DockPanel>
                    </igWindows:PopupResizerDecorator>
                </Border>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="PART_Popup" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBorderBrush}}" />
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="True" Binding="{Binding SelectedItem, ConverterParameter={x:Type igEditors:ComboBoxDataItem}, Converter={StaticResource typeCheckConverter}, Mode=OneWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                    <Condition Value="False" Binding="{Binding DisplayMemberPath, Converter={StaticResource nullToFalseConverter}, Mode=OneWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="image" Property="Source" Value="{Binding SelectedItem.Image, Mode=OneWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                <Setter TargetName="imagePanel" Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
            <DataTrigger Value="False" Binding="{Binding Path=(igEditors:XamComboEditor.ComboEditor).IsInEditMode, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
                <Setter TargetName="imageDecorator" Property="ResetSize" Value="True" />
            </DataTrigger>
            <DataTrigger Value="True" Binding="{Binding ContextMenu, Converter={StaticResource nullToFalseConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
                <Setter TargetName="PART_EditableTextBox" Property="ContextMenu" Value="{Binding ContextMenu, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- *********************************  ComboEditorNonEditableComboBox Template  ********************************* -->
    <ControlTemplate x:Key="ComboEditor_NonEditableComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid SnapsToDevicePixels="True" Background="Transparent">
            <Grid Grid.IsSharedSizeScope="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="1" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="ComboBoxButton" />
                </Grid.ColumnDefinitions>
                <ToggleButton x:Name="PART_DropDownButton" Grid.ColumnSpan="3" Style="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownButtonStyle, RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{Binding Path=IsReadOnly, Converter={StaticResource complementConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Border x:Name="SelectedItemBorder" BorderThickness="1" Grid.ColumnSpan="3" IsHitTestVisible="False">
                    <ContentPresenter Margin="3,0,16,0" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </Border>
            </Grid>
            <Popup x:Name="PART_Popup" AllowsTransparency="True" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" VerticalOffset="1" HorizontalOffset="-1" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MinDropDownWidthResolved, RelativeSource={RelativeSource TemplatedParent}}" MaxWidth="{Binding Path=(igEditors:XamComboEditor.ComboEditor).MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}}">
                <Border BorderBrush="{StaticResource PopupBorderBrush}" BorderThickness="1" Background="{StaticResource PopupBackgroundBrush}">
                    <igWindows:PopupResizerDecorator ResizeMode="{Binding Path=(igEditors:XamComboEditor.ComboEditor).DropDownResizeMode, RelativeSource={RelativeSource TemplatedParent}}">
                        <DockPanel>
                            <ContentPresenter DockPanel.Dock="Top" ContentTemplate="{Binding PreDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igEditors:XamComboEditor}}}" />
                            <ContentPresenter DockPanel.Dock="Bottom" ContentTemplate="{Binding PostDropDownAreaTemplate, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type igEditors:XamComboEditor}}}" />
                            <ScrollViewer x:Name="ScrollViewer" Style="{StaticResource ScrollViewerStyle}">
                                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </ScrollViewer>
                        </DockPanel>
                    </igWindows:PopupResizerDecorator>
                </Border>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <!--<Trigger Property="IsSelectionBoxHighlighted" Value="True">
                <Setter TargetName="SelectedItemBorder" Value="{StaticResource EditorsFocusBorderBrush}" Property="BorderBrush" />
            </Trigger>-->
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="PART_Popup" Property="Height" Value="95" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBorderBrush}}" />
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBackgroundBrush}}" />
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
            <Trigger Property="IsGrouping" Value="True">
                <Setter TargetName="ScrollViewer" Property="CanContentScroll" Value="False" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="IsTextSearchEnabled" Value="False" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- *********************************  ComboEditorComboBox Style  ********************************* -->
    <Style x:Key="{x:Static igEditors:XamComboEditor.ComboEditorComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="Template" Value="{StaticResource ComboEditor_EditableComboBoxTemplate}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{StaticResource ComboEditor_NonEditableComboBoxTemplate}" />
        <Setter Property="IsSynchronizedWithCurrentItem" Value="False" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <igEditors:VirtualizingStackPanelEx />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style />
            </Setter.Value>
        </Setter>
        <!--BF 11/13/18 TFS247354 - Moved here from the XamComboEditor style section-->
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}" />
    </Style>

    <!-- ********************************* XamComboEditor Style  ********************************* -->
    <Style TargetType="{x:Type igEditors:XamComboEditor}">
        <Style.Resources>
            <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource ScrollViewerStyle}" />
            <Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource ScrollBarStyle}" />
        </Style.Resources>
        <Setter Property="ComboBoxStyle" Value="{DynamicResource {x:Static igEditors:XamComboEditor.ComboEditorComboBoxStyleKey}}" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <!-- JJD 09/12/14 TFS179326 Set the foreground in a trigger when IsEmbedded is false  -->
        <!--<Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />-->
        <Setter Property="Background" Value="{StaticResource EditorsBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="4,2" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="DropDownButtonStyle" Value="{StaticResource ComboEditor_DropDownButtonStyle}" />
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamComboEditor}">
                    <Border x:Name="MainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" >
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Border Grid.Column="0">
                                <ContentPresenter Margin="{TemplateBinding Padding}" x:Name="PART_Content" Content="{Binding DisplayValue, ConverterParameter={x:Static sys:String.Empty}, Converter={StaticResource nullToParameterConverter}, Mode=OneWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Border>
                            <ToggleButton x:Name="PART_DropDownButton" Grid.Column="1" Focusable="False" Width="14" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" ClickMode="Press" Style="{TemplateBinding DropDownButtonStyle}" Visibility="{TemplateBinding DropDownButtonVisibility}" IsEnabled="{Binding IsReadOnly, Converter={StaticResource complementConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="DisplayValueSource" Value="Value">
                            <Setter TargetName="PART_Content" Property="ContentTemplate" Value="{DynamicResource {x:Static igEditors:XamComboEditor.DisplayValueTemplateKey}}" />
                        </Trigger>
                        <Trigger Property="IsEmbedded" Value="False">
                            <Setter Property="DropDownButtonDisplayMode" Value="Always" />
                            <!--<Setter Property="Padding" Value="2,2,2,2" />-->
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource EditorsHoverBackgroundBrush}" />
                            <Setter TargetName="PART_DropDownButton" Property="Tag" Value="MouseOverControlTrue" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsHottrackBorderFillKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Content" Property="Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="EditTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamComboEditor}">
                    <Border x:Name="MainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <!-- Don't explicitly set the ComboBox's style here. Instead bind it to the ComboBoxStyle property so that, dy default, it will
						pick up the style keyed by the ComboEditorComboBoxStyleKey dynamically unless set explicitly by the user -->

                        <!-- BF 11/13/18  TFS247354 - I removed this line from the ComboBox definition and moved it to the ComboEditorComboBox StyleKey section. -->
                        <!--ItemContainerStyle="{StaticResource ComboBoxItemStyle}"-->
                        <ComboBox x:Name="PART_FocusSite" Padding="{TemplateBinding Padding}" Style="{TemplateBinding ComboBoxStyle}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" IsReadOnly="{TemplateBinding ReadOnly}" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" ContextMenu="{TemplateBinding ContextMenu}" IsDropDownOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" IsEditable="{TemplateBinding IsEditable}" SelectedValuePath="{Binding ItemsProvider.ValuePath, RelativeSource={RelativeSource TemplatedParent}}" DisplayMemberPath="{Binding ItemsProvider.DisplayMemberPath, RelativeSource={RelativeSource TemplatedParent}}" MaxDropDownHeight="{TemplateBinding MaxDropDownHeight}" igEditors:XamComboEditor.ComboEditor="{Binding RelativeSource={RelativeSource TemplatedParent}}" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"                                      InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}" InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}" Foreground="{TemplateBinding Foreground}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsInEditMode" Value="True">
                            <Setter Property="IsTabStop" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEmbedded" Value="True" />
                    <Condition Property="IsInEditMode" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{x:Null}" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
            </MultiTrigger>
            <Trigger Property="IsEmbedded" Value="False">
                <!-- JJD 09/12/14 TFS179326 Set the foreground in a trigger when IsEmbedded is false  -->
                <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
                <!--<Setter Property="Padding" Value="2,2,2,2" />-->
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsEmbedded" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsHottrackBorderFillKey}}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocusWithin" Value="True" />
                    <Condition Property="IsEmbedded" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource EditorsFocusBackgroundBrush}" />
                <Setter Property="BorderBrush" Value="{StaticResource EditorsFocusBorderBrush}" />
                <Setter Property="Padding" Value="1,2,2,1"/>
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocusWithin" Value="True" />
                    <Condition Property="IsEmbedded" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{StaticResource EditorsFocusBorderBrush}" />
                <Setter Property="Padding" Value="1,2,2,1"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBorderBrush}}" />
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBackgroundBrush}}" />
                <!--<Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />-->
            </Trigger>
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="FontSize" Value="12" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- *********************************  MaskedEditorWithDropDownRender Template  ********************************* -->
    <ControlTemplate x:Key="MaskedEditorWithDropDownRenderTemplate" TargetType="{x:Type igEditors:XamDateTimeEditor}">
        <Border x:Name="MainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <DockPanel>
                <ToggleButton x:Name="PART_DropDownButton" Width="15" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={x:Static RelativeSource.TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" ClickMode="Press" Style="{TemplateBinding DropDownButtonStyle}" Visibility="{TemplateBinding DropDownButtonVisibility}" DockPanel.Dock="Right" IsEnabled="{Binding IsReadOnly, Converter={StaticResource complementConverter}, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" />
                <Grid x:Name="PART_SpinButtons" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <RepeatButton Style="{StaticResource spinButtonStyle}" Focusable="false" />
                    <RepeatButton Style="{StaticResource spinButtonStyle}" Focusable="false" Grid.Row="1" RenderTransformOrigin="0.5,0.5" UseLayoutRounding="True">
                        <RepeatButton.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform />
                                <SkewTransform />
                                <RotateTransform Angle="180" />
                                <TranslateTransform />
                            </TransformGroup>
                        </RepeatButton.RenderTransform>
                    </RepeatButton>
                </Grid>
                <igWindows:SimpleTextBlock x:Name="TextBlock" Margin="{TemplateBinding Padding}" Text="{TemplateBinding DisplayText}" Style="{StaticResource SimpleTextBoxStyle}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEmbedded" Value="False">
                <Setter Property="igWindows:SimpleTextBlock.OptimizeWidthMeasurement" Value="False" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBackgroundBrush}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBorderBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledForeground}}"/>
                <Setter TargetName="PART_SpinButtons" Property="Opacity" Value="0.4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- *********************************  MaskedEditorWithDropDownEdit Template  ********************************* -->
    <ControlTemplate x:Key="MaskedEditorWithDropDownEditTemplate" TargetType="{x:Type igEditors:XamDateTimeEditor}">
        <Border x:Name="MainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <DockPanel>
                <ToggleButton x:Name="PART_DropDownButton" Style="{TemplateBinding DropDownButtonStyle}" Width="15" ClickMode="Press" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" Visibility="{TemplateBinding DropDownButtonVisibility}" DockPanel.Dock="Right" IsEnabled="{Binding IsReadOnly, Converter={StaticResource complementConverter}, RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" />
                <Popup x:Name="PART_Popup" AllowsTransparency="True" StaysOpen="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}" igWindows:PopupHelper.DropDownButton="{Binding ElementName=PART_DropDownButton}">
                    <Border BorderBrush="{StaticResource PopupBorderBrush}" BorderThickness="1" Background="{StaticResource PopupBackgroundBrush}">
                        <igEditors:XamMonthCalendar x:Name="PART_Calendar"
                                                    EraDisplayMode="{TemplateBinding EraDisplayMode}"
                                                    MinDate="{TemplateBinding ComputedMinDate}" MaxDate="{TemplateBinding ComputedMaxDate}" MinCalendarMode="{TemplateBinding ComputedMinCalendarMode}" ScrollDirection="{TemplateBinding ScrollDirection}" SelectedDate="{Binding DateValue, Mode=TwoWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}" SelectionType="Single" ActiveDate="{Binding Path=DateValue, Mode=OneWay, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                    </Border>
                </Popup>
                <Grid x:Name="PART_SpinButtons" DockPanel.Dock="Right" Visibility="{TemplateBinding SpinButtonVisibilityResolved}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <RepeatButton Style="{StaticResource spinButtonStyle}" Focusable="false" Command="{x:Static igEditors:MaskedEditorCommands.SpinUp}" />
                    <RepeatButton Style="{StaticResource spinButtonStyle}" Focusable="false" Command="{x:Static igEditors:MaskedEditorCommands.SpinDown}" Grid.Row="1" RenderTransformOrigin="0.5,0.5" UseLayoutRounding="True">
                        <RepeatButton.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform />
                                <SkewTransform />
                                <RotateTransform Angle="180" />
                                <TranslateTransform />
                            </TransformGroup>
                        </RepeatButton.RenderTransform>
                    </RepeatButton>
                </Grid>
                <igWindows:CardPanel x:Name="PART_FocusSite">
                    <igEditors:SectionsList x:Name="SectionsList" ItemsSource="{Binding Sections, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,2" Style="{StaticResource SectionsListStyle}" FlowDirection="LeftToRight" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"                                      InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}" InputMethod.IsInputMethodEnabled="{TemplateBinding InputMethod.IsInputMethodEnabled}" Foreground="{TemplateBinding Foreground}" />
                    <TextBox x:Name="PART_InputTextBox" Visibility="Collapsed" Margin="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="Center" TextAlignment="{Binding HorizontalContentAlignment, Converter={StaticResource horizToTextAlignmentConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" Style="{StaticResource InputTextBoxStyle}" InputMethod.PreferredImeState="{TemplateBinding InputMethod.PreferredImeState}"                                      InputMethod.PreferredImeConversionMode="{TemplateBinding InputMethod.PreferredImeConversionMode}" Foreground="{TemplateBinding Foreground}" />
                </igWindows:CardPanel>
            </DockPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEmbedded" Value="False" />
            <Trigger Property="IsInEditMode" Value="True">
                <Setter Property="IsTabStop" Value="False" />
            </Trigger>
            <Trigger Property="IsTextBoxEntryEnabled" Value="True">
                <Setter TargetName="SectionsList" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_InputTextBox" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBackgroundBrush}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledBorderBrush}}" />
                <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type igEditors:XamTextEditor}, ResourceId=EditorsDisabledForeground}}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- *********************************  XamDateTimeEditorBase Style  ********************************* -->
    <Style x:Key="XamDateTimeEditorBaseStyle" TargetType="{x:Type igEditors:XamDateTimeEditor}" BasedOn="{StaticResource XamMaskedEditorBaseStyle}">
        <Setter Property="DropDownButtonStyle" Value="{StaticResource ComboEditor_DropDownButtonStyle}" />
        <Setter Property="Template" Value="{StaticResource MaskedEditorWithDropDownRenderTemplate}" />
        <Setter Property="EditTemplate" Value="{StaticResource MaskedEditorWithDropDownEditTemplate}" />
        <Setter Property="Background" Value="{StaticResource EditorsBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.EditorsNormalBorderFillKey}}" />
        <!--<Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="4,2" />-->
    </Style>
    <Style TargetType="{x:Type igEditors:XamDateTimeEditor}" BasedOn="{StaticResource XamDateTimeEditorBaseStyle}" />

    <!-- ********************************* XamMonthCalendar.ScrollPreviousRepeatButton Style ********************************* -->
    <Style x:Key="{x:Static igEditors:XamMonthCalendar.ScrollPreviousRepeatButtonStyleKey}" TargetType="{x:Type RepeatButton}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Grid igPrim:XamlHelper.SnapsToDevicePixels="{TemplateBinding igPrim:XamlHelper.SnapsToDevicePixels}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver"/>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.3" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Arrow" d:IsOptimized="True" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle Height="10" Width="10" Fill="{StaticResource TransparentBrush}"/>
                        <Path x:Name="Arrow" Fill="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarNavGlyphFillKey}}" Data="M3,0 L4,0 4,7 3,7 3,6 2,6 2,5 1,5 1,4 0,4 0,3 1,3 1,2 2,2 2,1 3,1 z" Height="7" Width="4" Stretch="Fill" Margin="4" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--SS 08/02/16 TFS222433 - Add vertical scrolling-->
                        <DataTrigger Binding="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).ScrollDirection, RelativeSource={RelativeSource Self}}" Value="Vertical">
                            <Setter TargetName="Arrow" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" CenterX=".5" CenterY=".5"/>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************* XamMonthCalendar.ScrollNextRepeatButton Style ********************************* -->
    <Style x:Key="{x:Static igEditors:XamMonthCalendar.ScrollNextRepeatButtonStyleKey}" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource {x:Static igEditors:XamMonthCalendar.ScrollPreviousRepeatButtonStyleKey}}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Grid igPrim:XamlHelper.SnapsToDevicePixels="{TemplateBinding igPrim:XamlHelper.SnapsToDevicePixels}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver"/>
                                <VisualState x:Name="Pressed"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.3" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="Arrow" d:IsOptimized="True" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Rectangle Height="10" Width="10" Fill="{StaticResource TransparentBrush}"/>
                        <Path x:Name="Arrow" Fill="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarNavGlyphFillKey}}" Data="M1,1 L2,1 2,2 3,2 3,3 4,3 4,4 3,4 3,5 2,5 2,6 1,6 z M0,0 L1,0 1,7 0,7 z" Height="7" Stretch="Fill" Width="4" Margin="4" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--SS 08/02/16 TFS222433 - Add vertical scrolling-->
                        <DataTrigger Binding="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).ScrollDirection, RelativeSource={RelativeSource Self}}" Value="Vertical">
                            <Setter TargetName="Arrow" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" CenterX=".5" CenterY=".5"/>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************* CalendarItem CornerRadius ********************************* -->
    <CornerRadius x:Key="{x:Static igEditors:CalendarItem.CornerRadiusKey}">0</CornerRadius>

    <!-- ********************************* TodayButton Style ********************************* -->
    <Style TargetType="{x:Type Button}" x:Key="{x:Static igEditors:XamMonthCalendar.TodayButtonStyleKey}">
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorderBrush}" />
        <Setter Property="MinHeight" Value="26" />
        <Setter Property="Padding" Value="14 6" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Command" Value="{x:Static igEditors:MonthCalendarCommands.Today}" />
        <Setter Property="Content" Value="{Binding Path=TodayButtonCaption, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="TodayButtonContent" ContentSource="Content" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource ButtonHoverBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{StaticResource ButtonHoverBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource ButtonPressedBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{StaticResource ButtonPressedBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************* CalendarItemInner Style ********************************* -->
    <ControlTemplate x:Key="CalendarItemInner" TargetType="{x:Type igEditors:CalendarItem}">
        <Border x:Name="OuterBorder" SnapsToDevicePixels="True" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="{DynamicResource {x:Static igEditors:CalendarItem.CornerRadiusKey}}" Background="{TemplateBinding Background}">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" TextBlock.Foreground="{TemplateBinding Foreground}" Margin="{TemplateBinding Padding}" />
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="False" />
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsToday" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverFillKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverOuterBorderFillKey}}" />
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedFillKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedOuterBorderFillKey}}" />
            </Trigger>
            <!-- Hover if Selected -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverFillKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverOuterBorderFillKey}}" />
            </MultiTrigger>
            <!-- Hover if Selected END-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="IsSelectionActive" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource SelectedInactiveItemBackgroundBrush}" />
                <Setter Property="BorderBrush" Value="{StaticResource SelectedInactiveItemBackgroundBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemSelectedForegroundKey}}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource CalendarItemForegroundBrush}" />
            </Trigger>
            <Trigger Property="IsToday" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayOuterBorderFillKey}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ********************************* CalendarItemBase Style ********************************* -->
    <Style x:Key="CalendarItemBase" TargetType="{x:Type igEditors:CalendarItem}">
        <Setter Property="Content" Value="{Binding Path=Title, RelativeSource={x:Static RelativeSource.Self}}"/>
        <Setter Property="MinHeight" Value="21" />
        <Setter Property="MinWidth" Value="23" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource CalendarItemForegroundBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="4,0" />
        <Setter Property="Template" Value="{StaticResource CalendarItemInner}" />
        <Style.Triggers>
            <Trigger Property="IsToday" Value="True">
                <Setter Property="BorderThickness" Value="0" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsToday" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayForegroundKey}}" />
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayFillKey}}" />
                <Setter Property="BorderThickness" Value="0" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsToday" Value="True" />
                    <Condition Property="IsSelected" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayForegroundKey}}" />
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayFillKey}}" />
                <Setter Property="BorderThickness" Value="0" />
            </MultiTrigger>
            <!-- Today´s Hover  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsToday" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarOtherDayForegroundKey}}" />
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemHoverFillKey}}" />
                <Setter Property="BorderThickness" Value="0" />
            </MultiTrigger>
            <!-- Today´s Hover END-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsToday" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                    <Condition Property="IsEnabled" Value="True" />
                    <Condition Property="IsLeadingOrTrailingItem" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayForegroundKey}}" />
                <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayTodayFillKey}}" />
                <Setter Property="BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsToday" Value="False" />
                    <Condition Property="IsEnabled" Value="True" />
                    <Condition Property="IsLeadingOrTrailingItem" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarOtherDayForegroundKey}}" />
            </MultiTrigger>
            <Trigger Property="IsActive" Value="True">
                <Setter Property="KeyboardNavigation.IsTabStop" Value="True" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type igEditors:CalendarItem}" BasedOn="{StaticResource CalendarItemBase}" />

    <!-- ********************************* CalendarDay Style ********************************* -->
    <Style x:Key="CalendarDayBase" TargetType="{x:Type igEditors:CalendarDay}" BasedOn="{StaticResource CalendarItemBase}">
        <!--<Setter Property="Content" Value="{Binding StartDate, ConverterParameter=%d, Converter={StaticResource FormattableToStr}, RelativeSource={x:Static RelativeSource.Self}}" />-->
        <Style.Triggers>
            <Trigger Property="IsWorkday" Value="True">
                <Setter Property="FontWeight" Value="Normal" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type igEditors:CalendarDay}" BasedOn="{StaticResource CalendarDayBase}" />

    <!-- ********************************* CalendarDayOfWeek Style ********************************* -->
    <Style x:Key="CalendarDayOfWeekBase" TargetType="{x:Type igEditors:CalendarDayOfWeek}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayOfWeekForegroundKey}}" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Border.CornerRadius" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:CalendarDayOfWeek}">
                    <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding Border.CornerRadius}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <TextBlock Foreground="{TemplateBinding Foreground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                   Text="{TemplateBinding Caption}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type igEditors:CalendarDayOfWeek}" BasedOn="{StaticResource CalendarDayOfWeekBase}" />

    <!-- ********************************* CalendarWeekNumber Style ********************************* -->
    <Style x:Key="CalendarWeekNumberBase" TargetType="{x:Type igEditors:CalendarWeekNumber}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayOfWeekForegroundKey}}" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="MinWidth" Value="22" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Border.CornerRadius" Value="0" />
        <Setter Property="Padding" Value="1,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:CalendarWeekNumber}">
                    <Border HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding Border.CornerRadius}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <TextBlock Foreground="{TemplateBinding Foreground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Text="{Binding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type igEditors:CalendarWeekNumber}" BasedOn="{StaticResource CalendarWeekNumberBase}" />

    <!-- ********************************* CalendarItemGroupTitle Style ********************************* -->
    <Style x:Key="CalendarItemGroupTitleBase" TargetType="{x:Type igEditors:CalendarItemGroupTitle}">
        <Setter Property="Background" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemGroupTitleBackgroundKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarItemGroupTitleForegroundKey}}" />
        <Setter Property="Padding" Value="4,0" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Height="19" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}" CornerRadius="{TemplateBinding Border.CornerRadius}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}">
                        <DockPanel Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" LastChildFill="True">
                            <RepeatButton DockPanel.Dock="Left" x:Name="previousMonth" Focusable="False" Visibility="{Binding ScrollPreviousButtonVisibility, RelativeSource={RelativeSource AncestorType={x:Type igEditors:CalendarItemGroup}}}" Command="{x:Static igEditors:MonthCalendarCommands.ScrollPreviousGroup}" Style="{DynamicResource {x:Static igEditors:XamMonthCalendar.ScrollPreviousRepeatButtonStyleKey}}" />
                            <RepeatButton DockPanel.Dock="Right" x:Name="nextMonth" Focusable="False" Visibility="{Binding ScrollNextButtonVisibility, RelativeSource={RelativeSource AncestorType={x:Type igEditors:CalendarItemGroup}}}" Command="{x:Static igEditors:MonthCalendarCommands.ScrollNextGroup}" Style="{DynamicResource {x:Static igEditors:XamMonthCalendar.ScrollNextRepeatButtonStyleKey}}" />
                            <Button x:Name="headerContent" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Focusable="False" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Style="{StaticResource BorderlessButtonStyle}" Command="{x:Static igEditors:MonthCalendarCommands.ZoomOutCalendarMode}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type igEditors:CalendarItemGroup}}}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" Content="{TemplateBinding ContentControl.Content}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="headerContent">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarNavGlyphHoverFillKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type igEditors:CalendarItemGroupTitle}" BasedOn="{StaticResource CalendarItemGroupTitleBase}" />

    <!-- ********************************* CalendarItemGroup Style ********************************* -->
    <Style TargetType="{x:Type igEditors:CalendarItemGroup}">
        <Setter Property="Background" Value="{StaticResource TransparentBrush}" />
        <Setter Property="ScrollNextButtonVisibility" Value="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).ScrollButtonVisibility, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="ScrollPreviousButtonVisibility" Value="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).ScrollButtonVisibility, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:CalendarItemGroup}">
                    <Border BorderBrush="{TemplateBinding Border.BorderBrush}" BorderThickness="{TemplateBinding Border.BorderThickness}" Background="{TemplateBinding Panel.Background}" SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}">
                        <DockPanel LastChildFill="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <!-- Title -->
                            <igEditors:CalendarItemGroupTitle x:Name="groupTitle" DockPanel.Dock="Top"
                                             Content="{Binding Path=Title, RelativeSource={x:Static RelativeSource.TemplatedParent}}"/>
                            <igEditors:CalendarItemAreaPanel />
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ********************************* CalendarItemArea Style ********************************* -->
    <Style x:Key="CalendarItemAreaBase" TargetType="{x:Type igEditors:CalendarItemArea}">
        <Setter Property="DayOfWeekHeaderVisibility" Value="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).DayOfWeekHeaderVisibility, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="WeekNumberVisibility" Value="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).WeekNumberVisibility, RelativeSource={x:Static RelativeSource.Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:CalendarItemArea}">
                    <AdornerDecorator>
                        <Border BorderBrush="{TemplateBinding Border.BorderBrush}" BorderThickness="{TemplateBinding Border.BorderThickness}" Background="{TemplateBinding Panel.Background}" SnapsToDevicePixels="True" Padding="{TemplateBinding Control.Padding}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <!-- week numbers -->
                                    <ColumnDefinition Width="*" />
                                    <!-- Calendar -->
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <!-- Days of Week -->
                                    <RowDefinition />
                                    <!-- Calendar -->
                                </Grid.RowDefinitions>
                                <!-- Day Of Week Header -->
                                <ItemsControl x:Name="daysOfWeek" Grid.Column="1" Visibility="{TemplateBinding Property=DayOfWeekHeaderVisibility}" Focusable="False" ItemsSource="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).DaysOfWeek, RelativeSource={x:Static RelativeSource.TemplatedParent}}" Background="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarDayOfWeekFillKey}}" Margin="6,4,6,2">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <igWindows:UniformGridEx Rows="1" Columns="{Binding Path=(igEditors:XamMonthCalendar.MonthCalendar).DaysOfWeek.Count, RelativeSource={x:Static RelativeSource.TemplatedParent}}" />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <igEditors:CalendarDayOfWeek DataContext="{Binding}" />
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                                <!-- Week Numbers -->
                                <igWindows:CardPanel Grid.Column="0" Margin="1,0" Grid.Row="1" x:Name="weekNumbers" Visibility="{TemplateBinding WeekNumberVisibility}">
                                    <Border Background="{StaticResource CalendarWeekNumberBaseBackgroundBrush}" BorderBrush="{StaticResource CalendarWeekNumberBaseBorderBrush}" BorderThickness="0,0,1,0" />
                                    <igEditors:CalendarWeekNumber DataContext="52" Visibility="Hidden" IsHitTestVisible="False" />
                                    <ItemsControl x:Name="weekNumberItems" Focusable="False" ItemsSource="{Binding Path=WeekNumbers, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <igWindows:UniformGridEx Rows="6" Columns="1" FirstRow="{Binding Path=(igEditors:CalendarItemArea.ItemArea).FirstItemRowOffset, RelativeSource={x:Static RelativeSource.Self}}" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <igEditors:CalendarWeekNumber DataContext="{Binding}" />
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </igWindows:CardPanel>
                                <ItemsControl x:Name="itemsList" Grid.Column="1" Grid.Row="1" KeyboardNavigation.DirectionalNavigation="None" Focusable="False" BorderBrush="{DynamicResource {x:Static igEditors:EditorsBrushKeys.CalendarSeparatorStrokeKey}}" BorderThickness="0" ItemsSource="{Binding Path=Items, RelativeSource={x:Static RelativeSource.TemplatedParent}}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <igWindows:UniformGridEx FirstColumn="{Binding Path=(igEditors:CalendarItemArea.ItemArea).FirstItemColumnOffset, RelativeSource={x:Static RelativeSource.Self}}" FirstRow="{Binding Path=(igEditors:CalendarItemArea.ItemArea).FirstItemRowOffset, RelativeSource={x:Static RelativeSource.Self}}" Rows="{Binding Path=(igEditors:CalendarItemArea.ItemArea).ItemRows, RelativeSource={x:Static RelativeSource.Self}}" Columns="{Binding Path=(igEditors:CalendarItemArea.ItemArea).ItemColumns, RelativeSource={x:Static RelativeSource.Self}}" />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </Grid>
                        </Border>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type igEditors:CalendarItemArea}" BasedOn="{StaticResource CalendarItemAreaBase}">
        <Setter Property="Margin" Value="0,5,0,0" />
    </Style>

    <!-- ********************************* XamMonthCalendar Style ********************************* -->
    <Style TargetType="{x:Type igEditors:XamMonthCalendar}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type igEditors:XamMonthCalendar}">
                    <Border BorderBrush="{StaticResource CalendarBorderBrush}" BorderThickness="0" Background="{StaticResource CalendarBackgroundBrush}" SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}">
                        <DockPanel SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <!-- Today button -->
                            <Border Height="40" BorderBrush="{StaticResource CalendarSeparatorBorderBrush}" BorderThickness="0,1,0,0" DockPanel.Dock="Bottom" Visibility="{TemplateBinding TodayButtonVisibility}">
                                <Button DockPanel.Dock="Bottom" Style="{DynamicResource {x:Static igEditors:XamMonthCalendar.TodayButtonStyleKey}}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5" Visibility="{TemplateBinding TodayButtonVisibility}" />
                            </Border>
                            <!-- Months -->
                            <igEditors:CalendarItemGroupPanel HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>